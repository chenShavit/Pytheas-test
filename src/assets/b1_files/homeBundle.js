define('app/core/login',["app/core/login"],
    function(LoginMgr) {
 
        function LoginMgr(){
        	this._defferedGoogleLoad = null;
        	this._defferedGoogleLogin = null;
        	this._defferedFacebookLoad = null;     
        	this._publishersPrepared = false;
        	this._userObject = null;
        	this._curUserRequest = null;
        	this._subscribeLevel = null;
        	this._subscribeLevelRequest = null;
            return( this );
        }
        
        LoginMgr.prototype.getSubscribeLevel = function() {
        	var _self = this;
        	var deffered =  new $.Deferred();
        	if (_self._subscribeLevel != null) {
        		deffered.resolve(_self._subscribeLevel);
        	} else if (_self._subscribeLevelRequest == null) {
        		_self._subscribeLevelRequest = deffered;	
	       		$.ajax({
	      			  url: appRoot + "/api/getUnsubscribeLevel",
	      			  type: "GET",
	     			  cache: true
	       		}).done(function(results) {
	    	      	_self._subscribeLevel= results;
	    	      	deffered.resolve(results); 	      		
	    	    });       
        	} else {
	        	return _self._subscribeLevelRequest;
	        }
     		return deffered;
        }
        
        LoginMgr.prototype.getCurrentUser = function() {
        	var _self = this;
        	var deffered =  new $.Deferred();
        	if (_self._userObject != null) {
        		deffered.resolve(_self._userObject);
        	} else if (_self._curUserRequest == null) {
        		_self._curUserRequest = deffered;
        		$.ajax({
      			  url: appRoot + "/ws/login/getcurrentuser",
      			  type: "GET",
      			  cache: true
    	      	}).done(function(results) {
    	      		_self._userObject = jQuery.parseJSON(results);
    	      		deffered.resolve(_self._userObject); 	      		
    	      	});         	
        	} else {
        		return _self._curUserRequest;
        	}
     		return deffered;
        }

        LoginMgr.prototype.logout = function() {
        	var _self = this;
        	var deffered =  new $.Deferred();
        	
     		$.ajax({
    			  url: appRoot + "/ws/login/logout",
    			  type: "POST"
  	      	}).done(function() {
  	      		// raise event
  	      		eraseCookie(_self.getGuidCookieName());
  	      		eraseCookie("loggedinuserid");
 	      		$( "body" ).trigger( "logout_done", [] );
 	      		fireLocalEventDef("User-Mgmt", "logout", null, null, true);
 	      		deffered.resolve(); 	      		
  	      	});         	
     		
     		return deffered;
        }
        
        LoginMgr.prototype.loadAccountIds = function() {
        	var deffered =  new $.Deferred();
        	var _self = this;
        	
     		return $.ajax({
  			  url: appRoot + "/ws/login/getAccountsData",
  			  type: "POST",
  			  dataType: "json",
  			  contentType: "application/x-www-form-urlencoded;charset=UTF-8",
  			  cache: false
	      	}).then(function(accountIds) {
	      		_self._accountIds = accountIds;
	      		deffered.resolve();
	      	},
	      	function (e) {
	      		deffered.reject("failed loading account ids data");
	      	}); 
     		
     		return deffered;
        }
        
        LoginMgr.prototype.addGoogleScript = function() {
			this._defferedGoogleLoad = new $.Deferred();
			var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
			//po.src = 'https://apis.google.com/js/client:plusone.js?onload=googleLoadCallback';
			po.src = 'https://apis.google.com/js/platform.js?onload=googleLoadCallback';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);	       
        };
        
        LoginMgr.prototype.addFacebookScript = function() {
        	this._defferedFacebookLoad = new $.Deferred();
        	
        	if (typeof(FB) == "object") {
            	//console.log("FB SDK already loaded");
        		LoginMgr.getInstance()._defferedFacebookLoad.resolve();
        		return;
        	}
        	
        	var obj = this;
        	
        	window.fbAsyncInit = function() {        			
        		
        		    // init the FB JS SDK
        		    FB.init({
        		      //appId      : obj._accountIds.facebook,  // App ID from the app dashboard
        		    	appId	: '150153265190737',
        		      cookie     : true,  // enable cookies to allow the server to access
        		      xfbml      : true,  // parse social plugins on this page
        		      version    : 'v2.12'
        		    });

        		    // Additional initialization code such as adding Event Listeners goes here
        		    LoginMgr.getInstance()._defferedFacebookLoad.resolve();        		    
        	};

			  // Load the SDK asynchronously
        	  (function(d, s, id) {
        		    var js, fjs = d.getElementsByTagName(s)[0];
        		    if (d.getElementById(id)) return;
        		    js = d.createElement(s); js.id = id;
        		    js.src = "//connect.facebook.net/en_US/sdk.js";
        		    fjs.parentNode.insertBefore(js, fjs);
        	  		}(document, 'script', 'facebook-jssdk'));

         };        
        
        LoginMgr.prototype.prepareLoginPublishers = function() {
        	var _self = this;
        	var defferedPublishersLoad = new $.Deferred();
        	
        	// dont' prepare the publishers twice
        	if (this._publishersPrepared) {
        		defferedPublishersLoad.resolve();
        		return defferedPublishersLoad;
        	}
        	
        	
    		this.addGoogleScript();
    		this.addFacebookScript();
    		
    		// add timeout
			window.setTimeout(function() {
				var fbResolve = (_self._defferedFacebookLoad.state() == "resolved");
				var glResolve = (_self._defferedGoogleLoad.state() == "resolved");
				if (! fbResolve || ! glResolve) {
					console.log("Publishers load failed. Fb=" + fbResolve  + " Google=" + glResolve);
					defferedPublishersLoad.reject("Publishers load failed. Fb=" + fbResolve  + " Google=" + glResolve);
				}				
			}, 10000);	
        	
			$.when(this._defferedFacebookLoad, this._defferedGoogleLoad).done(function () {
				defferedPublishersLoad.resolve();
				_self._publishersPrepared = true;
			});   	
        	
        	return defferedPublishersLoad;
        };

    	
        LoginMgr.prototype.getGoogleAccountId = function() {
        	return this._accountIds.google;
        };
        
        LoginMgr.prototype.getGoogleLoginDeffered = function() {
        	this._defferedGoogleLogin = new $.Deferred();
        	this._userObject = null;
        	this._curUserRequest = null;
        	return this._defferedGoogleLogin;
        };
        
    	LoginMgr.prototype.googleLoginDone = function(googleUser) {
    		// this method will be called twice, once the button is rendered and after it's clicked
    		var obj = this;
    		
    		/*var loginObj = new Object();
    		loginObj.email = googleUser.getEmail();
    		loginObj.familyName = a1.name.familyName;
    		loginObj.givenName = a1.name.givenName;*/
    		//var defferedGoolgleUserData = this.googleGetUserData();
    		//var defferedGoogleEmail = this.googleGetUserEmail();    			
     		
    		//$.when( defferedGoolgleUserData, defferedGoogleEmail).then(function( a1, a2 ) {
    			//a1.email = a2['email'];
    			//a1.familyName = a1.name.familyName;
    			//a1.givenName = a1.name.givenName;
    			
    			// call server
         		$.ajax({
        			  url: appRoot + "/ws/login/singupgoogle",
        			  type: "POST",
        			  data : {
        				  data: googleUser.getAuthResponse().id_token,
        				  tokenType: googleUser.getAuthResponse().token_type,
          				  clientUniqueId: getUserUniqueId()
        			  },
        			  dataType: "json",
        			  contentType: "application/x-www-form-urlencoded;charset=UTF-8"
      	      	}).done(function(loginResult) {
      	      		fireLocalEventDef("User-Mgmt", "sign-in", "google", null, true);
      	      		fireEvent("Email Received", loginResult.isNewEmail ? "new" : "existing", "google");
      	      		// inform login client
      	      		if (obj._defferedGoogleLogin != null) {
      	      			obj._defferedGoogleLogin.resolve();	
      	      		}
      	      		
    	      		//console.log("googleLoginDone, emailAdded=" + loginResult.isNewEmail);    	      		
    	      		
      	      	});    			
    		//});
    		
    	};
    	
    	LoginMgr.prototype.googleGetUserEmail = function() {
    		var deffered = new $.Deferred();
    		
    		gapi.client.load('oauth2', 'v2', function() {
    			var request = gapi.client.oauth2.userinfo.get();
    			
    			 request.execute(function(resp) {
    				 //console.log("email", resp);
    				 deffered.resolve(resp);
    			 });
    		});	  		
    		
    		return deffered;
    	};    	
    	
    	LoginMgr.prototype.googleGetUserData = function() {
    		var deffered = new $.Deferred();
    		
    		gapi.client.load('plus','v1', function(){
	   			 var request = gapi.client.plus.people.get({
	   			   'userId': 'me'
	   			 });
	   			 request.execute(function(resp) {
	   				deffered.resolve(resp);
	   			 });
    		});    		
    		
    		return deffered;
    	};    	
    	
    	LoginMgr.prototype.facebookLogin = function(onlyStatus) {
    		var deffered = new $.Deferred();
    		var _self = this;
    		
    		FB.getLoginStatus(function(response) {
    				_self._userObject = null;
      				_self._curUserRequest = null;
      				console.log("FB.getLoginStatus", response);
    			  if (onlyStatus) {
    				  return;
    			  }
    			  if (response.status === 'connected') {
    				  if (response.authResponse && response.authResponse.accessToken) {
    					  _self.facebookGotUserData(response.authResponse.accessToken,deffered);
    				  } else {
    					  _self.facebookLoginDone(deffered);
    				  }
    				  
    			  } 
    			  else  {
    				    FB.login(function(response) {
    				    	console.log("FB.login", response);
    				    	if (response.authResponse && response.authResponse.accessToken) {
    				    		_self.facebookGotUserData(response.authResponse.accessToken,deffered);
    				    	} else if (response.authResponse) {
    				        	_self.facebookLoginDone(deffered);
    				        } else {
    				        	deffered.reject();
    				        }
    				    }, {scope:'email'});
    			  } 
    		});	
    		
    		return deffered;
    	};
    	
    	LoginMgr.prototype.facebookLoginDone = function(deffered) {
    		var obj = this;
    		
            FB.api('/me', function(response) {
            	console.log("FB.api", response);
            	
            	obj.facebookGotUserData(response, deffered);
            });    		
    	};
    	
    	LoginMgr.prototype.facebookGotUserData = function(response, deffered) { 
    		var _self = this;
    		
       		$.ajax({
  			  url: appRoot + "/ws/login/singupfacebook",
  			  type: "POST",
  			  data : {
  				  data: response,
  				  clientUniqueId: getUserUniqueId()
  			  },
  			  dataType: "json",
  			  contentType: "application/x-www-form-urlencoded;charset=UTF-8"
	      	}).done(function(loginResult) {
	      		fireLocalEventDef("User-Mgmt", "sign-in", "facebook", null, true);
	      		fireEvent("Email Received", loginResult.isNewEmail ? "new" : "existing", "facebook");
	      		deffered.resolve();
	      		//console.log("facebookGotUserData, emailAdded=" + loginResult.isNewEmail);
	      		
	      	});
    	};    
    	
        LoginMgr.prototype.signup = function(email, password, firstName, lastName) {
        	var _self = this;
        	var deffered = new $.Deferred();
        	
        	if (firstName == null) {
                firstName = "";
	        }
	        if (lastName == null) {
	                lastName = "";
	        }

     		$.ajax({
  			  url: appRoot + "/ws/login/signupstandard",
  			  type: "POST",
  			  dataType: "json",
  			  data : {
  				  email: email,
  				  password: password,
  				  firstName: firstName,
  				  lastName: lastName,
  				  clientUniqueId: getUserUniqueId()
  			  },  			  
  			  contentType: "application/x-www-form-urlencoded;charset=UTF-8"
	      	}).done(function(loginResult) {
	      		fireLocalEventDef("User-Mgmt", "sign-in", "sign-up", null, true);
	      		
	      		if (loginResult.errorId == 0) {
		      		console.log("signup, emailAdded=" + loginResult.isNewEmail);
		      		fireEvent("Email Received", loginResult.isNewEmail ? "new" : "existing", "signup");
		      		//clear user object
		      		_self._userObject = null;
	      			_self._curUserRequest = null;
	      		}
	      		deffered.resolve(loginResult);
	      	});     		
      		
      		return deffered;
        };
        
        LoginMgr.prototype.editProfile = function(password, firstName, lastName, age, gender) {
        	var deffered = new $.Deferred();
        	if (firstName == null) {
                firstName = "";
	        }
	        if (lastName == null) {
	                lastName = "";
	        }
	        if (age == null) {
	        	age = "";
	        }
	        if (gender== null) {
	        	gender = null;
	        }
	        
     		$.ajax({
  			  url: appRoot + "/ws/login/updateUser",
  			  type: "POST",
  			  dataType: "json",
  			  data : {
  				  password: password,
  				  firstName: firstName,
  				  lastName: lastName,
  				  age: age,
  				  gender: gender
  			  },  			  
  			  contentType: "application/x-www-form-urlencoded;charset=UTF-8"
	      	}).done(function(loginResult) {
	      		if (loginResult.errorId == 0) {
		      		//console.log("signup, emailAdded=" + loginResult.isNewEmail);
		      		fireEvent("Email Received", loginResult.isNewEmail ? "new" : "existing", "signup");	      			
	      		}
	      		deffered.resolve(loginResult);
	      	});     		
      		
      		return deffered;
        };
        
        LoginMgr.prototype.setDisplayName = function(name) {
        	var deffered = new $.Deferred();
     		$.ajax({
  			  url: appRoot + "/ws/login/updateUserDisplayName",
  			  type: "POST",
  			  dataType: "json",
  			  data : {
  				  name: name
  			  },  			  
  			  contentType: "application/x-www-form-urlencoded;charset=UTF-8"
	      	}).done(function(loginResult) {
	      		deffered.resolve(loginResult);
	      		/*if (loginResult.errorId == 0) {
		      		//console.log("signup, emailAdded=" + loginResult.isNewEmail);
		      		//fireEvent("Email Received", loginResult.isNewEmail ? "new" : "existing", "signup");	      			
	      		}*/
	      	});     		
      		
      		return deffered;
        };
        
        LoginMgr.prototype.login = function(email, password) {
        	var deffered = new $.Deferred();
        	var _self = this;
        	
     		$.ajax({
  			  url: appRoot + "/ws/login/loginstandard",
  			  type: "POST",
  			  dataType: "json",
  			  data : {
  				  email: email,
  				  password: password,
  				  clientUniqueId: getUserUniqueId()
  			  },  			  
  			  contentType: "application/x-www-form-urlencoded;charset=UTF-8"
	      	}).done(function(loginResult) {
	      		fireLocalEventDef("User-Mgmt", "sign-in", "login", null, true);
	      		deffered.resolve(loginResult);
	      	});   
     		
     		return deffered;
        };
        
        LoginMgr.prototype.ensureLogin = function(email) {
        	var deffered = new $.Deferred();
        	var addedEmail = false;
        	
        	if (! this.isLoginAny()) {
           		$.ajax({
        			  url: appRoot + "/ws/login/clientonly",
        			  type: "POST",
        			  data : {
        				  clientUniqueId: getUserUniqueId()
        			  },
        			  contentType: "application/x-www-form-urlencoded;charset=UTF-8"           		
      	      	}).then(function(loginResult) {
      	      		deffered.resolve(loginResult);
      	      	},
      	      	function(e) {
      	      		deffered.reject("failed at ensure login");
      	      	});        		
        	}
        	else {
        		deffered.resolve();
        	}
        	
        	return deffered;
        };
        
        LoginMgr.prototype.modifyLoginData = function(email, allowReceiveEmails,doClear) {
        	var deffered = new $.Deferred();
        	var _self = this;
        	$.ajax({
  			  url: appRoot + "/ws/login/modify",
			  type: "POST",
			  data : {
				  email : email,
				  allowReceiveEmails : allowReceiveEmails
			  },
			  dataType: "json"
	      	}).done(function(isAdded) {
	      		if (typeof(isAdded) != "boolean") {
	      			isAdded = (isAdded == "true");	
	      		}
	      		
	      		//console.log("modifyLoginData, emailAdded=" + isAdded);
	      		if ((isAdded && allowReceiveEmails) || !isAdded) {
	      			//fire this event for new address with consent, or for existing.
	      			fireEvent("Email Received", isAdded ? "new" : "existing", "modify");
	      		}
	      		if (isAdded) {
	      			fireEvent("Email Received","pre-consent");
	      		}
	      		
	      		if (isAdded || doClear) {
	      			//clear current user and re-fetch
	      			_self._userObject = null;
	      			_self._curUserRequest = null;
	      			_self._subscribeLevel = null;
	      			_self._subscribeLevelRequest = null;
	      		}
	      		deffered.resolve(isAdded);
	      	});
        	
        	return deffered;
        }
        
        LoginMgr.prototype.getLoginStatus = function() {
        	// check cookie
        	var val = readCookie(this.getGuidCookieName());
        	
        	// no login?
        	if (val == null) {
        		return null;
        	}
        	
        	return readCookie(this.getTypeCookieName());
        };
        
        LoginMgr.prototype.isLogin = function() {
        	var loginStatus = this.getLoginStatus();
        	return (loginStatus != null && loginStatus != "client"  && this.getUserGuid() != null);
        };
        
        LoginMgr.prototype.isLoginAny = function() {
        	return true;
        };
        
        LoginMgr.prototype.getGuidCookieName  = function() {
        	return "loggedinuserguid";
        };
        
        LoginMgr.prototype.getTypeCookieName  = function() {
        	return "loggedinusertype";
        };
        
        LoginMgr.prototype.getLoggedInUserId = function() {
        	var loggedInUserId = readCookie("loggedinuserid");
        	return loggedInUserId;
        }
        
       /* LoginMgr.prototype.getUserDisplayName = function() {
        	var val = readCookie("loggedinusername");
        	if (val != null) {
        		val = val.replace(/"/g, "");
        	}
        	
        	return val;        	
        };*/
        
       /* LoginMgr.prototype.getUserEmail = function() {
        	var userEmail = readCookie("loggedinuseremail");
        	if (userEmail != null) {
        		userEmail = userEmail.replace(/"/g, ""); 
        	}
        	
        	return userEmail;
        }*/
        
        LoginMgr.prototype.getLoggedInUserObject = function() {
        	var _self = this;
        	var deffered =  new $.Deferred();
        	_self.getCurrentUser().done(function(results) {
 	      		deffered.resolve(results); 	      		
  	      	}); 
        	return deffered;
        	/*var loggedInUserStr = readCookie("loggedinuserjson");
        	var userObj = null;
        	try {
        		userObj = jQuery.parseJSON(loggedInUserStr);
        		if (userObj != null && userObj.length > 0 && !userObj.id) {
        			//parse twice for backwards compatability
        			userObj = jQuery.parseJSON(jQuery.parseJSON(loggedInUserStr));
        		}
        	} catch (err) {
        		console.log("Error parsing user json " + loggedInUserStr + " Error: " + err);
        	}*/
        	//return userObj;
        }
        
        
        LoginMgr.prototype.getUserGuid = function() {
        	return readCookie(this.getGuidCookieName());        	
        };
    	
        var instance = new LoginMgr();
        
        LoginMgr.getInstance = function() {
        	return instance;
        }; 
 
        return(LoginMgr);
    }    

);

function googleLoadCallback() {
	 gapi.load('auth2', function() { 
		require(["app/core/login"],
			    function(LoginMgr){		
					//console.log("defferedGoogleLoad.resolve()");
					LoginMgr.getInstance()._defferedGoogleLoad.resolve();
			    }
		);
	 });
}

var googleSigninCallbackNum = 0;
function googleSigninCallback(authResult) {	
	googleSigninCallbackNum++;
	
	//console.log("googleSigninCallback", googleSigninCallbackNum);

	require(["app/core/login"],
		    function(LoginMgr){
				// avoid google auto login
				if (googleSigninCallbackNum > 1) {
					if (authResult != null && authResult['error'] == undefined) {
						gapi.auth.setToken(authResult);
						LoginMgr.getInstance().googleLoginDone();
					}						
				}
				else {
					LoginMgr.getInstance()._defferedGoogleLoad.resolve();
				}

		    }
	);		
};
define(
    'app/extensions/core/paidActivityRedirect',["app/core/login"],
    function( LoginMgr ) {
 
        function PaidActivityRedirect() {
            return( this );
        } 
       
        PaidActivityRedirect.redirect = function(providerName, title, link, src, vendorProductId, visitId, cityId) {
        	if (link == null) {
        		return;
        	}
        	var loggedInUserId = LoginMgr.getInstance().getLoggedInUserId();
        	var sign = link.indexOf("?") > -1 ? "&" : "?";        	
        	var sid = loggedInUserId;
        	
        	if (link.indexOf("viator") > -1) {
    			if (typeof(isMobileDevice) != "undefined" && isMobileDevice) {
    				sid = "m" + sid;
    			}
    			
    			var campaignCookieData = readCookie("gclid_event_record");
    			if (campaignCookieData != null && campaignCookieData.length > 0) {
    				sid = "c" + sid;
    			}
    			
    			if (typeof(paTrackPrefix) != "undefined" && paTrackPrefix) {
    				sid = paTrackPrefix + sid;
    			}    	    			
    			
    			link = link.replace("<SUBBRANDEDCODE>", sid);
    		}    		
    		else {
    			link += sign + "sid=" + sid;
    		}
        	
    		var eventTitle = providerName != null ? providerName + ": " + title : title;
        	fireEvent('PaidActivity', eventTitle, src);
        	fireLocalEvent('PaidActivity', eventTitle, vendorProductId, link, true);
        	try {
        		//var vendorProductId = link.split("/")[link.split("/").length-1];
        		fbq('track', 'Lead', {"loggedInUserId":loggedInUserId,"vendorProductId":vendorProductId});
        	} catch (e) {
        		console.error('failed to create FB event ' + e);
        	}
        	    
        	
        	if ((typeof(isMobileDevice) != "undefined" && isMobileDevice) || 
        			(typeof(isOpenPaSameWindow) != "undefined" && isOpenPaSameWindow) ) {
        		// give analytics 500 milisec to complete event 
        		try {
        			$.mobile.loading( "show" );
        		}
        		catch(e){}
        		
        		setTimeout(function() {
        			window.location.href = link;        			
        		}, 500);
        		
        		setTimeout(function() {
            		try {
            			$.mobile.loading( "hide" );
            		}
            		catch(e){}        			
        		}, 2000);
        	}
        	else {
        		//window.open(link, '_blank');
        		if (visitId != null && vendorProductId != null && cityId != null) {
        			var visitLink = appRoot + "/en/" + cityId + "/activity-details/activity/" + visitId + "/" + vendorProductId;
        			$('<iframe name="vacrt" src="' + visitLink + '" style="width:0px;height:0px"></iframe>').appendTo('body');
        		} 
        		
        		window.open(link, '_blank');
        	}
        	
        	$( "body" ).trigger( "paid_activity_redirect");
        };
        	
        
        PaidActivityRedirect.getProviderImage = function(providerName) {
        	if (providerName == 'Viator') {
        		return "viator_logo.jpg";
        	}	
        	
        	if (providerName == 'Paris Pass') {
        		return "paris_pass_logo.jpg";
        	}    
        	
        	return "";
        };
        
        PaidActivityRedirect.getExprPromise = function() {
    		var _self = this;
    		var dfrd = $q.defer();
    		try {
    			globalExprDfd.done(function() {
    				dfrd.resolve();
        		});
    		} catch(err) {
    			dfrd.resolve("timeout");
    		}
    			
    		return dfrd.promise;
    	}
        
 
        return(PaidActivityRedirect);
    }
);
//! moment.js
//! version : 2.15.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define('moment.min',b):a.moment=b()}(this,function(){"use strict";function a(){return md.apply(null,arguments)}
// This is done to register the method called with moment()
// without creating circular dependencies.
function b(a){md=a}function c(a){return a instanceof Array||"[object Array]"===Object.prototype.toString.call(a)}function d(a){
// IE8 will treat undefined and null as object if it wasn't for
// input != null
return null!=a&&"[object Object]"===Object.prototype.toString.call(a)}function e(a){var b;for(b in a)
// even if its not own property I'd still call it non-empty
return!1;return!0}function f(a){return a instanceof Date||"[object Date]"===Object.prototype.toString.call(a)}function g(a,b){var c,d=[];for(c=0;c<a.length;++c)d.push(b(a[c],c));return d}function h(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function i(a,b){for(var c in b)h(b,c)&&(a[c]=b[c]);return h(b,"toString")&&(a.toString=b.toString),h(b,"valueOf")&&(a.valueOf=b.valueOf),a}function j(a,b,c,d){return qb(a,b,c,d,!0).utc()}function k(){
// We need to deep clone this object.
return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null}}function l(a){return null==a._pf&&(a._pf=k()),a._pf}function m(a){if(null==a._isValid){var b=l(a),c=nd.call(b.parsedDateParts,function(a){return null!=a}),d=!isNaN(a._d.getTime())&&b.overflow<0&&!b.empty&&!b.invalidMonth&&!b.invalidWeekday&&!b.nullInput&&!b.invalidFormat&&!b.userInvalidated&&(!b.meridiem||b.meridiem&&c);if(a._strict&&(d=d&&0===b.charsLeftOver&&0===b.unusedTokens.length&&void 0===b.bigHour),null!=Object.isFrozen&&Object.isFrozen(a))return d;a._isValid=d}return a._isValid}function n(a){var b=j(NaN);return null!=a?i(l(b),a):l(b).userInvalidated=!0,b}function o(a){return void 0===a}function p(a,b){var c,d,e;if(o(b._isAMomentObject)||(a._isAMomentObject=b._isAMomentObject),o(b._i)||(a._i=b._i),o(b._f)||(a._f=b._f),o(b._l)||(a._l=b._l),o(b._strict)||(a._strict=b._strict),o(b._tzm)||(a._tzm=b._tzm),o(b._isUTC)||(a._isUTC=b._isUTC),o(b._offset)||(a._offset=b._offset),o(b._pf)||(a._pf=l(b)),o(b._locale)||(a._locale=b._locale),od.length>0)for(c in od)d=od[c],e=b[d],o(e)||(a[d]=e);return a}
// Moment prototype object
function q(b){p(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),pd===!1&&(pd=!0,a.updateOffset(this),pd=!1)}function r(a){return a instanceof q||null!=a&&null!=a._isAMomentObject}function s(a){return 0>a?Math.ceil(a)||0:Math.floor(a)}function t(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=s(b)),c}
// compare two arrays, return the number of differences
function u(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e>d;d++)(c&&a[d]!==b[d]||!c&&t(a[d])!==t(b[d]))&&g++;return g+f}function v(b){a.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+b)}function w(b,c){var d=!0;return i(function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,b),d){for(var e,f=[],g=0;g<arguments.length;g++){if(e="","object"==typeof arguments[g]){e+="\n["+g+"] ";for(var h in arguments[0])e+=h+": "+arguments[0][h]+", ";e=e.slice(0,-2)}else e=arguments[g];f.push(e)}v(b+"\nArguments: "+Array.prototype.slice.call(f).join("")+"\n"+(new Error).stack),d=!1}return c.apply(this,arguments)},c)}function x(b,c){null!=a.deprecationHandler&&a.deprecationHandler(b,c),qd[b]||(v(c),qd[b]=!0)}function y(a){return a instanceof Function||"[object Function]"===Object.prototype.toString.call(a)}function z(a){var b,c;for(c in a)b=a[c],y(b)?this[c]=b:this["_"+c]=b;this._config=a,
// Lenient ordinal parsing accepts just a number in addition to
// number + (possibly) stuff coming from _ordinalParseLenient.
this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function A(a,b){var c,e=i({},a);for(c in b)h(b,c)&&(d(a[c])&&d(b[c])?(e[c]={},i(e[c],a[c]),i(e[c],b[c])):null!=b[c]?e[c]=b[c]:delete e[c]);for(c in a)h(a,c)&&!h(b,c)&&d(a[c])&&(
// make sure changes to properties don't modify parent config
e[c]=i({},e[c]));return e}function B(a){null!=a&&this.set(a)}function C(a,b,c){var d=this._calendar[a]||this._calendar.sameElse;return y(d)?d.call(b,c):d}function D(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function E(){return this._invalidDate}function F(a){return this._ordinal.replace("%d",a)}function G(a,b,c,d){var e=this._relativeTime[c];return y(e)?e(a,b,c,d):e.replace(/%d/i,a)}function H(a,b){var c=this._relativeTime[a>0?"future":"past"];return y(c)?c(b):c.replace(/%s/i,b)}function I(a,b){var c=a.toLowerCase();zd[c]=zd[c+"s"]=zd[b]=a}function J(a){return"string"==typeof a?zd[a]||zd[a.toLowerCase()]:void 0}function K(a){var b,c,d={};for(c in a)h(a,c)&&(b=J(c),b&&(d[b]=a[c]));return d}function L(a,b){Ad[a]=b}function M(a){var b=[];for(var c in a)b.push({unit:c,priority:Ad[c]});return b.sort(function(a,b){return a.priority-b.priority}),b}function N(b,c){return function(d){return null!=d?(P(this,b,d),a.updateOffset(this,c),this):O(this,b)}}function O(a,b){return a.isValid()?a._d["get"+(a._isUTC?"UTC":"")+b]():NaN}function P(a,b,c){a.isValid()&&a._d["set"+(a._isUTC?"UTC":"")+b](c)}
// MOMENTS
function Q(a){return a=J(a),y(this[a])?this[a]():this}function R(a,b){if("object"==typeof a){a=K(a);for(var c=M(a),d=0;d<c.length;d++)this[c[d].unit](a[c[d].unit])}else if(a=J(a),y(this[a]))return this[a](b);return this}function S(a,b,c){var d=""+Math.abs(a),e=b-d.length,f=a>=0;return(f?c?"+":"":"-")+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}
// token:    'M'
// padded:   ['MM', 2]
// ordinal:  'Mo'
// callback: function () { this.month() + 1 }
function T(a,b,c,d){var e=d;"string"==typeof d&&(e=function(){return this[d]()}),a&&(Ed[a]=e),b&&(Ed[b[0]]=function(){return S(e.apply(this,arguments),b[1],b[2])}),c&&(Ed[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function U(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function V(a){var b,c,d=a.match(Bd);for(b=0,c=d.length;c>b;b++)Ed[d[b]]?d[b]=Ed[d[b]]:d[b]=U(d[b]);return function(b){var e,f="";for(e=0;c>e;e++)f+=d[e]instanceof Function?d[e].call(b,a):d[e];return f}}
// format date using native date object
function W(a,b){return a.isValid()?(b=X(b,a.localeData()),Dd[b]=Dd[b]||V(b),Dd[b](a)):a.localeData().invalidDate()}function X(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Cd.lastIndex=0;d>=0&&Cd.test(a);)a=a.replace(Cd,c),Cd.lastIndex=0,d-=1;return a}function Y(a,b,c){Wd[a]=y(b)?b:function(a,d){return a&&c?c:b}}function Z(a,b){return h(Wd,a)?Wd[a](b._strict,b._locale):new RegExp($(a))}
// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function $(a){return _(a.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}))}function _(a){return a.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function aa(a,b){var c,d=b;for("string"==typeof a&&(a=[a]),"number"==typeof b&&(d=function(a,c){c[b]=t(a)}),c=0;c<a.length;c++)Xd[a[c]]=d}function ba(a,b){aa(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function ca(a,b,c){null!=b&&h(Xd,a)&&Xd[a](b,c._a,c,a)}function da(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function ea(a,b){return a?c(this._months)?this._months[a.month()]:this._months[(this._months.isFormat||fe).test(b)?"format":"standalone"][a.month()]:this._months}function fa(a,b){return a?c(this._monthsShort)?this._monthsShort[a.month()]:this._monthsShort[fe.test(b)?"format":"standalone"][a.month()]:this._monthsShort}function ga(a,b,c){var d,e,f,g=a.toLocaleLowerCase();if(!this._monthsParse)for(
// this is not used
this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],d=0;12>d;++d)f=j([2e3,d]),this._shortMonthsParse[d]=this.monthsShort(f,"").toLocaleLowerCase(),this._longMonthsParse[d]=this.months(f,"").toLocaleLowerCase();return c?"MMM"===b?(e=sd.call(this._shortMonthsParse,g),-1!==e?e:null):(e=sd.call(this._longMonthsParse,g),-1!==e?e:null):"MMM"===b?(e=sd.call(this._shortMonthsParse,g),-1!==e?e:(e=sd.call(this._longMonthsParse,g),-1!==e?e:null)):(e=sd.call(this._longMonthsParse,g),-1!==e?e:(e=sd.call(this._shortMonthsParse,g),-1!==e?e:null))}function ha(a,b,c){var d,e,f;if(this._monthsParseExact)return ga.call(this,a,b,c);
// TODO: add sorting
// Sorting makes sure if one month (or abbr) is a prefix of another
// see sorting in computeMonthsParse
for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12>d;d++){
// test the regex
if(e=j([2e3,d]),c&&!this._longMonthsParse[d]&&(this._longMonthsParse[d]=new RegExp("^"+this.months(e,"").replace(".","")+"$","i"),this._shortMonthsParse[d]=new RegExp("^"+this.monthsShort(e,"").replace(".","")+"$","i")),c||this._monthsParse[d]||(f="^"+this.months(e,"")+"|^"+this.monthsShort(e,""),this._monthsParse[d]=new RegExp(f.replace(".",""),"i")),c&&"MMMM"===b&&this._longMonthsParse[d].test(a))return d;if(c&&"MMM"===b&&this._shortMonthsParse[d].test(a))return d;if(!c&&this._monthsParse[d].test(a))return d}}
// MOMENTS
function ia(a,b){var c;if(!a.isValid())
// No op
return a;if("string"==typeof b)if(/^\d+$/.test(b))b=t(b);else
// TODO: Another silent failure?
if(b=a.localeData().monthsParse(b),"number"!=typeof b)return a;return c=Math.min(a.date(),da(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a}function ja(b){return null!=b?(ia(this,b),a.updateOffset(this,!0),this):O(this,"Month")}function ka(){return da(this.year(),this.month())}function la(a){return this._monthsParseExact?(h(this,"_monthsRegex")||na.call(this),a?this._monthsShortStrictRegex:this._monthsShortRegex):(h(this,"_monthsShortRegex")||(this._monthsShortRegex=ie),this._monthsShortStrictRegex&&a?this._monthsShortStrictRegex:this._monthsShortRegex)}function ma(a){return this._monthsParseExact?(h(this,"_monthsRegex")||na.call(this),a?this._monthsStrictRegex:this._monthsRegex):(h(this,"_monthsRegex")||(this._monthsRegex=je),this._monthsStrictRegex&&a?this._monthsStrictRegex:this._monthsRegex)}function na(){function a(a,b){return b.length-a.length}var b,c,d=[],e=[],f=[];for(b=0;12>b;b++)c=j([2e3,b]),d.push(this.monthsShort(c,"")),e.push(this.months(c,"")),f.push(this.months(c,"")),f.push(this.monthsShort(c,""));for(
// Sorting makes sure if one month (or abbr) is a prefix of another it
// will match the longer piece.
d.sort(a),e.sort(a),f.sort(a),b=0;12>b;b++)d[b]=_(d[b]),e[b]=_(e[b]);for(b=0;24>b;b++)f[b]=_(f[b]);this._monthsRegex=new RegExp("^("+f.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+e.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+d.join("|")+")","i")}
// HELPERS
function oa(a){return pa(a)?366:365}function pa(a){return a%4===0&&a%100!==0||a%400===0}function qa(){return pa(this.year())}function ra(a,b,c,d,e,f,g){
//can't just apply() to create a date:
//http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
var h=new Date(a,b,c,d,e,f,g);
//the date constructor remaps years 0-99 to 1900-1999
return 100>a&&a>=0&&isFinite(h.getFullYear())&&h.setFullYear(a),h}function sa(a){var b=new Date(Date.UTC.apply(null,arguments));
//the Date.UTC function remaps years 0-99 to 1900-1999
return 100>a&&a>=0&&isFinite(b.getUTCFullYear())&&b.setUTCFullYear(a),b}
// start-of-first-week - start-of-year
function ta(a,b,c){var// first-week day -- which january is always in the first week (4 for iso, 1 for other)
d=7+b-c,
// first-week day local weekday -- which local weekday is fwd
e=(7+sa(a,0,d).getUTCDay()-b)%7;return-e+d-1}
//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
function ua(a,b,c,d,e){var f,g,h=(7+c-d)%7,i=ta(a,d,e),j=1+7*(b-1)+h+i;return 0>=j?(f=a-1,g=oa(f)+j):j>oa(a)?(f=a+1,g=j-oa(a)):(f=a,g=j),{year:f,dayOfYear:g}}function va(a,b,c){var d,e,f=ta(a.year(),b,c),g=Math.floor((a.dayOfYear()-f-1)/7)+1;return 1>g?(e=a.year()-1,d=g+wa(e,b,c)):g>wa(a.year(),b,c)?(d=g-wa(a.year(),b,c),e=a.year()+1):(e=a.year(),d=g),{week:d,year:e}}function wa(a,b,c){var d=ta(a,b,c),e=ta(a+1,b,c);return(oa(a)-d+e)/7}
// HELPERS
// LOCALES
function xa(a){return va(a,this._week.dow,this._week.doy).week}function ya(){return this._week.dow}function za(){return this._week.doy}
// MOMENTS
function Aa(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),"d")}function Ba(a){var b=va(this,1,4).week;return null==a?b:this.add(7*(a-b),"d")}
// HELPERS
function Ca(a,b){return"string"!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),"number"==typeof a?a:null):parseInt(a,10)}function Da(a,b){return"string"==typeof a?b.weekdaysParse(a)%7||7:isNaN(a)?null:a}function Ea(a,b){return a?c(this._weekdays)?this._weekdays[a.day()]:this._weekdays[this._weekdays.isFormat.test(b)?"format":"standalone"][a.day()]:this._weekdays}function Fa(a){return a?this._weekdaysShort[a.day()]:this._weekdaysShort}function Ga(a){return a?this._weekdaysMin[a.day()]:this._weekdaysMin}function Ha(a,b,c){var d,e,f,g=a.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],d=0;7>d;++d)f=j([2e3,1]).day(d),this._minWeekdaysParse[d]=this.weekdaysMin(f,"").toLocaleLowerCase(),this._shortWeekdaysParse[d]=this.weekdaysShort(f,"").toLocaleLowerCase(),this._weekdaysParse[d]=this.weekdays(f,"").toLocaleLowerCase();return c?"dddd"===b?(e=sd.call(this._weekdaysParse,g),-1!==e?e:null):"ddd"===b?(e=sd.call(this._shortWeekdaysParse,g),-1!==e?e:null):(e=sd.call(this._minWeekdaysParse,g),-1!==e?e:null):"dddd"===b?(e=sd.call(this._weekdaysParse,g),-1!==e?e:(e=sd.call(this._shortWeekdaysParse,g),-1!==e?e:(e=sd.call(this._minWeekdaysParse,g),-1!==e?e:null))):"ddd"===b?(e=sd.call(this._shortWeekdaysParse,g),-1!==e?e:(e=sd.call(this._weekdaysParse,g),-1!==e?e:(e=sd.call(this._minWeekdaysParse,g),-1!==e?e:null))):(e=sd.call(this._minWeekdaysParse,g),-1!==e?e:(e=sd.call(this._weekdaysParse,g),-1!==e?e:(e=sd.call(this._shortWeekdaysParse,g),-1!==e?e:null)))}function Ia(a,b,c){var d,e,f;if(this._weekdaysParseExact)return Ha.call(this,a,b,c);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),d=0;7>d;d++){
// test the regex
if(e=j([2e3,1]).day(d),c&&!this._fullWeekdaysParse[d]&&(this._fullWeekdaysParse[d]=new RegExp("^"+this.weekdays(e,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[d]=new RegExp("^"+this.weekdaysShort(e,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[d]=new RegExp("^"+this.weekdaysMin(e,"").replace(".",".?")+"$","i")),this._weekdaysParse[d]||(f="^"+this.weekdays(e,"")+"|^"+this.weekdaysShort(e,"")+"|^"+this.weekdaysMin(e,""),this._weekdaysParse[d]=new RegExp(f.replace(".",""),"i")),c&&"dddd"===b&&this._fullWeekdaysParse[d].test(a))return d;if(c&&"ddd"===b&&this._shortWeekdaysParse[d].test(a))return d;if(c&&"dd"===b&&this._minWeekdaysParse[d].test(a))return d;if(!c&&this._weekdaysParse[d].test(a))return d}}
// MOMENTS
function Ja(a){if(!this.isValid())return null!=a?this:NaN;var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=Ca(a,this.localeData()),this.add(a-b,"d")):b}function Ka(a){if(!this.isValid())return null!=a?this:NaN;var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,"d")}function La(a){if(!this.isValid())return null!=a?this:NaN;
// behaves the same as moment#day except
// as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
// as a setter, sunday should belong to the previous week.
if(null!=a){var b=Da(a,this.localeData());return this.day(this.day()%7?b:b-7)}return this.day()||7}function Ma(a){return this._weekdaysParseExact?(h(this,"_weekdaysRegex")||Pa.call(this),a?this._weekdaysStrictRegex:this._weekdaysRegex):(h(this,"_weekdaysRegex")||(this._weekdaysRegex=pe),this._weekdaysStrictRegex&&a?this._weekdaysStrictRegex:this._weekdaysRegex)}function Na(a){return this._weekdaysParseExact?(h(this,"_weekdaysRegex")||Pa.call(this),a?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(h(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=qe),this._weekdaysShortStrictRegex&&a?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)}function Oa(a){return this._weekdaysParseExact?(h(this,"_weekdaysRegex")||Pa.call(this),a?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(h(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=re),this._weekdaysMinStrictRegex&&a?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)}function Pa(){function a(a,b){return b.length-a.length}var b,c,d,e,f,g=[],h=[],i=[],k=[];for(b=0;7>b;b++)c=j([2e3,1]).day(b),d=this.weekdaysMin(c,""),e=this.weekdaysShort(c,""),f=this.weekdays(c,""),g.push(d),h.push(e),i.push(f),k.push(d),k.push(e),k.push(f);for(
// Sorting makes sure if one weekday (or abbr) is a prefix of another it
// will match the longer piece.
g.sort(a),h.sort(a),i.sort(a),k.sort(a),b=0;7>b;b++)h[b]=_(h[b]),i[b]=_(i[b]),k[b]=_(k[b]);this._weekdaysRegex=new RegExp("^("+k.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+h.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+g.join("|")+")","i")}
// FORMATTING
function Qa(){return this.hours()%12||12}function Ra(){return this.hours()||24}function Sa(a,b){T(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}
// PARSING
function Ta(a,b){return b._meridiemParse}
// LOCALES
function Ua(a){
// IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
// Using charAt should be more compatible.
return"p"===(a+"").toLowerCase().charAt(0)}function Va(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"}function Wa(a){return a?a.toLowerCase().replace("_","-"):a}
// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function Xa(a){for(var b,c,d,e,f=0;f<a.length;){for(e=Wa(a[f]).split("-"),b=e.length,c=Wa(a[f+1]),c=c?c.split("-"):null;b>0;){if(d=Ya(e.slice(0,b).join("-")))return d;if(c&&c.length>=b&&u(e,c,!0)>=b-1)
//the next array item is better than a shallower substring of this one
break;b--}f++}return null}function Ya(a){var b=null;
// TODO: Find a better way to register and load all the locales in Node
if(!we[a]&&"undefined"!=typeof module&&module&&module.exports)try{b=se._abbr,require("./locale/"+a),
// because defineLocale currently also sets the global locale, we
// want to undo that for lazy loaded locales
Za(b)}catch(c){}return we[a]}
// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
function Za(a,b){var c;
// moment.duration._locale = moment._locale = data;
return a&&(c=o(b)?ab(a):$a(a,b),c&&(se=c)),se._abbr}function $a(a,b){if(null!==b){var c=ve;
// treat as if there is no base config
// backwards compat for now: also set the locale
return b.abbr=a,null!=we[a]?(x("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),c=we[a]._config):null!=b.parentLocale&&(null!=we[b.parentLocale]?c=we[b.parentLocale]._config:x("parentLocaleUndefined","specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/")),we[a]=new B(A(c,b)),Za(a),we[a]}
// useful for testing
return delete we[a],null}function _a(a,b){if(null!=b){var c,d=ve;
// MERGE
null!=we[a]&&(d=we[a]._config),b=A(d,b),c=new B(b),c.parentLocale=we[a],we[a]=c,
// backwards compat for now: also set the locale
Za(a)}else
// pass null for config to unupdate, useful for tests
null!=we[a]&&(null!=we[a].parentLocale?we[a]=we[a].parentLocale:null!=we[a]&&delete we[a]);return we[a]}
// returns locale data
function ab(a){var b;if(a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr),!a)return se;if(!c(a)){if(b=Ya(a))return b;a=[a]}return Xa(a)}function bb(){return rd(we)}function cb(a){var b,c=a._a;return c&&-2===l(a).overflow&&(b=c[Zd]<0||c[Zd]>11?Zd:c[$d]<1||c[$d]>da(c[Yd],c[Zd])?$d:c[_d]<0||c[_d]>24||24===c[_d]&&(0!==c[ae]||0!==c[be]||0!==c[ce])?_d:c[ae]<0||c[ae]>59?ae:c[be]<0||c[be]>59?be:c[ce]<0||c[ce]>999?ce:-1,l(a)._overflowDayOfYear&&(Yd>b||b>$d)&&(b=$d),l(a)._overflowWeeks&&-1===b&&(b=de),l(a)._overflowWeekday&&-1===b&&(b=ee),l(a).overflow=b),a}
// date from iso format
function db(a){var b,c,d,e,f,g,h=a._i,i=xe.exec(h)||ye.exec(h);if(i){for(l(a).iso=!0,b=0,c=Ae.length;c>b;b++)if(Ae[b][1].exec(i[1])){e=Ae[b][0],d=Ae[b][2]!==!1;break}if(null==e)return void(a._isValid=!1);if(i[3]){for(b=0,c=Be.length;c>b;b++)if(Be[b][1].exec(i[3])){
// match[2] should be 'T' or space
f=(i[2]||" ")+Be[b][0];break}if(null==f)return void(a._isValid=!1)}if(!d&&null!=f)return void(a._isValid=!1);if(i[4]){if(!ze.exec(i[4]))return void(a._isValid=!1);g="Z"}a._f=e+(f||"")+(g||""),jb(a)}else a._isValid=!1}
// date from iso format or fallback
function eb(b){var c=Ce.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(db(b),void(b._isValid===!1&&(delete b._isValid,a.createFromInputFallback(b))))}
// Pick the first defined of two or three arguments.
function fb(a,b,c){return null!=a?a:null!=b?b:c}function gb(b){
// hooks is actually the exported moment object
var c=new Date(a.now());return b._useUTC?[c.getUTCFullYear(),c.getUTCMonth(),c.getUTCDate()]:[c.getFullYear(),c.getMonth(),c.getDate()]}
// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
function hb(a){var b,c,d,e,f=[];if(!a._d){
// Default to current date.
// * if no year, month, day of month are given, default to today
// * if day of month is given, default month and year
// * if month is given, default only year
// * if year is given, don't default anything
for(d=gb(a),a._w&&null==a._a[$d]&&null==a._a[Zd]&&ib(a),a._dayOfYear&&(e=fb(a._a[Yd],d[Yd]),a._dayOfYear>oa(e)&&(l(a)._overflowDayOfYear=!0),c=sa(e,0,a._dayOfYear),a._a[Zd]=c.getUTCMonth(),a._a[$d]=c.getUTCDate()),b=0;3>b&&null==a._a[b];++b)a._a[b]=f[b]=d[b];
// Zero out whatever was not defaulted, including time
for(;7>b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];
// Check for 24:00:00.000
24===a._a[_d]&&0===a._a[ae]&&0===a._a[be]&&0===a._a[ce]&&(a._nextDay=!0,a._a[_d]=0),a._d=(a._useUTC?sa:ra).apply(null,f),
// Apply timezone offset from input. The actual utcOffset can be changed
// with parseZone.
null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&&(a._a[_d]=24)}}function ib(a){var b,c,d,e,f,g,h,i;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=fb(b.GG,a._a[Yd],va(rb(),1,4).year),d=fb(b.W,1),e=fb(b.E,1),(1>e||e>7)&&(i=!0)):(f=a._locale._week.dow,g=a._locale._week.doy,c=fb(b.gg,a._a[Yd],va(rb(),f,g).year),d=fb(b.w,1),null!=b.d?(e=b.d,(0>e||e>6)&&(i=!0)):null!=b.e?(e=b.e+f,(b.e<0||b.e>6)&&(i=!0)):e=f),1>d||d>wa(c,f,g)?l(a)._overflowWeeks=!0:null!=i?l(a)._overflowWeekday=!0:(h=ua(c,d,e,f,g),a._a[Yd]=h.year,a._dayOfYear=h.dayOfYear)}
// date from string and format string
function jb(b){
// TODO: Move this to another part of the creation flow to prevent circular deps
if(b._f===a.ISO_8601)return void db(b);b._a=[],l(b).empty=!0;
// This array is used to make a Date, either with `new Date` or `Date.UTC`
var c,d,e,f,g,h=""+b._i,i=h.length,j=0;for(e=X(b._f,b._locale).match(Bd)||[],c=0;c<e.length;c++)f=e[c],d=(h.match(Z(f,b))||[])[0],d&&(g=h.substr(0,h.indexOf(d)),g.length>0&&l(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),j+=d.length),Ed[f]?(d?l(b).empty=!1:l(b).unusedTokens.push(f),ca(f,d,b)):b._strict&&!d&&l(b).unusedTokens.push(f);
// add remaining unparsed input length to the string
l(b).charsLeftOver=i-j,h.length>0&&l(b).unusedInput.push(h),
// clear _12h flag if hour is <= 12
b._a[_d]<=12&&l(b).bigHour===!0&&b._a[_d]>0&&(l(b).bigHour=void 0),l(b).parsedDateParts=b._a.slice(0),l(b).meridiem=b._meridiem,
// handle meridiem
b._a[_d]=kb(b._locale,b._a[_d],b._meridiem),hb(b),cb(b)}function kb(a,b,c){var d;
// Fallback
return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&&12>b&&(b+=12),d||12!==b||(b=0),b):b}
// date from string and array of format strings
function lb(a){var b,c,d,e,f;if(0===a._f.length)return l(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e<a._f.length;e++)f=0,b=p({},a),null!=a._useUTC&&(b._useUTC=a._useUTC),b._f=a._f[e],jb(b),m(b)&&(f+=l(b).charsLeftOver,f+=10*l(b).unusedTokens.length,l(b).score=f,(null==d||d>f)&&(d=f,c=b));i(a,c||b)}function mb(a){if(!a._d){var b=K(a._i);a._a=g([b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],function(a){return a&&parseInt(a,10)}),hb(a)}}function nb(a){var b=new q(cb(ob(a)));
// Adding is smart enough around DST
return b._nextDay&&(b.add(1,"d"),b._nextDay=void 0),b}function ob(a){var b=a._i,d=a._f;return a._locale=a._locale||ab(a._l),null===b||void 0===d&&""===b?n({nullInput:!0}):("string"==typeof b&&(a._i=b=a._locale.preparse(b)),r(b)?new q(cb(b)):(c(d)?lb(a):f(b)?a._d=b:d?jb(a):pb(a),m(a)||(a._d=null),a))}function pb(b){var d=b._i;void 0===d?b._d=new Date(a.now()):f(d)?b._d=new Date(d.valueOf()):"string"==typeof d?eb(b):c(d)?(b._a=g(d.slice(0),function(a){return parseInt(a,10)}),hb(b)):"object"==typeof d?mb(b):"number"==typeof d?
// from milliseconds
b._d=new Date(d):a.createFromInputFallback(b)}function qb(a,b,f,g,h){var i={};
// object construction must be done this way.
// https://github.com/moment/moment/issues/1423
return"boolean"==typeof f&&(g=f,f=void 0),(d(a)&&e(a)||c(a)&&0===a.length)&&(a=void 0),i._isAMomentObject=!0,i._useUTC=i._isUTC=h,i._l=f,i._i=a,i._f=b,i._strict=g,nb(i)}function rb(a,b,c,d){return qb(a,b,c,d,!1)}
// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
function sb(a,b){var d,e;if(1===b.length&&c(b[0])&&(b=b[0]),!b.length)return rb();for(d=b[0],e=1;e<b.length;++e)b[e].isValid()&&!b[e][a](d)||(d=b[e]);return d}
// TODO: Use [].sort instead?
function tb(){var a=[].slice.call(arguments,0);return sb("isBefore",a)}function ub(){var a=[].slice.call(arguments,0);return sb("isAfter",a)}function vb(a){var b=K(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;
// representation for dateAddRemove
this._milliseconds=+k+1e3*j+// 1000
6e4*i+// 1000 * 60
1e3*h*60*60,//using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
// Because of dateAddRemove treats 24 hours as different from a
// day when working around DST, we need to store them separately
this._days=+g+7*f,
// It is impossible translate months into days without knowing
// which months you are are talking about, so we have to store
// it separately.
this._months=+e+3*d+12*c,this._data={},this._locale=ab(),this._bubble()}function wb(a){return a instanceof vb}function xb(a){return 0>a?-1*Math.round(-1*a):Math.round(a)}
// FORMATTING
function yb(a,b){T(a,0,0,function(){var a=this.utcOffset(),c="+";return 0>a&&(a=-a,c="-"),c+S(~~(a/60),2)+b+S(~~a%60,2)})}function zb(a,b){var c=(b||"").match(a)||[],d=c[c.length-1]||[],e=(d+"").match(Ge)||["-",0,0],f=+(60*e[1])+t(e[2]);return"+"===e[0]?f:-f}
// Return a moment from input, that is local/utc/zone equivalent to model.
function Ab(b,c){var d,e;
// Use low-level api, because this fn is low-level api.
return c._isUTC?(d=c.clone(),e=(r(b)||f(b)?b.valueOf():rb(b).valueOf())-d.valueOf(),d._d.setTime(d._d.valueOf()+e),a.updateOffset(d,!1),d):rb(b).local()}function Bb(a){
// On Firefox.24 Date#getTimezoneOffset returns a floating point.
// https://github.com/moment/moment/pull/1871
return 15*-Math.round(a._d.getTimezoneOffset()/15)}
// MOMENTS
// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function Cb(b,c){var d,e=this._offset||0;return this.isValid()?null!=b?("string"==typeof b?b=zb(Td,b):Math.abs(b)<16&&(b=60*b),!this._isUTC&&c&&(d=Bb(this)),this._offset=b,this._isUTC=!0,null!=d&&this.add(d,"m"),e!==b&&(!c||this._changeInProgress?Sb(this,Nb(b-e,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Bb(this):null!=b?this:NaN}function Db(a,b){return null!=a?("string"!=typeof a&&(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Eb(a){return this.utcOffset(0,a)}function Fb(a){return this._isUTC&&(this.utcOffset(0,a),this._isUTC=!1,a&&this.subtract(Bb(this),"m")),this}function Gb(){if(this._tzm)this.utcOffset(this._tzm);else if("string"==typeof this._i){var a=zb(Sd,this._i);0===a?this.utcOffset(0,!0):this.utcOffset(zb(Sd,this._i))}return this}function Hb(a){return this.isValid()?(a=a?rb(a).utcOffset():0,(this.utcOffset()-a)%60===0):!1}function Ib(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Jb(){if(!o(this._isDSTShifted))return this._isDSTShifted;var a={};if(p(a,this),a=ob(a),a._a){var b=a._isUTC?j(a._a):rb(a._a);this._isDSTShifted=this.isValid()&&u(a._a,b.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Kb(){return this.isValid()?!this._isUTC:!1}function Lb(){return this.isValid()?this._isUTC:!1}function Mb(){return this.isValid()?this._isUTC&&0===this._offset:!1}function Nb(a,b){var c,d,e,f=a,
// matching against regexp is expensive, do it on demand
g=null;// checks for null or undefined
return wb(a)?f={ms:a._milliseconds,d:a._days,M:a._months}:"number"==typeof a?(f={},b?f[b]=a:f.milliseconds=a):(g=He.exec(a))?(c="-"===g[1]?-1:1,f={y:0,d:t(g[$d])*c,h:t(g[_d])*c,m:t(g[ae])*c,s:t(g[be])*c,ms:t(xb(1e3*g[ce]))*c}):(g=Ie.exec(a))?(c="-"===g[1]?-1:1,f={y:Ob(g[2],c),M:Ob(g[3],c),w:Ob(g[4],c),d:Ob(g[5],c),h:Ob(g[6],c),m:Ob(g[7],c),s:Ob(g[8],c)}):null==f?f={}:"object"==typeof f&&("from"in f||"to"in f)&&(e=Qb(rb(f.from),rb(f.to)),f={},f.ms=e.milliseconds,f.M=e.months),d=new vb(f),wb(a)&&h(a,"_locale")&&(d._locale=a._locale),d}function Ob(a,b){
// We'd normally use ~~inp for this, but unfortunately it also
// converts floats to ints.
// inp may be undefined, so careful calling replace on it.
var c=a&&parseFloat(a.replace(",","."));
// apply sign while we're at it
return(isNaN(c)?0:c)*b}function Pb(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,"M").isAfter(b)&&--c.months,c.milliseconds=+b-+a.clone().add(c.months,"M"),c}function Qb(a,b){var c;return a.isValid()&&b.isValid()?(b=Ab(b,a),a.isBefore(b)?c=Pb(a,b):(c=Pb(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c):{milliseconds:0,months:0}}
// TODO: remove 'name' arg after deprecation is removed
function Rb(a,b){return function(c,d){var e,f;
//invert the arguments, but complain about it
return null===d||isNaN(+d)||(x(b,"moment()."+b+"(period, number) is deprecated. Please use moment()."+b+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),f=c,c=d,d=f),c="string"==typeof c?+c:c,e=Nb(c,d),Sb(this,e,a),this}}function Sb(b,c,d,e){var f=c._milliseconds,g=xb(c._days),h=xb(c._months);b.isValid()&&(e=null==e?!0:e,f&&b._d.setTime(b._d.valueOf()+f*d),g&&P(b,"Date",O(b,"Date")+g*d),h&&ia(b,O(b,"Month")+h*d),e&&a.updateOffset(b,g||h))}function Tb(a,b){var c=a.diff(b,"days",!0);return-6>c?"sameElse":-1>c?"lastWeek":0>c?"lastDay":1>c?"sameDay":2>c?"nextDay":7>c?"nextWeek":"sameElse"}function Ub(b,c){
// We want to compare the start of today, vs this.
// Getting start-of-today depends on whether we're local/utc/offset or not.
var d=b||rb(),e=Ab(d,this).startOf("day"),f=a.calendarFormat(this,e)||"sameElse",g=c&&(y(c[f])?c[f].call(this,d):c[f]);return this.format(g||this.localeData().calendar(f,this,rb(d)))}function Vb(){return new q(this)}function Wb(a,b){var c=r(a)?a:rb(a);return this.isValid()&&c.isValid()?(b=J(o(b)?"millisecond":b),"millisecond"===b?this.valueOf()>c.valueOf():c.valueOf()<this.clone().startOf(b).valueOf()):!1}function Xb(a,b){var c=r(a)?a:rb(a);return this.isValid()&&c.isValid()?(b=J(o(b)?"millisecond":b),"millisecond"===b?this.valueOf()<c.valueOf():this.clone().endOf(b).valueOf()<c.valueOf()):!1}function Yb(a,b,c,d){return d=d||"()",("("===d[0]?this.isAfter(a,c):!this.isBefore(a,c))&&(")"===d[1]?this.isBefore(b,c):!this.isAfter(b,c))}function Zb(a,b){var c,d=r(a)?a:rb(a);return this.isValid()&&d.isValid()?(b=J(b||"millisecond"),"millisecond"===b?this.valueOf()===d.valueOf():(c=d.valueOf(),this.clone().startOf(b).valueOf()<=c&&c<=this.clone().endOf(b).valueOf())):!1}function $b(a,b){return this.isSame(a,b)||this.isAfter(a,b)}function _b(a,b){return this.isSame(a,b)||this.isBefore(a,b)}function ac(a,b,c){var d,e,f,g;// 1000
// 1000 * 60
// 1000 * 60 * 60
// 1000 * 60 * 60 * 24, negate dst
// 1000 * 60 * 60 * 24 * 7, negate dst
return this.isValid()?(d=Ab(a,this),d.isValid()?(e=6e4*(d.utcOffset()-this.utcOffset()),b=J(b),"year"===b||"month"===b||"quarter"===b?(g=bc(this,d),"quarter"===b?g/=3:"year"===b&&(g/=12)):(f=this-d,g="second"===b?f/1e3:"minute"===b?f/6e4:"hour"===b?f/36e5:"day"===b?(f-e)/864e5:"week"===b?(f-e)/6048e5:f),c?g:s(g)):NaN):NaN}function bc(a,b){
// difference in months
var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),
// b is in (anchor - 1 month, anchor + 1 month)
f=a.clone().add(e,"months");
//check for negative zero, return zero if negative zero
// linear across the month
// linear across the month
return 0>b-f?(c=a.clone().add(e-1,"months"),d=(b-f)/(f-c)):(c=a.clone().add(e+1,"months"),d=(b-f)/(c-f)),-(e+d)||0}function cc(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function dc(){var a=this.clone().utc();return 0<a.year()&&a.year()<=9999?y(Date.prototype.toISOString)?this.toDate().toISOString():W(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):W(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function ec(b){b||(b=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var c=W(this,b);return this.localeData().postformat(c)}function fc(a,b){return this.isValid()&&(r(a)&&a.isValid()||rb(a).isValid())?Nb({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function gc(a){return this.from(rb(),a)}function hc(a,b){return this.isValid()&&(r(a)&&a.isValid()||rb(a).isValid())?Nb({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function ic(a){return this.to(rb(),a)}
// If passed a locale key, it will set the locale for this
// instance.  Otherwise, it will return the locale configuration
// variables for this instance.
function jc(a){var b;return void 0===a?this._locale._abbr:(b=ab(a),null!=b&&(this._locale=b),this)}function kc(){return this._locale}function lc(a){
// the following switch intentionally omits break keywords
// to utilize falling through the cases.
switch(a=J(a)){case"year":this.month(0);/* falls through */
case"quarter":case"month":this.date(1);/* falls through */
case"week":case"isoWeek":case"day":case"date":this.hours(0);/* falls through */
case"hour":this.minutes(0);/* falls through */
case"minute":this.seconds(0);/* falls through */
case"second":this.milliseconds(0)}
// weeks are a special case
// quarters are also special
return"week"===a&&this.weekday(0),"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this}function mc(a){
// 'date' is an alias for 'day', so it should be considered as such.
return a=J(a),void 0===a||"millisecond"===a?this:("date"===a&&(a="day"),this.startOf(a).add(1,"isoWeek"===a?"week":a).subtract(1,"ms"))}function nc(){return this._d.valueOf()-6e4*(this._offset||0)}function oc(){return Math.floor(this.valueOf()/1e3)}function pc(){return new Date(this.valueOf())}function qc(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function rc(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function sc(){
// new Date(NaN).toJSON() === null
return this.isValid()?this.toISOString():null}function tc(){return m(this)}function uc(){return i({},l(this))}function vc(){return l(this).overflow}function wc(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function xc(a,b){T(0,[a,a.length],0,b)}
// MOMENTS
function yc(a){return Cc.call(this,a,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function zc(a){return Cc.call(this,a,this.isoWeek(),this.isoWeekday(),1,4)}function Ac(){return wa(this.year(),1,4)}function Bc(){var a=this.localeData()._week;return wa(this.year(),a.dow,a.doy)}function Cc(a,b,c,d,e){var f;return null==a?va(this,d,e).year:(f=wa(a,d,e),b>f&&(b=f),Dc.call(this,a,b,c,d,e))}function Dc(a,b,c,d,e){var f=ua(a,b,c,d,e),g=sa(f.year,0,f.dayOfYear);return this.year(g.getUTCFullYear()),this.month(g.getUTCMonth()),this.date(g.getUTCDate()),this}
// MOMENTS
function Ec(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}
// HELPERS
// MOMENTS
function Fc(a){var b=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==a?b:this.add(a-b,"d")}function Gc(a,b){b[ce]=t(1e3*("0."+a))}
// MOMENTS
function Hc(){return this._isUTC?"UTC":""}function Ic(){return this._isUTC?"Coordinated Universal Time":""}function Jc(a){return rb(1e3*a)}function Kc(){return rb.apply(null,arguments).parseZone()}function Lc(a){return a}function Mc(a,b,c,d){var e=ab(),f=j().set(d,b);return e[c](f,a)}function Nc(a,b,c){if("number"==typeof a&&(b=a,a=void 0),a=a||"",null!=b)return Mc(a,b,c,"month");var d,e=[];for(d=0;12>d;d++)e[d]=Mc(a,d,c,"month");return e}
// ()
// (5)
// (fmt, 5)
// (fmt)
// (true)
// (true, 5)
// (true, fmt, 5)
// (true, fmt)
function Oc(a,b,c,d){"boolean"==typeof a?("number"==typeof b&&(c=b,b=void 0),b=b||""):(b=a,c=b,a=!1,"number"==typeof b&&(c=b,b=void 0),b=b||"");var e=ab(),f=a?e._week.dow:0;if(null!=c)return Mc(b,(c+f)%7,d,"day");var g,h=[];for(g=0;7>g;g++)h[g]=Mc(b,(g+f)%7,d,"day");return h}function Pc(a,b){return Nc(a,b,"months")}function Qc(a,b){return Nc(a,b,"monthsShort")}function Rc(a,b,c){return Oc(a,b,c,"weekdays")}function Sc(a,b,c){return Oc(a,b,c,"weekdaysShort")}function Tc(a,b,c){return Oc(a,b,c,"weekdaysMin")}function Uc(){var a=this._data;return this._milliseconds=Ue(this._milliseconds),this._days=Ue(this._days),this._months=Ue(this._months),a.milliseconds=Ue(a.milliseconds),a.seconds=Ue(a.seconds),a.minutes=Ue(a.minutes),a.hours=Ue(a.hours),a.months=Ue(a.months),a.years=Ue(a.years),this}function Vc(a,b,c,d){var e=Nb(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}
// supports only 2.0-style add(1, 's') or add(duration)
function Wc(a,b){return Vc(this,a,b,1)}
// supports only 2.0-style subtract(1, 's') or subtract(duration)
function Xc(a,b){return Vc(this,a,b,-1)}function Yc(a){return 0>a?Math.floor(a):Math.ceil(a)}function Zc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;
// if we have a mix of positive and negative values, bubble down first
// check: https://github.com/moment/moment/issues/2166
// The following code bubbles up values, see the tests for
// examples of what that means.
// convert days to months
// 12 months -> 1 year
return f>=0&&g>=0&&h>=0||0>=f&&0>=g&&0>=h||(f+=864e5*Yc(_c(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=s(f/1e3),i.seconds=a%60,b=s(a/60),i.minutes=b%60,c=s(b/60),i.hours=c%24,g+=s(c/24),e=s($c(g)),h+=e,g-=Yc(_c(e)),d=s(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function $c(a){
// 400 years have 146097 days (taking into account leap year rules)
// 400 years have 12 months === 4800
return 4800*a/146097}function _c(a){
// the reverse of daysToMonths
return 146097*a/4800}function ad(a){var b,c,d=this._milliseconds;if(a=J(a),"month"===a||"year"===a)return b=this._days+d/864e5,c=this._months+$c(b),"month"===a?c:c/12;switch(b=this._days+Math.round(_c(this._months)),a){case"week":return b/7+d/6048e5;case"day":return b+d/864e5;case"hour":return 24*b+d/36e5;case"minute":return 1440*b+d/6e4;case"second":return 86400*b+d/1e3;
// Math.floor prevents floating point math errors here
case"millisecond":return Math.floor(864e5*b)+d;default:throw new Error("Unknown unit "+a)}}
// TODO: Use this.as('ms')?
function bd(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*t(this._months/12)}function cd(a){return function(){return this.as(a)}}function dd(a){return a=J(a),this[a+"s"]()}function ed(a){return function(){return this._data[a]}}function fd(){return s(this.days()/7)}
// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
function gd(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function hd(a,b,c){var d=Nb(a).abs(),e=jf(d.as("s")),f=jf(d.as("m")),g=jf(d.as("h")),h=jf(d.as("d")),i=jf(d.as("M")),j=jf(d.as("y")),k=e<kf.s&&["s",e]||1>=f&&["m"]||f<kf.m&&["mm",f]||1>=g&&["h"]||g<kf.h&&["hh",g]||1>=h&&["d"]||h<kf.d&&["dd",h]||1>=i&&["M"]||i<kf.M&&["MM",i]||1>=j&&["y"]||["yy",j];return k[2]=b,k[3]=+a>0,k[4]=c,gd.apply(null,k)}
// This function allows you to set the rounding function for relative time strings
function id(a){return void 0===a?jf:"function"==typeof a?(jf=a,!0):!1}
// This function allows you to set a threshold for relative time strings
function jd(a,b){return void 0===kf[a]?!1:void 0===b?kf[a]:(kf[a]=b,!0)}function kd(a){var b=this.localeData(),c=hd(this,!a,b);return a&&(c=b.pastFuture(+this,c)),b.postformat(c)}function ld(){
// for ISO strings we do not use the normal bubbling rules:
//  * milliseconds bubble up until they become hours
//  * days do not bubble at all
//  * months bubble up until they become years
// This is because there is no context-free conversion between hours and days
// (think of clock changes)
// and also not between days and months (28-31 days per month)
var a,b,c,d=lf(this._milliseconds)/1e3,e=lf(this._days),f=lf(this._months);a=s(d/60),b=s(a/60),d%=60,a%=60,c=s(f/12),f%=12;
// inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0>m?"-":"")+"P"+(g?g+"Y":"")+(h?h+"M":"")+(i?i+"D":"")+(j||k||l?"T":"")+(j?j+"H":"")+(k?k+"M":"")+(l?l+"S":""):"P0D"}var md,nd;nd=Array.prototype.some?Array.prototype.some:function(a){for(var b=Object(this),c=b.length>>>0,d=0;c>d;d++)if(d in b&&a.call(this,b[d],d,b))return!0;return!1};
// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var od=a.momentProperties=[],pd=!1,qd={};a.suppressDeprecationWarnings=!1,a.deprecationHandler=null;var rd;rd=Object.keys?Object.keys:function(a){var b,c=[];for(b in a)h(a,b)&&c.push(b);return c};var sd,td={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},ud={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},vd="Invalid date",wd="%d",xd=/\d{1,2}/,yd={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},zd={},Ad={},Bd=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Cd=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Dd={},Ed={},Fd=/\d/,Gd=/\d\d/,Hd=/\d{3}/,Id=/\d{4}/,Jd=/[+-]?\d{6}/,Kd=/\d\d?/,Ld=/\d\d\d\d?/,Md=/\d\d\d\d\d\d?/,Nd=/\d{1,3}/,Od=/\d{1,4}/,Pd=/[+-]?\d{1,6}/,Qd=/\d+/,Rd=/[+-]?\d+/,Sd=/Z|[+-]\d\d:?\d\d/gi,Td=/Z|[+-]\d\d(?::?\d\d)?/gi,Ud=/[+-]?\d+(\.\d{1,3})?/,Vd=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Wd={},Xd={},Yd=0,Zd=1,$d=2,_d=3,ae=4,be=5,ce=6,de=7,ee=8;sd=Array.prototype.indexOf?Array.prototype.indexOf:function(a){
// I know
var b;for(b=0;b<this.length;++b)if(this[b]===a)return b;return-1},T("M",["MM",2],"Mo",function(){return this.month()+1}),T("MMM",0,0,function(a){return this.localeData().monthsShort(this,a)}),T("MMMM",0,0,function(a){return this.localeData().months(this,a)}),I("month","M"),L("month",8),Y("M",Kd),Y("MM",Kd,Gd),Y("MMM",function(a,b){return b.monthsShortRegex(a)}),Y("MMMM",function(a,b){return b.monthsRegex(a)}),aa(["M","MM"],function(a,b){b[Zd]=t(a)-1}),aa(["MMM","MMMM"],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[Zd]=e:l(c).invalidMonth=a});
// LOCALES
var fe=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/,ge="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),he="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),ie=Vd,je=Vd;
// FORMATTING
T("Y",0,0,function(){var a=this.year();return 9999>=a?""+a:"+"+a}),T(0,["YY",2],0,function(){return this.year()%100}),T(0,["YYYY",4],0,"year"),T(0,["YYYYY",5],0,"year"),T(0,["YYYYYY",6,!0],0,"year"),
// ALIASES
I("year","y"),
// PRIORITIES
L("year",1),
// PARSING
Y("Y",Rd),Y("YY",Kd,Gd),Y("YYYY",Od,Id),Y("YYYYY",Pd,Jd),Y("YYYYYY",Pd,Jd),aa(["YYYYY","YYYYYY"],Yd),aa("YYYY",function(b,c){c[Yd]=2===b.length?a.parseTwoDigitYear(b):t(b)}),aa("YY",function(b,c){c[Yd]=a.parseTwoDigitYear(b)}),aa("Y",function(a,b){b[Yd]=parseInt(a,10)}),
// HOOKS
a.parseTwoDigitYear=function(a){return t(a)+(t(a)>68?1900:2e3)};
// MOMENTS
var ke=N("FullYear",!0);
// FORMATTING
T("w",["ww",2],"wo","week"),T("W",["WW",2],"Wo","isoWeek"),
// ALIASES
I("week","w"),I("isoWeek","W"),
// PRIORITIES
L("week",5),L("isoWeek",5),
// PARSING
Y("w",Kd),Y("ww",Kd,Gd),Y("W",Kd),Y("WW",Kd,Gd),ba(["w","ww","W","WW"],function(a,b,c,d){b[d.substr(0,1)]=t(a)});var le={dow:0,// Sunday is the first day of the week.
doy:6};
// FORMATTING
T("d",0,"do","day"),T("dd",0,0,function(a){return this.localeData().weekdaysMin(this,a)}),T("ddd",0,0,function(a){return this.localeData().weekdaysShort(this,a)}),T("dddd",0,0,function(a){return this.localeData().weekdays(this,a)}),T("e",0,0,"weekday"),T("E",0,0,"isoWeekday"),
// ALIASES
I("day","d"),I("weekday","e"),I("isoWeekday","E"),
// PRIORITY
L("day",11),L("weekday",11),L("isoWeekday",11),
// PARSING
Y("d",Kd),Y("e",Kd),Y("E",Kd),Y("dd",function(a,b){return b.weekdaysMinRegex(a)}),Y("ddd",function(a,b){return b.weekdaysShortRegex(a)}),Y("dddd",function(a,b){return b.weekdaysRegex(a)}),ba(["dd","ddd","dddd"],function(a,b,c,d){var e=c._locale.weekdaysParse(a,d,c._strict);
// if we didn't get a weekday name, mark the date as invalid
null!=e?b.d=e:l(c).invalidWeekday=a}),ba(["d","e","E"],function(a,b,c,d){b[d]=t(a)});
// LOCALES
var me="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ne="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),oe="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),pe=Vd,qe=Vd,re=Vd;T("H",["HH",2],0,"hour"),T("h",["hh",2],0,Qa),T("k",["kk",2],0,Ra),T("hmm",0,0,function(){return""+Qa.apply(this)+S(this.minutes(),2)}),T("hmmss",0,0,function(){return""+Qa.apply(this)+S(this.minutes(),2)+S(this.seconds(),2)}),T("Hmm",0,0,function(){return""+this.hours()+S(this.minutes(),2)}),T("Hmmss",0,0,function(){return""+this.hours()+S(this.minutes(),2)+S(this.seconds(),2)}),Sa("a",!0),Sa("A",!1),
// ALIASES
I("hour","h"),
// PRIORITY
L("hour",13),Y("a",Ta),Y("A",Ta),Y("H",Kd),Y("h",Kd),Y("HH",Kd,Gd),Y("hh",Kd,Gd),Y("hmm",Ld),Y("hmmss",Md),Y("Hmm",Ld),Y("Hmmss",Md),aa(["H","HH"],_d),aa(["a","A"],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),aa(["h","hh"],function(a,b,c){b[_d]=t(a),l(c).bigHour=!0}),aa("hmm",function(a,b,c){var d=a.length-2;b[_d]=t(a.substr(0,d)),b[ae]=t(a.substr(d)),l(c).bigHour=!0}),aa("hmmss",function(a,b,c){var d=a.length-4,e=a.length-2;b[_d]=t(a.substr(0,d)),b[ae]=t(a.substr(d,2)),b[be]=t(a.substr(e)),l(c).bigHour=!0}),aa("Hmm",function(a,b,c){var d=a.length-2;b[_d]=t(a.substr(0,d)),b[ae]=t(a.substr(d))}),aa("Hmmss",function(a,b,c){var d=a.length-4,e=a.length-2;b[_d]=t(a.substr(0,d)),b[ae]=t(a.substr(d,2)),b[be]=t(a.substr(e))});var se,te=/[ap]\.?m?\.?/i,ue=N("Hours",!0),ve={calendar:td,longDateFormat:ud,invalidDate:vd,ordinal:wd,ordinalParse:xd,relativeTime:yd,months:ge,monthsShort:he,week:le,weekdays:me,weekdaysMin:oe,weekdaysShort:ne,meridiemParse:te},we={},xe=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,ye=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,ze=/Z|[+-]\d\d(?::?\d\d)?/,Ae=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],
// YYYYMM is NOT allowed by the standard
["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Be=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Ce=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=w("value provided is not in a recognized ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(a){a._d=new Date(a._i+(a._useUTC?" UTC":""))}),
// constant that refers to the ISO standard
a.ISO_8601=function(){};var De=w("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var a=rb.apply(null,arguments);return this.isValid()&&a.isValid()?this>a?this:a:n()}),Ee=w("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var a=rb.apply(null,arguments);return this.isValid()&&a.isValid()?a>this?this:a:n()}),Fe=function(){return Date.now?Date.now():+new Date};yb("Z",":"),yb("ZZ",""),
// PARSING
Y("Z",Td),Y("ZZ",Td),aa(["Z","ZZ"],function(a,b,c){c._useUTC=!0,c._tzm=zb(Td,a)});
// HELPERS
// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var Ge=/([\+\-]|\d\d)/gi;
// HOOKS
// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
a.updateOffset=function(){};
// ASP.NET json date format regex
var He=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Ie=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;Nb.fn=vb.prototype;var Je=Rb(1,"add"),Ke=Rb(-1,"subtract");a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Le=w("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(a){return void 0===a?this.localeData():this.locale(a)});
// FORMATTING
T(0,["gg",2],0,function(){return this.weekYear()%100}),T(0,["GG",2],0,function(){return this.isoWeekYear()%100}),xc("gggg","weekYear"),xc("ggggg","weekYear"),xc("GGGG","isoWeekYear"),xc("GGGGG","isoWeekYear"),
// ALIASES
I("weekYear","gg"),I("isoWeekYear","GG"),
// PRIORITY
L("weekYear",1),L("isoWeekYear",1),
// PARSING
Y("G",Rd),Y("g",Rd),Y("GG",Kd,Gd),Y("gg",Kd,Gd),Y("GGGG",Od,Id),Y("gggg",Od,Id),Y("GGGGG",Pd,Jd),Y("ggggg",Pd,Jd),ba(["gggg","ggggg","GGGG","GGGGG"],function(a,b,c,d){b[d.substr(0,2)]=t(a)}),ba(["gg","GG"],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),
// FORMATTING
T("Q",0,"Qo","quarter"),
// ALIASES
I("quarter","Q"),
// PRIORITY
L("quarter",7),
// PARSING
Y("Q",Fd),aa("Q",function(a,b){b[Zd]=3*(t(a)-1)}),
// FORMATTING
T("D",["DD",2],"Do","date"),
// ALIASES
I("date","D"),
// PRIOROITY
L("date",9),
// PARSING
Y("D",Kd),Y("DD",Kd,Gd),Y("Do",function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),aa(["D","DD"],$d),aa("Do",function(a,b){b[$d]=t(a.match(Kd)[0],10)});
// MOMENTS
var Me=N("Date",!0);
// FORMATTING
T("DDD",["DDDD",3],"DDDo","dayOfYear"),
// ALIASES
I("dayOfYear","DDD"),
// PRIORITY
L("dayOfYear",4),
// PARSING
Y("DDD",Nd),Y("DDDD",Hd),aa(["DDD","DDDD"],function(a,b,c){c._dayOfYear=t(a)}),
// FORMATTING
T("m",["mm",2],0,"minute"),
// ALIASES
I("minute","m"),
// PRIORITY
L("minute",14),
// PARSING
Y("m",Kd),Y("mm",Kd,Gd),aa(["m","mm"],ae);
// MOMENTS
var Ne=N("Minutes",!1);
// FORMATTING
T("s",["ss",2],0,"second"),
// ALIASES
I("second","s"),
// PRIORITY
L("second",15),
// PARSING
Y("s",Kd),Y("ss",Kd,Gd),aa(["s","ss"],be);
// MOMENTS
var Oe=N("Seconds",!1);
// FORMATTING
T("S",0,0,function(){return~~(this.millisecond()/100)}),T(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),T(0,["SSS",3],0,"millisecond"),T(0,["SSSS",4],0,function(){return 10*this.millisecond()}),T(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),T(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),T(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),T(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),T(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),
// ALIASES
I("millisecond","ms"),
// PRIORITY
L("millisecond",16),
// PARSING
Y("S",Nd,Fd),Y("SS",Nd,Gd),Y("SSS",Nd,Hd);var Pe;for(Pe="SSSS";Pe.length<=9;Pe+="S")Y(Pe,Qd);for(Pe="S";Pe.length<=9;Pe+="S")aa(Pe,Gc);
// MOMENTS
var Qe=N("Milliseconds",!1);
// FORMATTING
T("z",0,0,"zoneAbbr"),T("zz",0,0,"zoneName");var Re=q.prototype;Re.add=Je,Re.calendar=Ub,Re.clone=Vb,Re.diff=ac,Re.endOf=mc,Re.format=ec,Re.from=fc,Re.fromNow=gc,Re.to=hc,Re.toNow=ic,Re.get=Q,Re.invalidAt=vc,Re.isAfter=Wb,Re.isBefore=Xb,Re.isBetween=Yb,Re.isSame=Zb,Re.isSameOrAfter=$b,Re.isSameOrBefore=_b,Re.isValid=tc,Re.lang=Le,Re.locale=jc,Re.localeData=kc,Re.max=Ee,Re.min=De,Re.parsingFlags=uc,Re.set=R,Re.startOf=lc,Re.subtract=Ke,Re.toArray=qc,Re.toObject=rc,Re.toDate=pc,Re.toISOString=dc,Re.toJSON=sc,Re.toString=cc,Re.unix=oc,Re.valueOf=nc,Re.creationData=wc,
// Year
Re.year=ke,Re.isLeapYear=qa,
// Week Year
Re.weekYear=yc,Re.isoWeekYear=zc,
// Quarter
Re.quarter=Re.quarters=Ec,
// Month
Re.month=ja,Re.daysInMonth=ka,
// Week
Re.week=Re.weeks=Aa,Re.isoWeek=Re.isoWeeks=Ba,Re.weeksInYear=Bc,Re.isoWeeksInYear=Ac,
// Day
Re.date=Me,Re.day=Re.days=Ja,Re.weekday=Ka,Re.isoWeekday=La,Re.dayOfYear=Fc,
// Hour
Re.hour=Re.hours=ue,
// Minute
Re.minute=Re.minutes=Ne,
// Second
Re.second=Re.seconds=Oe,
// Millisecond
Re.millisecond=Re.milliseconds=Qe,
// Offset
Re.utcOffset=Cb,Re.utc=Eb,Re.local=Fb,Re.parseZone=Gb,Re.hasAlignedHourOffset=Hb,Re.isDST=Ib,Re.isLocal=Kb,Re.isUtcOffset=Lb,Re.isUtc=Mb,Re.isUTC=Mb,
// Timezone
Re.zoneAbbr=Hc,Re.zoneName=Ic,
// Deprecations
Re.dates=w("dates accessor is deprecated. Use date instead.",Me),Re.months=w("months accessor is deprecated. Use month instead",ja),Re.years=w("years accessor is deprecated. Use year instead",ke),Re.zone=w("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",Db),Re.isDSTShifted=w("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",Jb);var Se=Re,Te=B.prototype;Te.calendar=C,Te.longDateFormat=D,Te.invalidDate=E,Te.ordinal=F,Te.preparse=Lc,Te.postformat=Lc,Te.relativeTime=G,Te.pastFuture=H,Te.set=z,
// Month
Te.months=ea,Te.monthsShort=fa,Te.monthsParse=ha,Te.monthsRegex=ma,Te.monthsShortRegex=la,
// Week
Te.week=xa,Te.firstDayOfYear=za,Te.firstDayOfWeek=ya,
// Day of Week
Te.weekdays=Ea,Te.weekdaysMin=Ga,Te.weekdaysShort=Fa,Te.weekdaysParse=Ia,Te.weekdaysRegex=Ma,Te.weekdaysShortRegex=Na,Te.weekdaysMinRegex=Oa,
// Hours
Te.isPM=Ua,Te.meridiem=Va,Za("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===t(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),
// Side effect imports
a.lang=w("moment.lang is deprecated. Use moment.locale instead.",Za),a.langData=w("moment.langData is deprecated. Use moment.localeData instead.",ab);var Ue=Math.abs,Ve=cd("ms"),We=cd("s"),Xe=cd("m"),Ye=cd("h"),Ze=cd("d"),$e=cd("w"),_e=cd("M"),af=cd("y"),bf=ed("milliseconds"),cf=ed("seconds"),df=ed("minutes"),ef=ed("hours"),ff=ed("days"),gf=ed("months"),hf=ed("years"),jf=Math.round,kf={s:45,// seconds to minute
m:45,// minutes to hour
h:22,// hours to day
d:26,// days to month
M:11},lf=Math.abs,mf=vb.prototype;mf.abs=Uc,mf.add=Wc,mf.subtract=Xc,mf.as=ad,mf.asMilliseconds=Ve,mf.asSeconds=We,mf.asMinutes=Xe,mf.asHours=Ye,mf.asDays=Ze,mf.asWeeks=$e,mf.asMonths=_e,mf.asYears=af,mf.valueOf=bd,mf._bubble=Zc,mf.get=dd,mf.milliseconds=bf,mf.seconds=cf,mf.minutes=df,mf.hours=ef,mf.days=ff,mf.weeks=fd,mf.months=gf,mf.years=hf,mf.humanize=kd,mf.toISOString=ld,mf.toString=ld,mf.toJSON=ld,mf.locale=jc,mf.localeData=kc,
// Deprecations
mf.toIsoString=w("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",ld),mf.lang=Le,
// Side effect imports
// FORMATTING
T("X",0,0,"unix"),T("x",0,0,"valueOf"),
// PARSING
Y("x",Rd),Y("X",Ud),aa("X",function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),aa("x",function(a,b,c){c._d=new Date(t(a))}),
// Side effect imports
a.version="2.15.1",b(rb),a.fn=Se,a.min=tb,a.max=ub,a.now=Fe,a.utc=j,a.unix=Jc,a.months=Pc,a.isDate=f,a.locale=Za,a.invalid=n,a.duration=Nb,a.isMoment=r,a.weekdays=Rc,a.parseZone=Kc,a.localeData=ab,a.isDuration=wb,a.monthsShort=Qc,a.weekdaysMin=Tc,a.defineLocale=$a,a.updateLocale=_a,a.locales=bb,a.weekdaysShort=Sc,a.normalizeUnits=J,a.relativeTimeRounding=id,a.relativeTimeThreshold=jd,a.calendarFormat=Tb,a.prototype=Se;var nf=a;return nf});
/*!
 * UAParser.js v0.7.18
 * Lightweight JavaScript-based User-Agent string parser
 * https://github.com/faisalman/ua-parser-js
 *
 * Copyright © 2012-2016 Faisal Salman <fyzlman@gmail.com>
 * Dual licensed under GPLv2 or MIT
 */
(function(window,undefined){"use strict";var LIBVERSION="0.7.18",EMPTY="",UNKNOWN="?",FUNC_TYPE="function",UNDEF_TYPE="undefined",OBJ_TYPE="object",STR_TYPE="string",MAJOR="major",MODEL="model",NAME="name",TYPE="type",VENDOR="vendor",VERSION="version",ARCHITECTURE="architecture",CONSOLE="console",MOBILE="mobile",TABLET="tablet",SMARTTV="smarttv",WEARABLE="wearable",EMBEDDED="embedded";var util={extend:function(regexes,extensions){var margedRegexes={};for(var i in regexes){if(extensions[i]&&extensions[i].length%2===0){margedRegexes[i]=extensions[i].concat(regexes[i])}else{margedRegexes[i]=regexes[i]}}return margedRegexes},has:function(str1,str2){if(typeof str1==="string"){return str2.toLowerCase().indexOf(str1.toLowerCase())!==-1}else{return false}},lowerize:function(str){return str.toLowerCase()},major:function(version){return typeof version===STR_TYPE?version.replace(/[^\d\.]/g,"").split(".")[0]:undefined},trim:function(str){return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}};var mapper={rgx:function(ua,arrays){var i=0,j,k,p,q,matches,match;while(i<arrays.length&&!matches){var regex=arrays[i],props=arrays[i+1];j=k=0;while(j<regex.length&&!matches){matches=regex[j++].exec(ua);if(!!matches){for(p=0;p<props.length;p++){match=matches[++k];q=props[p];if(typeof q===OBJ_TYPE&&q.length>0){if(q.length==2){if(typeof q[1]==FUNC_TYPE){this[q[0]]=q[1].call(this,match)}else{this[q[0]]=q[1]}}else if(q.length==3){if(typeof q[1]===FUNC_TYPE&&!(q[1].exec&&q[1].test)){this[q[0]]=match?q[1].call(this,match,q[2]):undefined}else{this[q[0]]=match?match.replace(q[1],q[2]):undefined}}else if(q.length==4){this[q[0]]=match?q[3].call(this,match.replace(q[1],q[2])):undefined}}else{this[q]=match?match:undefined}}}}i+=2}},str:function(str,map){for(var i in map){if(typeof map[i]===OBJ_TYPE&&map[i].length>0){for(var j=0;j<map[i].length;j++){if(util.has(map[i][j],str)){return i===UNKNOWN?undefined:i}}}else if(util.has(map[i],str)){return i===UNKNOWN?undefined:i}}return str}};var maps={browser:{oldsafari:{version:{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}}},device:{amazon:{model:{"Fire Phone":["SD","KF"]}},sprint:{model:{"Evo Shift 4G":"7373KT"},vendor:{HTC:"APA",Sprint:"Sprint"}}},os:{windows:{version:{ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2000:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"}}}};var regexes={browser:[[/(opera\smini)\/([\w\.-]+)/i,/(opera\s[mobiletab]+).+version\/([\w\.-]+)/i,/(opera).+version\/([\w\.]+)/i,/(opera)[\/\s]+([\w\.]+)/i],[NAME,VERSION],[/(opios)[\/\s]+([\w\.]+)/i],[[NAME,"Opera Mini"],VERSION],[/\s(opr)\/([\w\.]+)/i],[[NAME,"Opera"],VERSION],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]*)/i,/(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?([\w\.]*)/i,/(?:ms|\()(ie)\s([\w\.]+)/i,/(rekonq)\/([\w\.]*)/i,/(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark)\/([\w\.-]+)/i],[NAME,VERSION],[/(trident).+rv[:\s]([\w\.]+).+like\sgecko/i],[[NAME,"IE"],VERSION],[/(edge|edgios|edgea)\/((\d+)?[\w\.]+)/i],[[NAME,"Edge"],VERSION],[/(yabrowser)\/([\w\.]+)/i],[[NAME,"Yandex"],VERSION],[/(puffin)\/([\w\.]+)/i],[[NAME,"Puffin"],VERSION],[/((?:[\s\/])uc?\s?browser|(?:juc.+)ucweb)[\/\s]?([\w\.]+)/i],[[NAME,"UCBrowser"],VERSION],[/(comodo_dragon)\/([\w\.]+)/i],[[NAME,/_/g," "],VERSION],[/(micromessenger)\/([\w\.]+)/i],[[NAME,"WeChat"],VERSION],[/(qqbrowserlite)\/([\w\.]+)/i],[NAME,VERSION],[/(QQ)\/([\d\.]+)/i],[NAME,VERSION],[/m?(qqbrowser)[\/\s]?([\w\.]+)/i],[NAME,VERSION],[/(BIDUBrowser)[\/\s]?([\w\.]+)/i],[NAME,VERSION],[/(2345Explorer)[\/\s]?([\w\.]+)/i],[NAME,VERSION],[/(MetaSr)[\/\s]?([\w\.]+)/i],[NAME],[/(LBBROWSER)/i],[NAME],[/xiaomi\/miuibrowser\/([\w\.]+)/i],[VERSION,[NAME,"MIUI Browser"]],[/;fbav\/([\w\.]+);/i],[VERSION,[NAME,"Facebook"]],[/headlesschrome(?:\/([\w\.]+)|\s)/i],[VERSION,[NAME,"Chrome Headless"]],[/\swv\).+(chrome)\/([\w\.]+)/i],[[NAME,/(.+)/,"$1 WebView"],VERSION],[/((?:oculus|samsung)browser)\/([\w\.]+)/i],[[NAME,/(.+(?:g|us))(.+)/,"$1 $2"],VERSION],[/android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i],[VERSION,[NAME,"Android Browser"]],[/(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i],[NAME,VERSION],[/(dolfin)\/([\w\.]+)/i],[[NAME,"Dolphin"],VERSION],[/((?:android.+)crmo|crios)\/([\w\.]+)/i],[[NAME,"Chrome"],VERSION],[/(coast)\/([\w\.]+)/i],[[NAME,"Opera Coast"],VERSION],[/fxios\/([\w\.-]+)/i],[VERSION,[NAME,"Firefox"]],[/version\/([\w\.]+).+?mobile\/\w+\s(safari)/i],[VERSION,[NAME,"Mobile Safari"]],[/version\/([\w\.]+).+?(mobile\s?safari|safari)/i],[VERSION,NAME],[/webkit.+?(gsa)\/([\w\.]+).+?(mobile\s?safari|safari)(\/[\w\.]+)/i],[[NAME,"GSA"],VERSION],[/webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i],[NAME,[VERSION,mapper.str,maps.browser.oldsafari.version]],[/(konqueror)\/([\w\.]+)/i,/(webkit|khtml)\/([\w\.]+)/i],[NAME,VERSION],[/(navigator|netscape)\/([\w\.-]+)/i],[[NAME,"Netscape"],VERSION],[/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,/(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([\w\.-]+)$/i,/(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,/(links)\s\(([\w\.]+)/i,/(gobrowser)\/?([\w\.]*)/i,/(ice\s?browser)\/v?([\w\._]+)/i,/(mosaic)[\/\s]([\w\.]+)/i],[NAME,VERSION]],cpu:[[/(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i],[[ARCHITECTURE,"amd64"]],[/(ia32(?=;))/i],[[ARCHITECTURE,util.lowerize]],[/((?:i[346]|x)86)[;\)]/i],[[ARCHITECTURE,"ia32"]],[/windows\s(ce|mobile);\sppc;/i],[[ARCHITECTURE,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i],[[ARCHITECTURE,/ower/,"",util.lowerize]],[/(sun4\w)[;\)]/i],[[ARCHITECTURE,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+;))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i],[[ARCHITECTURE,util.lowerize]]],device:[[/\((ipad|playbook);[\w\s\);-]+(rim|apple)/i],[MODEL,VENDOR,[TYPE,TABLET]],[/applecoremedia\/[\w\.]+ \((ipad)/],[MODEL,[VENDOR,"Apple"],[TYPE,TABLET]],[/(apple\s{0,1}tv)/i],[[MODEL,"Apple TV"],[VENDOR,"Apple"]],[/(archos)\s(gamepad2?)/i,/(hp).+(touchpad)/i,/(hp).+(tablet)/i,/(kindle)\/([\w\.]+)/i,/\s(nook)[\w\s]+build\/(\w+)/i,/(dell)\s(strea[kpr\s\d]*[\dko])/i],[VENDOR,MODEL,[TYPE,TABLET]],[/(kf[A-z]+)\sbuild\/.+silk\//i],[MODEL,[VENDOR,"Amazon"],[TYPE,TABLET]],[/(sd|kf)[0349hijorstuw]+\sbuild\/.+silk\//i],[[MODEL,mapper.str,maps.device.amazon.model],[VENDOR,"Amazon"],[TYPE,MOBILE]],[/\((ip[honed|\s\w*]+);.+(apple)/i],[MODEL,VENDOR,[TYPE,MOBILE]],[/\((ip[honed|\s\w*]+);/i],[MODEL,[VENDOR,"Apple"],[TYPE,MOBILE]],[/(blackberry)[\s-]?(\w+)/i,/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[\s_-]?([\w-]*)/i,/(hp)\s([\w\s]+\w)/i,/(asus)-?(\w+)/i],[VENDOR,MODEL,[TYPE,MOBILE]],[/\(bb10;\s(\w+)/i],[MODEL,[VENDOR,"BlackBerry"],[TYPE,MOBILE]],[/android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone)/i],[MODEL,[VENDOR,"Asus"],[TYPE,TABLET]],[/(sony)\s(tablet\s[ps])\sbuild\//i,/(sony)?(?:sgp.+)\sbuild\//i],[[VENDOR,"Sony"],[MODEL,"Xperia Tablet"],[TYPE,TABLET]],[/android.+\s([c-g]\d{4}|so[-l]\w+)\sbuild\//i],[MODEL,[VENDOR,"Sony"],[TYPE,MOBILE]],[/\s(ouya)\s/i,/(nintendo)\s([wids3u]+)/i],[VENDOR,MODEL,[TYPE,CONSOLE]],[/android.+;\s(shield)\sbuild/i],[MODEL,[VENDOR,"Nvidia"],[TYPE,CONSOLE]],[/(playstation\s[34portablevi]+)/i],[MODEL,[VENDOR,"Sony"],[TYPE,CONSOLE]],[/(sprint\s(\w+))/i],[[VENDOR,mapper.str,maps.device.sprint.vendor],[MODEL,mapper.str,maps.device.sprint.model],[TYPE,MOBILE]],[/(lenovo)\s?(S(?:5000|6000)+(?:[-][\w+]))/i],[VENDOR,MODEL,[TYPE,TABLET]],[/(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i,/(zte)-(\w*)/i,/(alcatel|geeksphone|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]*)/i],[VENDOR,[MODEL,/_/g," "],[TYPE,MOBILE]],[/(nexus\s9)/i],[MODEL,[VENDOR,"HTC"],[TYPE,TABLET]],[/d\/huawei([\w\s-]+)[;\)]/i,/(nexus\s6p)/i],[MODEL,[VENDOR,"Huawei"],[TYPE,MOBILE]],[/(microsoft);\s(lumia[\s\w]+)/i],[VENDOR,MODEL,[TYPE,MOBILE]],[/[\s\(;](xbox(?:\sone)?)[\s\);]/i],[MODEL,[VENDOR,"Microsoft"],[TYPE,CONSOLE]],[/(kin\.[onetw]{3})/i],[[MODEL,/\./g," "],[VENDOR,"Microsoft"],[TYPE,MOBILE]],[/\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?:?(\s4g)?)[\w\s]+build\//i,/mot[\s-]?(\w*)/i,/(XT\d{3,4}) build\//i,/(nexus\s6)/i],[MODEL,[VENDOR,"Motorola"],[TYPE,MOBILE]],[/android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i],[MODEL,[VENDOR,"Motorola"],[TYPE,TABLET]],[/hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i],[[VENDOR,util.trim],[MODEL,util.trim],[TYPE,SMARTTV]],[/hbbtv.+maple;(\d+)/i],[[MODEL,/^/,"SmartTV"],[VENDOR,"Samsung"],[TYPE,SMARTTV]],[/\(dtv[\);].+(aquos)/i],[MODEL,[VENDOR,"Sharp"],[TYPE,SMARTTV]],[/android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i,/((SM-T\w+))/i],[[VENDOR,"Samsung"],MODEL,[TYPE,TABLET]],[/smart-tv.+(samsung)/i],[VENDOR,[TYPE,SMARTTV],MODEL],[/((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i,/(sam[sung]*)[\s-]*(\w+-?[\w-]*)/i,/sec-((sgh\w+))/i],[[VENDOR,"Samsung"],MODEL,[TYPE,MOBILE]],[/sie-(\w*)/i],[MODEL,[VENDOR,"Siemens"],[TYPE,MOBILE]],[/(maemo|nokia).*(n900|lumia\s\d+)/i,/(nokia)[\s_-]?([\w-]*)/i],[[VENDOR,"Nokia"],MODEL,[TYPE,MOBILE]],[/android\s3\.[\s\w;-]{10}(a\d{3})/i],[MODEL,[VENDOR,"Acer"],[TYPE,TABLET]],[/android.+([vl]k\-?\d{3})\s+build/i],[MODEL,[VENDOR,"LG"],[TYPE,TABLET]],[/android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i],[[VENDOR,"LG"],MODEL,[TYPE,TABLET]],[/(lg) netcast\.tv/i],[VENDOR,MODEL,[TYPE,SMARTTV]],[/(nexus\s[45])/i,/lg[e;\s\/-]+(\w*)/i,/android.+lg(\-?[\d\w]+)\s+build/i],[MODEL,[VENDOR,"LG"],[TYPE,MOBILE]],[/android.+(ideatab[a-z0-9\-\s]+)/i],[MODEL,[VENDOR,"Lenovo"],[TYPE,TABLET]],[/linux;.+((jolla));/i],[VENDOR,MODEL,[TYPE,MOBILE]],[/((pebble))app\/[\d\.]+\s/i],[VENDOR,MODEL,[TYPE,WEARABLE]],[/android.+;\s(oppo)\s?([\w\s]+)\sbuild/i],[VENDOR,MODEL,[TYPE,MOBILE]],[/crkey/i],[[MODEL,"Chromecast"],[VENDOR,"Google"]],[/android.+;\s(glass)\s\d/i],[MODEL,[VENDOR,"Google"],[TYPE,WEARABLE]],[/android.+;\s(pixel c)\s/i],[MODEL,[VENDOR,"Google"],[TYPE,TABLET]],[/android.+;\s(pixel xl|pixel)\s/i],[MODEL,[VENDOR,"Google"],[TYPE,MOBILE]],[/android.+;\s(\w+)\s+build\/hm\1/i,/android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i,/android.+(mi[\s\-_]*(?:one|one[\s_]plus|note lte)?[\s_]*(?:\d?\w?)[\s_]*(?:plus)?)\s+build/i,/android.+(redmi[\s\-_]*(?:note)?(?:[\s_]*[\w\s]+))\s+build/i],[[MODEL,/_/g," "],[VENDOR,"Xiaomi"],[TYPE,MOBILE]],[/android.+(mi[\s\-_]*(?:pad)(?:[\s_]*[\w\s]+))\s+build/i],[[MODEL,/_/g," "],[VENDOR,"Xiaomi"],[TYPE,TABLET]],[/android.+;\s(m[1-5]\snote)\sbuild/i],[MODEL,[VENDOR,"Meizu"],[TYPE,TABLET]],[/android.+a000(1)\s+build/i,/android.+oneplus\s(a\d{4})\s+build/i],[MODEL,[VENDOR,"OnePlus"],[TYPE,MOBILE]],[/android.+[;\/]\s*(RCT[\d\w]+)\s+build/i],[MODEL,[VENDOR,"RCA"],[TYPE,TABLET]],[/android.+[;\/\s]+(Venue[\d\s]{2,7})\s+build/i],[MODEL,[VENDOR,"Dell"],[TYPE,TABLET]],[/android.+[;\/]\s*(Q[T|M][\d\w]+)\s+build/i],[MODEL,[VENDOR,"Verizon"],[TYPE,TABLET]],[/android.+[;\/]\s+(Barnes[&\s]+Noble\s+|BN[RT])(V?.*)\s+build/i],[[VENDOR,"Barnes & Noble"],MODEL,[TYPE,TABLET]],[/android.+[;\/]\s+(TM\d{3}.*\b)\s+build/i],[MODEL,[VENDOR,"NuVision"],[TYPE,TABLET]],[/android.+;\s(k88)\sbuild/i],[MODEL,[VENDOR,"ZTE"],[TYPE,TABLET]],[/android.+[;\/]\s*(gen\d{3})\s+build.*49h/i],[MODEL,[VENDOR,"Swiss"],[TYPE,MOBILE]],[/android.+[;\/]\s*(zur\d{3})\s+build/i],[MODEL,[VENDOR,"Swiss"],[TYPE,TABLET]],[/android.+[;\/]\s*((Zeki)?TB.*\b)\s+build/i],[MODEL,[VENDOR,"Zeki"],[TYPE,TABLET]],[/(android).+[;\/]\s+([YR]\d{2})\s+build/i,/android.+[;\/]\s+(Dragon[\-\s]+Touch\s+|DT)(\w{5})\sbuild/i],[[VENDOR,"Dragon Touch"],MODEL,[TYPE,TABLET]],[/android.+[;\/]\s*(NS-?\w{0,9})\sbuild/i],[MODEL,[VENDOR,"Insignia"],[TYPE,TABLET]],[/android.+[;\/]\s*((NX|Next)-?\w{0,9})\s+build/i],[MODEL,[VENDOR,"NextBook"],[TYPE,TABLET]],[/android.+[;\/]\s*(Xtreme\_)?(V(1[045]|2[015]|30|40|60|7[05]|90))\s+build/i],[[VENDOR,"Voice"],MODEL,[TYPE,MOBILE]],[/android.+[;\/]\s*(LVTEL\-)?(V1[12])\s+build/i],[[VENDOR,"LvTel"],MODEL,[TYPE,MOBILE]],[/android.+[;\/]\s*(V(100MD|700NA|7011|917G).*\b)\s+build/i],[MODEL,[VENDOR,"Envizen"],[TYPE,TABLET]],[/android.+[;\/]\s*(Le[\s\-]+Pan)[\s\-]+(\w{1,9})\s+build/i],[VENDOR,MODEL,[TYPE,TABLET]],[/android.+[;\/]\s*(Trio[\s\-]*.*)\s+build/i],[MODEL,[VENDOR,"MachSpeed"],[TYPE,TABLET]],[/android.+[;\/]\s*(Trinity)[\-\s]*(T\d{3})\s+build/i],[VENDOR,MODEL,[TYPE,TABLET]],[/android.+[;\/]\s*TU_(1491)\s+build/i],[MODEL,[VENDOR,"Rotor"],[TYPE,TABLET]],[/android.+(KS(.+))\s+build/i],[MODEL,[VENDOR,"Amazon"],[TYPE,TABLET]],[/android.+(Gigaset)[\s\-]+(Q\w{1,9})\s+build/i],[VENDOR,MODEL,[TYPE,TABLET]],[/\s(tablet|tab)[;\/]/i,/\s(mobile)(?:[;\/]|\ssafari)/i],[[TYPE,util.lowerize],VENDOR,MODEL],[/(android[\w\.\s\-]{0,9});.+build/i],[MODEL,[VENDOR,"Generic"]]],engine:[[/windows.+\sedge\/([\w\.]+)/i],[VERSION,[NAME,"EdgeHTML"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m)\/([\w\.]+)/i,/(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,/(icab)[\/\s]([23]\.[\d\.]+)/i],[NAME,VERSION],[/rv\:([\w\.]{1,9}).+(gecko)/i],[VERSION,NAME]],os:[[/microsoft\s(windows)\s(vista|xp)/i],[NAME,VERSION],[/(windows)\snt\s6\.2;\s(arm)/i,/(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s\w]*)/i,/(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i],[NAME,[VERSION,mapper.str,maps.os.windows.version]],[/(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i],[[NAME,"Windows"],[VERSION,mapper.str,maps.os.windows.version]],[/\((bb)(10);/i],[[NAME,"BlackBerry"],VERSION],[/(blackberry)\w*\/?([\w\.]*)/i,/(tizen)[\/\s]([\w\.]+)/i,/(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|contiki)[\/\s-]?([\w\.]*)/i,/linux;.+(sailfish);/i],[NAME,VERSION],[/(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]*)/i],[[NAME,"Symbian"],VERSION],[/\((series40);/i],[NAME],[/mozilla.+\(mobile;.+gecko.+firefox/i],[[NAME,"Firefox OS"],VERSION],[/(nintendo|playstation)\s([wids34portablevu]+)/i,/(mint)[\/\s\(]?(\w*)/i,/(mageia|vectorlinux)[;\s]/i,/(joli|[kxln]?ubuntu|debian|suse|opensuse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?(?!chrom)([\w\.-]*)/i,/(hurd|linux)\s?([\w\.]*)/i,/(gnu)\s?([\w\.]*)/i],[NAME,VERSION],[/(cros)\s[\w]+\s([\w\.]+\w)/i],[[NAME,"Chromium OS"],VERSION],[/(sunos)\s?([\w\.\d]*)/i],[[NAME,"Solaris"],VERSION],[/\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]*)/i],[NAME,VERSION],[/(haiku)\s(\w+)/i],[NAME,VERSION],[/cfnetwork\/.+darwin/i,/ip[honead]{2,4}(?:.*os\s([\w]+)\slike\smac|;\sopera)/i],[[VERSION,/_/g,"."],[NAME,"iOS"]],[/(mac\sos\sx)\s?([\w\s\.]*)/i,/(macintosh|mac(?=_powerpc)\s)/i],[[NAME,"Mac OS"],[VERSION,/_/g,"."]],[/((?:open)?solaris)[\/\s-]?([\w\.]*)/i,/(aix)\s((\d)(?=\.|\)|\s)[\w\.])*/i,/(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms)/i,/(unix)\s?([\w\.]*)/i],[NAME,VERSION]]};var UAParser=function(uastring,extensions){if(typeof uastring==="object"){extensions=uastring;uastring=undefined}if(!(this instanceof UAParser)){return new UAParser(uastring,extensions).getResult()}var ua=uastring||(window&&window.navigator&&window.navigator.userAgent?window.navigator.userAgent:EMPTY);var rgxmap=extensions?util.extend(regexes,extensions):regexes;this.getBrowser=function(){var browser={name:undefined,version:undefined};mapper.rgx.call(browser,ua,rgxmap.browser);browser.major=util.major(browser.version);return browser};this.getCPU=function(){var cpu={architecture:undefined};mapper.rgx.call(cpu,ua,rgxmap.cpu);return cpu};this.getDevice=function(){var device={vendor:undefined,model:undefined,type:undefined};mapper.rgx.call(device,ua,rgxmap.device);return device};this.getEngine=function(){var engine={name:undefined,version:undefined};mapper.rgx.call(engine,ua,rgxmap.engine);return engine};this.getOS=function(){var os={name:undefined,version:undefined};mapper.rgx.call(os,ua,rgxmap.os);return os};this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}};this.getUA=function(){return ua};this.setUA=function(uastring){ua=uastring;return this};return this};UAParser.VERSION=LIBVERSION;UAParser.BROWSER={NAME:NAME,MAJOR:MAJOR,VERSION:VERSION};UAParser.CPU={ARCHITECTURE:ARCHITECTURE};UAParser.DEVICE={MODEL:MODEL,VENDOR:VENDOR,TYPE:TYPE,CONSOLE:CONSOLE,MOBILE:MOBILE,SMARTTV:SMARTTV,TABLET:TABLET,WEARABLE:WEARABLE,EMBEDDED:EMBEDDED};UAParser.ENGINE={NAME:NAME,VERSION:VERSION};UAParser.OS={NAME:NAME,VERSION:VERSION};if(typeof exports!==UNDEF_TYPE){if(typeof module!==UNDEF_TYPE&&module.exports){exports=module.exports=UAParser}exports.UAParser=UAParser}else{if(typeof define===FUNC_TYPE&&define.amd){define('ua-parser.min',[],function(){return UAParser})}else if(window){window.UAParser=UAParser}}var $=window&&(window.jQuery||window.Zepto);if(typeof $!==UNDEF_TYPE){var parser=new UAParser;$.ua=parser.getResult();$.ua.get=function(){return parser.getUA()};$.ua.set=function(uastring){parser.setUA(uastring);var result=parser.getResult();for(var prop in result){$.ua[prop]=result[prop]}}}})(typeof window==="object"?window:this);
// avoid logging error in IE
if ( ! window.console ) console = { log: function(){}, error: function(){} };

var PaidActivityRedirectGlobal = null;
var miOpened = false;
var globalCityPass;
var longDistanceMethod;
var moment;

require(
	    [
	        "app/extensions/core/paidActivityRedirect"
	    ],
	    function(PaidActivityRedirect){	
	    	PaidActivityRedirectGlobal = PaidActivityRedirect;
	    }
);

//inintialize moment
require(
	    [
	        "moment.min"
	    ],
	    function(){	
	    	moment = require('moment.min');
			moment().format();
	    }
);



// handle general tasks
$(document).ready(function() {
	try {
		if (ieVersion != null && ieVersion < 9) {
			window.location = appRoot + "/upgradeBrowser";
		}
	} catch(e){}
	
	// log usage
	logFirstUsage();
	
	// cut texts
	cutElemTexts();
	
	// fix fonts in description
	$("#divDescription").find("*").not("div")
		.css("font-size", "")
		.css("line-height", "")
		.css("font-family", "");
	
	// load large images
	window.setTimeout("loadImagesDelayed()", 10);
	
	// set copyright attributes on images
	setImgCopyright();
	
	// fix place holders
	fixPlaceHolders();
	
	// fix currency
	require(
		    [
		        "app/extensions/core/currency",
		    ],
		    function(CurrencyMgr){	
		    	var currencyMgr = new CurrencyMgr();
		    	currencyMgr.fixCurrencyElements();
		    }
	);
	
	// to be used to shoot events we got from earlier pages like email redirect
	handleDefferedEvent();
	handleDefferedLocalEvent();
	
	// open signup if required (usually by email)
});

// ensure user login
function logPageLoaded() {
	require(["app/core/login"],
			function(LoginMgr) {	
	    		// log campaign data
	    		logCampaignData();
	    		logGoogleUserId();
	    		// fire local event
	    		fireLocalEvent("Page", "Load", null, null, true);
	    		
	    		// fire event upon cdn failure
	    		var disablecdnParam = getParam('disablecdn');
	    		if (disablecdnParam != null) {
	    			fireEvent("Error", "cdn failure");
	    		}
		    }
	);
}
logPageLoaded();

function logCampaignData() {
	// add ads data
	var gclid = getParam('gclid');
	var utmParam = getParam('utm_source');
	if(gclid){
	    var gclsrc = getParam('gclsrc');
	    if(!gclsrc || gclsrc.indexOf('aw') !== -1){
	    	createCookie('gclid', gclid, 90);
	    	fireLocalEvent("USER", "gclid", gclid, "", true).done(function(eventRecordId) {
	    		createCookie('gclid_event_record', eventRecordId, 90);
	    	});
		}
	}	
	else if (utmParam) {
		var data = window.location.search;
    	fireLocalEvent("USER", "gclid", data, "", true).done(function(eventRecordId) {
    		createCookie('gclid_event_record', eventRecordId, 90);
    	});
	}	
}

function logGoogleUserId() {
	var gaClientCookie = readCookie('ga_client_id');
	if (gaClientCookie == null || gaClientCookie.length == 0) {
		ga(function(tracker) {
			var clientId = tracker.get('clientId');
		    fireLocalEvent("USER", "ga_client_id", clientId, "", true).done(function(eventRecordId) {
		    	createCookie('ga_client_id', eventRecordId, 90);
		    });
		});
	}
}

function getMinTimeDeferred(timeMili) {
	var deferred = new $.Deferred(); 
	
	window.setTimeout(function() {
		deferred.resolve();
	}, timeMili);
	
	return deferred;
}

function logFirstUsage() {
	//if (localStorage.getItem("first_usage_time") == null) {
	//	localStorage.setItem("first_usage_time", new Date().getTime());
	//}
	if (wrapGetLocalStorage("first_usage_time") == null) {
		wrapSetLocalStorage("first_usage_time", new Date().getTime());
	}
}

function getFirstUsage() {
	return localStorage.getItem("first_usage_time");
}

function wrapGetLocalStorage(name) {
	if (hasStorage) {
	    return localStorage.getItem(name);
	} else if (hasCookies) {
		return readCookie(name);
	} else {
		//in case cookies and local storage and not enabled
		return window[name];
	}
}

function wrapSetLocalStorage(name,value) {
	if (hasStorage) {
		localStorage.setItem(name, value);
	} else if (hasCookies) {
		createCookie(name,value);
	} else {
		//in case cookies and local storage and not enabled (use a variable)
		window[name] = value;
	}
} 

function wrapRemoveLocalStorage(name) {
	if (hasStorage) {
		localStorage.removeItem(name);
	} else {
		eraseCookie(name);
	}
}

//Check local storage available

var hasCookies = true;
try {
	hasCookies = navigator.cookieEnabled;
} catch (exception) {
	hasCookies = false;
}

var hasStorage = (function() {
	try {
		localStorage.setItem("tls", "tls");
		localStorage.removeItem("tls");
		return true;
	} catch (exception) {
		return false;
	}
}());

function getParam(p){
    var match = RegExp('[?&]' + p + '=([^&]*)').exec(window.location.search);
    return match && decodeURIComponent(match[1].replace(/\+/g, ' '));
}

function fixPlaceHolders() {
    if (detectIE() == -1) {
    	return;
    }
    
    $('[placeholder]')
    	.focus(function() {
    	  var input = $(this);
    	  if (input.val() == input.attr('placeholder')) {
    	    input.val('');
    	    input.removeClass('placeholder');
    	  }
    	}).blur(function() {
    	  var input = $(this);
    	  if (input.val() == '' || input.val() == input.attr('placeholder')) {
    	    input.addClass('placeholder');
    	    input.val(input.attr('placeholder'));
    	  }
    	}).blur();
}

function setImgCopyright() {
	$("img[creditto]").each(function() {
		var creditTo = $(this).attr("creditto");
		var creditLink = $(this).attr("creditlink");		
		
		if (creditLink != null && creditLink.length > 0 && creditLink.indexOf("http:") == -1) {
			creditLink = "http://" + $.trim(creditLink);
		}
		
		var href =(creditLink != null && creditLink.length > 0) ? ("href='" + creditLink + "'") : "";
		
		if (creditTo != null && creditTo.length > 0) {
			// create div
			var html = "<div style='position: absolute;right:5px;top:5px;padding:10px'>";
			html += "<a " +  href + " target='_blank' style='font-size:10px;color:white'>© " + creditTo + "</a>";
			html += "</div>";
			
			$(this).parent().css("position", "relative");
			
			var creditDiv = $(html).appendTo($(this).parent());	
		}
	});
}

function loadImagesDelayed() {
	$("img[rel]").click(function() {
		var rel = $($(this).attr("rel")); 
		var img = rel.find("img[loadsrc]");
		img.attr("src", img.attr("loadsrc"));
		
		img.bind('load', function() {
			$(this).parent().find("img[src*='loading']").hide();
			img.show();
		});
	});
}

function cutElemTexts() {	
	$("*[cuttextchars]").each(function() {
		var text = $(this).text().replace("&nbsp;", "");
		text = $.trim(text);
		var num = $(this).attr("cuttextchars");
		
		if ($(this).attr("cutword") == "1") {
			if (text.length > num) {
				text = text.substr(0, num - 3) + "...";
			}
		}
		else {
			text = trimByChars(text,  num);
		}
		$(this).html(text);
	});
}

function getObjById(arr, id) {
	return getObjByAttrVal(arr, "id", id);
}

function getObjByAttrVal(arr, name, val, isLc) {
	if (isLc) {
		val = val.toLowerCase();
	}
	
	if (typeof(val) == "string" && val.indexOf("'") != 0 && val.indexOf("\"") != 0) {
		val = "\"" + val + "\"";
	}
	
	for (var i=0;i<arr.length;i++) {
		var b;
		var code;
		
		if (isLc) {
			code = "b=(arr[i]." + name + ".toLowerCase() ==" + val + ");"
		}
		else {
			code = "b=(arr[i]." + name + "==" + val + ");"
		}
		
		eval(code);
		if (b) {
			return arr[i];
		}
	}
	
	return null;
}

function trimByChars(sentence, num) {
	if (sentence == null)
		return "";
	
	var arr = sentence.split(" ");
	var res = "";
	var textEnd = "...";

	for (var i=0;i<arr.length;i++) {
		var tmp = res;
		if (tmp.length > 0)
			tmp += " ";
		tmp += arr[i];
		
		if ((tmp.length + textEnd.length) < num) {
			res = tmp;
		}
		else {
			res += textEnd;
			break;
		}
	}
	
	return res;
}

function loadjscssfile(filename, filetype){
	 if (filetype=="js"){ //if filename is a external JavaScript file
	  var fileref=document.createElement('script')
	  fileref.setAttribute("type","text/javascript")
	  fileref.setAttribute("src", filename)
	 }
	 else if (filetype=="css"){ //if filename is an external CSS file
	  var fileref=document.createElement("link")
	  fileref.setAttribute("rel", "stylesheet")
	  fileref.setAttribute("type", "text/css")
	  fileref.setAttribute("href", filename)
	 }
	 if (typeof fileref!="undefined")
	  document.getElementsByTagName("head")[0].appendChild(fileref)
}

function detectIE() {
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf('MSIE ');
    var trident = ua.indexOf('Trident/');

    if (msie > 0) {
        // IE 10 or older => return version number
        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
    }

    if (trident > 0) {
        // IE 11 (or newer) => return version number
        var rv = ua.indexOf('rv:');
        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
    }

    // other browser
    return -1;
}

function isTablet() {
	try {
		if( /Android|BlackBerry|iPad|Opera Mini|IEMobile/i.test(navigator.userAgent)) {
			return true;
		}	
	} catch (err) {}
	
	
	return false;
}

//need to deprecate this
function isMobile() {
	try {
		if( /Android|BlackBerry|iPad|Opera Mini|IEMobile/i.test(navigator.userAgent)) {
			return true;
		}	
	} catch (err) {}
	
	
	return false;
}

function isMobilePhone() {
	try {
		if( /Chrome Mobile|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent) ) {
			return true;
		}	
	} catch (err) {}
	
	
	return false;
}

function escapeSingleQuote(str) {
	return str.replace(/'/g, "&apos;");
}

function strNullSafe(str) {
	return str != null ? str : "";	
}

function fixSelectBehaviourInIE() {
    if (! $.browser.msie) {
    	return;
    }	
	
	var selectsFound = $("select:not([fixie='1'])");
	
	selectsFound.change(function() {
		$(this).blur();
	});
	
	selectsFound.attr("fixie", "1");
}

function fromXmlLegal(str) {
	var div = $("<div>" + str + "</div>");
	str = div.text();
	div.remove();
	return str;
}

var activitiesVendorEvt = null;
function getActivitiesVendorPath() {
	var actgyg = readCookie('expr_actgyg');
	
	if (activitiesVendorEvt == null) {
		activitiesVendorEvt = "fired";
		fireEvent("Activities", actgyg != null && actgyg == 1 ? "GYG" : "Viator");
	}
	return actgyg != null && actgyg == 1 ? "-gyg" : "";
	//return "";
}

function getWebsiteSuffix() {
	try {
		return siteVersion != null && siteVersion.length > 0 ? "-lcg" : "";
	} catch (ex) {
		return "";
	}
	
}


//////////////////////////////////////  Validation  //////////////////////////////////////////

function isEmail(email) {
    var regex = /^([a-zA-Z0-9_\.\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    if(!regex.test(email)) {
       return false;
    }else{
       return true;
    }
}	

//////////////////////////////////////Events //////////////////////////////////////////

window.onerror=function(msg, url, linenumber, column, errorObj) {
	try {
		if (url.indexOf(appRoot) > -1 || url.indexOf("visitacity.com") > -1) {
			var data =  errorObj != null && errorObj.stack != null ? errorObj.stack : "";				
			if (data.length > 3500) {
				data = data.substring(0, 3500);
			}
			
			//console.error("Error", url, linenumber + "::" + msg, data);
			//fireLocalEvent("Error", url, linenumber + "::" + msg, data, true);	
		}		
	}
	catch(e) {		
		console.log("onerror failure", e);
	}
	
	return false;
}

/*
window.onbeforeunload = function() {
	if (window.location.href.indexOf("admin") == -1) {
		fireLocalEvent("Page", "Exit");
	}
};
*/

function fireEvent(category, action, label, value, always) {
	if (window.location.href.indexOf("/admin/") > -1) {
		return;
	}
	
	//char limitation based on 
	//https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#eventAction
	if (category != null && category.length > 150) {
		category = category.substring(0, 150);
	}
	if (action != null && action.length > 500) {
		action = action.substring(0, 500);
	}
	if (label != null && label.length > 500) {
		label = label.substring(0, 500);
	}
	
	//_gaq.push(['_trackEvent', category, action, label, value]);
	ga('send', 'event', category, action, label , value, {'nonInteraction': 1});
	
	if (category == "PaidActivity") {
		fireBingEvent(category, action, label, value);
	}
	
	if (always == null) {
		always = (category == "Error");
	}
	 
	fireLocalEvent(category, action, label, value, always);
}

function fireBingEvent(category, action, label, value) {
	window.uetq = window.uetq || []; 
	window.uetq.push({
		'ec': category,
		'ea': action, 
		'el': label
	});
}

function fireLocalEvent(category, action, label, data, always) {
	var deferred = new $.Deferred();
	
	if (window.location.href.indexOf("/admin/") > -1 || always == null || always == false) {
		deferred.resolve();
		return deferred;
	}	
	
//	var enableUserTracking = localStorage.getItem("enable_user_tracking");	
//	enableUserTracking = (always != null && always) ? "1" : enableUserTracking;
//	if (enableUserTracking == null || enableUserTracking != "1") {
//		return;
//	}
	
	require(["pgwbrowser.min","ua-parser.min"],
			function(Browser,UAParser){	
		    	//if ($.pgwBrowser()) {
			    	try {
			    		var pgwBrowser = $.pgwBrowser();
			    		var uaParser = new UAParser();
			    		//alert(JSON.stringify(uaParser.getResult()));
				    	var date = new Date();
				    	var sessionId = "";
				    	var mobileStr = ""; 
				    	var envStr = "";
				    	
				    	try {
					    	mobileStr = isTablet() && uaParser.getOS().name.indexOf("iPhone") < 0 && uaParser.getBrowser().name.indexOf("Chrome Mobile") < 0 ? "tablet::" : "";
					    	envStr = mobileStr + uaParser.getOS().name + "::" + uaParser.getOS().version + ", " + uaParser.getBrowser().name + "::" + uaParser.getBrowser().version;
					    	if (envStr.indexOf("undefined") >= 0) {
					    		mobileStr = isTablet() && pgwBrowser.os.name.indexOf("iPhone") < 0 && pgwBrowser.browser.name.indexOf("Chrome Mobile") < 0 ? "tablet::" : "";
		 				    	envStr = mobileStr + pgwBrowser.os.name + "::" + pgwBrowser.os.fullVersion + ", " + pgwBrowser.browser.name + "::" + pgwBrowser.browser.fullVersion + "_pgwbrowser";
					    	}				    		
				    	}
				    	catch(e) {
				    		envStr = "raw::" + navigator.userAgent;
				    		envStr = envStr.substring(0, 249);
				    	}
				    	
				    	//console.log("mobileStr:" + mobileStr);
				    	//console.log("envStr:" + envStr);
				    	
				    	$.ajax({
				    		  url: appRoot + "/ws/logEvent",
				    		  data: { 
				    			  page: window.location.href.replace(appRoot, "").replace(appRootNoPort, ""),
				    			  category: category,
				    			  action: action,
				    			  label: label,
				    			  data: data,
				    			  clientTime: (date.getTime() - (date.getTimezoneOffset() * 60 * 1000)),
				    			  browser: (envStr ),
				    			  sessionId: sessionId,
				    			  cityId: (typeof(cityId) != "undefined" ? cityId : null)
				    		  },
				    		  type: "POST"
				    	}).done(function(id) {
				    		//window.localStorage["last_log_id"] = id;
				    		wrapSetLocalStorage("last_log_id", id);
				    	});
			    	} catch (ex) {}
		    	//}
		    }
	);
	
	return deferred;
}

function handleDefferedEvent() {
	//var val = localStorage.getItem("defferedEvent");
	var val = wrapGetLocalStorage("defferedEvent");
	
	if (val != null) {
		//localStorage.removeItem("defferedEvent");
		wrapRemoveLocalStorage("defferedEvent");
		var eventObj = JSON.parse(val);
		fireEvent(eventObj.ec, eventObj.ea, eventObj.el);		
	}
}

function handleDefferedLocalEvent() {
	try {
		//var val = localStorage.getItem("defferedEventLocal");
		var val = wrapGetLocalStorage("defferedEventLocal");
		if (val != null) {
			//localStorage.removeItem("defferedEventLocal");
			wrapRemoveLocalStorage("defferedEventLocal");
			var eventObj = JSON.parse(val);
			fireLocalEvent(eventObj.ec, eventObj.ea, eventObj.el, null, true);
		}		
	}
	catch(e) {
		console.log(e);
	}
}

function fireEventDef(ec, ea, el) {
	try {
		var defferedEventObj = {
				ec: ec,
				ea: ea,
				el: el
			};
			
		localStorage.setItem("defferedEvent", JSON.stringify(defferedEventObj));	
	}
	catch(e) {
		console.error(e);
	}
}

function fireLocalEventDef(ec, ea, el) {
	try {
		var defferedEventObj = {
				ec: ec,
				ea: ea,
				el: el
			};
			
		localStorage.setItem("defferedEventLocal", JSON.stringify(defferedEventObj));	
	}
	catch(e) {
		console.error(e);
	}
}

function getUserUniqueId() {
	var userUnqiueId = readCookie('deviceUniqueId');
	
	if (userUnqiueId == null || userUnqiueId.length == 0) {
		// backward comptability
		userUnqiueId = window.localStorage['deviceUniqueId'];
		
		if (userUnqiueId == null || userUnqiueId.length == 0) {
			userUnqiueId = createGuid();
		}
		
		createCookie('userUnqiueId', userUnqiueId, 365);
	}
	
	return userUnqiueId;
}

function createGuid() {
	return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
	    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
	    return v.toString(16);
	});	
}

function getRandomIntInclusive(min, max) {
	min = Math.ceil(min);
	max = Math.floor(max);
	return Math.floor(Math.random() * (max - min + 1)) + min;
}

///////////////////////////////// date /////////////////////////////

function toUtcOffset(valDate) {
	return valDate.valueOf() + (valDate.getTimezoneOffset() * 60 * 1000 * -1);
}

function convertToUTC(dt) {
	return dt;
	var localDate = dt;
    var localTime = localDate.getTime();
    var localOffset = localDate.getTimezoneOffset() * 60000;
    return new Date(localTime + localOffset);
}
 
function fromUtcOffset(val) {
	var now = new Date(val);
	var utcDate = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(),  now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds());
	return utcDate.valueOf();
}

///////////////////////////////// array /////////////////////////////
if (!Array.prototype.indexOf) {
	Array.prototype.indexOf = function(obj, start) {
	    for (var i = (start || 0), j = this.length; i < j; i++) {
	        if (this[i] === obj) { return i; }
	    }
	    return -1;
	}	
}

Array.prototype.move = function (old_index, new_index) {
    while (old_index < 0) {
        old_index += this.length;
    }
    while (new_index < 0) {
        new_index += this.length;
    }
    if (new_index >= this.length) {
        var k = new_index - this.length;
        while ((k--) + 1) {
            this.push(undefined);
        }
    }
    this.splice(new_index, 0, this.splice(old_index, 1)[0]);
    return this; // for testing purposes
};

Array.prototype.clone = function() {
	return this.slice(0);
};

if (!('filter' in Array.prototype)) {
    Array.prototype.filter= function(filter, that /*opt*/) {
        var other= [], v;
        for (var i=0, n= this.length; i<n; i++)
            if (i in this && filter.call(that, v= this[i], i, this))
                other.push(v);
        return other;
    };
}

///////////////////////////////// distance /////////////////////////////
function getLocalDistanceText(distance) {
	distance = getLocalDistanceMeasure(distance) + " " + getLocalDistanceUnit();
	return distance;
}

function getLocalDistanceUnit() {
	return getIsMeter() ? "KM" : "mi";
}

function getLocalDistanceMeasure(distance) {
	return getIsMeter() ? Math.round(parseFloat(distance) / 100) / 10 :  Math.round(distance * 0.000621371 * 10) / 10; 
}

function getTimeFormat(min) {
	var isUs = readCookie("us_timeformat");
	if (isUs == "true") {
		return "h:mma";
	} else {
		return "H:mm";
	}
}

function getIsMeter() {
	var isMeter = readCookie("is_metric");
	if (isMeter === "true") {
		return true;
	} else {
		return false;
	}
}


function getMapUnitSystem() {
	return getIsMeter() ? google.maps.UnitSystem.METRIC : google.maps.UnitSystem.IMPERIAL;
}

function getActiveLang(setDefault) {
	var lang = null; 
	if (setDefault) {
		lang = "en"; //default
	}
	var langCookie = readCookie('activeLang');
	if (langCookie == "undefined") {
		lang = "en"; //default
		createCookie("activeLang","en",365);
	}
	if (langCookie != null && langCookie.length > 0) {
		lang = langCookie;
	}
	/*if (!setDefault && lang == "en") {
		//return null if lang is en and we don't need the default
		lang = null; 
	}*/
	return lang;
}


//////////////////////////////////////  cookie //////////////////////////////////////////
function createCookie(name, value, days) {
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        var expires = "; expires=" + date.toGMTString();
    } else var expires = "";
    document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value) + expires + "; path=/";
}

function readCookie(name) {
    var nameEQ = encodeURIComponent(name) + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) == 0) return decodeURIComponent(c.substring(nameEQ.length, c.length));
    }
    return null;
}

function eraseCookie(name) {
    createCookie(name, "", -1);
}

///////////////////////////////// jquery extension /////////////////////////////
if (jQuery.when.all===undefined) {
    jQuery.when.all = function(deferreds) {
        var deferred = new jQuery.Deferred();
        $.when.apply(jQuery, deferreds).then(
            function() {
                deferred.resolve(Array.prototype.slice.call(arguments));
            },
            function() {
                deferred.fail(Array.prototype.slice.call(arguments));
            });

        return deferred;
    }
}




//Equal Height Columns    
function handleEqualHeightColumns() {
    var EqualHeightColumns = function () {            
        $(".equal-height-columns").each(function() {
            heights = [];              
            $(".equal-height-column", this).each(function() {
                //$(this).removeAttr("style");
                heights.push($(this).height()); // write column's heights to the array
            });
            $(".equal-height-column", this).height(Math.max.apply(Math, heights)); //find and set max
        });
    }

    EqualHeightColumns();        
    $(window).resize(function() {            
        EqualHeightColumns();
    });
    $(window).load(function() {
        EqualHeightColumns("img.equal-height-column");
    });
}    


function addEvent(obj, evt, fn) {
    if (obj.addEventListener) {
        obj.addEventListener(evt, fn, false);
    }
    else if (obj.attachEvent) {
        obj.attachEvent("on" + evt, fn);
    }
}
function removeEvent(obj, evt, fn) {
	if (obj.removeEventListener) {                   // For all major browsers, except IE 8 and earlier
		obj.removeEventListener(evt, fn);
	} else if (x.detachEvent) {                    // For IE 8 and earlier versions
		obj.detachEvent("on" + evt, fn);
	}
}
////////////////////////////////////// pass clicks //////////////////////////////////////
function parisPassClicked(src) {
	PaidActivityRedirectGlobal.redirect("Paris Pass", "Paris Pass", 'http://www.kqzyfj.com/click-7054508-10494398', src);
}

function cityPassClicked(src) {
	PaidActivityRedirectGlobal.redirect(cityPassName, cityPassName, cityPassLink, src);
}

function cityPassClickedNg(src) {
	PaidActivityRedirectGlobal.redirect(globalCityPass.title, globalCityPass.title, globalCityPass.link, src);
}


//related to routing cahcing (itinerary)
function asBounds(boundsObject){
    return new google.maps.LatLngBounds(asLatLng(boundsObject.southwest),
                                    asLatLng(boundsObject.northeast));
}

function asLatLng(latLngObject){
    return new google.maps.LatLng(latLngObject.lat, latLngObject.lng);
}

function asPath(encodedPolyObject){
    return new google.maps.geometry.encoding.decodePath( encodedPolyObject.points );
}

function typecastRoutes(routes){
    routes.forEach(function(route){
        route.bounds = asBounds(route.bounds);
        // I don't think `overview_path` is used but it exists on the
        // response of DirectionsService.route()
        route.overview_path = asPath(route.overview_polyline);

        route.legs.forEach(function(leg){
            leg.start_location = asLatLng(leg.start_location);
            leg.end_location   = asLatLng(leg.end_location);

            leg.steps.forEach(function(step){
                step.start_location = asLatLng(step.start_location);
                step.end_location   = asLatLng(step.end_location);
                step.path = asPath(step.polyline);
            });

        });
    });
    return routes;
}

function isInterestingCountry(lang) {
	var result = true;
	var activeCountry = readCookie('activeCountry');
	if (activeCountry == null || activeCountry.length == 0) {
		return false;
	}
	activeCountry = activeCountry.toLowerCase();
	var importantCountries = "il,us,ca,au,gb,ch,nz,nl,be,ie,de,no,fr,se,fi,dk,lt,lv,is,ee,at,lu,bm,je,gg,mc,fo,li,ax,gl,nf"
	if (lang != "en" || importantCountries.indexOf(activeCountry) < 0) {
		result = false;
	}
	return result;
}

//String Scoring Algorithm 0.1.22 | (c) 2009-2015 Joshaven Potter <yourtech@gmail.com>
//MIT License: http://opensource.org/licenses/MIT | https://github.com/joshaven/string_score
String.prototype.score=function(e,f){if(this===e)return 1;if(""===e)return 0;var d=0,a,g=this.toLowerCase(),n=this.length,h=e.toLowerCase(),k=e.length,b;a=0;var l=1,m,c;f&&(m=1-f);if(f)for(c=0;c<k;c+=1)b=g.indexOf(h[c],a),-1===b?l+=m:(a===b?a=.7:(a=.1," "===this[b-1]&&(a+=.8)),this[b]===e[c]&&(a+=.1),d+=a,a=b+1);else for(c=0;c<k;c+=1){b=g.indexOf(h[c],a);if(-1===b)return 0;a===b?a=.7:(a=.1," "===this[b-1]&&(a+=.8));this[b]===e[c]&&(a+=.1);d+=a;a=b+1}d=.5*(d/n+d/k)/l;h[0]===g[0]&&.85>d&&(d+=.15);return d};
define("common/common", function(){});

define('app/extensions/core/currency',["common/common"],
    function() {
 
        function CurrencyUtil(){
        	
        	this._data = null;
        	this.init();
        	
            return( this );
        }
        
        CurrencyUtil.prototype.dollarFrom = function(amount, currency) {
        	if (amount == 0) {
        		return 0;
        	}
        	if (currency == "USD") {
        		return amount;
        	}
    		return amount / this._data.usdTo[currency];
    	};        
        
        CurrencyUtil.prototype.dollarTo = function(amount, currency) {
        	if (amount == 0) {
        		return 0;
        	}
        	if (currency == "USD") {
        		return amount;
        	}
        	
    		return amount * this._data.usdTo[currency];
    	};
    	
    	CurrencyUtil.prototype.euroTo = function(amount, currency) {
        	if (amount == 0) {
        		return 0;
        	}
        	
    		return amount * this._data.eurTo[currency];
    	};
    	
    	CurrencyUtil.prototype.getFormmatedAmount = function(amount, currency, round) {
    		// turn to dollar
    		amount = this.dollarFrom(amount, currency);
    		
    		// turn into the current user currency
    		//var currencyAbb = readCookie("currencyAbb");
    		//var currencyAbb = window.localStorage["currencyAbb"];
    		//var currencyAbb = localStorage.getItem("currencyAbb");
    		var currencyAbb = wrapGetLocalStorage("currencyAbb");
    		if (currencyAbb == null) {
    			currencyAbb = "USD";
    		}
    		amount = this.dollarTo(amount, currencyAbb);
    		if (round) {
    			amount = parseInt(amount);
    		}
    		else {
    			amount = parseFloat(amount).toFixed(2);	
    		}
    		
    		var text = "";
    		if (currencyAbb == "USD") {
    			text = "$" + amount;
    		} else {
    			text = this._data.symbols[currencyAbb] + amount;
    		}
    		
    		
    		
    		return text;
    	};
    	
    	CurrencyUtil.prototype.getCurrencySymbol = function() {
    		//var currencyAbb = window.localStorage["currencyAbb"];
    		//var currencyAbb = localStorage.getItem("currencyAbb");
    		var currencyAbb = wrapGetLocalStorage("currencyAbb");
    		if (currencyAbb == null) {
    			currencyAbb = "USD";
    		}
    		return this._data.symbols[currencyAbb];
    	}
    	
    	CurrencyUtil.prototype.getAmount = function(amount, currency, round) {
    		// turn to dollar
    		amount = this.dollarFrom(parseFloat(amount), currency);
    		
    		// turn into the current user currency
    		//var currencyAbb = readCookie("currencyAbb");
    		//var currencyAbb = window.localStorage["currencyAbb"];
    		//var currencyAbb = localStorage.getItem("currencyAbb");
    		var currencyAbb = wrapGetLocalStorage("currencyAbb");
    		if (currencyAbb == null) {
    			currencyAbb = "USD";
    		}
  		
    		amount = this.dollarTo(amount, currencyAbb);
    		if (round != null) {
    			amount = parseInt(amount);
    		}
    		else {
    			amount = parseFloat(amount).toFixed(2);	
    		}
    		
    		return amount;
    	};
    	
    	CurrencyUtil.prototype.fixCurrencyElements = function(elem, round) {
    		if (elem == null) {
    			elem = $("body");
    		}
    		
    		elem.find("[currency]").each(function() {
    			var currencyUtil = new CurrencyUtil();
    			
    			var currency = $(this).attr("currency");
    			var currencyAmount = $(this).attr("currency_amount");
    			var text = currencyUtil.getFormmatedAmount(currencyAmount, currency, round);
    			$(this).text(text);
    			
    		});
    	};

    	//Fix a specific element
    	CurrencyUtil.prototype.fixCurrencyElement = function(elem, round) {
   			var currencyUtil = new CurrencyUtil();
   			
   			var currency = $(elem).attr("currency");
   			var currencyAmount = $(elem).attr("currency_amount");
   			var text = currencyUtil.getFormmatedAmount(currencyAmount, currency, round);
   			$(elem).text(text);
    	};
    	
    	CurrencyUtil.prototype.init = function() {
    		var _self = this;
    		//var storedData =  window.localStorage["currency_data"];
     		//var storedDataTime = window.localStorage["currency_data_date"];
     		//var storedData = localStorage.getItem("currency_data");
     		//var storedDataTime = localStorage.getItem("currency_data_date");
    		var storedData =  wrapGetLocalStorage("currency_data");
     		var storedDataTime = wrapGetLocalStorage("currency_data_date");
    		
    		var obsTime = 1000 * 3600 * 3; // 3 hours 		
    		
    		try {
    			if (storedData == null || storedData == "null" || (new Date().getTime()) - storedDataTime > obsTime) {
            		$.ajax({
          			  url: appRoot + "/ws/getCurrency",
          			  type: "GET",
          			  async: false,
          			  dataType: "json",
          			  contentType: "application/x-www-form-urlencoded;charset=UTF-8",
          			  cache: false
    	      		}).done(function(msg) {
    	      			_self._data = msg;
    	      			
    		      		// to local storage
    		      		//window.localStorage["currency_data"] = JSON.stringify(_self._data);
    		      		//window.localStorage["currency_data_date"] = new Date().getTime();
    	      			//localStorage.setItem("currency_data", JSON.stringify(_self._data));
    	      			//localStorage.setItem("currency_data_date", new Date().getTime());
    	      			wrapSetLocalStorage("currency_data", JSON.stringify(_self._data));
    	      			wrapSetLocalStorage("currency_data_date", new Date().getTime());
    	      			
    	      		});
        		}
        		else {
        			_self._data = $.parseJSON(storedData);
        		}
    		} catch (err) {
    			//default to USD in case of error
    			//window.localStorage['currencyAbb'] = "USD";
    			//window.localStorage['currencyText'] = "USD";
    			//localStorage.setItem("currencyAbb", "USD");
    			//localStorage.setItem("currencyText", "USD");
    			wrapSetLocalStorage("currencyAbb", "USD");
    			wrapSetLocalStorage("currencyText", "USD");
    		}
    	};    	
 
        return(CurrencyUtil);
    }
);


/*! jQuery v1.11.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l="1.11.1",m=function(a,b){return new m.fn.init(a,b)},n=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,o=/^-ms-/,p=/-([\da-z])/gi,q=function(a,b){return b.toUpperCase()};m.fn=m.prototype={jquery:l,constructor:m,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=m.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return m.each(this,a,b)},map:function(a){return this.pushStack(m.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},m.extend=m.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||m.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(m.isPlainObject(c)||(b=m.isArray(c)))?(b?(b=!1,f=a&&m.isArray(a)?a:[]):f=a&&m.isPlainObject(a)?a:{},g[d]=m.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},m.extend({expando:"jQuery"+(l+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===m.type(a)},isArray:Array.isArray||function(a){return"array"===m.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return!m.isArray(a)&&a-parseFloat(a)>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==m.type(a)||a.nodeType||m.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,"constructor")&&!j.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(k.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(b){b&&m.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(o,"ms-").replace(p,q)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=r(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(n,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(r(Object(a))?m.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=r(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(f=a[b],b=a,a=f),m.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||m.guid++,e):void 0},now:function(){return+new Date},support:k}),m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function r(a){var b=a.length,c=m.type(a);return"function"===c||m.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var s=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+-new Date,v=a.document,w=0,x=0,y=gb(),z=gb(),A=gb(),B=function(a,b){return a===b&&(l=!0),0},C="undefined",D=1<<31,E={}.hasOwnProperty,F=[],G=F.pop,H=F.push,I=F.push,J=F.slice,K=F.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",N="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",O=N.replace("w","w#"),P="\\["+M+"*("+N+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+O+"))|)"+M+"*\\]",Q=":("+N+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",R=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),S=new RegExp("^"+M+"*,"+M+"*"),T=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),V=new RegExp(Q),W=new RegExp("^"+O+"$"),X={ID:new RegExp("^#("+N+")"),CLASS:new RegExp("^\\.("+N+")"),TAG:new RegExp("^("+N.replace("w","w*")+")"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+Q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ab=/[+~]/,bb=/'|\\/g,cb=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),db=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)};try{I.apply(F=J.call(v.childNodes),v.childNodes),F[v.childNodes.length].nodeType}catch(eb){I={apply:F.length?function(a,b){H.apply(a,J.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fb(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],!a||"string"!=typeof a)return d;if(1!==(k=b.nodeType)&&9!==k)return[];if(p&&!e){if(f=_.exec(a))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return I.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName&&b.getElementsByClassName)return I.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=9===k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(bb,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+qb(o[l]);w=ab.test(a)&&ob(b.parentNode)||b,x=o.join(",")}if(x)try{return I.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function gb(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function hb(a){return a[u]=!0,a}function ib(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function jb(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function kb(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||D)-(~a.sourceIndex||D);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function lb(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function mb(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function nb(a){return hb(function(b){return b=+b,hb(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function ob(a){return a&&typeof a.getElementsByTagName!==C&&a}c=fb.support={},f=fb.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fb.setDocument=function(a){var b,e=a?a.ownerDocument||a:v,g=e.defaultView;return e!==n&&9===e.nodeType&&e.documentElement?(n=e,o=e.documentElement,p=!f(e),g&&g!==g.top&&(g.addEventListener?g.addEventListener("unload",function(){m()},!1):g.attachEvent&&g.attachEvent("onunload",function(){m()})),c.attributes=ib(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ib(function(a){return a.appendChild(e.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(e.getElementsByClassName)&&ib(function(a){return a.innerHTML="<div class='a'></div><div class='a i'></div>",a.firstChild.className="i",2===a.getElementsByClassName("i").length}),c.getById=ib(function(a){return o.appendChild(a).id=u,!e.getElementsByName||!e.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if(typeof b.getElementById!==C&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){var c=typeof a.getAttributeNode!==C&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return typeof b.getElementsByTagName!==C?b.getElementsByTagName(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return typeof b.getElementsByClassName!==C&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(e.querySelectorAll))&&(ib(function(a){a.innerHTML="<select msallowclip=''><option selected=''></option></select>",a.querySelectorAll("[msallowclip^='']").length&&q.push("[*^$]="+M+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+M+"*(?:value|"+L+")"),a.querySelectorAll(":checked").length||q.push(":checked")}),ib(function(a){var b=e.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+M+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ib(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",Q)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===e||a.ownerDocument===v&&t(v,a)?-1:b===e||b.ownerDocument===v&&t(v,b)?1:k?K.call(k,a)-K.call(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,f=a.parentNode,g=b.parentNode,h=[a],i=[b];if(!f||!g)return a===e?-1:b===e?1:f?-1:g?1:k?K.call(k,a)-K.call(k,b):0;if(f===g)return kb(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?kb(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},e):n},fb.matches=function(a,b){return fb(a,null,null,b)},fb.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fb(b,n,null,[a]).length>0},fb.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fb.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&E.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fb.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fb.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fb.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fb.selectors={cacheLength:50,createPseudo:hb,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(cb,db),a[3]=(a[3]||a[4]||a[5]||"").replace(cb,db),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fb.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fb.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(cb,db).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+M+")"+a+"("+M+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||typeof a.getAttribute!==C&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fb.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fb.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?hb(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=K.call(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:hb(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?hb(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:hb(function(a){return function(b){return fb(a,b).length>0}}),contains:hb(function(a){return function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:hb(function(a){return W.test(a||"")||fb.error("unsupported lang: "+a),a=a.replace(cb,db).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:nb(function(){return[0]}),last:nb(function(a,b){return[b-1]}),eq:nb(function(a,b,c){return[0>c?c+b:c]}),even:nb(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:nb(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:nb(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:nb(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=lb(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=mb(b);function pb(){}pb.prototype=d.filters=d.pseudos,d.setFilters=new pb,g=fb.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fb.error(a):z(a,i).slice(0)};function qb(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function rb(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function sb(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function tb(a,b,c){for(var d=0,e=b.length;e>d;d++)fb(a,b[d],c);return c}function ub(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function vb(a,b,c,d,e,f){return d&&!d[u]&&(d=vb(d)),e&&!e[u]&&(e=vb(e,f)),hb(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||tb(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ub(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ub(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?K.call(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ub(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):I.apply(g,r)})}function wb(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=rb(function(a){return a===b},h,!0),l=rb(function(a){return K.call(b,a)>-1},h,!0),m=[function(a,c,d){return!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d))}];f>i;i++)if(c=d.relative[a[i].type])m=[rb(sb(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return vb(i>1&&sb(m),i>1&&qb(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&wb(a.slice(i,e)),f>e&&wb(a=a.slice(e)),f>e&&qb(a))}m.push(c)}return sb(m)}function xb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=G.call(i));s=ub(s)}I.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&fb.uniqueSort(i)}return k&&(w=v,j=t),r};return c?hb(f):f}return h=fb.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wb(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xb(e,d)),f.selector=a}return f},i=fb.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(cb,db),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(cb,db),ab.test(j[0].type)&&ob(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qb(j),!a)return I.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,ab.test(a)&&ob(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ib(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ib(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||jb("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ib(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||jb("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ib(function(a){return null==a.getAttribute("disabled")})||jb(L,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fb}(a);m.find=s,m.expr=s.selectors,m.expr[":"]=m.expr.pseudos,m.unique=s.uniqueSort,m.text=s.getText,m.isXMLDoc=s.isXML,m.contains=s.contains;var t=m.expr.match.needsContext,u=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,v=/^.[^:#\[\.,]*$/;function w(a,b,c){if(m.isFunction(b))return m.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return m.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(v.test(b))return m.filter(b,a,c);b=m.filter(b,a)}return m.grep(a,function(a){return m.inArray(a,b)>=0!==c})}m.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?m.find.matchesSelector(d,a)?[d]:[]:m.find.matches(a,m.grep(b,function(a){return 1===a.nodeType}))},m.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(m(a).filter(function(){for(b=0;e>b;b++)if(m.contains(d[b],this))return!0}));for(b=0;e>b;b++)m.find(a,d[b],c);return c=this.pushStack(e>1?m.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(w(this,a||[],!1))},not:function(a){return this.pushStack(w(this,a||[],!0))},is:function(a){return!!w(this,"string"==typeof a&&t.test(a)?m(a):a||[],!1).length}});var x,y=a.document,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=m.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||x).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof m?b[0]:b,m.merge(this,m.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:y,!0)),u.test(c[1])&&m.isPlainObject(b))for(c in b)m.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}if(d=y.getElementById(c[2]),d&&d.parentNode){if(d.id!==c[2])return x.find(a);this.length=1,this[0]=d}return this.context=y,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):m.isFunction(a)?"undefined"!=typeof x.ready?x.ready(a):a(m):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),m.makeArray(a,this))};A.prototype=m.fn,x=m(y);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};m.extend({dir:function(a,b,c){var d=[],e=a[b];while(e&&9!==e.nodeType&&(void 0===c||1!==e.nodeType||!m(e).is(c)))1===e.nodeType&&d.push(e),e=e[b];return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),m.fn.extend({has:function(a){var b,c=m(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(m.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=t.test(a)||"string"!=typeof a?m(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&m.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?m.unique(f):f)},index:function(a){return a?"string"==typeof a?m.inArray(this[0],m(a)):m.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(m.unique(m.merge(this.get(),m(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}m.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return m.dir(a,"parentNode")},parentsUntil:function(a,b,c){return m.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return m.dir(a,"nextSibling")},prevAll:function(a){return m.dir(a,"previousSibling")},nextUntil:function(a,b,c){return m.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return m.dir(a,"previousSibling",c)},siblings:function(a){return m.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return m.sibling(a.firstChild)},contents:function(a){return m.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:m.merge([],a.childNodes)}},function(a,b){m.fn[a]=function(c,d){var e=m.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=m.filter(d,e)),this.length>1&&(C[a]||(e=m.unique(e)),B.test(a)&&(e=e.reverse())),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return m.each(a.match(E)||[],function(a,c){b[c]=!0}),b}m.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):m.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(c=a.memory&&l,d=!0,f=g||0,g=0,e=h.length,b=!0;h&&e>f;f++)if(h[f].apply(l[0],l[1])===!1&&a.stopOnFalse){c=!1;break}b=!1,h&&(i?i.length&&j(i.shift()):c?h=[]:k.disable())},k={add:function(){if(h){var d=h.length;!function f(b){m.each(b,function(b,c){var d=m.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&f(c)})}(arguments),b?e=h.length:c&&(g=d,j(c))}return this},remove:function(){return h&&m.each(arguments,function(a,c){var d;while((d=m.inArray(c,h,d))>-1)h.splice(d,1),b&&(e>=d&&e--,f>=d&&f--)}),this},has:function(a){return a?m.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],e=0,this},disable:function(){return h=i=c=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,c||k.disable(),this},locked:function(){return!i},fireWith:function(a,c){return!h||d&&!i||(c=c||[],c=[a,c.slice?c.slice():c],b?i.push(c):j(c)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!d}};return k},m.extend({Deferred:function(a){var b=[["resolve","done",m.Callbacks("once memory"),"resolved"],["reject","fail",m.Callbacks("once memory"),"rejected"],["notify","progress",m.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return m.Deferred(function(c){m.each(b,function(b,f){var g=m.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&m.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?m.extend(a,d):d}},e={};return d.pipe=d.then,m.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&m.isFunction(a.promise)?e:0,g=1===f?a:m.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&m.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;m.fn.ready=function(a){return m.ready.promise().done(a),this},m.extend({isReady:!1,readyWait:1,holdReady:function(a){a?m.readyWait++:m.ready(!0)},ready:function(a){if(a===!0?!--m.readyWait:!m.isReady){if(!y.body)return setTimeout(m.ready);m.isReady=!0,a!==!0&&--m.readyWait>0||(H.resolveWith(y,[m]),m.fn.triggerHandler&&(m(y).triggerHandler("ready"),m(y).off("ready")))}}});function I(){y.addEventListener?(y.removeEventListener("DOMContentLoaded",J,!1),a.removeEventListener("load",J,!1)):(y.detachEvent("onreadystatechange",J),a.detachEvent("onload",J))}function J(){(y.addEventListener||"load"===event.type||"complete"===y.readyState)&&(I(),m.ready())}m.ready.promise=function(b){if(!H)if(H=m.Deferred(),"complete"===y.readyState)setTimeout(m.ready);else if(y.addEventListener)y.addEventListener("DOMContentLoaded",J,!1),a.addEventListener("load",J,!1);else{y.attachEvent("onreadystatechange",J),a.attachEvent("onload",J);var c=!1;try{c=null==a.frameElement&&y.documentElement}catch(d){}c&&c.doScroll&&!function e(){if(!m.isReady){try{c.doScroll("left")}catch(a){return setTimeout(e,50)}I(),m.ready()}}()}return H.promise(b)};var K="undefined",L;for(L in m(k))break;k.ownLast="0"!==L,k.inlineBlockNeedsLayout=!1,m(function(){var a,b,c,d;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",k.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(d))}),function(){var a=y.createElement("div");if(null==k.deleteExpando){k.deleteExpando=!0;try{delete a.test}catch(b){k.deleteExpando=!1}}a=null}(),m.acceptData=function(a){var b=m.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b};var M=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,N=/([A-Z])/g;function O(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(N,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:M.test(c)?m.parseJSON(c):c}catch(e){}m.data(a,b,c)}else c=void 0}return c}function P(a){var b;for(b in a)if(("data"!==b||!m.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;return!0}function Q(a,b,d,e){if(m.acceptData(a)){var f,g,h=m.expando,i=a.nodeType,j=i?m.cache:a,k=i?a[h]:a[h]&&h;
if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||m.guid++:h),j[k]||(j[k]=i?{}:{toJSON:m.noop}),("object"==typeof b||"function"==typeof b)&&(e?j[k]=m.extend(j[k],b):j[k].data=m.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[m.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[m.camelCase(b)])):f=g,f}}function R(a,b,c){if(m.acceptData(a)){var d,e,f=a.nodeType,g=f?m.cache:a,h=f?a[m.expando]:m.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){m.isArray(b)?b=b.concat(m.map(b,m.camelCase)):b in d?b=[b]:(b=m.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!P(d):!m.isEmptyObject(d))return}(c||(delete g[h].data,P(g[h])))&&(f?m.cleanData([a],!0):k.deleteExpando||g!=g.window?delete g[h]:g[h]=null)}}}m.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?m.cache[a[m.expando]]:a[m.expando],!!a&&!P(a)},data:function(a,b,c){return Q(a,b,c)},removeData:function(a,b){return R(a,b)},_data:function(a,b,c){return Q(a,b,c,!0)},_removeData:function(a,b){return R(a,b,!0)}}),m.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=m.data(f),1===f.nodeType&&!m._data(f,"parsedAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=m.camelCase(d.slice(5)),O(f,d,e[d])));m._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){m.data(this,a)}):arguments.length>1?this.each(function(){m.data(this,a,b)}):f?O(f,a,m.data(f,a)):void 0},removeData:function(a){return this.each(function(){m.removeData(this,a)})}}),m.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=m._data(a,b),c&&(!d||m.isArray(c)?d=m._data(a,b,m.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=m.queue(a,b),d=c.length,e=c.shift(),f=m._queueHooks(a,b),g=function(){m.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return m._data(a,c)||m._data(a,c,{empty:m.Callbacks("once memory").add(function(){m._removeData(a,b+"queue"),m._removeData(a,c)})})}}),m.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?m.queue(this[0],a):void 0===b?this:this.each(function(){var c=m.queue(this,a,b);m._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&m.dequeue(this,a)})},dequeue:function(a){return this.each(function(){m.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=m.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=m._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=["Top","Right","Bottom","Left"],U=function(a,b){return a=b||a,"none"===m.css(a,"display")||!m.contains(a.ownerDocument,a)},V=m.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===m.type(c)){e=!0;for(h in c)m.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,m.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(m(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},W=/^(?:checkbox|radio)$/i;!function(){var a=y.createElement("input"),b=y.createElement("div"),c=y.createDocumentFragment();if(b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",k.leadingWhitespace=3===b.firstChild.nodeType,k.tbody=!b.getElementsByTagName("tbody").length,k.htmlSerialize=!!b.getElementsByTagName("link").length,k.html5Clone="<:nav></:nav>"!==y.createElement("nav").cloneNode(!0).outerHTML,a.type="checkbox",a.checked=!0,c.appendChild(a),k.appendChecked=a.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,c.appendChild(b),b.innerHTML="<input type='radio' checked='checked' name='t'/>",k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,k.noCloneEvent=!0,b.attachEvent&&(b.attachEvent("onclick",function(){k.noCloneEvent=!1}),b.cloneNode(!0).click()),null==k.deleteExpando){k.deleteExpando=!0;try{delete b.test}catch(d){k.deleteExpando=!1}}}(),function(){var b,c,d=y.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(k[b+"Bubbles"]=c in a)||(d.setAttribute(c,"t"),k[b+"Bubbles"]=d.attributes[c].expando===!1);d=null}();var X=/^(?:input|select|textarea)$/i,Y=/^key/,Z=/^(?:mouse|pointer|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=/^([^.]*)(?:\.(.+)|)$/;function ab(){return!0}function bb(){return!1}function cb(){try{return y.activeElement}catch(a){}}m.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=m.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return typeof m===K||a&&m.event.triggered===a.type?void 0:m.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(E)||[""],h=b.length;while(h--)f=_.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=m.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=m.event.special[o]||{},l=m.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&m.expr.match.needsContext.test(e),namespace:p.join(".")},i),(n=g[o])||(n=g[o]=[],n.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?n.splice(n.delegateCount++,0,l):n.push(l),m.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m.hasData(a)&&m._data(a);if(r&&(k=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=_.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=m.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,n=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=n.length;while(f--)g=n[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(n.splice(f,1),g.selector&&n.delegateCount--,l.remove&&l.remove.call(a,g));i&&!n.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||m.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)m.event.remove(a,o+b[j],c,d,!0);m.isEmptyObject(k)&&(delete r.handle,m._removeData(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,l,n,o=[d||y],p=j.call(b,"type")?b.type:b,q=j.call(b,"namespace")?b.namespace.split("."):[];if(h=l=d=d||y,3!==d.nodeType&&8!==d.nodeType&&!$.test(p+m.event.triggered)&&(p.indexOf(".")>=0&&(q=p.split("."),p=q.shift(),q.sort()),g=p.indexOf(":")<0&&"on"+p,b=b[m.expando]?b:new m.Event(p,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=q.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:m.makeArray(c,[b]),k=m.event.special[p]||{},e||!k.trigger||k.trigger.apply(d,c)!==!1)){if(!e&&!k.noBubble&&!m.isWindow(d)){for(i=k.delegateType||p,$.test(i+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),l=h;l===(d.ownerDocument||y)&&o.push(l.defaultView||l.parentWindow||a)}n=0;while((h=o[n++])&&!b.isPropagationStopped())b.type=n>1?i:k.bindType||p,f=(m._data(h,"events")||{})[b.type]&&m._data(h,"handle"),f&&f.apply(h,c),f=g&&h[g],f&&f.apply&&m.acceptData(h)&&(b.result=f.apply(h,c),b.result===!1&&b.preventDefault());if(b.type=p,!e&&!b.isDefaultPrevented()&&(!k._default||k._default.apply(o.pop(),c)===!1)&&m.acceptData(d)&&g&&d[p]&&!m.isWindow(d)){l=d[g],l&&(d[g]=null),m.event.triggered=p;try{d[p]()}catch(r){}m.event.triggered=void 0,l&&(d[g]=l)}return b.result}},dispatch:function(a){a=m.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(m._data(this,"events")||{})[a.type]||[],k=m.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=m.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,g=0;while((e=f.handlers[g++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(e.namespace))&&(a.handleObj=e,a.data=e.data,c=((m.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,i),void 0!==c&&(a.result=c)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(e=[],f=0;h>f;f++)d=b[f],c=d.selector+" ",void 0===e[c]&&(e[c]=d.needsContext?m(c,this).index(i)>=0:m.find(c,this,null,[i]).length),e[c]&&e.push(d);e.length&&g.push({elem:i,handlers:e})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[m.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=Z.test(e)?this.mouseHooks:Y.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new m.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=f.srcElement||y),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,g.filter?g.filter(a,f):a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button,g=b.fromElement;return null==a.pageX&&null!=b.clientX&&(d=a.target.ownerDocument||y,e=d.documentElement,c=d.body,a.pageX=b.clientX+(e&&e.scrollLeft||c&&c.scrollLeft||0)-(e&&e.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||c&&c.scrollTop||0)-(e&&e.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&g&&(a.relatedTarget=g===a.target?b.toElement:g),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==cb()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===cb()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return m.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return m.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=m.extend(new m.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?m.event.trigger(e,null,b):m.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},m.removeEvent=y.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]===K&&(a[d]=null),a.detachEvent(d,c))},m.Event=function(a,b){return this instanceof m.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ab:bb):this.type=a,b&&m.extend(this,b),this.timeStamp=a&&a.timeStamp||m.now(),void(this[m.expando]=!0)):new m.Event(a,b)},m.Event.prototype={isDefaultPrevented:bb,isPropagationStopped:bb,isImmediatePropagationStopped:bb,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ab,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ab,a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ab,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},m.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){m.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!m.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.submitBubbles||(m.event.special.submit={setup:function(){return m.nodeName(this,"form")?!1:void m.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=m.nodeName(b,"input")||m.nodeName(b,"button")?b.form:void 0;c&&!m._data(c,"submitBubbles")&&(m.event.add(c,"submit._submit",function(a){a._submit_bubble=!0}),m._data(c,"submitBubbles",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&m.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){return m.nodeName(this,"form")?!1:void m.event.remove(this,"._submit")}}),k.changeBubbles||(m.event.special.change={setup:function(){return X.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(m.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._just_changed=!0)}),m.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),m.event.simulate("change",this,a,!0)})),!1):void m.event.add(this,"beforeactivate._change",function(a){var b=a.target;X.test(b.nodeName)&&!m._data(b,"changeBubbles")&&(m.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||m.event.simulate("change",this.parentNode,a,!0)}),m._data(b,"changeBubbles",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return m.event.remove(this,"._change"),!X.test(this.nodeName)}}),k.focusinBubbles||m.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){m.event.simulate(b,a.target,m.event.fix(a),!0)};m.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=m._data(d,b);e||d.addEventListener(a,c,!0),m._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=m._data(d,b)-1;e?m._data(d,b,e):(d.removeEventListener(a,c,!0),m._removeData(d,b))}}}),m.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(f in a)this.on(f,b,c,a[f],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=bb;else if(!d)return this;return 1===e&&(g=d,d=function(a){return m().off(a),g.apply(this,arguments)},d.guid=g.guid||(g.guid=m.guid++)),this.each(function(){m.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,m(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=bb),this.each(function(){m.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){m.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?m.event.trigger(a,b,c,!0):void 0}});function db(a){var b=eb.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}var eb="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",fb=/ jQuery\d+="(?:null|\d+)"/g,gb=new RegExp("<(?:"+eb+")[\\s/>]","i"),hb=/^\s+/,ib=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,jb=/<([\w:]+)/,kb=/<tbody/i,lb=/<|&#?\w+;/,mb=/<(?:script|style|link)/i,nb=/checked\s*(?:[^=]|=\s*.checked.)/i,ob=/^$|\/(?:java|ecma)script/i,pb=/^true\/(.*)/,qb=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,rb={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:k.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},sb=db(y),tb=sb.appendChild(y.createElement("div"));rb.optgroup=rb.option,rb.tbody=rb.tfoot=rb.colgroup=rb.caption=rb.thead,rb.th=rb.td;function ub(a,b){var c,d,e=0,f=typeof a.getElementsByTagName!==K?a.getElementsByTagName(b||"*"):typeof a.querySelectorAll!==K?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||m.nodeName(d,b)?f.push(d):m.merge(f,ub(d,b));return void 0===b||b&&m.nodeName(a,b)?m.merge([a],f):f}function vb(a){W.test(a.type)&&(a.defaultChecked=a.checked)}function wb(a,b){return m.nodeName(a,"table")&&m.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function xb(a){return a.type=(null!==m.find.attr(a,"type"))+"/"+a.type,a}function yb(a){var b=pb.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function zb(a,b){for(var c,d=0;null!=(c=a[d]);d++)m._data(c,"globalEval",!b||m._data(b[d],"globalEval"))}function Ab(a,b){if(1===b.nodeType&&m.hasData(a)){var c,d,e,f=m._data(a),g=m._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)m.event.add(b,c,h[c][d])}g.data&&(g.data=m.extend({},g.data))}}function Bb(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!k.noCloneEvent&&b[m.expando]){e=m._data(b);for(d in e.events)m.removeEvent(b,d,e.handle);b.removeAttribute(m.expando)}"script"===c&&b.text!==a.text?(xb(b).text=a.text,yb(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),k.html5Clone&&a.innerHTML&&!m.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&W.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}}m.extend({clone:function(a,b,c){var d,e,f,g,h,i=m.contains(a.ownerDocument,a);if(k.html5Clone||m.isXMLDoc(a)||!gb.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(tb.innerHTML=a.outerHTML,tb.removeChild(f=tb.firstChild)),!(k.noCloneEvent&&k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||m.isXMLDoc(a)))for(d=ub(f),h=ub(a),g=0;null!=(e=h[g]);++g)d[g]&&Bb(e,d[g]);if(b)if(c)for(h=h||ub(a),d=d||ub(f),g=0;null!=(e=h[g]);g++)Ab(e,d[g]);else Ab(a,f);return d=ub(f,"script"),d.length>0&&zb(d,!i&&ub(a,"script")),d=h=e=null,f},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,l,n=a.length,o=db(b),p=[],q=0;n>q;q++)if(f=a[q],f||0===f)if("object"===m.type(f))m.merge(p,f.nodeType?[f]:f);else if(lb.test(f)){h=h||o.appendChild(b.createElement("div")),i=(jb.exec(f)||["",""])[1].toLowerCase(),l=rb[i]||rb._default,h.innerHTML=l[1]+f.replace(ib,"<$1></$2>")+l[2],e=l[0];while(e--)h=h.lastChild;if(!k.leadingWhitespace&&hb.test(f)&&p.push(b.createTextNode(hb.exec(f)[0])),!k.tbody){f="table"!==i||kb.test(f)?"<table>"!==l[1]||kb.test(f)?0:h:h.firstChild,e=f&&f.childNodes.length;while(e--)m.nodeName(j=f.childNodes[e],"tbody")&&!j.childNodes.length&&f.removeChild(j)}m.merge(p,h.childNodes),h.textContent="";while(h.firstChild)h.removeChild(h.firstChild);h=o.lastChild}else p.push(b.createTextNode(f));h&&o.removeChild(h),k.appendChecked||m.grep(ub(p,"input"),vb),q=0;while(f=p[q++])if((!d||-1===m.inArray(f,d))&&(g=m.contains(f.ownerDocument,f),h=ub(o.appendChild(f),"script"),g&&zb(h),c)){e=0;while(f=h[e++])ob.test(f.type||"")&&c.push(f)}return h=null,o},cleanData:function(a,b){for(var d,e,f,g,h=0,i=m.expando,j=m.cache,l=k.deleteExpando,n=m.event.special;null!=(d=a[h]);h++)if((b||m.acceptData(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)n[e]?m.event.remove(d,e):m.removeEvent(d,e,g.handle);j[f]&&(delete j[f],l?delete d[i]:typeof d.removeAttribute!==K?d.removeAttribute(i):d[i]=null,c.push(f))}}}),m.fn.extend({text:function(a){return V(this,function(a){return void 0===a?m.text(this):this.empty().append((this[0]&&this[0].ownerDocument||y).createTextNode(a))},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?m.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||m.cleanData(ub(c)),c.parentNode&&(b&&m.contains(c.ownerDocument,c)&&zb(ub(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&m.cleanData(ub(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&m.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return m.clone(this,a,b)})},html:function(a){return V(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(fb,""):void 0;if(!("string"!=typeof a||mb.test(a)||!k.htmlSerialize&&gb.test(a)||!k.leadingWhitespace&&hb.test(a)||rb[(jb.exec(a)||["",""])[1].toLowerCase()])){a=a.replace(ib,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(m.cleanData(ub(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,m.cleanData(ub(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,n=this,o=l-1,p=a[0],q=m.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&nb.test(p))return this.each(function(c){var d=n.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(i=m.buildFragment(a,this[0].ownerDocument,!1,this),c=i.firstChild,1===i.childNodes.length&&(i=c),c)){for(g=m.map(ub(i,"script"),xb),f=g.length;l>j;j++)d=i,j!==o&&(d=m.clone(d,!0,!0),f&&m.merge(g,ub(d,"script"))),b.call(this[j],d,j);if(f)for(h=g[g.length-1].ownerDocument,m.map(g,yb),j=0;f>j;j++)d=g[j],ob.test(d.type||"")&&!m._data(d,"globalEval")&&m.contains(h,d)&&(d.src?m._evalUrl&&m._evalUrl(d.src):m.globalEval((d.text||d.textContent||d.innerHTML||"").replace(qb,"")));i=c=null}return this}}),m.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){m.fn[a]=function(a){for(var c,d=0,e=[],g=m(a),h=g.length-1;h>=d;d++)c=d===h?this:this.clone(!0),m(g[d])[b](c),f.apply(e,c.get());return this.pushStack(e)}});var Cb,Db={};function Eb(b,c){var d,e=m(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:m.css(e[0],"display");return e.detach(),f}function Fb(a){var b=y,c=Db[a];return c||(c=Eb(a,b),"none"!==c&&c||(Cb=(Cb||m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Cb[0].contentWindow||Cb[0].contentDocument).document,b.write(),b.close(),c=Eb(a,b),Cb.detach()),Db[a]=c),c}!function(){var a;k.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,d;return c=y.getElementsByTagName("body")[0],c&&c.style?(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",b.appendChild(y.createElement("div")).style.width="5px",a=3!==b.offsetWidth),c.removeChild(d),a):void 0}}();var Gb=/^margin/,Hb=new RegExp("^("+S+")(?!px)[a-z%]+$","i"),Ib,Jb,Kb=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ib=function(a){return a.ownerDocument.defaultView.getComputedStyle(a,null)},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c.getPropertyValue(b)||c[b]:void 0,c&&(""!==g||m.contains(a.ownerDocument,a)||(g=m.style(a,b)),Hb.test(g)&&Gb.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0===g?g:g+""}):y.documentElement.currentStyle&&(Ib=function(a){return a.currentStyle},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Hb.test(g)&&!Kb.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function Lb(a,b){return{get:function(){var c=a();if(null!=c)return c?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d,e,f,g,h;if(b=y.createElement("div"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=d&&d.style){c.cssText="float:left;opacity:.5",k.opacity="0.5"===c.opacity,k.cssFloat=!!c.cssFloat,b.style.backgroundClip="content-box",b.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===b.style.backgroundClip,k.boxSizing=""===c.boxSizing||""===c.MozBoxSizing||""===c.WebkitBoxSizing,m.extend(k,{reliableHiddenOffsets:function(){return null==g&&i(),g},boxSizingReliable:function(){return null==f&&i(),f},pixelPosition:function(){return null==e&&i(),e},reliableMarginRight:function(){return null==h&&i(),h}});function i(){var b,c,d,i;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),b.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",e=f=!1,h=!0,a.getComputedStyle&&(e="1%"!==(a.getComputedStyle(b,null)||{}).top,f="4px"===(a.getComputedStyle(b,null)||{width:"4px"}).width,i=b.appendChild(y.createElement("div")),i.style.cssText=b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",b.style.width="1px",h=!parseFloat((a.getComputedStyle(i,null)||{}).marginRight)),b.innerHTML="<table><tr><td></td><td>t</td></tr></table>",i=b.getElementsByTagName("td"),i[0].style.cssText="margin:0;border:0;padding:0;display:none",g=0===i[0].offsetHeight,g&&(i[0].style.display="",i[1].style.display="none",g=0===i[0].offsetHeight),c.removeChild(d))}}}(),m.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var Mb=/alpha\([^)]*\)/i,Nb=/opacity\s*=\s*([^)]*)/,Ob=/^(none|table(?!-c[ea]).+)/,Pb=new RegExp("^("+S+")(.*)$","i"),Qb=new RegExp("^([+-])=("+S+")","i"),Rb={position:"absolute",visibility:"hidden",display:"block"},Sb={letterSpacing:"0",fontWeight:"400"},Tb=["Webkit","O","Moz","ms"];function Ub(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=Tb.length;while(e--)if(b=Tb[e]+c,b in a)return b;return d}function Vb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=m._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&U(d)&&(f[g]=m._data(d,"olddisplay",Fb(d.nodeName)))):(e=U(d),(c&&"none"!==c||!e)&&m._data(d,"olddisplay",e?c:m.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function Wb(a,b,c){var d=Pb.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Xb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=m.css(a,c+T[f],!0,e)),d?("content"===c&&(g-=m.css(a,"padding"+T[f],!0,e)),"margin"!==c&&(g-=m.css(a,"border"+T[f]+"Width",!0,e))):(g+=m.css(a,"padding"+T[f],!0,e),"padding"!==c&&(g+=m.css(a,"border"+T[f]+"Width",!0,e)));return g}function Yb(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Ib(a),g=k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Jb(a,b,f),(0>e||null==e)&&(e=a.style[b]),Hb.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Xb(a,b,c||(g?"border":"content"),d,f)+"px"}m.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Jb(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":k.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=m.camelCase(b),i=a.style;if(b=m.cssProps[h]||(m.cssProps[h]=Ub(i,h)),g=m.cssHooks[b]||m.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=Qb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(m.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||m.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=m.camelCase(b);return b=m.cssProps[h]||(m.cssProps[h]=Ub(a.style,h)),g=m.cssHooks[b]||m.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Jb(a,b,d)),"normal"===f&&b in Sb&&(f=Sb[b]),""===c||c?(e=parseFloat(f),c===!0||m.isNumeric(e)?e||0:f):f}}),m.each(["height","width"],function(a,b){m.cssHooks[b]={get:function(a,c,d){return c?Ob.test(m.css(a,"display"))&&0===a.offsetWidth?m.swap(a,Rb,function(){return Yb(a,b,d)}):Yb(a,b,d):void 0},set:function(a,c,d){var e=d&&Ib(a);return Wb(a,c,d?Xb(a,b,d,k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,e),e):0)}}}),k.opacity||(m.cssHooks.opacity={get:function(a,b){return Nb.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=m.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===m.trim(f.replace(Mb,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Mb.test(f)?f.replace(Mb,e):f+" "+e)}}),m.cssHooks.marginRight=Lb(k.reliableMarginRight,function(a,b){return b?m.swap(a,{display:"inline-block"},Jb,[a,"marginRight"]):void 0}),m.each({margin:"",padding:"",border:"Width"},function(a,b){m.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+T[d]+b]=f[d]||f[d-2]||f[0];return e}},Gb.test(a)||(m.cssHooks[a+b].set=Wb)}),m.fn.extend({css:function(a,b){return V(this,function(a,b,c){var d,e,f={},g=0;if(m.isArray(b)){for(d=Ib(a),e=b.length;e>g;g++)f[b[g]]=m.css(a,b[g],!1,d);return f}return void 0!==c?m.style(a,b,c):m.css(a,b)},a,b,arguments.length>1)},show:function(){return Vb(this,!0)},hide:function(){return Vb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){U(this)?m(this).show():m(this).hide()})}});function Zb(a,b,c,d,e){return new Zb.prototype.init(a,b,c,d,e)}m.Tween=Zb,Zb.prototype={constructor:Zb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(m.cssNumber[c]?"":"px")
},cur:function(){var a=Zb.propHooks[this.prop];return a&&a.get?a.get(this):Zb.propHooks._default.get(this)},run:function(a){var b,c=Zb.propHooks[this.prop];return this.pos=b=this.options.duration?m.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Zb.propHooks._default.set(this),this}},Zb.prototype.init.prototype=Zb.prototype,Zb.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=m.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){m.fx.step[a.prop]?m.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[m.cssProps[a.prop]]||m.cssHooks[a.prop])?m.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Zb.propHooks.scrollTop=Zb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},m.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},m.fx=Zb.prototype.init,m.fx.step={};var $b,_b,ac=/^(?:toggle|show|hide)$/,bc=new RegExp("^(?:([+-])=|)("+S+")([a-z%]*)$","i"),cc=/queueHooks$/,dc=[ic],ec={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=bc.exec(b),f=e&&e[3]||(m.cssNumber[a]?"":"px"),g=(m.cssNumber[a]||"px"!==f&&+d)&&bc.exec(m.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,m.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function fc(){return setTimeout(function(){$b=void 0}),$b=m.now()}function gc(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=T[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function hc(a,b,c){for(var d,e=(ec[b]||[]).concat(ec["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ic(a,b,c){var d,e,f,g,h,i,j,l,n=this,o={},p=a.style,q=a.nodeType&&U(a),r=m._data(a,"fxshow");c.queue||(h=m._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,n.always(function(){n.always(function(){h.unqueued--,m.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=m.css(a,"display"),l="none"===j?m._data(a,"olddisplay")||Fb(a.nodeName):j,"inline"===l&&"none"===m.css(a,"float")&&(k.inlineBlockNeedsLayout&&"inline"!==Fb(a.nodeName)?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",k.shrinkWrapBlocks()||n.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],ac.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||m.style(a,d)}else j=void 0;if(m.isEmptyObject(o))"inline"===("none"===j?Fb(a.nodeName):j)&&(p.display=j);else{r?"hidden"in r&&(q=r.hidden):r=m._data(a,"fxshow",{}),f&&(r.hidden=!q),q?m(a).show():n.done(function(){m(a).hide()}),n.done(function(){var b;m._removeData(a,"fxshow");for(b in o)m.style(a,b,o[b])});for(d in o)g=hc(q?r[d]:0,d,n),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function jc(a,b){var c,d,e,f,g;for(c in a)if(d=m.camelCase(c),e=b[d],f=a[c],m.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=m.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function kc(a,b,c){var d,e,f=0,g=dc.length,h=m.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=$b||fc(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:m.extend({},b),opts:m.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:$b||fc(),duration:c.duration,tweens:[],createTween:function(b,c){var d=m.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(jc(k,j.opts.specialEasing);g>f;f++)if(d=dc[f].call(j,a,k,j.opts))return d;return m.map(k,hc,j),m.isFunction(j.opts.start)&&j.opts.start.call(a,j),m.fx.timer(m.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}m.Animation=m.extend(kc,{tweener:function(a,b){m.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],ec[c]=ec[c]||[],ec[c].unshift(b)},prefilter:function(a,b){b?dc.unshift(a):dc.push(a)}}),m.speed=function(a,b,c){var d=a&&"object"==typeof a?m.extend({},a):{complete:c||!c&&b||m.isFunction(a)&&a,duration:a,easing:c&&b||b&&!m.isFunction(b)&&b};return d.duration=m.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in m.fx.speeds?m.fx.speeds[d.duration]:m.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){m.isFunction(d.old)&&d.old.call(this),d.queue&&m.dequeue(this,d.queue)},d},m.fn.extend({fadeTo:function(a,b,c,d){return this.filter(U).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=m.isEmptyObject(a),f=m.speed(b,c,d),g=function(){var b=kc(this,m.extend({},a),f);(e||m._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=m.timers,g=m._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&cc.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&m.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=m._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=m.timers,g=d?d.length:0;for(c.finish=!0,m.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),m.each(["toggle","show","hide"],function(a,b){var c=m.fn[b];m.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(gc(b,!0),a,d,e)}}),m.each({slideDown:gc("show"),slideUp:gc("hide"),slideToggle:gc("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){m.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),m.timers=[],m.fx.tick=function(){var a,b=m.timers,c=0;for($b=m.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||m.fx.stop(),$b=void 0},m.fx.timer=function(a){m.timers.push(a),a()?m.fx.start():m.timers.pop()},m.fx.interval=13,m.fx.start=function(){_b||(_b=setInterval(m.fx.tick,m.fx.interval))},m.fx.stop=function(){clearInterval(_b),_b=null},m.fx.speeds={slow:600,fast:200,_default:400},m.fn.delay=function(a,b){return a=m.fx?m.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a,b,c,d,e;b=y.createElement("div"),b.setAttribute("className","t"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=y.createElement("select"),e=c.appendChild(y.createElement("option")),a=b.getElementsByTagName("input")[0],d.style.cssText="top:1px",k.getSetAttribute="t"!==b.className,k.style=/top/.test(d.getAttribute("style")),k.hrefNormalized="/a"===d.getAttribute("href"),k.checkOn=!!a.value,k.optSelected=e.selected,k.enctype=!!y.createElement("form").enctype,c.disabled=!0,k.optDisabled=!e.disabled,a=y.createElement("input"),a.setAttribute("value",""),k.input=""===a.getAttribute("value"),a.value="t",a.setAttribute("type","radio"),k.radioValue="t"===a.value}();var lc=/\r/g;m.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=m.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,m(this).val()):a,null==e?e="":"number"==typeof e?e+="":m.isArray(e)&&(e=m.map(e,function(a){return null==a?"":a+""})),b=m.valHooks[this.type]||m.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=m.valHooks[e.type]||m.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(lc,""):null==c?"":c)}}}),m.extend({valHooks:{option:{get:function(a){var b=m.find.attr(a,"value");return null!=b?b:m.trim(m.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&m.nodeName(c.parentNode,"optgroup"))){if(b=m(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=m.makeArray(b),g=e.length;while(g--)if(d=e[g],m.inArray(m.valHooks.option.get(d),f)>=0)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),m.each(["radio","checkbox"],function(){m.valHooks[this]={set:function(a,b){return m.isArray(b)?a.checked=m.inArray(m(a).val(),b)>=0:void 0}},k.checkOn||(m.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var mc,nc,oc=m.expr.attrHandle,pc=/^(?:checked|selected)$/i,qc=k.getSetAttribute,rc=k.input;m.fn.extend({attr:function(a,b){return V(this,m.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){m.removeAttr(this,a)})}}),m.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===K?m.prop(a,b,c):(1===f&&m.isXMLDoc(a)||(b=b.toLowerCase(),d=m.attrHooks[b]||(m.expr.match.bool.test(b)?nc:mc)),void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=m.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void m.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=m.propFix[c]||c,m.expr.match.bool.test(c)?rc&&qc||!pc.test(c)?a[d]=!1:a[m.camelCase("default-"+c)]=a[d]=!1:m.attr(a,c,""),a.removeAttribute(qc?c:d)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&m.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),nc={set:function(a,b,c){return b===!1?m.removeAttr(a,c):rc&&qc||!pc.test(c)?a.setAttribute(!qc&&m.propFix[c]||c,c):a[m.camelCase("default-"+c)]=a[c]=!0,c}},m.each(m.expr.match.bool.source.match(/\w+/g),function(a,b){var c=oc[b]||m.find.attr;oc[b]=rc&&qc||!pc.test(b)?function(a,b,d){var e,f;return d||(f=oc[b],oc[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,oc[b]=f),e}:function(a,b,c){return c?void 0:a[m.camelCase("default-"+b)]?b.toLowerCase():null}}),rc&&qc||(m.attrHooks.value={set:function(a,b,c){return m.nodeName(a,"input")?void(a.defaultValue=b):mc&&mc.set(a,b,c)}}),qc||(mc={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},oc.id=oc.name=oc.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},m.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:mc.set},m.attrHooks.contenteditable={set:function(a,b,c){mc.set(a,""===b?!1:b,c)}},m.each(["width","height"],function(a,b){m.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),k.style||(m.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var sc=/^(?:input|select|textarea|button|object)$/i,tc=/^(?:a|area)$/i;m.fn.extend({prop:function(a,b){return V(this,m.prop,a,b,arguments.length>1)},removeProp:function(a){return a=m.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),m.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!m.isXMLDoc(a),f&&(b=m.propFix[b]||b,e=m.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=m.find.attr(a,"tabindex");return b?parseInt(b,10):sc.test(a.nodeName)||tc.test(a.nodeName)&&a.href?0:-1}}}}),k.hrefNormalized||m.each(["href","src"],function(a,b){m.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),k.optSelected||(m.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}}),m.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){m.propFix[this.toLowerCase()]=this}),k.enctype||(m.propFix.enctype="encoding");var uc=/[\t\r\n\f]/g;m.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j="string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).addClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(uc," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=m.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=0===arguments.length||"string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).removeClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(uc," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?m.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(m.isFunction(a)?function(c){m(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=m(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===K||"boolean"===c)&&(this.className&&m._data(this,"__className__",this.className),this.className=this.className||a===!1?"":m._data(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(uc," ").indexOf(b)>=0)return!0;return!1}}),m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){m.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),m.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var vc=m.now(),wc=/\?/,xc=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;m.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=m.trim(b+"");return e&&!m.trim(e.replace(xc,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():m.error("Invalid JSON: "+b)},m.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||m.error("Invalid XML: "+b),c};var yc,zc,Ac=/#.*$/,Bc=/([?&])_=[^&]*/,Cc=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Dc=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ec=/^(?:GET|HEAD)$/,Fc=/^\/\//,Gc=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Hc={},Ic={},Jc="*/".concat("*");try{zc=location.href}catch(Kc){zc=y.createElement("a"),zc.href="",zc=zc.href}yc=Gc.exec(zc.toLowerCase())||[];function Lc(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(m.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Mc(a,b,c,d){var e={},f=a===Ic;function g(h){var i;return e[h]=!0,m.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Nc(a,b){var c,d,e=m.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&m.extend(!0,a,c),a}function Oc(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Pc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}m.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:zc,type:"GET",isLocal:Dc.test(yc[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Jc,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":m.parseJSON,"text xml":m.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Nc(Nc(a,m.ajaxSettings),b):Nc(m.ajaxSettings,a)},ajaxPrefilter:Lc(Hc),ajaxTransport:Lc(Ic),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=m.ajaxSetup({},b),l=k.context||k,n=k.context&&(l.nodeType||l.jquery)?m(l):m.event,o=m.Deferred(),p=m.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!j){j={};while(b=Cc.exec(f))j[b[1].toLowerCase()]=b[2]}b=j[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?f:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return i&&i.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||zc)+"").replace(Ac,"").replace(Fc,yc[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=m.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(c=Gc.exec(k.url.toLowerCase()),k.crossDomain=!(!c||c[1]===yc[1]&&c[2]===yc[2]&&(c[3]||("http:"===c[1]?"80":"443"))===(yc[3]||("http:"===yc[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=m.param(k.data,k.traditional)),Mc(Hc,k,b,v),2===t)return v;h=k.global,h&&0===m.active++&&m.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!Ec.test(k.type),e=k.url,k.hasContent||(k.data&&(e=k.url+=(wc.test(e)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=Bc.test(e)?e.replace(Bc,"$1_="+vc++):e+(wc.test(e)?"&":"?")+"_="+vc++)),k.ifModified&&(m.lastModified[e]&&v.setRequestHeader("If-Modified-Since",m.lastModified[e]),m.etag[e]&&v.setRequestHeader("If-None-Match",m.etag[e])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+Jc+"; q=0.01":""):k.accepts["*"]);for(d in k.headers)v.setRequestHeader(d,k.headers[d]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(d in{success:1,error:1,complete:1})v[d](k[d]);if(i=Mc(Ic,k,b,v)){v.readyState=1,h&&n.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,i.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,c,d){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),i=void 0,f=d||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,c&&(u=Oc(k,v,c)),u=Pc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(m.lastModified[e]=w),w=v.getResponseHeader("etag"),w&&(m.etag[e]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,h&&n.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),h&&(n.trigger("ajaxComplete",[v,k]),--m.active||m.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return m.get(a,b,c,"json")},getScript:function(a,b){return m.get(a,void 0,b,"script")}}),m.each(["get","post"],function(a,b){m[b]=function(a,c,d,e){return m.isFunction(c)&&(e=e||d,d=c,c=void 0),m.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),m.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){m.fn[b]=function(a){return this.on(b,a)}}),m._evalUrl=function(a){return m.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},m.fn.extend({wrapAll:function(a){if(m.isFunction(a))return this.each(function(b){m(this).wrapAll(a.call(this,b))});if(this[0]){var b=m(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return this.each(m.isFunction(a)?function(b){m(this).wrapInner(a.call(this,b))}:function(){var b=m(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=m.isFunction(a);return this.each(function(c){m(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){m.nodeName(this,"body")||m(this).replaceWith(this.childNodes)}).end()}}),m.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0||!k.reliableHiddenOffsets()&&"none"===(a.style&&a.style.display||m.css(a,"display"))},m.expr.filters.visible=function(a){return!m.expr.filters.hidden(a)};var Qc=/%20/g,Rc=/\[\]$/,Sc=/\r?\n/g,Tc=/^(?:submit|button|image|reset|file)$/i,Uc=/^(?:input|select|textarea|keygen)/i;function Vc(a,b,c,d){var e;if(m.isArray(b))m.each(b,function(b,e){c||Rc.test(a)?d(a,e):Vc(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==m.type(b))d(a,b);else for(e in b)Vc(a+"["+e+"]",b[e],c,d)}m.param=function(a,b){var c,d=[],e=function(a,b){b=m.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=m.ajaxSettings&&m.ajaxSettings.traditional),m.isArray(a)||a.jquery&&!m.isPlainObject(a))m.each(a,function(){e(this.name,this.value)});else for(c in a)Vc(c,a[c],b,e);return d.join("&").replace(Qc,"+")},m.fn.extend({serialize:function(){return m.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=m.prop(this,"elements");return a?m.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!m(this).is(":disabled")&&Uc.test(this.nodeName)&&!Tc.test(a)&&(this.checked||!W.test(a))}).map(function(a,b){var c=m(this).val();return null==c?null:m.isArray(c)?m.map(c,function(a){return{name:b.name,value:a.replace(Sc,"\r\n")}}):{name:b.name,value:c.replace(Sc,"\r\n")}}).get()}}),m.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&Zc()||$c()}:Zc;var Wc=0,Xc={},Yc=m.ajaxSettings.xhr();a.ActiveXObject&&m(a).on("unload",function(){for(var a in Xc)Xc[a](void 0,!0)}),k.cors=!!Yc&&"withCredentials"in Yc,Yc=k.ajax=!!Yc,Yc&&m.ajaxTransport(function(a){if(!a.crossDomain||k.cors){var b;return{send:function(c,d){var e,f=a.xhr(),g=++Wc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)void 0!==c[e]&&f.setRequestHeader(e,c[e]+"");f.send(a.hasContent&&a.data||null),b=function(c,e){var h,i,j;if(b&&(e||4===f.readyState))if(delete Xc[g],b=void 0,f.onreadystatechange=m.noop,e)4!==f.readyState&&f.abort();else{j={},h=f.status,"string"==typeof f.responseText&&(j.text=f.responseText);try{i=f.statusText}catch(k){i=""}h||!a.isLocal||a.crossDomain?1223===h&&(h=204):h=j.text?200:404}j&&d(h,i,j,f.getAllResponseHeaders())},a.async?4===f.readyState?setTimeout(b):f.onreadystatechange=Xc[g]=b:b()},abort:function(){b&&b(void 0,!0)}}}});function Zc(){try{return new a.XMLHttpRequest}catch(b){}}function $c(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}m.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return m.globalEval(a),a}}}),m.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),m.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=y.head||m("head")[0]||y.documentElement;return{send:function(d,e){b=y.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||e(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var _c=[],ad=/(=)\?(?=&|$)|\?\?/;m.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=_c.pop()||m.expando+"_"+vc++;return this[a]=!0,a}}),m.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(ad.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&ad.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=m.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(ad,"$1"+e):b.jsonp!==!1&&(b.url+=(wc.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||m.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,_c.push(e)),g&&m.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),m.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||y;var d=u.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=m.buildFragment([a],b,e),e&&e.length&&m(e).remove(),m.merge([],d.childNodes))};var bd=m.fn.load;m.fn.load=function(a,b,c){if("string"!=typeof a&&bd)return bd.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=m.trim(a.slice(h,a.length)),a=a.slice(0,h)),m.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(f="POST"),g.length>0&&m.ajax({url:a,type:f,dataType:"html",data:b}).done(function(a){e=arguments,g.html(d?m("<div>").append(m.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,e||[a.responseText,b,a])}),this},m.expr.filters.animated=function(a){return m.grep(m.timers,function(b){return a===b.elem}).length};var cd=a.document.documentElement;function dd(a){return m.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}m.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=m.css(a,"position"),l=m(a),n={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=m.css(a,"top"),i=m.css(a,"left"),j=("absolute"===k||"fixed"===k)&&m.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),m.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(n.top=b.top-h.top+g),null!=b.left&&(n.left=b.left-h.left+e),"using"in b?b.using.call(a,n):l.css(n)}},m.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){m.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,m.contains(b,e)?(typeof e.getBoundingClientRect!==K&&(d=e.getBoundingClientRect()),c=dd(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===m.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),m.nodeName(a[0],"html")||(c=a.offset()),c.top+=m.css(a[0],"borderTopWidth",!0),c.left+=m.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-m.css(d,"marginTop",!0),left:b.left-c.left-m.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||cd;while(a&&!m.nodeName(a,"html")&&"static"===m.css(a,"position"))a=a.offsetParent;return a||cd})}}),m.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);m.fn[a]=function(d){return V(this,function(a,d,e){var f=dd(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?m(f).scrollLeft():e,c?e:m(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),m.each(["top","left"],function(a,b){m.cssHooks[b]=Lb(k.pixelPosition,function(a,c){return c?(c=Jb(a,b),Hb.test(c)?m(a).position()[b]+"px":c):void 0})}),m.each({Height:"height",Width:"width"},function(a,b){m.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){m.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return V(this,function(b,c,d){var e;return m.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?m.css(b,c,g):m.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),m.fn.size=function(){return this.length},m.fn.andSelf=m.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return m});var ed=a.jQuery,fd=a.$;return m.noConflict=function(b){return a.$===m&&(a.$=fd),b&&a.jQuery===m&&(a.jQuery=ed),m},typeof b===K&&(a.jQuery=a.$=m),m});

/*! jQuery UI - v1.11.4 - 2015-03-11
* http://jqueryui.com
* Includes: core.js, widget.js, mouse.js, position.js, accordion.js, autocomplete.js, button.js, datepicker.js, dialog.js, draggable.js, droppable.js, effect.js, effect-blind.js, effect-bounce.js, effect-clip.js, effect-drop.js, effect-explode.js, effect-fade.js, effect-fold.js, effect-highlight.js, effect-puff.js, effect-pulsate.js, effect-scale.js, effect-shake.js, effect-size.js, effect-slide.js, effect-transfer.js, menu.js, progressbar.js, resizable.js, selectable.js, selectmenu.js, slider.js, sortable.js, spinner.js, tabs.js, tooltip.js
* Copyright 2015 jQuery Foundation and other contributors; Licensed MIT */

(function(e){"function"==typeof define&&define.amd?define('jquery-ui-1.11.4.min',["jquery"],e):e(jQuery)})(function(e){function t(t,s){var n,a,o,r=t.nodeName.toLowerCase();return"area"===r?(n=t.parentNode,a=n.name,t.href&&a&&"map"===n.nodeName.toLowerCase()?(o=e("img[usemap='#"+a+"']")[0],!!o&&i(o)):!1):(/^(input|select|textarea|button|object)$/.test(r)?!t.disabled:"a"===r?t.href||s:s)&&i(t)}function i(t){return e.expr.filters.visible(t)&&!e(t).parents().addBack().filter(function(){return"hidden"===e.css(this,"visibility")}).length}function s(e){for(var t,i;e.length&&e[0]!==document;){if(t=e.css("position"),("absolute"===t||"relative"===t||"fixed"===t)&&(i=parseInt(e.css("zIndex"),10),!isNaN(i)&&0!==i))return i;e=e.parent()}return 0}function n(){this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="ui-datepicker-div",this._inlineClass="ui-datepicker-inline",this._appendClass="ui-datepicker-append",this._triggerClass="ui-datepicker-trigger",this._dialogClass="ui-datepicker-dialog",this._disableClass="ui-datepicker-disabled",this._unselectableClass="ui-datepicker-unselectable",this._currentClass="ui-datepicker-current-day",this._dayOverClass="ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},e.extend(this._defaults,this.regional[""]),this.regional.en=e.extend(!0,{},this.regional[""]),this.regional["en-US"]=e.extend(!0,{},this.regional.en),this.dpDiv=a(e("<div id='"+this._mainDivId+"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))}function a(t){var i="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return t.delegate(i,"mouseout",function(){e(this).removeClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&e(this).removeClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&e(this).removeClass("ui-datepicker-next-hover")}).delegate(i,"mouseover",o)}function o(){e.datepicker._isDisabledDatepicker(v.inline?v.dpDiv.parent()[0]:v.input[0])||(e(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),e(this).addClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&e(this).addClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&e(this).addClass("ui-datepicker-next-hover"))}function r(t,i){e.extend(t,i);for(var s in i)null==i[s]&&(t[s]=i[s]);return t}function h(e){return function(){var t=this.element.val();e.apply(this,arguments),this._refresh(),t!==this.element.val()&&this._trigger("change")}}e.ui=e.ui||{},e.extend(e.ui,{version:"1.11.4",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),e.fn.extend({scrollParent:function(t){var i=this.css("position"),s="absolute"===i,n=t?/(auto|scroll|hidden)/:/(auto|scroll)/,a=this.parents().filter(function(){var t=e(this);return s&&"static"===t.css("position")?!1:n.test(t.css("overflow")+t.css("overflow-y")+t.css("overflow-x"))}).eq(0);return"fixed"!==i&&a.length?a:e(this[0].ownerDocument||document)},uniqueId:function(){var e=0;return function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++e)})}}(),removeUniqueId:function(){return this.each(function(){/^ui-id-\d+$/.test(this.id)&&e(this).removeAttr("id")})}}),e.extend(e.expr[":"],{data:e.expr.createPseudo?e.expr.createPseudo(function(t){return function(i){return!!e.data(i,t)}}):function(t,i,s){return!!e.data(t,s[3])},focusable:function(i){return t(i,!isNaN(e.attr(i,"tabindex")))},tabbable:function(i){var s=e.attr(i,"tabindex"),n=isNaN(s);return(n||s>=0)&&t(i,!n)}}),e("<a>").outerWidth(1).jquery||e.each(["Width","Height"],function(t,i){function s(t,i,s,a){return e.each(n,function(){i-=parseFloat(e.css(t,"padding"+this))||0,s&&(i-=parseFloat(e.css(t,"border"+this+"Width"))||0),a&&(i-=parseFloat(e.css(t,"margin"+this))||0)}),i}var n="Width"===i?["Left","Right"]:["Top","Bottom"],a=i.toLowerCase(),o={innerWidth:e.fn.innerWidth,innerHeight:e.fn.innerHeight,outerWidth:e.fn.outerWidth,outerHeight:e.fn.outerHeight};e.fn["inner"+i]=function(t){return void 0===t?o["inner"+i].call(this):this.each(function(){e(this).css(a,s(this,t)+"px")})},e.fn["outer"+i]=function(t,n){return"number"!=typeof t?o["outer"+i].call(this,t):this.each(function(){e(this).css(a,s(this,t,!0,n)+"px")})}}),e.fn.addBack||(e.fn.addBack=function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}),e("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(e.fn.removeData=function(t){return function(i){return arguments.length?t.call(this,e.camelCase(i)):t.call(this)}}(e.fn.removeData)),e.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()),e.fn.extend({focus:function(t){return function(i,s){return"number"==typeof i?this.each(function(){var t=this;setTimeout(function(){e(t).focus(),s&&s.call(t)},i)}):t.apply(this,arguments)}}(e.fn.focus),disableSelection:function(){var e="onselectstart"in document.createElement("div")?"selectstart":"mousedown";return function(){return this.bind(e+".ui-disableSelection",function(e){e.preventDefault()})}}(),enableSelection:function(){return this.unbind(".ui-disableSelection")},zIndex:function(t){if(void 0!==t)return this.css("zIndex",t);if(this.length)for(var i,s,n=e(this[0]);n.length&&n[0]!==document;){if(i=n.css("position"),("absolute"===i||"relative"===i||"fixed"===i)&&(s=parseInt(n.css("zIndex"),10),!isNaN(s)&&0!==s))return s;n=n.parent()}return 0}}),e.ui.plugin={add:function(t,i,s){var n,a=e.ui[t].prototype;for(n in s)a.plugins[n]=a.plugins[n]||[],a.plugins[n].push([i,s[n]])},call:function(e,t,i,s){var n,a=e.plugins[t];if(a&&(s||e.element[0].parentNode&&11!==e.element[0].parentNode.nodeType))for(n=0;a.length>n;n++)e.options[a[n][0]]&&a[n][1].apply(e.element,i)}};var l=0,u=Array.prototype.slice;e.cleanData=function(t){return function(i){var s,n,a;for(a=0;null!=(n=i[a]);a++)try{s=e._data(n,"events"),s&&s.remove&&e(n).triggerHandler("remove")}catch(o){}t(i)}}(e.cleanData),e.widget=function(t,i,s){var n,a,o,r,h={},l=t.split(".")[0];return t=t.split(".")[1],n=l+"-"+t,s||(s=i,i=e.Widget),e.expr[":"][n.toLowerCase()]=function(t){return!!e.data(t,n)},e[l]=e[l]||{},a=e[l][t],o=e[l][t]=function(e,t){return this._createWidget?(arguments.length&&this._createWidget(e,t),void 0):new o(e,t)},e.extend(o,a,{version:s.version,_proto:e.extend({},s),_childConstructors:[]}),r=new i,r.options=e.widget.extend({},r.options),e.each(s,function(t,s){return e.isFunction(s)?(h[t]=function(){var e=function(){return i.prototype[t].apply(this,arguments)},n=function(e){return i.prototype[t].apply(this,e)};return function(){var t,i=this._super,a=this._superApply;return this._super=e,this._superApply=n,t=s.apply(this,arguments),this._super=i,this._superApply=a,t}}(),void 0):(h[t]=s,void 0)}),o.prototype=e.widget.extend(r,{widgetEventPrefix:a?r.widgetEventPrefix||t:t},h,{constructor:o,namespace:l,widgetName:t,widgetFullName:n}),a?(e.each(a._childConstructors,function(t,i){var s=i.prototype;e.widget(s.namespace+"."+s.widgetName,o,i._proto)}),delete a._childConstructors):i._childConstructors.push(o),e.widget.bridge(t,o),o},e.widget.extend=function(t){for(var i,s,n=u.call(arguments,1),a=0,o=n.length;o>a;a++)for(i in n[a])s=n[a][i],n[a].hasOwnProperty(i)&&void 0!==s&&(t[i]=e.isPlainObject(s)?e.isPlainObject(t[i])?e.widget.extend({},t[i],s):e.widget.extend({},s):s);return t},e.widget.bridge=function(t,i){var s=i.prototype.widgetFullName||t;e.fn[t]=function(n){var a="string"==typeof n,o=u.call(arguments,1),r=this;return a?this.each(function(){var i,a=e.data(this,s);return"instance"===n?(r=a,!1):a?e.isFunction(a[n])&&"_"!==n.charAt(0)?(i=a[n].apply(a,o),i!==a&&void 0!==i?(r=i&&i.jquery?r.pushStack(i.get()):i,!1):void 0):e.error("no such method '"+n+"' for "+t+" widget instance"):e.error("cannot call methods on "+t+" prior to initialization; "+"attempted to call method '"+n+"'")}):(o.length&&(n=e.widget.extend.apply(null,[n].concat(o))),this.each(function(){var t=e.data(this,s);t?(t.option(n||{}),t._init&&t._init()):e.data(this,s,new i(n,this))})),r}},e.Widget=function(){},e.Widget._childConstructors=[],e.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(t,i){i=e(i||this.defaultElement||this)[0],this.element=e(i),this.uuid=l++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=e(),this.hoverable=e(),this.focusable=e(),i!==this&&(e.data(i,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===i&&this.destroy()}}),this.document=e(i.style?i.ownerDocument:i.document||i),this.window=e(this.document[0].defaultView||this.document[0].parentWindow)),this.options=e.widget.extend({},this.options,this._getCreateOptions(),t),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:e.noop,_getCreateEventData:e.noop,_create:e.noop,_init:e.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled "+"ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:e.noop,widget:function(){return this.element},option:function(t,i){var s,n,a,o=t;if(0===arguments.length)return e.widget.extend({},this.options);if("string"==typeof t)if(o={},s=t.split("."),t=s.shift(),s.length){for(n=o[t]=e.widget.extend({},this.options[t]),a=0;s.length-1>a;a++)n[s[a]]=n[s[a]]||{},n=n[s[a]];if(t=s.pop(),1===arguments.length)return void 0===n[t]?null:n[t];n[t]=i}else{if(1===arguments.length)return void 0===this.options[t]?null:this.options[t];o[t]=i}return this._setOptions(o),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return this.options[e]=t,"disabled"===e&&(this.widget().toggleClass(this.widgetFullName+"-disabled",!!t),t&&(this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus"))),this},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_on:function(t,i,s){var n,a=this;"boolean"!=typeof t&&(s=i,i=t,t=!1),s?(i=n=e(i),this.bindings=this.bindings.add(i)):(s=i,i=this.element,n=this.widget()),e.each(s,function(s,o){function r(){return t||a.options.disabled!==!0&&!e(this).hasClass("ui-state-disabled")?("string"==typeof o?a[o]:o).apply(a,arguments):void 0}"string"!=typeof o&&(r.guid=o.guid=o.guid||r.guid||e.guid++);var h=s.match(/^([\w:-]*)\s*(.*)$/),l=h[1]+a.eventNamespace,u=h[2];u?n.delegate(u,l,r):i.bind(l,r)})},_off:function(t,i){i=(i||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,t.unbind(i).undelegate(i),this.bindings=e(this.bindings.not(t).get()),this.focusable=e(this.focusable.not(t).get()),this.hoverable=e(this.hoverable.not(t).get())},_delay:function(e,t){function i(){return("string"==typeof e?s[e]:e).apply(s,arguments)}var s=this;return setTimeout(i,t||0)},_hoverable:function(t){this.hoverable=this.hoverable.add(t),this._on(t,{mouseenter:function(t){e(t.currentTarget).addClass("ui-state-hover")},mouseleave:function(t){e(t.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(t){this.focusable=this.focusable.add(t),this._on(t,{focusin:function(t){e(t.currentTarget).addClass("ui-state-focus")},focusout:function(t){e(t.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(t,i,s){var n,a,o=this.options[t];if(s=s||{},i=e.Event(i),i.type=(t===this.widgetEventPrefix?t:this.widgetEventPrefix+t).toLowerCase(),i.target=this.element[0],a=i.originalEvent)for(n in a)n in i||(i[n]=a[n]);return this.element.trigger(i,s),!(e.isFunction(o)&&o.apply(this.element[0],[i].concat(s))===!1||i.isDefaultPrevented())}},e.each({show:"fadeIn",hide:"fadeOut"},function(t,i){e.Widget.prototype["_"+t]=function(s,n,a){"string"==typeof n&&(n={effect:n});var o,r=n?n===!0||"number"==typeof n?i:n.effect||i:t;n=n||{},"number"==typeof n&&(n={duration:n}),o=!e.isEmptyObject(n),n.complete=a,n.delay&&s.delay(n.delay),o&&e.effects&&e.effects.effect[r]?s[t](n):r!==t&&s[r]?s[r](n.duration,n.easing,a):s.queue(function(i){e(this)[t](),a&&a.call(s[0]),i()})}}),e.widget;var d=!1;e(document).mouseup(function(){d=!1}),e.widget("ui.mouse",{version:"1.11.4",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.bind("mousedown."+this.widgetName,function(e){return t._mouseDown(e)}).bind("click."+this.widgetName,function(i){return!0===e.data(i.target,t.widgetName+".preventClickEvent")?(e.removeData(i.target,t.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):void 0}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(t){if(!d){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(t),this._mouseDownEvent=t;var i=this,s=1===t.which,n="string"==typeof this.options.cancel&&t.target.nodeName?e(t.target).closest(this.options.cancel).length:!1;return s&&!n&&this._mouseCapture(t)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){i.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=this._mouseStart(t)!==!1,!this._mouseStarted)?(t.preventDefault(),!0):(!0===e.data(t.target,this.widgetName+".preventClickEvent")&&e.removeData(t.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return i._mouseMove(e)},this._mouseUpDelegate=function(e){return i._mouseUp(e)},this.document.bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),t.preventDefault(),d=!0,!0)):!0}},_mouseMove:function(t){if(this._mouseMoved){if(e.ui.ie&&(!document.documentMode||9>document.documentMode)&&!t.button)return this._mouseUp(t);if(!t.which)return this._mouseUp(t)}return(t.which||t.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(t),t.preventDefault()):(this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,t)!==!1,this._mouseStarted?this._mouseDrag(t):this._mouseUp(t)),!this._mouseStarted)},_mouseUp:function(t){return this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,t.target===this._mouseDownEvent.target&&e.data(t.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(t)),d=!1,!1},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}}),function(){function t(e,t,i){return[parseFloat(e[0])*(p.test(e[0])?t/100:1),parseFloat(e[1])*(p.test(e[1])?i/100:1)]}function i(t,i){return parseInt(e.css(t,i),10)||0}function s(t){var i=t[0];return 9===i.nodeType?{width:t.width(),height:t.height(),offset:{top:0,left:0}}:e.isWindow(i)?{width:t.width(),height:t.height(),offset:{top:t.scrollTop(),left:t.scrollLeft()}}:i.preventDefault?{width:0,height:0,offset:{top:i.pageY,left:i.pageX}}:{width:t.outerWidth(),height:t.outerHeight(),offset:t.offset()}}e.ui=e.ui||{};var n,a,o=Math.max,r=Math.abs,h=Math.round,l=/left|center|right/,u=/top|center|bottom/,d=/[\+\-]\d+(\.[\d]+)?%?/,c=/^\w+/,p=/%$/,f=e.fn.position;e.position={scrollbarWidth:function(){if(void 0!==n)return n;var t,i,s=e("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),a=s.children()[0];return e("body").append(s),t=a.offsetWidth,s.css("overflow","scroll"),i=a.offsetWidth,t===i&&(i=s[0].clientWidth),s.remove(),n=t-i},getScrollInfo:function(t){var i=t.isWindow||t.isDocument?"":t.element.css("overflow-x"),s=t.isWindow||t.isDocument?"":t.element.css("overflow-y"),n="scroll"===i||"auto"===i&&t.width<t.element[0].scrollWidth,a="scroll"===s||"auto"===s&&t.height<t.element[0].scrollHeight;return{width:a?e.position.scrollbarWidth():0,height:n?e.position.scrollbarWidth():0}},getWithinInfo:function(t){var i=e(t||window),s=e.isWindow(i[0]),n=!!i[0]&&9===i[0].nodeType;return{element:i,isWindow:s,isDocument:n,offset:i.offset()||{left:0,top:0},scrollLeft:i.scrollLeft(),scrollTop:i.scrollTop(),width:s||n?i.width():i.outerWidth(),height:s||n?i.height():i.outerHeight()}}},e.fn.position=function(n){if(!n||!n.of)return f.apply(this,arguments);n=e.extend({},n);var p,m,g,v,y,b,_=e(n.of),x=e.position.getWithinInfo(n.within),w=e.position.getScrollInfo(x),k=(n.collision||"flip").split(" "),T={};return b=s(_),_[0].preventDefault&&(n.at="left top"),m=b.width,g=b.height,v=b.offset,y=e.extend({},v),e.each(["my","at"],function(){var e,t,i=(n[this]||"").split(" ");1===i.length&&(i=l.test(i[0])?i.concat(["center"]):u.test(i[0])?["center"].concat(i):["center","center"]),i[0]=l.test(i[0])?i[0]:"center",i[1]=u.test(i[1])?i[1]:"center",e=d.exec(i[0]),t=d.exec(i[1]),T[this]=[e?e[0]:0,t?t[0]:0],n[this]=[c.exec(i[0])[0],c.exec(i[1])[0]]}),1===k.length&&(k[1]=k[0]),"right"===n.at[0]?y.left+=m:"center"===n.at[0]&&(y.left+=m/2),"bottom"===n.at[1]?y.top+=g:"center"===n.at[1]&&(y.top+=g/2),p=t(T.at,m,g),y.left+=p[0],y.top+=p[1],this.each(function(){var s,l,u=e(this),d=u.outerWidth(),c=u.outerHeight(),f=i(this,"marginLeft"),b=i(this,"marginTop"),D=d+f+i(this,"marginRight")+w.width,S=c+b+i(this,"marginBottom")+w.height,M=e.extend({},y),C=t(T.my,u.outerWidth(),u.outerHeight());"right"===n.my[0]?M.left-=d:"center"===n.my[0]&&(M.left-=d/2),"bottom"===n.my[1]?M.top-=c:"center"===n.my[1]&&(M.top-=c/2),M.left+=C[0],M.top+=C[1],a||(M.left=h(M.left),M.top=h(M.top)),s={marginLeft:f,marginTop:b},e.each(["left","top"],function(t,i){e.ui.position[k[t]]&&e.ui.position[k[t]][i](M,{targetWidth:m,targetHeight:g,elemWidth:d,elemHeight:c,collisionPosition:s,collisionWidth:D,collisionHeight:S,offset:[p[0]+C[0],p[1]+C[1]],my:n.my,at:n.at,within:x,elem:u})}),n.using&&(l=function(e){var t=v.left-M.left,i=t+m-d,s=v.top-M.top,a=s+g-c,h={target:{element:_,left:v.left,top:v.top,width:m,height:g},element:{element:u,left:M.left,top:M.top,width:d,height:c},horizontal:0>i?"left":t>0?"right":"center",vertical:0>a?"top":s>0?"bottom":"middle"};d>m&&m>r(t+i)&&(h.horizontal="center"),c>g&&g>r(s+a)&&(h.vertical="middle"),h.important=o(r(t),r(i))>o(r(s),r(a))?"horizontal":"vertical",n.using.call(this,e,h)}),u.offset(e.extend(M,{using:l}))})},e.ui.position={fit:{left:function(e,t){var i,s=t.within,n=s.isWindow?s.scrollLeft:s.offset.left,a=s.width,r=e.left-t.collisionPosition.marginLeft,h=n-r,l=r+t.collisionWidth-a-n;t.collisionWidth>a?h>0&&0>=l?(i=e.left+h+t.collisionWidth-a-n,e.left+=h-i):e.left=l>0&&0>=h?n:h>l?n+a-t.collisionWidth:n:h>0?e.left+=h:l>0?e.left-=l:e.left=o(e.left-r,e.left)},top:function(e,t){var i,s=t.within,n=s.isWindow?s.scrollTop:s.offset.top,a=t.within.height,r=e.top-t.collisionPosition.marginTop,h=n-r,l=r+t.collisionHeight-a-n;t.collisionHeight>a?h>0&&0>=l?(i=e.top+h+t.collisionHeight-a-n,e.top+=h-i):e.top=l>0&&0>=h?n:h>l?n+a-t.collisionHeight:n:h>0?e.top+=h:l>0?e.top-=l:e.top=o(e.top-r,e.top)}},flip:{left:function(e,t){var i,s,n=t.within,a=n.offset.left+n.scrollLeft,o=n.width,h=n.isWindow?n.scrollLeft:n.offset.left,l=e.left-t.collisionPosition.marginLeft,u=l-h,d=l+t.collisionWidth-o-h,c="left"===t.my[0]?-t.elemWidth:"right"===t.my[0]?t.elemWidth:0,p="left"===t.at[0]?t.targetWidth:"right"===t.at[0]?-t.targetWidth:0,f=-2*t.offset[0];0>u?(i=e.left+c+p+f+t.collisionWidth-o-a,(0>i||r(u)>i)&&(e.left+=c+p+f)):d>0&&(s=e.left-t.collisionPosition.marginLeft+c+p+f-h,(s>0||d>r(s))&&(e.left+=c+p+f))},top:function(e,t){var i,s,n=t.within,a=n.offset.top+n.scrollTop,o=n.height,h=n.isWindow?n.scrollTop:n.offset.top,l=e.top-t.collisionPosition.marginTop,u=l-h,d=l+t.collisionHeight-o-h,c="top"===t.my[1],p=c?-t.elemHeight:"bottom"===t.my[1]?t.elemHeight:0,f="top"===t.at[1]?t.targetHeight:"bottom"===t.at[1]?-t.targetHeight:0,m=-2*t.offset[1];0>u?(s=e.top+p+f+m+t.collisionHeight-o-a,(0>s||r(u)>s)&&(e.top+=p+f+m)):d>0&&(i=e.top-t.collisionPosition.marginTop+p+f+m-h,(i>0||d>r(i))&&(e.top+=p+f+m))}},flipfit:{left:function(){e.ui.position.flip.left.apply(this,arguments),e.ui.position.fit.left.apply(this,arguments)},top:function(){e.ui.position.flip.top.apply(this,arguments),e.ui.position.fit.top.apply(this,arguments)}}},function(){var t,i,s,n,o,r=document.getElementsByTagName("body")[0],h=document.createElement("div");t=document.createElement(r?"div":"body"),s={visibility:"hidden",width:0,height:0,border:0,margin:0,background:"none"},r&&e.extend(s,{position:"absolute",left:"-1000px",top:"-1000px"});for(o in s)t.style[o]=s[o];t.appendChild(h),i=r||document.documentElement,i.insertBefore(t,i.firstChild),h.style.cssText="position: absolute; left: 10.7432222px;",n=e(h).offset().left,a=n>10&&11>n,t.innerHTML="",i.removeChild(t)}()}(),e.ui.position,e.widget("ui.accordion",{version:"1.11.4",options:{active:0,animate:{},collapsible:!1,event:"click",header:"> li > :first-child,> :not(li):even",heightStyle:"auto",icons:{activeHeader:"ui-icon-triangle-1-s",header:"ui-icon-triangle-1-e"},activate:null,beforeActivate:null},hideProps:{borderTopWidth:"hide",borderBottomWidth:"hide",paddingTop:"hide",paddingBottom:"hide",height:"hide"},showProps:{borderTopWidth:"show",borderBottomWidth:"show",paddingTop:"show",paddingBottom:"show",height:"show"},_create:function(){var t=this.options;this.prevShow=this.prevHide=e(),this.element.addClass("ui-accordion ui-widget ui-helper-reset").attr("role","tablist"),t.collapsible||t.active!==!1&&null!=t.active||(t.active=0),this._processPanels(),0>t.active&&(t.active+=this.headers.length),this._refresh()},_getCreateEventData:function(){return{header:this.active,panel:this.active.length?this.active.next():e()}},_createIcons:function(){var t=this.options.icons;t&&(e("<span>").addClass("ui-accordion-header-icon ui-icon "+t.header).prependTo(this.headers),this.active.children(".ui-accordion-header-icon").removeClass(t.header).addClass(t.activeHeader),this.headers.addClass("ui-accordion-icons"))},_destroyIcons:function(){this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove()},_destroy:function(){var e;this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role"),this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").removeUniqueId(),this._destroyIcons(),e=this.headers.next().removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").css("display","").removeAttr("role").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeUniqueId(),"content"!==this.options.heightStyle&&e.css("height","")},_setOption:function(e,t){return"active"===e?(this._activate(t),void 0):("event"===e&&(this.options.event&&this._off(this.headers,this.options.event),this._setupEvents(t)),this._super(e,t),"collapsible"!==e||t||this.options.active!==!1||this._activate(0),"icons"===e&&(this._destroyIcons(),t&&this._createIcons()),"disabled"===e&&(this.element.toggleClass("ui-state-disabled",!!t).attr("aria-disabled",t),this.headers.add(this.headers.next()).toggleClass("ui-state-disabled",!!t)),void 0)},_keydown:function(t){if(!t.altKey&&!t.ctrlKey){var i=e.ui.keyCode,s=this.headers.length,n=this.headers.index(t.target),a=!1;switch(t.keyCode){case i.RIGHT:case i.DOWN:a=this.headers[(n+1)%s];break;case i.LEFT:case i.UP:a=this.headers[(n-1+s)%s];break;case i.SPACE:case i.ENTER:this._eventHandler(t);break;case i.HOME:a=this.headers[0];break;case i.END:a=this.headers[s-1]}a&&(e(t.target).attr("tabIndex",-1),e(a).attr("tabIndex",0),a.focus(),t.preventDefault())}},_panelKeyDown:function(t){t.keyCode===e.ui.keyCode.UP&&t.ctrlKey&&e(t.currentTarget).prev().focus()},refresh:function(){var t=this.options;this._processPanels(),t.active===!1&&t.collapsible===!0||!this.headers.length?(t.active=!1,this.active=e()):t.active===!1?this._activate(0):this.active.length&&!e.contains(this.element[0],this.active[0])?this.headers.length===this.headers.find(".ui-state-disabled").length?(t.active=!1,this.active=e()):this._activate(Math.max(0,t.active-1)):t.active=this.headers.index(this.active),this._destroyIcons(),this._refresh()},_processPanels:function(){var e=this.headers,t=this.panels;this.headers=this.element.find(this.options.header).addClass("ui-accordion-header ui-state-default ui-corner-all"),this.panels=this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").filter(":not(.ui-accordion-content-active)").hide(),t&&(this._off(e.not(this.headers)),this._off(t.not(this.panels)))},_refresh:function(){var t,i=this.options,s=i.heightStyle,n=this.element.parent();this.active=this._findActive(i.active).addClass("ui-accordion-header-active ui-state-active ui-corner-top").removeClass("ui-corner-all"),this.active.next().addClass("ui-accordion-content-active").show(),this.headers.attr("role","tab").each(function(){var t=e(this),i=t.uniqueId().attr("id"),s=t.next(),n=s.uniqueId().attr("id");t.attr("aria-controls",n),s.attr("aria-labelledby",i)}).next().attr("role","tabpanel"),this.headers.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1}).next().attr({"aria-hidden":"true"}).hide(),this.active.length?this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0}).next().attr({"aria-hidden":"false"}):this.headers.eq(0).attr("tabIndex",0),this._createIcons(),this._setupEvents(i.event),"fill"===s?(t=n.height(),this.element.siblings(":visible").each(function(){var i=e(this),s=i.css("position");"absolute"!==s&&"fixed"!==s&&(t-=i.outerHeight(!0))}),this.headers.each(function(){t-=e(this).outerHeight(!0)}),this.headers.next().each(function(){e(this).height(Math.max(0,t-e(this).innerHeight()+e(this).height()))}).css("overflow","auto")):"auto"===s&&(t=0,this.headers.next().each(function(){t=Math.max(t,e(this).css("height","").height())}).height(t))},_activate:function(t){var i=this._findActive(t)[0];i!==this.active[0]&&(i=i||this.active[0],this._eventHandler({target:i,currentTarget:i,preventDefault:e.noop}))},_findActive:function(t){return"number"==typeof t?this.headers.eq(t):e()},_setupEvents:function(t){var i={keydown:"_keydown"};t&&e.each(t.split(" "),function(e,t){i[t]="_eventHandler"}),this._off(this.headers.add(this.headers.next())),this._on(this.headers,i),this._on(this.headers.next(),{keydown:"_panelKeyDown"}),this._hoverable(this.headers),this._focusable(this.headers)},_eventHandler:function(t){var i=this.options,s=this.active,n=e(t.currentTarget),a=n[0]===s[0],o=a&&i.collapsible,r=o?e():n.next(),h=s.next(),l={oldHeader:s,oldPanel:h,newHeader:o?e():n,newPanel:r};t.preventDefault(),a&&!i.collapsible||this._trigger("beforeActivate",t,l)===!1||(i.active=o?!1:this.headers.index(n),this.active=a?e():n,this._toggle(l),s.removeClass("ui-accordion-header-active ui-state-active"),i.icons&&s.children(".ui-accordion-header-icon").removeClass(i.icons.activeHeader).addClass(i.icons.header),a||(n.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top"),i.icons&&n.children(".ui-accordion-header-icon").removeClass(i.icons.header).addClass(i.icons.activeHeader),n.next().addClass("ui-accordion-content-active")))},_toggle:function(t){var i=t.newPanel,s=this.prevShow.length?this.prevShow:t.oldPanel;this.prevShow.add(this.prevHide).stop(!0,!0),this.prevShow=i,this.prevHide=s,this.options.animate?this._animate(i,s,t):(s.hide(),i.show(),this._toggleComplete(t)),s.attr({"aria-hidden":"true"}),s.prev().attr({"aria-selected":"false","aria-expanded":"false"}),i.length&&s.length?s.prev().attr({tabIndex:-1,"aria-expanded":"false"}):i.length&&this.headers.filter(function(){return 0===parseInt(e(this).attr("tabIndex"),10)}).attr("tabIndex",-1),i.attr("aria-hidden","false").prev().attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0})},_animate:function(e,t,i){var s,n,a,o=this,r=0,h=e.css("box-sizing"),l=e.length&&(!t.length||e.index()<t.index()),u=this.options.animate||{},d=l&&u.down||u,c=function(){o._toggleComplete(i)};return"number"==typeof d&&(a=d),"string"==typeof d&&(n=d),n=n||d.easing||u.easing,a=a||d.duration||u.duration,t.length?e.length?(s=e.show().outerHeight(),t.animate(this.hideProps,{duration:a,easing:n,step:function(e,t){t.now=Math.round(e)}}),e.hide().animate(this.showProps,{duration:a,easing:n,complete:c,step:function(e,i){i.now=Math.round(e),"height"!==i.prop?"content-box"===h&&(r+=i.now):"content"!==o.options.heightStyle&&(i.now=Math.round(s-t.outerHeight()-r),r=0)}}),void 0):t.animate(this.hideProps,a,n,c):e.animate(this.showProps,a,n,c)},_toggleComplete:function(e){var t=e.oldPanel;t.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all"),t.length&&(t.parent()[0].className=t.parent()[0].className),this._trigger("activate",null,e)}}),e.widget("ui.menu",{version:"1.11.4",defaultElement:"<ul>",delay:300,options:{icons:{submenu:"ui-icon-carat-1-e"},items:"> *",menus:"ul",position:{my:"left-1 top",at:"right top"},role:"menu",blur:null,focus:null,select:null},_create:function(){this.activeMenu=this.element,this.mouseHandled=!1,this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content").toggleClass("ui-menu-icons",!!this.element.find(".ui-icon").length).attr({role:this.options.role,tabIndex:0}),this.options.disabled&&this.element.addClass("ui-state-disabled").attr("aria-disabled","true"),this._on({"mousedown .ui-menu-item":function(e){e.preventDefault()},"click .ui-menu-item":function(t){var i=e(t.target);!this.mouseHandled&&i.not(".ui-state-disabled").length&&(this.select(t),t.isPropagationStopped()||(this.mouseHandled=!0),i.has(".ui-menu").length?this.expand(t):!this.element.is(":focus")&&e(this.document[0].activeElement).closest(".ui-menu").length&&(this.element.trigger("focus",[!0]),this.active&&1===this.active.parents(".ui-menu").length&&clearTimeout(this.timer)))},"mouseenter .ui-menu-item":function(t){if(!this.previousFilter){var i=e(t.currentTarget);
i.siblings(".ui-state-active").removeClass("ui-state-active"),this.focus(t,i)}},mouseleave:"collapseAll","mouseleave .ui-menu":"collapseAll",focus:function(e,t){var i=this.active||this.element.find(this.options.items).eq(0);t||this.focus(e,i)},blur:function(t){this._delay(function(){e.contains(this.element[0],this.document[0].activeElement)||this.collapseAll(t)})},keydown:"_keydown"}),this.refresh(),this._on(this.document,{click:function(e){this._closeOnDocumentClick(e)&&this.collapseAll(e),this.mouseHandled=!1}})},_destroy:function(){this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeClass("ui-menu ui-widget ui-widget-content ui-menu-icons ui-front").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show(),this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").removeUniqueId().removeClass("ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function(){var t=e(this);t.data("ui-menu-submenu-carat")&&t.remove()}),this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content")},_keydown:function(t){var i,s,n,a,o=!0;switch(t.keyCode){case e.ui.keyCode.PAGE_UP:this.previousPage(t);break;case e.ui.keyCode.PAGE_DOWN:this.nextPage(t);break;case e.ui.keyCode.HOME:this._move("first","first",t);break;case e.ui.keyCode.END:this._move("last","last",t);break;case e.ui.keyCode.UP:this.previous(t);break;case e.ui.keyCode.DOWN:this.next(t);break;case e.ui.keyCode.LEFT:this.collapse(t);break;case e.ui.keyCode.RIGHT:this.active&&!this.active.is(".ui-state-disabled")&&this.expand(t);break;case e.ui.keyCode.ENTER:case e.ui.keyCode.SPACE:this._activate(t);break;case e.ui.keyCode.ESCAPE:this.collapse(t);break;default:o=!1,s=this.previousFilter||"",n=String.fromCharCode(t.keyCode),a=!1,clearTimeout(this.filterTimer),n===s?a=!0:n=s+n,i=this._filterMenuItems(n),i=a&&-1!==i.index(this.active.next())?this.active.nextAll(".ui-menu-item"):i,i.length||(n=String.fromCharCode(t.keyCode),i=this._filterMenuItems(n)),i.length?(this.focus(t,i),this.previousFilter=n,this.filterTimer=this._delay(function(){delete this.previousFilter},1e3)):delete this.previousFilter}o&&t.preventDefault()},_activate:function(e){this.active.is(".ui-state-disabled")||(this.active.is("[aria-haspopup='true']")?this.expand(e):this.select(e))},refresh:function(){var t,i,s=this,n=this.options.icons.submenu,a=this.element.find(this.options.menus);this.element.toggleClass("ui-menu-icons",!!this.element.find(".ui-icon").length),a.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-front").hide().attr({role:this.options.role,"aria-hidden":"true","aria-expanded":"false"}).each(function(){var t=e(this),i=t.parent(),s=e("<span>").addClass("ui-menu-icon ui-icon "+n).data("ui-menu-submenu-carat",!0);i.attr("aria-haspopup","true").prepend(s),t.attr("aria-labelledby",i.attr("id"))}),t=a.add(this.element),i=t.find(this.options.items),i.not(".ui-menu-item").each(function(){var t=e(this);s._isDivider(t)&&t.addClass("ui-widget-content ui-menu-divider")}),i.not(".ui-menu-item, .ui-menu-divider").addClass("ui-menu-item").uniqueId().attr({tabIndex:-1,role:this._itemRole()}),i.filter(".ui-state-disabled").attr("aria-disabled","true"),this.active&&!e.contains(this.element[0],this.active[0])&&this.blur()},_itemRole:function(){return{menu:"menuitem",listbox:"option"}[this.options.role]},_setOption:function(e,t){"icons"===e&&this.element.find(".ui-menu-icon").removeClass(this.options.icons.submenu).addClass(t.submenu),"disabled"===e&&this.element.toggleClass("ui-state-disabled",!!t).attr("aria-disabled",t),this._super(e,t)},focus:function(e,t){var i,s;this.blur(e,e&&"focus"===e.type),this._scrollIntoView(t),this.active=t.first(),s=this.active.addClass("ui-state-focus").removeClass("ui-state-active"),this.options.role&&this.element.attr("aria-activedescendant",s.attr("id")),this.active.parent().closest(".ui-menu-item").addClass("ui-state-active"),e&&"keydown"===e.type?this._close():this.timer=this._delay(function(){this._close()},this.delay),i=t.children(".ui-menu"),i.length&&e&&/^mouse/.test(e.type)&&this._startOpening(i),this.activeMenu=t.parent(),this._trigger("focus",e,{item:t})},_scrollIntoView:function(t){var i,s,n,a,o,r;this._hasScroll()&&(i=parseFloat(e.css(this.activeMenu[0],"borderTopWidth"))||0,s=parseFloat(e.css(this.activeMenu[0],"paddingTop"))||0,n=t.offset().top-this.activeMenu.offset().top-i-s,a=this.activeMenu.scrollTop(),o=this.activeMenu.height(),r=t.outerHeight(),0>n?this.activeMenu.scrollTop(a+n):n+r>o&&this.activeMenu.scrollTop(a+n-o+r))},blur:function(e,t){t||clearTimeout(this.timer),this.active&&(this.active.removeClass("ui-state-focus"),this.active=null,this._trigger("blur",e,{item:this.active}))},_startOpening:function(e){clearTimeout(this.timer),"true"===e.attr("aria-hidden")&&(this.timer=this._delay(function(){this._close(),this._open(e)},this.delay))},_open:function(t){var i=e.extend({of:this.active},this.options.position);clearTimeout(this.timer),this.element.find(".ui-menu").not(t.parents(".ui-menu")).hide().attr("aria-hidden","true"),t.show().removeAttr("aria-hidden").attr("aria-expanded","true").position(i)},collapseAll:function(t,i){clearTimeout(this.timer),this.timer=this._delay(function(){var s=i?this.element:e(t&&t.target).closest(this.element.find(".ui-menu"));s.length||(s=this.element),this._close(s),this.blur(t),this.activeMenu=s},this.delay)},_close:function(e){e||(e=this.active?this.active.parent():this.element),e.find(".ui-menu").hide().attr("aria-hidden","true").attr("aria-expanded","false").end().find(".ui-state-active").not(".ui-state-focus").removeClass("ui-state-active")},_closeOnDocumentClick:function(t){return!e(t.target).closest(".ui-menu").length},_isDivider:function(e){return!/[^\-\u2014\u2013\s]/.test(e.text())},collapse:function(e){var t=this.active&&this.active.parent().closest(".ui-menu-item",this.element);t&&t.length&&(this._close(),this.focus(e,t))},expand:function(e){var t=this.active&&this.active.children(".ui-menu ").find(this.options.items).first();t&&t.length&&(this._open(t.parent()),this._delay(function(){this.focus(e,t)}))},next:function(e){this._move("next","first",e)},previous:function(e){this._move("prev","last",e)},isFirstItem:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length},isLastItem:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length},_move:function(e,t,i){var s;this.active&&(s="first"===e||"last"===e?this.active["first"===e?"prevAll":"nextAll"](".ui-menu-item").eq(-1):this.active[e+"All"](".ui-menu-item").eq(0)),s&&s.length&&this.active||(s=this.activeMenu.find(this.options.items)[t]()),this.focus(i,s)},nextPage:function(t){var i,s,n;return this.active?(this.isLastItem()||(this._hasScroll()?(s=this.active.offset().top,n=this.element.height(),this.active.nextAll(".ui-menu-item").each(function(){return i=e(this),0>i.offset().top-s-n}),this.focus(t,i)):this.focus(t,this.activeMenu.find(this.options.items)[this.active?"last":"first"]())),void 0):(this.next(t),void 0)},previousPage:function(t){var i,s,n;return this.active?(this.isFirstItem()||(this._hasScroll()?(s=this.active.offset().top,n=this.element.height(),this.active.prevAll(".ui-menu-item").each(function(){return i=e(this),i.offset().top-s+n>0}),this.focus(t,i)):this.focus(t,this.activeMenu.find(this.options.items).first())),void 0):(this.next(t),void 0)},_hasScroll:function(){return this.element.outerHeight()<this.element.prop("scrollHeight")},select:function(t){this.active=this.active||e(t.target).closest(".ui-menu-item");var i={item:this.active};this.active.has(".ui-menu").length||this.collapseAll(t,!0),this._trigger("select",t,i)},_filterMenuItems:function(t){var i=t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"),s=RegExp("^"+i,"i");return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function(){return s.test(e.trim(e(this).text()))})}}),e.widget("ui.autocomplete",{version:"1.11.4",defaultElement:"<input>",options:{appendTo:null,autoFocus:!1,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null,change:null,close:null,focus:null,open:null,response:null,search:null,select:null},requestIndex:0,pending:0,_create:function(){var t,i,s,n=this.element[0].nodeName.toLowerCase(),a="textarea"===n,o="input"===n;this.isMultiLine=a?!0:o?!1:this.element.prop("isContentEditable"),this.valueMethod=this.element[a||o?"val":"text"],this.isNewMenu=!0,this.element.addClass("ui-autocomplete-input").attr("autocomplete","off"),this._on(this.element,{keydown:function(n){if(this.element.prop("readOnly"))return t=!0,s=!0,i=!0,void 0;t=!1,s=!1,i=!1;var a=e.ui.keyCode;switch(n.keyCode){case a.PAGE_UP:t=!0,this._move("previousPage",n);break;case a.PAGE_DOWN:t=!0,this._move("nextPage",n);break;case a.UP:t=!0,this._keyEvent("previous",n);break;case a.DOWN:t=!0,this._keyEvent("next",n);break;case a.ENTER:this.menu.active&&(t=!0,n.preventDefault(),this.menu.select(n));break;case a.TAB:this.menu.active&&this.menu.select(n);break;case a.ESCAPE:this.menu.element.is(":visible")&&(this.isMultiLine||this._value(this.term),this.close(n),n.preventDefault());break;default:i=!0,this._searchTimeout(n)}},keypress:function(s){if(t)return t=!1,(!this.isMultiLine||this.menu.element.is(":visible"))&&s.preventDefault(),void 0;if(!i){var n=e.ui.keyCode;switch(s.keyCode){case n.PAGE_UP:this._move("previousPage",s);break;case n.PAGE_DOWN:this._move("nextPage",s);break;case n.UP:this._keyEvent("previous",s);break;case n.DOWN:this._keyEvent("next",s)}}},input:function(e){return s?(s=!1,e.preventDefault(),void 0):(this._searchTimeout(e),void 0)},focus:function(){this.selectedItem=null,this.previous=this._value()},blur:function(e){return this.cancelBlur?(delete this.cancelBlur,void 0):(clearTimeout(this.searching),this.close(e),this._change(e),void 0)}}),this._initSource(),this.menu=e("<ul>").addClass("ui-autocomplete ui-front").appendTo(this._appendTo()).menu({role:null}).hide().menu("instance"),this._on(this.menu.element,{mousedown:function(t){t.preventDefault(),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur});var i=this.menu.element[0];e(t.target).closest(".ui-menu-item").length||this._delay(function(){var t=this;this.document.one("mousedown",function(s){s.target===t.element[0]||s.target===i||e.contains(i,s.target)||t.close()})})},menufocus:function(t,i){var s,n;return this.isNewMenu&&(this.isNewMenu=!1,t.originalEvent&&/^mouse/.test(t.originalEvent.type))?(this.menu.blur(),this.document.one("mousemove",function(){e(t.target).trigger(t.originalEvent)}),void 0):(n=i.item.data("ui-autocomplete-item"),!1!==this._trigger("focus",t,{item:n})&&t.originalEvent&&/^key/.test(t.originalEvent.type)&&this._value(n.value),s=i.item.attr("aria-label")||n.value,s&&e.trim(s).length&&(this.liveRegion.children().hide(),e("<div>").text(s).appendTo(this.liveRegion)),void 0)},menuselect:function(e,t){var i=t.item.data("ui-autocomplete-item"),s=this.previous;this.element[0]!==this.document[0].activeElement&&(this.element.focus(),this.previous=s,this._delay(function(){this.previous=s,this.selectedItem=i})),!1!==this._trigger("select",e,{item:i})&&this._value(i.value),this.term=this._value(),this.close(e),this.selectedItem=i}}),this.liveRegion=e("<span>",{role:"status","aria-live":"assertive","aria-relevant":"additions"}).addClass("ui-helper-hidden-accessible").appendTo(this.document[0].body),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_destroy:function(){clearTimeout(this.searching),this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete"),this.menu.element.remove(),this.liveRegion.remove()},_setOption:function(e,t){this._super(e,t),"source"===e&&this._initSource(),"appendTo"===e&&this.menu.element.appendTo(this._appendTo()),"disabled"===e&&t&&this.xhr&&this.xhr.abort()},_appendTo:function(){var t=this.options.appendTo;return t&&(t=t.jquery||t.nodeType?e(t):this.document.find(t).eq(0)),t&&t[0]||(t=this.element.closest(".ui-front")),t.length||(t=this.document[0].body),t},_initSource:function(){var t,i,s=this;e.isArray(this.options.source)?(t=this.options.source,this.source=function(i,s){s(e.ui.autocomplete.filter(t,i.term))}):"string"==typeof this.options.source?(i=this.options.source,this.source=function(t,n){s.xhr&&s.xhr.abort(),s.xhr=e.ajax({url:i,data:t,dataType:"json",success:function(e){n(e)},error:function(){n([])}})}):this.source=this.options.source},_searchTimeout:function(e){clearTimeout(this.searching),this.searching=this._delay(function(){var t=this.term===this._value(),i=this.menu.element.is(":visible"),s=e.altKey||e.ctrlKey||e.metaKey||e.shiftKey;(!t||t&&!i&&!s)&&(this.selectedItem=null,this.search(null,e))},this.options.delay)},search:function(e,t){return e=null!=e?e:this._value(),this.term=this._value(),e.length<this.options.minLength?this.close(t):this._trigger("search",t)!==!1?this._search(e):void 0},_search:function(e){this.pending++,this.element.addClass("ui-autocomplete-loading"),this.cancelSearch=!1,this.source({term:e},this._response())},_response:function(){var t=++this.requestIndex;return e.proxy(function(e){t===this.requestIndex&&this.__response(e),this.pending--,this.pending||this.element.removeClass("ui-autocomplete-loading")},this)},__response:function(e){e&&(e=this._normalize(e)),this._trigger("response",null,{content:e}),!this.options.disabled&&e&&e.length&&!this.cancelSearch?(this._suggest(e),this._trigger("open")):this._close()},close:function(e){this.cancelSearch=!0,this._close(e)},_close:function(e){this.menu.element.is(":visible")&&(this.menu.element.hide(),this.menu.blur(),this.isNewMenu=!0,this._trigger("close",e))},_change:function(e){this.previous!==this._value()&&this._trigger("change",e,{item:this.selectedItem})},_normalize:function(t){return t.length&&t[0].label&&t[0].value?t:e.map(t,function(t){return"string"==typeof t?{label:t,value:t}:e.extend({},t,{label:t.label||t.value,value:t.value||t.label})})},_suggest:function(t){var i=this.menu.element.empty();this._renderMenu(i,t),this.isNewMenu=!0,this.menu.refresh(),i.show(),this._resizeMenu(),i.position(e.extend({of:this.element},this.options.position)),this.options.autoFocus&&this.menu.next()},_resizeMenu:function(){var e=this.menu.element;e.outerWidth(Math.max(e.width("").outerWidth()+1,this.element.outerWidth()))},_renderMenu:function(t,i){var s=this;e.each(i,function(e,i){s._renderItemData(t,i)})},_renderItemData:function(e,t){return this._renderItem(e,t).data("ui-autocomplete-item",t)},_renderItem:function(t,i){return e("<li>").text(i.label).appendTo(t)},_move:function(e,t){return this.menu.element.is(":visible")?this.menu.isFirstItem()&&/^previous/.test(e)||this.menu.isLastItem()&&/^next/.test(e)?(this.isMultiLine||this._value(this.term),this.menu.blur(),void 0):(this.menu[e](t),void 0):(this.search(null,t),void 0)},widget:function(){return this.menu.element},_value:function(){return this.valueMethod.apply(this.element,arguments)},_keyEvent:function(e,t){(!this.isMultiLine||this.menu.element.is(":visible"))&&(this._move(e,t),t.preventDefault())}}),e.extend(e.ui.autocomplete,{escapeRegex:function(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")},filter:function(t,i){var s=RegExp(e.ui.autocomplete.escapeRegex(i),"i");return e.grep(t,function(e){return s.test(e.label||e.value||e)})}}),e.widget("ui.autocomplete",e.ui.autocomplete,{options:{messages:{noResults:"No search results.",results:function(e){return e+(e>1?" results are":" result is")+" available, use up and down arrow keys to navigate."}}},__response:function(t){var i;this._superApply(arguments),this.options.disabled||this.cancelSearch||(i=t&&t.length?this.options.messages.results(t.length):this.options.messages.noResults,this.liveRegion.children().hide(),e("<div>").text(i).appendTo(this.liveRegion))}}),e.ui.autocomplete;var c,p="ui-button ui-widget ui-state-default ui-corner-all",f="ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",m=function(){var t=e(this);setTimeout(function(){t.find(":ui-button").button("refresh")},1)},g=function(t){var i=t.name,s=t.form,n=e([]);return i&&(i=i.replace(/'/g,"\\'"),n=s?e(s).find("[name='"+i+"'][type=radio]"):e("[name='"+i+"'][type=radio]",t.ownerDocument).filter(function(){return!this.form})),n};e.widget("ui.button",{version:"1.11.4",defaultElement:"<button>",options:{disabled:null,text:!0,label:null,icons:{primary:null,secondary:null}},_create:function(){this.element.closest("form").unbind("reset"+this.eventNamespace).bind("reset"+this.eventNamespace,m),"boolean"!=typeof this.options.disabled?this.options.disabled=!!this.element.prop("disabled"):this.element.prop("disabled",this.options.disabled),this._determineButtonType(),this.hasTitle=!!this.buttonElement.attr("title");var t=this,i=this.options,s="checkbox"===this.type||"radio"===this.type,n=s?"":"ui-state-active";null===i.label&&(i.label="input"===this.type?this.buttonElement.val():this.buttonElement.html()),this._hoverable(this.buttonElement),this.buttonElement.addClass(p).attr("role","button").bind("mouseenter"+this.eventNamespace,function(){i.disabled||this===c&&e(this).addClass("ui-state-active")}).bind("mouseleave"+this.eventNamespace,function(){i.disabled||e(this).removeClass(n)}).bind("click"+this.eventNamespace,function(e){i.disabled&&(e.preventDefault(),e.stopImmediatePropagation())}),this._on({focus:function(){this.buttonElement.addClass("ui-state-focus")},blur:function(){this.buttonElement.removeClass("ui-state-focus")}}),s&&this.element.bind("change"+this.eventNamespace,function(){t.refresh()}),"checkbox"===this.type?this.buttonElement.bind("click"+this.eventNamespace,function(){return i.disabled?!1:void 0}):"radio"===this.type?this.buttonElement.bind("click"+this.eventNamespace,function(){if(i.disabled)return!1;e(this).addClass("ui-state-active"),t.buttonElement.attr("aria-pressed","true");var s=t.element[0];g(s).not(s).map(function(){return e(this).button("widget")[0]}).removeClass("ui-state-active").attr("aria-pressed","false")}):(this.buttonElement.bind("mousedown"+this.eventNamespace,function(){return i.disabled?!1:(e(this).addClass("ui-state-active"),c=this,t.document.one("mouseup",function(){c=null}),void 0)}).bind("mouseup"+this.eventNamespace,function(){return i.disabled?!1:(e(this).removeClass("ui-state-active"),void 0)}).bind("keydown"+this.eventNamespace,function(t){return i.disabled?!1:((t.keyCode===e.ui.keyCode.SPACE||t.keyCode===e.ui.keyCode.ENTER)&&e(this).addClass("ui-state-active"),void 0)}).bind("keyup"+this.eventNamespace+" blur"+this.eventNamespace,function(){e(this).removeClass("ui-state-active")}),this.buttonElement.is("a")&&this.buttonElement.keyup(function(t){t.keyCode===e.ui.keyCode.SPACE&&e(this).click()})),this._setOption("disabled",i.disabled),this._resetButton()},_determineButtonType:function(){var e,t,i;this.type=this.element.is("[type=checkbox]")?"checkbox":this.element.is("[type=radio]")?"radio":this.element.is("input")?"input":"button","checkbox"===this.type||"radio"===this.type?(e=this.element.parents().last(),t="label[for='"+this.element.attr("id")+"']",this.buttonElement=e.find(t),this.buttonElement.length||(e=e.length?e.siblings():this.element.siblings(),this.buttonElement=e.filter(t),this.buttonElement.length||(this.buttonElement=e.find(t))),this.element.addClass("ui-helper-hidden-accessible"),i=this.element.is(":checked"),i&&this.buttonElement.addClass("ui-state-active"),this.buttonElement.prop("aria-pressed",i)):this.buttonElement=this.element},widget:function(){return this.buttonElement},_destroy:function(){this.element.removeClass("ui-helper-hidden-accessible"),this.buttonElement.removeClass(p+" ui-state-active "+f).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html()),this.hasTitle||this.buttonElement.removeAttr("title")},_setOption:function(e,t){return this._super(e,t),"disabled"===e?(this.widget().toggleClass("ui-state-disabled",!!t),this.element.prop("disabled",!!t),t&&("checkbox"===this.type||"radio"===this.type?this.buttonElement.removeClass("ui-state-focus"):this.buttonElement.removeClass("ui-state-focus ui-state-active")),void 0):(this._resetButton(),void 0)},refresh:function(){var t=this.element.is("input, button")?this.element.is(":disabled"):this.element.hasClass("ui-button-disabled");t!==this.options.disabled&&this._setOption("disabled",t),"radio"===this.type?g(this.element[0]).each(function(){e(this).is(":checked")?e(this).button("widget").addClass("ui-state-active").attr("aria-pressed","true"):e(this).button("widget").removeClass("ui-state-active").attr("aria-pressed","false")}):"checkbox"===this.type&&(this.element.is(":checked")?this.buttonElement.addClass("ui-state-active").attr("aria-pressed","true"):this.buttonElement.removeClass("ui-state-active").attr("aria-pressed","false"))},_resetButton:function(){if("input"===this.type)return this.options.label&&this.element.val(this.options.label),void 0;var t=this.buttonElement.removeClass(f),i=e("<span></span>",this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(t.empty()).text(),s=this.options.icons,n=s.primary&&s.secondary,a=[];s.primary||s.secondary?(this.options.text&&a.push("ui-button-text-icon"+(n?"s":s.primary?"-primary":"-secondary")),s.primary&&t.prepend("<span class='ui-button-icon-primary ui-icon "+s.primary+"'></span>"),s.secondary&&t.append("<span class='ui-button-icon-secondary ui-icon "+s.secondary+"'></span>"),this.options.text||(a.push(n?"ui-button-icons-only":"ui-button-icon-only"),this.hasTitle||t.attr("title",e.trim(i)))):a.push("ui-button-text-only"),t.addClass(a.join(" "))}}),e.widget("ui.buttonset",{version:"1.11.4",options:{items:"button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"},_create:function(){this.element.addClass("ui-buttonset")},_init:function(){this.refresh()},_setOption:function(e,t){"disabled"===e&&this.buttons.button("option",e,t),this._super(e,t)},refresh:function(){var t="rtl"===this.element.css("direction"),i=this.element.find(this.options.items),s=i.filter(":ui-button");i.not(":ui-button").button(),s.button("refresh"),this.buttons=i.map(function(){return e(this).button("widget")[0]}).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(t?"ui-corner-right":"ui-corner-left").end().filter(":last").addClass(t?"ui-corner-left":"ui-corner-right").end().end()},_destroy:function(){this.element.removeClass("ui-buttonset"),this.buttons.map(function(){return e(this).button("widget")[0]}).removeClass("ui-corner-left ui-corner-right").end().button("destroy")}}),e.ui.button,e.extend(e.ui,{datepicker:{version:"1.11.4"}});var v;e.extend(n.prototype,{markerClassName:"hasDatepicker",maxRows:4,_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(e){return r(this._defaults,e||{}),this},_attachDatepicker:function(t,i){var s,n,a;s=t.nodeName.toLowerCase(),n="div"===s||"span"===s,t.id||(this.uuid+=1,t.id="dp"+this.uuid),a=this._newInst(e(t),n),a.settings=e.extend({},i||{}),"input"===s?this._connectDatepicker(t,a):n&&this._inlineDatepicker(t,a)},_newInst:function(t,i){var s=t[0].id.replace(/([^A-Za-z0-9_\-])/g,"\\\\$1");return{id:s,input:t,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:i,dpDiv:i?a(e("<div class='"+this._inlineClass+" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")):this.dpDiv}},_connectDatepicker:function(t,i){var s=e(t);i.append=e([]),i.trigger=e([]),s.hasClass(this.markerClassName)||(this._attachments(s,i),s.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp),this._autoSize(i),e.data(t,"datepicker",i),i.settings.disabled&&this._disableDatepicker(t))},_attachments:function(t,i){var s,n,a,o=this._get(i,"appendText"),r=this._get(i,"isRTL");i.append&&i.append.remove(),o&&(i.append=e("<span class='"+this._appendClass+"'>"+o+"</span>"),t[r?"before":"after"](i.append)),t.unbind("focus",this._showDatepicker),i.trigger&&i.trigger.remove(),s=this._get(i,"showOn"),("focus"===s||"both"===s)&&t.focus(this._showDatepicker),("button"===s||"both"===s)&&(n=this._get(i,"buttonText"),a=this._get(i,"buttonImage"),i.trigger=e(this._get(i,"buttonImageOnly")?e("<img/>").addClass(this._triggerClass).attr({src:a,alt:n,title:n}):e("<button type='button'></button>").addClass(this._triggerClass).html(a?e("<img/>").attr({src:a,alt:n,title:n}):n)),t[r?"before":"after"](i.trigger),i.trigger.click(function(){return e.datepicker._datepickerShowing&&e.datepicker._lastInput===t[0]?e.datepicker._hideDatepicker():e.datepicker._datepickerShowing&&e.datepicker._lastInput!==t[0]?(e.datepicker._hideDatepicker(),e.datepicker._showDatepicker(t[0])):e.datepicker._showDatepicker(t[0]),!1}))},_autoSize:function(e){if(this._get(e,"autoSize")&&!e.inline){var t,i,s,n,a=new Date(2009,11,20),o=this._get(e,"dateFormat");o.match(/[DM]/)&&(t=function(e){for(i=0,s=0,n=0;e.length>n;n++)e[n].length>i&&(i=e[n].length,s=n);return s},a.setMonth(t(this._get(e,o.match(/MM/)?"monthNames":"monthNamesShort"))),a.setDate(t(this._get(e,o.match(/DD/)?"dayNames":"dayNamesShort"))+20-a.getDay())),e.input.attr("size",this._formatDate(e,a).length)}},_inlineDatepicker:function(t,i){var s=e(t);s.hasClass(this.markerClassName)||(s.addClass(this.markerClassName).append(i.dpDiv),e.data(t,"datepicker",i),this._setDate(i,this._getDefaultDate(i),!0),this._updateDatepicker(i),this._updateAlternate(i),i.settings.disabled&&this._disableDatepicker(t),i.dpDiv.css("display","block"))},_dialogDatepicker:function(t,i,s,n,a){var o,h,l,u,d,c=this._dialogInst;return c||(this.uuid+=1,o="dp"+this.uuid,this._dialogInput=e("<input type='text' id='"+o+"' style='position: absolute; top: -100px; width: 0px;'/>"),this._dialogInput.keydown(this._doKeyDown),e("body").append(this._dialogInput),c=this._dialogInst=this._newInst(this._dialogInput,!1),c.settings={},e.data(this._dialogInput[0],"datepicker",c)),r(c.settings,n||{}),i=i&&i.constructor===Date?this._formatDate(c,i):i,this._dialogInput.val(i),this._pos=a?a.length?a:[a.pageX,a.pageY]:null,this._pos||(h=document.documentElement.clientWidth,l=document.documentElement.clientHeight,u=document.documentElement.scrollLeft||document.body.scrollLeft,d=document.documentElement.scrollTop||document.body.scrollTop,this._pos=[h/2-100+u,l/2-150+d]),this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),c.settings.onSelect=s,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),e.blockUI&&e.blockUI(this.dpDiv),e.data(this._dialogInput[0],"datepicker",c),this},_destroyDatepicker:function(t){var i,s=e(t),n=e.data(t,"datepicker");s.hasClass(this.markerClassName)&&(i=t.nodeName.toLowerCase(),e.removeData(t,"datepicker"),"input"===i?(n.append.remove(),n.trigger.remove(),s.removeClass(this.markerClassName).unbind("focus",this._showDatepicker).unbind("keydown",this._doKeyDown).unbind("keypress",this._doKeyPress).unbind("keyup",this._doKeyUp)):("div"===i||"span"===i)&&s.removeClass(this.markerClassName).empty(),v===n&&(v=null))},_enableDatepicker:function(t){var i,s,n=e(t),a=e.data(t,"datepicker");n.hasClass(this.markerClassName)&&(i=t.nodeName.toLowerCase(),"input"===i?(t.disabled=!1,a.trigger.filter("button").each(function(){this.disabled=!1}).end().filter("img").css({opacity:"1.0",cursor:""})):("div"===i||"span"===i)&&(s=n.children("."+this._inlineClass),s.children().removeClass("ui-state-disabled"),s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!1)),this._disabledInputs=e.map(this._disabledInputs,function(e){return e===t?null:e}))},_disableDatepicker:function(t){var i,s,n=e(t),a=e.data(t,"datepicker");n.hasClass(this.markerClassName)&&(i=t.nodeName.toLowerCase(),"input"===i?(t.disabled=!0,a.trigger.filter("button").each(function(){this.disabled=!0}).end().filter("img").css({opacity:"0.5",cursor:"default"})):("div"===i||"span"===i)&&(s=n.children("."+this._inlineClass),s.children().addClass("ui-state-disabled"),s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!0)),this._disabledInputs=e.map(this._disabledInputs,function(e){return e===t?null:e}),this._disabledInputs[this._disabledInputs.length]=t)},_isDisabledDatepicker:function(e){if(!e)return!1;for(var t=0;this._disabledInputs.length>t;t++)if(this._disabledInputs[t]===e)return!0;return!1},_getInst:function(t){try{return e.data(t,"datepicker")}catch(i){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(t,i,s){var n,a,o,h,l=this._getInst(t);return 2===arguments.length&&"string"==typeof i?"defaults"===i?e.extend({},e.datepicker._defaults):l?"all"===i?e.extend({},l.settings):this._get(l,i):null:(n=i||{},"string"==typeof i&&(n={},n[i]=s),l&&(this._curInst===l&&this._hideDatepicker(),a=this._getDateDatepicker(t,!0),o=this._getMinMaxDate(l,"min"),h=this._getMinMaxDate(l,"max"),r(l.settings,n),null!==o&&void 0!==n.dateFormat&&void 0===n.minDate&&(l.settings.minDate=this._formatDate(l,o)),null!==h&&void 0!==n.dateFormat&&void 0===n.maxDate&&(l.settings.maxDate=this._formatDate(l,h)),"disabled"in n&&(n.disabled?this._disableDatepicker(t):this._enableDatepicker(t)),this._attachments(e(t),l),this._autoSize(l),this._setDate(l,a),this._updateAlternate(l),this._updateDatepicker(l)),void 0)},_changeDatepicker:function(e,t,i){this._optionDatepicker(e,t,i)},_refreshDatepicker:function(e){var t=this._getInst(e);t&&this._updateDatepicker(t)},_setDateDatepicker:function(e,t){var i=this._getInst(e);i&&(this._setDate(i,t),this._updateDatepicker(i),this._updateAlternate(i))},_getDateDatepicker:function(e,t){var i=this._getInst(e);return i&&!i.inline&&this._setDateFromField(i,t),i?this._getDate(i):null},_doKeyDown:function(t){var i,s,n,a=e.datepicker._getInst(t.target),o=!0,r=a.dpDiv.is(".ui-datepicker-rtl");if(a._keyEvent=!0,e.datepicker._datepickerShowing)switch(t.keyCode){case 9:e.datepicker._hideDatepicker(),o=!1;break;case 13:return n=e("td."+e.datepicker._dayOverClass+":not(."+e.datepicker._currentClass+")",a.dpDiv),n[0]&&e.datepicker._selectDay(t.target,a.selectedMonth,a.selectedYear,n[0]),i=e.datepicker._get(a,"onSelect"),i?(s=e.datepicker._formatDate(a),i.apply(a.input?a.input[0]:null,[s,a])):e.datepicker._hideDatepicker(),!1;case 27:e.datepicker._hideDatepicker();break;case 33:e.datepicker._adjustDate(t.target,t.ctrlKey?-e.datepicker._get(a,"stepBigMonths"):-e.datepicker._get(a,"stepMonths"),"M");break;case 34:e.datepicker._adjustDate(t.target,t.ctrlKey?+e.datepicker._get(a,"stepBigMonths"):+e.datepicker._get(a,"stepMonths"),"M");break;case 35:(t.ctrlKey||t.metaKey)&&e.datepicker._clearDate(t.target),o=t.ctrlKey||t.metaKey;break;case 36:(t.ctrlKey||t.metaKey)&&e.datepicker._gotoToday(t.target),o=t.ctrlKey||t.metaKey;break;case 37:(t.ctrlKey||t.metaKey)&&e.datepicker._adjustDate(t.target,r?1:-1,"D"),o=t.ctrlKey||t.metaKey,t.originalEvent.altKey&&e.datepicker._adjustDate(t.target,t.ctrlKey?-e.datepicker._get(a,"stepBigMonths"):-e.datepicker._get(a,"stepMonths"),"M");break;case 38:(t.ctrlKey||t.metaKey)&&e.datepicker._adjustDate(t.target,-7,"D"),o=t.ctrlKey||t.metaKey;break;case 39:(t.ctrlKey||t.metaKey)&&e.datepicker._adjustDate(t.target,r?-1:1,"D"),o=t.ctrlKey||t.metaKey,t.originalEvent.altKey&&e.datepicker._adjustDate(t.target,t.ctrlKey?+e.datepicker._get(a,"stepBigMonths"):+e.datepicker._get(a,"stepMonths"),"M");break;case 40:(t.ctrlKey||t.metaKey)&&e.datepicker._adjustDate(t.target,7,"D"),o=t.ctrlKey||t.metaKey;break;default:o=!1}else 36===t.keyCode&&t.ctrlKey?e.datepicker._showDatepicker(this):o=!1;o&&(t.preventDefault(),t.stopPropagation())},_doKeyPress:function(t){var i,s,n=e.datepicker._getInst(t.target);
return e.datepicker._get(n,"constrainInput")?(i=e.datepicker._possibleChars(e.datepicker._get(n,"dateFormat")),s=String.fromCharCode(null==t.charCode?t.keyCode:t.charCode),t.ctrlKey||t.metaKey||" ">s||!i||i.indexOf(s)>-1):void 0},_doKeyUp:function(t){var i,s=e.datepicker._getInst(t.target);if(s.input.val()!==s.lastVal)try{i=e.datepicker.parseDate(e.datepicker._get(s,"dateFormat"),s.input?s.input.val():null,e.datepicker._getFormatConfig(s)),i&&(e.datepicker._setDateFromField(s),e.datepicker._updateAlternate(s),e.datepicker._updateDatepicker(s))}catch(n){}return!0},_showDatepicker:function(t){if(t=t.target||t,"input"!==t.nodeName.toLowerCase()&&(t=e("input",t.parentNode)[0]),!e.datepicker._isDisabledDatepicker(t)&&e.datepicker._lastInput!==t){var i,n,a,o,h,l,u;i=e.datepicker._getInst(t),e.datepicker._curInst&&e.datepicker._curInst!==i&&(e.datepicker._curInst.dpDiv.stop(!0,!0),i&&e.datepicker._datepickerShowing&&e.datepicker._hideDatepicker(e.datepicker._curInst.input[0])),n=e.datepicker._get(i,"beforeShow"),a=n?n.apply(t,[t,i]):{},a!==!1&&(r(i.settings,a),i.lastVal=null,e.datepicker._lastInput=t,e.datepicker._setDateFromField(i),e.datepicker._inDialog&&(t.value=""),e.datepicker._pos||(e.datepicker._pos=e.datepicker._findPos(t),e.datepicker._pos[1]+=t.offsetHeight),o=!1,e(t).parents().each(function(){return o|="fixed"===e(this).css("position"),!o}),h={left:e.datepicker._pos[0],top:e.datepicker._pos[1]},e.datepicker._pos=null,i.dpDiv.empty(),i.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),e.datepicker._updateDatepicker(i),h=e.datepicker._checkOffset(i,h,o),i.dpDiv.css({position:e.datepicker._inDialog&&e.blockUI?"static":o?"fixed":"absolute",display:"none",left:h.left+"px",top:h.top+"px"}),i.inline||(l=e.datepicker._get(i,"showAnim"),u=e.datepicker._get(i,"duration"),i.dpDiv.css("z-index",s(e(t))+1),e.datepicker._datepickerShowing=!0,e.effects&&e.effects.effect[l]?i.dpDiv.show(l,e.datepicker._get(i,"showOptions"),u):i.dpDiv[l||"show"](l?u:null),e.datepicker._shouldFocusInput(i)&&i.input.focus(),e.datepicker._curInst=i))}},_updateDatepicker:function(t){this.maxRows=4,v=t,t.dpDiv.empty().append(this._generateHTML(t)),this._attachHandlers(t);var i,s=this._getNumberOfMonths(t),n=s[1],a=17,r=t.dpDiv.find("."+this._dayOverClass+" a");r.length>0&&o.apply(r.get(0)),t.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""),n>1&&t.dpDiv.addClass("ui-datepicker-multi-"+n).css("width",a*n+"em"),t.dpDiv[(1!==s[0]||1!==s[1]?"add":"remove")+"Class"]("ui-datepicker-multi"),t.dpDiv[(this._get(t,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl"),t===e.datepicker._curInst&&e.datepicker._datepickerShowing&&e.datepicker._shouldFocusInput(t)&&t.input.focus(),t.yearshtml&&(i=t.yearshtml,setTimeout(function(){i===t.yearshtml&&t.yearshtml&&t.dpDiv.find("select.ui-datepicker-year:first").replaceWith(t.yearshtml),i=t.yearshtml=null},0))},_shouldFocusInput:function(e){return e.input&&e.input.is(":visible")&&!e.input.is(":disabled")&&!e.input.is(":focus")},_checkOffset:function(t,i,s){var n=t.dpDiv.outerWidth(),a=t.dpDiv.outerHeight(),o=t.input?t.input.outerWidth():0,r=t.input?t.input.outerHeight():0,h=document.documentElement.clientWidth+(s?0:e(document).scrollLeft()),l=document.documentElement.clientHeight+(s?0:e(document).scrollTop());return i.left-=this._get(t,"isRTL")?n-o:0,i.left-=s&&i.left===t.input.offset().left?e(document).scrollLeft():0,i.top-=s&&i.top===t.input.offset().top+r?e(document).scrollTop():0,i.left-=Math.min(i.left,i.left+n>h&&h>n?Math.abs(i.left+n-h):0),i.top-=Math.min(i.top,i.top+a>l&&l>a?Math.abs(a+r):0),i},_findPos:function(t){for(var i,s=this._getInst(t),n=this._get(s,"isRTL");t&&("hidden"===t.type||1!==t.nodeType||e.expr.filters.hidden(t));)t=t[n?"previousSibling":"nextSibling"];return i=e(t).offset(),[i.left,i.top]},_hideDatepicker:function(t){var i,s,n,a,o=this._curInst;!o||t&&o!==e.data(t,"datepicker")||this._datepickerShowing&&(i=this._get(o,"showAnim"),s=this._get(o,"duration"),n=function(){e.datepicker._tidyDialog(o)},e.effects&&(e.effects.effect[i]||e.effects[i])?o.dpDiv.hide(i,e.datepicker._get(o,"showOptions"),s,n):o.dpDiv["slideDown"===i?"slideUp":"fadeIn"===i?"fadeOut":"hide"](i?s:null,n),i||n(),this._datepickerShowing=!1,a=this._get(o,"onClose"),a&&a.apply(o.input?o.input[0]:null,[o.input?o.input.val():"",o]),this._lastInput=null,this._inDialog&&(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),e.blockUI&&(e.unblockUI(),e("body").append(this.dpDiv))),this._inDialog=!1)},_tidyDialog:function(e){e.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")},_checkExternalClick:function(t){if(e.datepicker._curInst){var i=e(t.target),s=e.datepicker._getInst(i[0]);(i[0].id!==e.datepicker._mainDivId&&0===i.parents("#"+e.datepicker._mainDivId).length&&!i.hasClass(e.datepicker.markerClassName)&&!i.closest("."+e.datepicker._triggerClass).length&&e.datepicker._datepickerShowing&&(!e.datepicker._inDialog||!e.blockUI)||i.hasClass(e.datepicker.markerClassName)&&e.datepicker._curInst!==s)&&e.datepicker._hideDatepicker()}},_adjustDate:function(t,i,s){var n=e(t),a=this._getInst(n[0]);this._isDisabledDatepicker(n[0])||(this._adjustInstDate(a,i+("M"===s?this._get(a,"showCurrentAtPos"):0),s),this._updateDatepicker(a))},_gotoToday:function(t){var i,s=e(t),n=this._getInst(s[0]);this._get(n,"gotoCurrent")&&n.currentDay?(n.selectedDay=n.currentDay,n.drawMonth=n.selectedMonth=n.currentMonth,n.drawYear=n.selectedYear=n.currentYear):(i=new Date,n.selectedDay=i.getDate(),n.drawMonth=n.selectedMonth=i.getMonth(),n.drawYear=n.selectedYear=i.getFullYear()),this._notifyChange(n),this._adjustDate(s)},_selectMonthYear:function(t,i,s){var n=e(t),a=this._getInst(n[0]);a["selected"+("M"===s?"Month":"Year")]=a["draw"+("M"===s?"Month":"Year")]=parseInt(i.options[i.selectedIndex].value,10),this._notifyChange(a),this._adjustDate(n)},_selectDay:function(t,i,s,n){var a,o=e(t);e(n).hasClass(this._unselectableClass)||this._isDisabledDatepicker(o[0])||(a=this._getInst(o[0]),a.selectedDay=a.currentDay=e("a",n).html(),a.selectedMonth=a.currentMonth=i,a.selectedYear=a.currentYear=s,this._selectDate(t,this._formatDate(a,a.currentDay,a.currentMonth,a.currentYear)))},_clearDate:function(t){var i=e(t);this._selectDate(i,"")},_selectDate:function(t,i){var s,n=e(t),a=this._getInst(n[0]);i=null!=i?i:this._formatDate(a),a.input&&a.input.val(i),this._updateAlternate(a),s=this._get(a,"onSelect"),s?s.apply(a.input?a.input[0]:null,[i,a]):a.input&&a.input.trigger("change"),a.inline?this._updateDatepicker(a):(this._hideDatepicker(),this._lastInput=a.input[0],"object"!=typeof a.input[0]&&a.input.focus(),this._lastInput=null)},_updateAlternate:function(t){var i,s,n,a=this._get(t,"altField");a&&(i=this._get(t,"altFormat")||this._get(t,"dateFormat"),s=this._getDate(t),n=this.formatDate(i,s,this._getFormatConfig(t)),e(a).each(function(){e(this).val(n)}))},noWeekends:function(e){var t=e.getDay();return[t>0&&6>t,""]},iso8601Week:function(e){var t,i=new Date(e.getTime());return i.setDate(i.getDate()+4-(i.getDay()||7)),t=i.getTime(),i.setMonth(0),i.setDate(1),Math.floor(Math.round((t-i)/864e5)/7)+1},parseDate:function(t,i,s){if(null==t||null==i)throw"Invalid arguments";if(i="object"==typeof i?""+i:i+"",""===i)return null;var n,a,o,r,h=0,l=(s?s.shortYearCutoff:null)||this._defaults.shortYearCutoff,u="string"!=typeof l?l:(new Date).getFullYear()%100+parseInt(l,10),d=(s?s.dayNamesShort:null)||this._defaults.dayNamesShort,c=(s?s.dayNames:null)||this._defaults.dayNames,p=(s?s.monthNamesShort:null)||this._defaults.monthNamesShort,f=(s?s.monthNames:null)||this._defaults.monthNames,m=-1,g=-1,v=-1,y=-1,b=!1,_=function(e){var i=t.length>n+1&&t.charAt(n+1)===e;return i&&n++,i},x=function(e){var t=_(e),s="@"===e?14:"!"===e?20:"y"===e&&t?4:"o"===e?3:2,n="y"===e?s:1,a=RegExp("^\\d{"+n+","+s+"}"),o=i.substring(h).match(a);if(!o)throw"Missing number at position "+h;return h+=o[0].length,parseInt(o[0],10)},w=function(t,s,n){var a=-1,o=e.map(_(t)?n:s,function(e,t){return[[t,e]]}).sort(function(e,t){return-(e[1].length-t[1].length)});if(e.each(o,function(e,t){var s=t[1];return i.substr(h,s.length).toLowerCase()===s.toLowerCase()?(a=t[0],h+=s.length,!1):void 0}),-1!==a)return a+1;throw"Unknown name at position "+h},k=function(){if(i.charAt(h)!==t.charAt(n))throw"Unexpected literal at position "+h;h++};for(n=0;t.length>n;n++)if(b)"'"!==t.charAt(n)||_("'")?k():b=!1;else switch(t.charAt(n)){case"d":v=x("d");break;case"D":w("D",d,c);break;case"o":y=x("o");break;case"m":g=x("m");break;case"M":g=w("M",p,f);break;case"y":m=x("y");break;case"@":r=new Date(x("@")),m=r.getFullYear(),g=r.getMonth()+1,v=r.getDate();break;case"!":r=new Date((x("!")-this._ticksTo1970)/1e4),m=r.getFullYear(),g=r.getMonth()+1,v=r.getDate();break;case"'":_("'")?k():b=!0;break;default:k()}if(i.length>h&&(o=i.substr(h),!/^\s+/.test(o)))throw"Extra/unparsed characters found in date: "+o;if(-1===m?m=(new Date).getFullYear():100>m&&(m+=(new Date).getFullYear()-(new Date).getFullYear()%100+(u>=m?0:-100)),y>-1)for(g=1,v=y;;){if(a=this._getDaysInMonth(m,g-1),a>=v)break;g++,v-=a}if(r=this._daylightSavingAdjust(new Date(m,g-1,v)),r.getFullYear()!==m||r.getMonth()+1!==g||r.getDate()!==v)throw"Invalid date";return r},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:1e7*60*60*24*(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925)),formatDate:function(e,t,i){if(!t)return"";var s,n=(i?i.dayNamesShort:null)||this._defaults.dayNamesShort,a=(i?i.dayNames:null)||this._defaults.dayNames,o=(i?i.monthNamesShort:null)||this._defaults.monthNamesShort,r=(i?i.monthNames:null)||this._defaults.monthNames,h=function(t){var i=e.length>s+1&&e.charAt(s+1)===t;return i&&s++,i},l=function(e,t,i){var s=""+t;if(h(e))for(;i>s.length;)s="0"+s;return s},u=function(e,t,i,s){return h(e)?s[t]:i[t]},d="",c=!1;if(t)for(s=0;e.length>s;s++)if(c)"'"!==e.charAt(s)||h("'")?d+=e.charAt(s):c=!1;else switch(e.charAt(s)){case"d":d+=l("d",t.getDate(),2);break;case"D":d+=u("D",t.getDay(),n,a);break;case"o":d+=l("o",Math.round((new Date(t.getFullYear(),t.getMonth(),t.getDate()).getTime()-new Date(t.getFullYear(),0,0).getTime())/864e5),3);break;case"m":d+=l("m",t.getMonth()+1,2);break;case"M":d+=u("M",t.getMonth(),o,r);break;case"y":d+=h("y")?t.getFullYear():(10>t.getYear()%100?"0":"")+t.getYear()%100;break;case"@":d+=t.getTime();break;case"!":d+=1e4*t.getTime()+this._ticksTo1970;break;case"'":h("'")?d+="'":c=!0;break;default:d+=e.charAt(s)}return d},_possibleChars:function(e){var t,i="",s=!1,n=function(i){var s=e.length>t+1&&e.charAt(t+1)===i;return s&&t++,s};for(t=0;e.length>t;t++)if(s)"'"!==e.charAt(t)||n("'")?i+=e.charAt(t):s=!1;else switch(e.charAt(t)){case"d":case"m":case"y":case"@":i+="0123456789";break;case"D":case"M":return null;case"'":n("'")?i+="'":s=!0;break;default:i+=e.charAt(t)}return i},_get:function(e,t){return void 0!==e.settings[t]?e.settings[t]:this._defaults[t]},_setDateFromField:function(e,t){if(e.input.val()!==e.lastVal){var i=this._get(e,"dateFormat"),s=e.lastVal=e.input?e.input.val():null,n=this._getDefaultDate(e),a=n,o=this._getFormatConfig(e);try{a=this.parseDate(i,s,o)||n}catch(r){s=t?"":s}e.selectedDay=a.getDate(),e.drawMonth=e.selectedMonth=a.getMonth(),e.drawYear=e.selectedYear=a.getFullYear(),e.currentDay=s?a.getDate():0,e.currentMonth=s?a.getMonth():0,e.currentYear=s?a.getFullYear():0,this._adjustInstDate(e)}},_getDefaultDate:function(e){return this._restrictMinMax(e,this._determineDate(e,this._get(e,"defaultDate"),new Date))},_determineDate:function(t,i,s){var n=function(e){var t=new Date;return t.setDate(t.getDate()+e),t},a=function(i){try{return e.datepicker.parseDate(e.datepicker._get(t,"dateFormat"),i,e.datepicker._getFormatConfig(t))}catch(s){}for(var n=(i.toLowerCase().match(/^c/)?e.datepicker._getDate(t):null)||new Date,a=n.getFullYear(),o=n.getMonth(),r=n.getDate(),h=/([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,l=h.exec(i);l;){switch(l[2]||"d"){case"d":case"D":r+=parseInt(l[1],10);break;case"w":case"W":r+=7*parseInt(l[1],10);break;case"m":case"M":o+=parseInt(l[1],10),r=Math.min(r,e.datepicker._getDaysInMonth(a,o));break;case"y":case"Y":a+=parseInt(l[1],10),r=Math.min(r,e.datepicker._getDaysInMonth(a,o))}l=h.exec(i)}return new Date(a,o,r)},o=null==i||""===i?s:"string"==typeof i?a(i):"number"==typeof i?isNaN(i)?s:n(i):new Date(i.getTime());return o=o&&"Invalid Date"==""+o?s:o,o&&(o.setHours(0),o.setMinutes(0),o.setSeconds(0),o.setMilliseconds(0)),this._daylightSavingAdjust(o)},_daylightSavingAdjust:function(e){return e?(e.setHours(e.getHours()>12?e.getHours()+2:0),e):null},_setDate:function(e,t,i){var s=!t,n=e.selectedMonth,a=e.selectedYear,o=this._restrictMinMax(e,this._determineDate(e,t,new Date));e.selectedDay=e.currentDay=o.getDate(),e.drawMonth=e.selectedMonth=e.currentMonth=o.getMonth(),e.drawYear=e.selectedYear=e.currentYear=o.getFullYear(),n===e.selectedMonth&&a===e.selectedYear||i||this._notifyChange(e),this._adjustInstDate(e),e.input&&e.input.val(s?"":this._formatDate(e))},_getDate:function(e){var t=!e.currentYear||e.input&&""===e.input.val()?null:this._daylightSavingAdjust(new Date(e.currentYear,e.currentMonth,e.currentDay));return t},_attachHandlers:function(t){var i=this._get(t,"stepMonths"),s="#"+t.id.replace(/\\\\/g,"\\");t.dpDiv.find("[data-handler]").map(function(){var t={prev:function(){e.datepicker._adjustDate(s,-i,"M")},next:function(){e.datepicker._adjustDate(s,+i,"M")},hide:function(){e.datepicker._hideDatepicker()},today:function(){e.datepicker._gotoToday(s)},selectDay:function(){return e.datepicker._selectDay(s,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this),!1},selectMonth:function(){return e.datepicker._selectMonthYear(s,this,"M"),!1},selectYear:function(){return e.datepicker._selectMonthYear(s,this,"Y"),!1}};e(this).bind(this.getAttribute("data-event"),t[this.getAttribute("data-handler")])})},_generateHTML:function(e){var t,i,s,n,a,o,r,h,l,u,d,c,p,f,m,g,v,y,b,_,x,w,k,T,D,S,M,C,N,A,P,I,H,z,F,E,O,j,W,L=new Date,R=this._daylightSavingAdjust(new Date(L.getFullYear(),L.getMonth(),L.getDate())),Y=this._get(e,"isRTL"),B=this._get(e,"showButtonPanel"),J=this._get(e,"hideIfNoPrevNext"),q=this._get(e,"navigationAsDateFormat"),K=this._getNumberOfMonths(e),V=this._get(e,"showCurrentAtPos"),U=this._get(e,"stepMonths"),Q=1!==K[0]||1!==K[1],G=this._daylightSavingAdjust(e.currentDay?new Date(e.currentYear,e.currentMonth,e.currentDay):new Date(9999,9,9)),X=this._getMinMaxDate(e,"min"),$=this._getMinMaxDate(e,"max"),Z=e.drawMonth-V,et=e.drawYear;if(0>Z&&(Z+=12,et--),$)for(t=this._daylightSavingAdjust(new Date($.getFullYear(),$.getMonth()-K[0]*K[1]+1,$.getDate())),t=X&&X>t?X:t;this._daylightSavingAdjust(new Date(et,Z,1))>t;)Z--,0>Z&&(Z=11,et--);for(e.drawMonth=Z,e.drawYear=et,i=this._get(e,"prevText"),i=q?this.formatDate(i,this._daylightSavingAdjust(new Date(et,Z-U,1)),this._getFormatConfig(e)):i,s=this._canAdjustMonth(e,-1,et,Z)?"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"e":"w")+"'>"+i+"</span></a>":J?"":"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"e":"w")+"'>"+i+"</span></a>",n=this._get(e,"nextText"),n=q?this.formatDate(n,this._daylightSavingAdjust(new Date(et,Z+U,1)),this._getFormatConfig(e)):n,a=this._canAdjustMonth(e,1,et,Z)?"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='"+n+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"w":"e")+"'>"+n+"</span></a>":J?"":"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+n+"'><span class='ui-icon ui-icon-circle-triangle-"+(Y?"w":"e")+"'>"+n+"</span></a>",o=this._get(e,"currentText"),r=this._get(e,"gotoCurrent")&&e.currentDay?G:R,o=q?this.formatDate(o,r,this._getFormatConfig(e)):o,h=e.inline?"":"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>"+this._get(e,"closeText")+"</button>",l=B?"<div class='ui-datepicker-buttonpane ui-widget-content'>"+(Y?h:"")+(this._isInRange(e,r)?"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>"+o+"</button>":"")+(Y?"":h)+"</div>":"",u=parseInt(this._get(e,"firstDay"),10),u=isNaN(u)?0:u,d=this._get(e,"showWeek"),c=this._get(e,"dayNames"),p=this._get(e,"dayNamesMin"),f=this._get(e,"monthNames"),m=this._get(e,"monthNamesShort"),g=this._get(e,"beforeShowDay"),v=this._get(e,"showOtherMonths"),y=this._get(e,"selectOtherMonths"),b=this._getDefaultDate(e),_="",w=0;K[0]>w;w++){for(k="",this.maxRows=4,T=0;K[1]>T;T++){if(D=this._daylightSavingAdjust(new Date(et,Z,e.selectedDay)),S=" ui-corner-all",M="",Q){if(M+="<div class='ui-datepicker-group",K[1]>1)switch(T){case 0:M+=" ui-datepicker-group-first",S=" ui-corner-"+(Y?"right":"left");break;case K[1]-1:M+=" ui-datepicker-group-last",S=" ui-corner-"+(Y?"left":"right");break;default:M+=" ui-datepicker-group-middle",S=""}M+="'>"}for(M+="<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix"+S+"'>"+(/all|left/.test(S)&&0===w?Y?a:s:"")+(/all|right/.test(S)&&0===w?Y?s:a:"")+this._generateMonthYearHeader(e,Z,et,X,$,w>0||T>0,f,m)+"</div><table class='ui-datepicker-calendar'><thead>"+"<tr>",C=d?"<th class='ui-datepicker-week-col'>"+this._get(e,"weekHeader")+"</th>":"",x=0;7>x;x++)N=(x+u)%7,C+="<th scope='col'"+((x+u+6)%7>=5?" class='ui-datepicker-week-end'":"")+">"+"<span title='"+c[N]+"'>"+p[N]+"</span></th>";for(M+=C+"</tr></thead><tbody>",A=this._getDaysInMonth(et,Z),et===e.selectedYear&&Z===e.selectedMonth&&(e.selectedDay=Math.min(e.selectedDay,A)),P=(this._getFirstDayOfMonth(et,Z)-u+7)%7,I=Math.ceil((P+A)/7),H=Q?this.maxRows>I?this.maxRows:I:I,this.maxRows=H,z=this._daylightSavingAdjust(new Date(et,Z,1-P)),F=0;H>F;F++){for(M+="<tr>",E=d?"<td class='ui-datepicker-week-col'>"+this._get(e,"calculateWeek")(z)+"</td>":"",x=0;7>x;x++)O=g?g.apply(e.input?e.input[0]:null,[z]):[!0,""],j=z.getMonth()!==Z,W=j&&!y||!O[0]||X&&X>z||$&&z>$,E+="<td class='"+((x+u+6)%7>=5?" ui-datepicker-week-end":"")+(j?" ui-datepicker-other-month":"")+(z.getTime()===D.getTime()&&Z===e.selectedMonth&&e._keyEvent||b.getTime()===z.getTime()&&b.getTime()===D.getTime()?" "+this._dayOverClass:"")+(W?" "+this._unselectableClass+" ui-state-disabled":"")+(j&&!v?"":" "+O[1]+(z.getTime()===G.getTime()?" "+this._currentClass:"")+(z.getTime()===R.getTime()?" ui-datepicker-today":""))+"'"+(j&&!v||!O[2]?"":" title='"+O[2].replace(/'/g,"&#39;")+"'")+(W?"":" data-handler='selectDay' data-event='click' data-month='"+z.getMonth()+"' data-year='"+z.getFullYear()+"'")+">"+(j&&!v?"&#xa0;":W?"<span class='ui-state-default'>"+z.getDate()+"</span>":"<a class='ui-state-default"+(z.getTime()===R.getTime()?" ui-state-highlight":"")+(z.getTime()===G.getTime()?" ui-state-active":"")+(j?" ui-priority-secondary":"")+"' href='#'>"+z.getDate()+"</a>")+"</td>",z.setDate(z.getDate()+1),z=this._daylightSavingAdjust(z);M+=E+"</tr>"}Z++,Z>11&&(Z=0,et++),M+="</tbody></table>"+(Q?"</div>"+(K[0]>0&&T===K[1]-1?"<div class='ui-datepicker-row-break'></div>":""):""),k+=M}_+=k}return _+=l,e._keyEvent=!1,_},_generateMonthYearHeader:function(e,t,i,s,n,a,o,r){var h,l,u,d,c,p,f,m,g=this._get(e,"changeMonth"),v=this._get(e,"changeYear"),y=this._get(e,"showMonthAfterYear"),b="<div class='ui-datepicker-title'>",_="";if(a||!g)_+="<span class='ui-datepicker-month'>"+o[t]+"</span>";else{for(h=s&&s.getFullYear()===i,l=n&&n.getFullYear()===i,_+="<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>",u=0;12>u;u++)(!h||u>=s.getMonth())&&(!l||n.getMonth()>=u)&&(_+="<option value='"+u+"'"+(u===t?" selected='selected'":"")+">"+r[u]+"</option>");_+="</select>"}if(y||(b+=_+(!a&&g&&v?"":"&#xa0;")),!e.yearshtml)if(e.yearshtml="",a||!v)b+="<span class='ui-datepicker-year'>"+i+"</span>";else{for(d=this._get(e,"yearRange").split(":"),c=(new Date).getFullYear(),p=function(e){var t=e.match(/c[+\-].*/)?i+parseInt(e.substring(1),10):e.match(/[+\-].*/)?c+parseInt(e,10):parseInt(e,10);return isNaN(t)?c:t},f=p(d[0]),m=Math.max(f,p(d[1]||"")),f=s?Math.max(f,s.getFullYear()):f,m=n?Math.min(m,n.getFullYear()):m,e.yearshtml+="<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";m>=f;f++)e.yearshtml+="<option value='"+f+"'"+(f===i?" selected='selected'":"")+">"+f+"</option>";e.yearshtml+="</select>",b+=e.yearshtml,e.yearshtml=null}return b+=this._get(e,"yearSuffix"),y&&(b+=(!a&&g&&v?"":"&#xa0;")+_),b+="</div>"},_adjustInstDate:function(e,t,i){var s=e.drawYear+("Y"===i?t:0),n=e.drawMonth+("M"===i?t:0),a=Math.min(e.selectedDay,this._getDaysInMonth(s,n))+("D"===i?t:0),o=this._restrictMinMax(e,this._daylightSavingAdjust(new Date(s,n,a)));e.selectedDay=o.getDate(),e.drawMonth=e.selectedMonth=o.getMonth(),e.drawYear=e.selectedYear=o.getFullYear(),("M"===i||"Y"===i)&&this._notifyChange(e)},_restrictMinMax:function(e,t){var i=this._getMinMaxDate(e,"min"),s=this._getMinMaxDate(e,"max"),n=i&&i>t?i:t;return s&&n>s?s:n},_notifyChange:function(e){var t=this._get(e,"onChangeMonthYear");t&&t.apply(e.input?e.input[0]:null,[e.selectedYear,e.selectedMonth+1,e])},_getNumberOfMonths:function(e){var t=this._get(e,"numberOfMonths");return null==t?[1,1]:"number"==typeof t?[1,t]:t},_getMinMaxDate:function(e,t){return this._determineDate(e,this._get(e,t+"Date"),null)},_getDaysInMonth:function(e,t){return 32-this._daylightSavingAdjust(new Date(e,t,32)).getDate()},_getFirstDayOfMonth:function(e,t){return new Date(e,t,1).getDay()},_canAdjustMonth:function(e,t,i,s){var n=this._getNumberOfMonths(e),a=this._daylightSavingAdjust(new Date(i,s+(0>t?t:n[0]*n[1]),1));return 0>t&&a.setDate(this._getDaysInMonth(a.getFullYear(),a.getMonth())),this._isInRange(e,a)},_isInRange:function(e,t){var i,s,n=this._getMinMaxDate(e,"min"),a=this._getMinMaxDate(e,"max"),o=null,r=null,h=this._get(e,"yearRange");return h&&(i=h.split(":"),s=(new Date).getFullYear(),o=parseInt(i[0],10),r=parseInt(i[1],10),i[0].match(/[+\-].*/)&&(o+=s),i[1].match(/[+\-].*/)&&(r+=s)),(!n||t.getTime()>=n.getTime())&&(!a||t.getTime()<=a.getTime())&&(!o||t.getFullYear()>=o)&&(!r||r>=t.getFullYear())},_getFormatConfig:function(e){var t=this._get(e,"shortYearCutoff");return t="string"!=typeof t?t:(new Date).getFullYear()%100+parseInt(t,10),{shortYearCutoff:t,dayNamesShort:this._get(e,"dayNamesShort"),dayNames:this._get(e,"dayNames"),monthNamesShort:this._get(e,"monthNamesShort"),monthNames:this._get(e,"monthNames")}},_formatDate:function(e,t,i,s){t||(e.currentDay=e.selectedDay,e.currentMonth=e.selectedMonth,e.currentYear=e.selectedYear);var n=t?"object"==typeof t?t:this._daylightSavingAdjust(new Date(s,i,t)):this._daylightSavingAdjust(new Date(e.currentYear,e.currentMonth,e.currentDay));return this.formatDate(this._get(e,"dateFormat"),n,this._getFormatConfig(e))}}),e.fn.datepicker=function(t){if(!this.length)return this;e.datepicker.initialized||(e(document).mousedown(e.datepicker._checkExternalClick),e.datepicker.initialized=!0),0===e("#"+e.datepicker._mainDivId).length&&e("body").append(e.datepicker.dpDiv);var i=Array.prototype.slice.call(arguments,1);return"string"!=typeof t||"isDisabled"!==t&&"getDate"!==t&&"widget"!==t?"option"===t&&2===arguments.length&&"string"==typeof arguments[1]?e.datepicker["_"+t+"Datepicker"].apply(e.datepicker,[this[0]].concat(i)):this.each(function(){"string"==typeof t?e.datepicker["_"+t+"Datepicker"].apply(e.datepicker,[this].concat(i)):e.datepicker._attachDatepicker(this,t)}):e.datepicker["_"+t+"Datepicker"].apply(e.datepicker,[this[0]].concat(i))},e.datepicker=new n,e.datepicker.initialized=!1,e.datepicker.uuid=(new Date).getTime(),e.datepicker.version="1.11.4",e.datepicker,e.widget("ui.draggable",e.ui.mouse,{version:"1.11.4",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"===this.options.helper&&this._setPositionRelative(),this.options.addClasses&&this.element.addClass("ui-draggable"),this.options.disabled&&this.element.addClass("ui-draggable-disabled"),this._setHandleClassName(),this._mouseInit()},_setOption:function(e,t){this._super(e,t),"handle"===e&&(this._removeHandleClassName(),this._setHandleClassName())},_destroy:function(){return(this.helper||this.element).is(".ui-draggable-dragging")?(this.destroyOnClear=!0,void 0):(this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"),this._removeHandleClassName(),this._mouseDestroy(),void 0)},_mouseCapture:function(t){var i=this.options;return this._blurActiveElement(t),this.helper||i.disabled||e(t.target).closest(".ui-resizable-handle").length>0?!1:(this.handle=this._getHandle(t),this.handle?(this._blockFrames(i.iframeFix===!0?"iframe":i.iframeFix),!0):!1)},_blockFrames:function(t){this.iframeBlocks=this.document.find(t).map(function(){var t=e(this);return e("<div>").css("position","absolute").appendTo(t.parent()).outerWidth(t.outerWidth()).outerHeight(t.outerHeight()).offset(t.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_blurActiveElement:function(t){var i=this.document[0];if(this.handleElement.is(t.target))try{i.activeElement&&"body"!==i.activeElement.nodeName.toLowerCase()&&e(i.activeElement).blur()}catch(s){}},_mouseStart:function(t){var i=this.options;return this.helper=this._createHelper(t),this.helper.addClass("ui-draggable-dragging"),this._cacheHelperProportions(),e.ui.ddmanager&&(e.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(!0),this.offsetParent=this.helper.offsetParent(),this.hasFixedAncestor=this.helper.parents().filter(function(){return"fixed"===e(this).css("position")}).length>0,this.positionAbs=this.element.offset(),this._refreshOffsets(t),this.originalPosition=this.position=this._generatePosition(t,!1),this.originalPageX=t.pageX,this.originalPageY=t.pageY,i.cursorAt&&this._adjustOffsetFromHelper(i.cursorAt),this._setContainment(),this._trigger("start",t)===!1?(this._clear(),!1):(this._cacheHelperProportions(),e.ui.ddmanager&&!i.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this._normalizeRightBottom(),this._mouseDrag(t,!0),e.ui.ddmanager&&e.ui.ddmanager.dragStart(this,t),!0)},_refreshOffsets:function(e){this.offset={top:this.positionAbs.top-this.margins.top,left:this.positionAbs.left-this.margins.left,scroll:!1,parent:this._getParentOffset(),relative:this._getRelativeOffset()},this.offset.click={left:e.pageX-this.offset.left,top:e.pageY-this.offset.top}},_mouseDrag:function(t,i){if(this.hasFixedAncestor&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(t,!0),this.positionAbs=this._convertPositionTo("absolute"),!i){var s=this._uiHash();if(this._trigger("drag",t,s)===!1)return this._mouseUp({}),!1;this.position=s.position}return this.helper[0].style.left=this.position.left+"px",this.helper[0].style.top=this.position.top+"px",e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),!1},_mouseStop:function(t){var i=this,s=!1;return e.ui.ddmanager&&!this.options.dropBehaviour&&(s=e.ui.ddmanager.drop(this,t)),this.dropped&&(s=this.dropped,this.dropped=!1),"invalid"===this.options.revert&&!s||"valid"===this.options.revert&&s||this.options.revert===!0||e.isFunction(this.options.revert)&&this.options.revert.call(this.element,s)?e(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){i._trigger("stop",t)!==!1&&i._clear()}):this._trigger("stop",t)!==!1&&this._clear(),!1},_mouseUp:function(t){return this._unblockFrames(),e.ui.ddmanager&&e.ui.ddmanager.dragStop(this,t),this.handleElement.is(t.target)&&this.element.focus(),e.ui.mouse.prototype._mouseUp.call(this,t)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp({}):this._clear(),this},_getHandle:function(t){return this.options.handle?!!e(t.target).closest(this.element.find(this.options.handle)).length:!0},_setHandleClassName:function(){this.handleElement=this.options.handle?this.element.find(this.options.handle):this.element,this.handleElement.addClass("ui-draggable-handle")},_removeHandleClassName:function(){this.handleElement.removeClass("ui-draggable-handle")},_createHelper:function(t){var i=this.options,s=e.isFunction(i.helper),n=s?e(i.helper.apply(this.element[0],[t])):"clone"===i.helper?this.element.clone().removeAttr("id"):this.element;return n.parents("body").length||n.appendTo("parent"===i.appendTo?this.element[0].parentNode:i.appendTo),s&&n[0]===this.element[0]&&this._setPositionRelative(),n[0]===this.element[0]||/(fixed|absolute)/.test(n.css("position"))||n.css("position","absolute"),n},_setPositionRelative:function(){/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative")},_adjustOffsetFromHelper:function(t){"string"==typeof t&&(t=t.split(" ")),e.isArray(t)&&(t={left:+t[0],top:+t[1]||0}),"left"in t&&(this.offset.click.left=t.left+this.margins.left),"right"in t&&(this.offset.click.left=this.helperProportions.width-t.right+this.margins.left),"top"in t&&(this.offset.click.top=t.top+this.margins.top),"bottom"in t&&(this.offset.click.top=this.helperProportions.height-t.bottom+this.margins.top)},_isRootNode:function(e){return/(html|body)/i.test(e.tagName)||e===this.document[0]},_getParentOffset:function(){var t=this.offsetParent.offset(),i=this.document[0];return"absolute"===this.cssPosition&&this.scrollParent[0]!==i&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop()),this._isRootNode(this.offsetParent[0])&&(t={top:0,left:0}),{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"!==this.cssPosition)return{top:0,left:0};var e=this.element.position(),t=this._isRootNode(this.scrollParent[0]);return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+(t?0:this.scrollParent.scrollTop()),left:e.left-(parseInt(this.helper.css("left"),10)||0)+(t?0:this.scrollParent.scrollLeft())}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t,i,s,n=this.options,a=this.document[0];return this.relativeContainer=null,n.containment?"window"===n.containment?(this.containment=[e(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,e(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,e(window).scrollLeft()+e(window).width()-this.helperProportions.width-this.margins.left,e(window).scrollTop()+(e(window).height()||a.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top],void 0):"document"===n.containment?(this.containment=[0,0,e(a).width()-this.helperProportions.width-this.margins.left,(e(a).height()||a.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top],void 0):n.containment.constructor===Array?(this.containment=n.containment,void 0):("parent"===n.containment&&(n.containment=this.helper[0].parentNode),i=e(n.containment),s=i[0],s&&(t=/(scroll|auto)/.test(i.css("overflow")),this.containment=[(parseInt(i.css("borderLeftWidth"),10)||0)+(parseInt(i.css("paddingLeft"),10)||0),(parseInt(i.css("borderTopWidth"),10)||0)+(parseInt(i.css("paddingTop"),10)||0),(t?Math.max(s.scrollWidth,s.offsetWidth):s.offsetWidth)-(parseInt(i.css("borderRightWidth"),10)||0)-(parseInt(i.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(t?Math.max(s.scrollHeight,s.offsetHeight):s.offsetHeight)-(parseInt(i.css("borderBottomWidth"),10)||0)-(parseInt(i.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relativeContainer=i),void 0):(this.containment=null,void 0)
},_convertPositionTo:function(e,t){t||(t=this.position);var i="absolute"===e?1:-1,s=this._isRootNode(this.scrollParent[0]);return{top:t.top+this.offset.relative.top*i+this.offset.parent.top*i-("fixed"===this.cssPosition?-this.offset.scroll.top:s?0:this.offset.scroll.top)*i,left:t.left+this.offset.relative.left*i+this.offset.parent.left*i-("fixed"===this.cssPosition?-this.offset.scroll.left:s?0:this.offset.scroll.left)*i}},_generatePosition:function(e,t){var i,s,n,a,o=this.options,r=this._isRootNode(this.scrollParent[0]),h=e.pageX,l=e.pageY;return r&&this.offset.scroll||(this.offset.scroll={top:this.scrollParent.scrollTop(),left:this.scrollParent.scrollLeft()}),t&&(this.containment&&(this.relativeContainer?(s=this.relativeContainer.offset(),i=[this.containment[0]+s.left,this.containment[1]+s.top,this.containment[2]+s.left,this.containment[3]+s.top]):i=this.containment,e.pageX-this.offset.click.left<i[0]&&(h=i[0]+this.offset.click.left),e.pageY-this.offset.click.top<i[1]&&(l=i[1]+this.offset.click.top),e.pageX-this.offset.click.left>i[2]&&(h=i[2]+this.offset.click.left),e.pageY-this.offset.click.top>i[3]&&(l=i[3]+this.offset.click.top)),o.grid&&(n=o.grid[1]?this.originalPageY+Math.round((l-this.originalPageY)/o.grid[1])*o.grid[1]:this.originalPageY,l=i?n-this.offset.click.top>=i[1]||n-this.offset.click.top>i[3]?n:n-this.offset.click.top>=i[1]?n-o.grid[1]:n+o.grid[1]:n,a=o.grid[0]?this.originalPageX+Math.round((h-this.originalPageX)/o.grid[0])*o.grid[0]:this.originalPageX,h=i?a-this.offset.click.left>=i[0]||a-this.offset.click.left>i[2]?a:a-this.offset.click.left>=i[0]?a-o.grid[0]:a+o.grid[0]:a),"y"===o.axis&&(h=this.originalPageX),"x"===o.axis&&(l=this.originalPageY)),{top:l-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.offset.scroll.top:r?0:this.offset.scroll.top),left:h-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.offset.scroll.left:r?0:this.offset.scroll.left)}},_clear:function(){this.helper.removeClass("ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1,this.destroyOnClear&&this.destroy()},_normalizeRightBottom:function(){"y"!==this.options.axis&&"auto"!==this.helper.css("right")&&(this.helper.width(this.helper.width()),this.helper.css("right","auto")),"x"!==this.options.axis&&"auto"!==this.helper.css("bottom")&&(this.helper.height(this.helper.height()),this.helper.css("bottom","auto"))},_trigger:function(t,i,s){return s=s||this._uiHash(),e.ui.plugin.call(this,t,[i,s,this],!0),/^(drag|start|stop)/.test(t)&&(this.positionAbs=this._convertPositionTo("absolute"),s.offset=this.positionAbs),e.Widget.prototype._trigger.call(this,t,i,s)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),e.ui.plugin.add("draggable","connectToSortable",{start:function(t,i,s){var n=e.extend({},i,{item:s.element});s.sortables=[],e(s.options.connectToSortable).each(function(){var i=e(this).sortable("instance");i&&!i.options.disabled&&(s.sortables.push(i),i.refreshPositions(),i._trigger("activate",t,n))})},stop:function(t,i,s){var n=e.extend({},i,{item:s.element});s.cancelHelperRemoval=!1,e.each(s.sortables,function(){var e=this;e.isOver?(e.isOver=0,s.cancelHelperRemoval=!0,e.cancelHelperRemoval=!1,e._storedCSS={position:e.placeholder.css("position"),top:e.placeholder.css("top"),left:e.placeholder.css("left")},e._mouseStop(t),e.options.helper=e.options._helper):(e.cancelHelperRemoval=!0,e._trigger("deactivate",t,n))})},drag:function(t,i,s){e.each(s.sortables,function(){var n=!1,a=this;a.positionAbs=s.positionAbs,a.helperProportions=s.helperProportions,a.offset.click=s.offset.click,a._intersectsWith(a.containerCache)&&(n=!0,e.each(s.sortables,function(){return this.positionAbs=s.positionAbs,this.helperProportions=s.helperProportions,this.offset.click=s.offset.click,this!==a&&this._intersectsWith(this.containerCache)&&e.contains(a.element[0],this.element[0])&&(n=!1),n})),n?(a.isOver||(a.isOver=1,s._parent=i.helper.parent(),a.currentItem=i.helper.appendTo(a.element).data("ui-sortable-item",!0),a.options._helper=a.options.helper,a.options.helper=function(){return i.helper[0]},t.target=a.currentItem[0],a._mouseCapture(t,!0),a._mouseStart(t,!0,!0),a.offset.click.top=s.offset.click.top,a.offset.click.left=s.offset.click.left,a.offset.parent.left-=s.offset.parent.left-a.offset.parent.left,a.offset.parent.top-=s.offset.parent.top-a.offset.parent.top,s._trigger("toSortable",t),s.dropped=a.element,e.each(s.sortables,function(){this.refreshPositions()}),s.currentItem=s.element,a.fromOutside=s),a.currentItem&&(a._mouseDrag(t),i.position=a.position)):a.isOver&&(a.isOver=0,a.cancelHelperRemoval=!0,a.options._revert=a.options.revert,a.options.revert=!1,a._trigger("out",t,a._uiHash(a)),a._mouseStop(t,!0),a.options.revert=a.options._revert,a.options.helper=a.options._helper,a.placeholder&&a.placeholder.remove(),i.helper.appendTo(s._parent),s._refreshOffsets(t),i.position=s._generatePosition(t,!0),s._trigger("fromSortable",t),s.dropped=!1,e.each(s.sortables,function(){this.refreshPositions()}))})}}),e.ui.plugin.add("draggable","cursor",{start:function(t,i,s){var n=e("body"),a=s.options;n.css("cursor")&&(a._cursor=n.css("cursor")),n.css("cursor",a.cursor)},stop:function(t,i,s){var n=s.options;n._cursor&&e("body").css("cursor",n._cursor)}}),e.ui.plugin.add("draggable","opacity",{start:function(t,i,s){var n=e(i.helper),a=s.options;n.css("opacity")&&(a._opacity=n.css("opacity")),n.css("opacity",a.opacity)},stop:function(t,i,s){var n=s.options;n._opacity&&e(i.helper).css("opacity",n._opacity)}}),e.ui.plugin.add("draggable","scroll",{start:function(e,t,i){i.scrollParentNotHidden||(i.scrollParentNotHidden=i.helper.scrollParent(!1)),i.scrollParentNotHidden[0]!==i.document[0]&&"HTML"!==i.scrollParentNotHidden[0].tagName&&(i.overflowOffset=i.scrollParentNotHidden.offset())},drag:function(t,i,s){var n=s.options,a=!1,o=s.scrollParentNotHidden[0],r=s.document[0];o!==r&&"HTML"!==o.tagName?(n.axis&&"x"===n.axis||(s.overflowOffset.top+o.offsetHeight-t.pageY<n.scrollSensitivity?o.scrollTop=a=o.scrollTop+n.scrollSpeed:t.pageY-s.overflowOffset.top<n.scrollSensitivity&&(o.scrollTop=a=o.scrollTop-n.scrollSpeed)),n.axis&&"y"===n.axis||(s.overflowOffset.left+o.offsetWidth-t.pageX<n.scrollSensitivity?o.scrollLeft=a=o.scrollLeft+n.scrollSpeed:t.pageX-s.overflowOffset.left<n.scrollSensitivity&&(o.scrollLeft=a=o.scrollLeft-n.scrollSpeed))):(n.axis&&"x"===n.axis||(t.pageY-e(r).scrollTop()<n.scrollSensitivity?a=e(r).scrollTop(e(r).scrollTop()-n.scrollSpeed):e(window).height()-(t.pageY-e(r).scrollTop())<n.scrollSensitivity&&(a=e(r).scrollTop(e(r).scrollTop()+n.scrollSpeed))),n.axis&&"y"===n.axis||(t.pageX-e(r).scrollLeft()<n.scrollSensitivity?a=e(r).scrollLeft(e(r).scrollLeft()-n.scrollSpeed):e(window).width()-(t.pageX-e(r).scrollLeft())<n.scrollSensitivity&&(a=e(r).scrollLeft(e(r).scrollLeft()+n.scrollSpeed)))),a!==!1&&e.ui.ddmanager&&!n.dropBehaviour&&e.ui.ddmanager.prepareOffsets(s,t)}}),e.ui.plugin.add("draggable","snap",{start:function(t,i,s){var n=s.options;s.snapElements=[],e(n.snap.constructor!==String?n.snap.items||":data(ui-draggable)":n.snap).each(function(){var t=e(this),i=t.offset();this!==s.element[0]&&s.snapElements.push({item:this,width:t.outerWidth(),height:t.outerHeight(),top:i.top,left:i.left})})},drag:function(t,i,s){var n,a,o,r,h,l,u,d,c,p,f=s.options,m=f.snapTolerance,g=i.offset.left,v=g+s.helperProportions.width,y=i.offset.top,b=y+s.helperProportions.height;for(c=s.snapElements.length-1;c>=0;c--)h=s.snapElements[c].left-s.margins.left,l=h+s.snapElements[c].width,u=s.snapElements[c].top-s.margins.top,d=u+s.snapElements[c].height,h-m>v||g>l+m||u-m>b||y>d+m||!e.contains(s.snapElements[c].item.ownerDocument,s.snapElements[c].item)?(s.snapElements[c].snapping&&s.options.snap.release&&s.options.snap.release.call(s.element,t,e.extend(s._uiHash(),{snapItem:s.snapElements[c].item})),s.snapElements[c].snapping=!1):("inner"!==f.snapMode&&(n=m>=Math.abs(u-b),a=m>=Math.abs(d-y),o=m>=Math.abs(h-v),r=m>=Math.abs(l-g),n&&(i.position.top=s._convertPositionTo("relative",{top:u-s.helperProportions.height,left:0}).top),a&&(i.position.top=s._convertPositionTo("relative",{top:d,left:0}).top),o&&(i.position.left=s._convertPositionTo("relative",{top:0,left:h-s.helperProportions.width}).left),r&&(i.position.left=s._convertPositionTo("relative",{top:0,left:l}).left)),p=n||a||o||r,"outer"!==f.snapMode&&(n=m>=Math.abs(u-y),a=m>=Math.abs(d-b),o=m>=Math.abs(h-g),r=m>=Math.abs(l-v),n&&(i.position.top=s._convertPositionTo("relative",{top:u,left:0}).top),a&&(i.position.top=s._convertPositionTo("relative",{top:d-s.helperProportions.height,left:0}).top),o&&(i.position.left=s._convertPositionTo("relative",{top:0,left:h}).left),r&&(i.position.left=s._convertPositionTo("relative",{top:0,left:l-s.helperProportions.width}).left)),!s.snapElements[c].snapping&&(n||a||o||r||p)&&s.options.snap.snap&&s.options.snap.snap.call(s.element,t,e.extend(s._uiHash(),{snapItem:s.snapElements[c].item})),s.snapElements[c].snapping=n||a||o||r||p)}}),e.ui.plugin.add("draggable","stack",{start:function(t,i,s){var n,a=s.options,o=e.makeArray(e(a.stack)).sort(function(t,i){return(parseInt(e(t).css("zIndex"),10)||0)-(parseInt(e(i).css("zIndex"),10)||0)});o.length&&(n=parseInt(e(o[0]).css("zIndex"),10)||0,e(o).each(function(t){e(this).css("zIndex",n+t)}),this.css("zIndex",n+o.length))}}),e.ui.plugin.add("draggable","zIndex",{start:function(t,i,s){var n=e(i.helper),a=s.options;n.css("zIndex")&&(a._zIndex=n.css("zIndex")),n.css("zIndex",a.zIndex)},stop:function(t,i,s){var n=s.options;n._zIndex&&e(i.helper).css("zIndex",n._zIndex)}}),e.ui.draggable,e.widget("ui.resizable",e.ui.mouse,{version:"1.11.4",widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:90,resize:null,start:null,stop:null},_num:function(e){return parseInt(e,10)||0},_isNumber:function(e){return!isNaN(parseInt(e,10))},_hasScroll:function(t,i){if("hidden"===e(t).css("overflow"))return!1;var s=i&&"left"===i?"scrollLeft":"scrollTop",n=!1;return t[s]>0?!0:(t[s]=1,n=t[s]>0,t[s]=0,n)},_create:function(){var t,i,s,n,a,o=this,r=this.options;if(this.element.addClass("ui-resizable"),e.extend(this,{_aspectRatio:!!r.aspectRatio,aspectRatio:r.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:r.helper||r.ghost||r.animate?r.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)&&(this.element.wrap(e("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("ui-resizable",this.element.resizable("instance")),this.elementIsWrapper=!0,this.element.css({marginLeft:this.originalElement.css("marginLeft"),marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom")}),this.originalElement.css({marginLeft:0,marginTop:0,marginRight:0,marginBottom:0}),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css({margin:this.originalElement.css("margin")}),this._proportionallyResize()),this.handles=r.handles||(e(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se"),this._handles=e(),this.handles.constructor===String)for("all"===this.handles&&(this.handles="n,e,s,w,se,sw,ne,nw"),t=this.handles.split(","),this.handles={},i=0;t.length>i;i++)s=e.trim(t[i]),a="ui-resizable-"+s,n=e("<div class='ui-resizable-handle "+a+"'></div>"),n.css({zIndex:r.zIndex}),"se"===s&&n.addClass("ui-icon ui-icon-gripsmall-diagonal-se"),this.handles[s]=".ui-resizable-"+s,this.element.append(n);this._renderAxis=function(t){var i,s,n,a;t=t||this.element;for(i in this.handles)this.handles[i].constructor===String?this.handles[i]=this.element.children(this.handles[i]).first().show():(this.handles[i].jquery||this.handles[i].nodeType)&&(this.handles[i]=e(this.handles[i]),this._on(this.handles[i],{mousedown:o._mouseDown})),this.elementIsWrapper&&this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)&&(s=e(this.handles[i],this.element),a=/sw|ne|nw|se|n|s/.test(i)?s.outerHeight():s.outerWidth(),n=["padding",/ne|nw|n/.test(i)?"Top":/se|sw|s/.test(i)?"Bottom":/^e$/.test(i)?"Right":"Left"].join(""),t.css(n,a),this._proportionallyResize()),this._handles=this._handles.add(this.handles[i])},this._renderAxis(this.element),this._handles=this._handles.add(this.element.find(".ui-resizable-handle")),this._handles.disableSelection(),this._handles.mouseover(function(){o.resizing||(this.className&&(n=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)),o.axis=n&&n[1]?n[1]:"se")}),r.autoHide&&(this._handles.hide(),e(this.element).addClass("ui-resizable-autohide").mouseenter(function(){r.disabled||(e(this).removeClass("ui-resizable-autohide"),o._handles.show())}).mouseleave(function(){r.disabled||o.resizing||(e(this).addClass("ui-resizable-autohide"),o._handles.hide())})),this._mouseInit()},_destroy:function(){this._mouseDestroy();var t,i=function(t){e(t).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove()};return this.elementIsWrapper&&(i(this.element),t=this.element,this.originalElement.css({position:t.css("position"),width:t.outerWidth(),height:t.outerHeight(),top:t.css("top"),left:t.css("left")}).insertAfter(t),t.remove()),this.originalElement.css("resize",this.originalResizeStyle),i(this.originalElement),this},_mouseCapture:function(t){var i,s,n=!1;for(i in this.handles)s=e(this.handles[i])[0],(s===t.target||e.contains(s,t.target))&&(n=!0);return!this.options.disabled&&n},_mouseStart:function(t){var i,s,n,a=this.options,o=this.element;return this.resizing=!0,this._renderProxy(),i=this._num(this.helper.css("left")),s=this._num(this.helper.css("top")),a.containment&&(i+=e(a.containment).scrollLeft()||0,s+=e(a.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:i,top:s},this.size=this._helper?{width:this.helper.width(),height:this.helper.height()}:{width:o.width(),height:o.height()},this.originalSize=this._helper?{width:o.outerWidth(),height:o.outerHeight()}:{width:o.width(),height:o.height()},this.sizeDiff={width:o.outerWidth()-o.width(),height:o.outerHeight()-o.height()},this.originalPosition={left:i,top:s},this.originalMousePosition={left:t.pageX,top:t.pageY},this.aspectRatio="number"==typeof a.aspectRatio?a.aspectRatio:this.originalSize.width/this.originalSize.height||1,n=e(".ui-resizable-"+this.axis).css("cursor"),e("body").css("cursor","auto"===n?this.axis+"-resize":n),o.addClass("ui-resizable-resizing"),this._propagate("start",t),!0},_mouseDrag:function(t){var i,s,n=this.originalMousePosition,a=this.axis,o=t.pageX-n.left||0,r=t.pageY-n.top||0,h=this._change[a];return this._updatePrevProperties(),h?(i=h.apply(this,[t,o,r]),this._updateVirtualBoundaries(t.shiftKey),(this._aspectRatio||t.shiftKey)&&(i=this._updateRatio(i,t)),i=this._respectSize(i,t),this._updateCache(i),this._propagate("resize",t),s=this._applyChanges(),!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize(),e.isEmptyObject(s)||(this._updatePrevProperties(),this._trigger("resize",t,this.ui()),this._applyChanges()),!1):!1},_mouseStop:function(t){this.resizing=!1;var i,s,n,a,o,r,h,l=this.options,u=this;return this._helper&&(i=this._proportionallyResizeElements,s=i.length&&/textarea/i.test(i[0].nodeName),n=s&&this._hasScroll(i[0],"left")?0:u.sizeDiff.height,a=s?0:u.sizeDiff.width,o={width:u.helper.width()-a,height:u.helper.height()-n},r=parseInt(u.element.css("left"),10)+(u.position.left-u.originalPosition.left)||null,h=parseInt(u.element.css("top"),10)+(u.position.top-u.originalPosition.top)||null,l.animate||this.element.css(e.extend(o,{top:h,left:r})),u.helper.height(u.size.height),u.helper.width(u.size.width),this._helper&&!l.animate&&this._proportionallyResize()),e("body").css("cursor","auto"),this.element.removeClass("ui-resizable-resizing"),this._propagate("stop",t),this._helper&&this.helper.remove(),!1},_updatePrevProperties:function(){this.prevPosition={top:this.position.top,left:this.position.left},this.prevSize={width:this.size.width,height:this.size.height}},_applyChanges:function(){var e={};return this.position.top!==this.prevPosition.top&&(e.top=this.position.top+"px"),this.position.left!==this.prevPosition.left&&(e.left=this.position.left+"px"),this.size.width!==this.prevSize.width&&(e.width=this.size.width+"px"),this.size.height!==this.prevSize.height&&(e.height=this.size.height+"px"),this.helper.css(e),e},_updateVirtualBoundaries:function(e){var t,i,s,n,a,o=this.options;a={minWidth:this._isNumber(o.minWidth)?o.minWidth:0,maxWidth:this._isNumber(o.maxWidth)?o.maxWidth:1/0,minHeight:this._isNumber(o.minHeight)?o.minHeight:0,maxHeight:this._isNumber(o.maxHeight)?o.maxHeight:1/0},(this._aspectRatio||e)&&(t=a.minHeight*this.aspectRatio,s=a.minWidth/this.aspectRatio,i=a.maxHeight*this.aspectRatio,n=a.maxWidth/this.aspectRatio,t>a.minWidth&&(a.minWidth=t),s>a.minHeight&&(a.minHeight=s),a.maxWidth>i&&(a.maxWidth=i),a.maxHeight>n&&(a.maxHeight=n)),this._vBoundaries=a},_updateCache:function(e){this.offset=this.helper.offset(),this._isNumber(e.left)&&(this.position.left=e.left),this._isNumber(e.top)&&(this.position.top=e.top),this._isNumber(e.height)&&(this.size.height=e.height),this._isNumber(e.width)&&(this.size.width=e.width)},_updateRatio:function(e){var t=this.position,i=this.size,s=this.axis;return this._isNumber(e.height)?e.width=e.height*this.aspectRatio:this._isNumber(e.width)&&(e.height=e.width/this.aspectRatio),"sw"===s&&(e.left=t.left+(i.width-e.width),e.top=null),"nw"===s&&(e.top=t.top+(i.height-e.height),e.left=t.left+(i.width-e.width)),e},_respectSize:function(e){var t=this._vBoundaries,i=this.axis,s=this._isNumber(e.width)&&t.maxWidth&&t.maxWidth<e.width,n=this._isNumber(e.height)&&t.maxHeight&&t.maxHeight<e.height,a=this._isNumber(e.width)&&t.minWidth&&t.minWidth>e.width,o=this._isNumber(e.height)&&t.minHeight&&t.minHeight>e.height,r=this.originalPosition.left+this.originalSize.width,h=this.position.top+this.size.height,l=/sw|nw|w/.test(i),u=/nw|ne|n/.test(i);return a&&(e.width=t.minWidth),o&&(e.height=t.minHeight),s&&(e.width=t.maxWidth),n&&(e.height=t.maxHeight),a&&l&&(e.left=r-t.minWidth),s&&l&&(e.left=r-t.maxWidth),o&&u&&(e.top=h-t.minHeight),n&&u&&(e.top=h-t.maxHeight),e.width||e.height||e.left||!e.top?e.width||e.height||e.top||!e.left||(e.left=null):e.top=null,e},_getPaddingPlusBorderDimensions:function(e){for(var t=0,i=[],s=[e.css("borderTopWidth"),e.css("borderRightWidth"),e.css("borderBottomWidth"),e.css("borderLeftWidth")],n=[e.css("paddingTop"),e.css("paddingRight"),e.css("paddingBottom"),e.css("paddingLeft")];4>t;t++)i[t]=parseInt(s[t],10)||0,i[t]+=parseInt(n[t],10)||0;return{height:i[0]+i[2],width:i[1]+i[3]}},_proportionallyResize:function(){if(this._proportionallyResizeElements.length)for(var e,t=0,i=this.helper||this.element;this._proportionallyResizeElements.length>t;t++)e=this._proportionallyResizeElements[t],this.outerDimensions||(this.outerDimensions=this._getPaddingPlusBorderDimensions(e)),e.css({height:i.height()-this.outerDimensions.height||0,width:i.width()-this.outerDimensions.width||0})},_renderProxy:function(){var t=this.element,i=this.options;this.elementOffset=t.offset(),this._helper?(this.helper=this.helper||e("<div style='overflow:hidden;'></div>"),this.helper.addClass(this._helper).css({width:this.element.outerWidth()-1,height:this.element.outerHeight()-1,position:"absolute",left:this.elementOffset.left+"px",top:this.elementOffset.top+"px",zIndex:++i.zIndex}),this.helper.appendTo("body").disableSelection()):this.helper=this.element},_change:{e:function(e,t){return{width:this.originalSize.width+t}},w:function(e,t){var i=this.originalSize,s=this.originalPosition;return{left:s.left+t,width:i.width-t}},n:function(e,t,i){var s=this.originalSize,n=this.originalPosition;return{top:n.top+i,height:s.height-i}},s:function(e,t,i){return{height:this.originalSize.height+i}},se:function(t,i,s){return e.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[t,i,s]))},sw:function(t,i,s){return e.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[t,i,s]))},ne:function(t,i,s){return e.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[t,i,s]))},nw:function(t,i,s){return e.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[t,i,s]))}},_propagate:function(t,i){e.ui.plugin.call(this,t,[i,this.ui()]),"resize"!==t&&this._trigger(t,i,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),e.ui.plugin.add("resizable","animate",{stop:function(t){var i=e(this).resizable("instance"),s=i.options,n=i._proportionallyResizeElements,a=n.length&&/textarea/i.test(n[0].nodeName),o=a&&i._hasScroll(n[0],"left")?0:i.sizeDiff.height,r=a?0:i.sizeDiff.width,h={width:i.size.width-r,height:i.size.height-o},l=parseInt(i.element.css("left"),10)+(i.position.left-i.originalPosition.left)||null,u=parseInt(i.element.css("top"),10)+(i.position.top-i.originalPosition.top)||null;i.element.animate(e.extend(h,u&&l?{top:u,left:l}:{}),{duration:s.animateDuration,easing:s.animateEasing,step:function(){var s={width:parseInt(i.element.css("width"),10),height:parseInt(i.element.css("height"),10),top:parseInt(i.element.css("top"),10),left:parseInt(i.element.css("left"),10)};n&&n.length&&e(n[0]).css({width:s.width,height:s.height}),i._updateCache(s),i._propagate("resize",t)}})}}),e.ui.plugin.add("resizable","containment",{start:function(){var t,i,s,n,a,o,r,h=e(this).resizable("instance"),l=h.options,u=h.element,d=l.containment,c=d instanceof e?d.get(0):/parent/.test(d)?u.parent().get(0):d;c&&(h.containerElement=e(c),/document/.test(d)||d===document?(h.containerOffset={left:0,top:0},h.containerPosition={left:0,top:0},h.parentData={element:e(document),left:0,top:0,width:e(document).width(),height:e(document).height()||document.body.parentNode.scrollHeight}):(t=e(c),i=[],e(["Top","Right","Left","Bottom"]).each(function(e,s){i[e]=h._num(t.css("padding"+s))}),h.containerOffset=t.offset(),h.containerPosition=t.position(),h.containerSize={height:t.innerHeight()-i[3],width:t.innerWidth()-i[1]},s=h.containerOffset,n=h.containerSize.height,a=h.containerSize.width,o=h._hasScroll(c,"left")?c.scrollWidth:a,r=h._hasScroll(c)?c.scrollHeight:n,h.parentData={element:c,left:s.left,top:s.top,width:o,height:r}))},resize:function(t){var i,s,n,a,o=e(this).resizable("instance"),r=o.options,h=o.containerOffset,l=o.position,u=o._aspectRatio||t.shiftKey,d={top:0,left:0},c=o.containerElement,p=!0;c[0]!==document&&/static/.test(c.css("position"))&&(d=h),l.left<(o._helper?h.left:0)&&(o.size.width=o.size.width+(o._helper?o.position.left-h.left:o.position.left-d.left),u&&(o.size.height=o.size.width/o.aspectRatio,p=!1),o.position.left=r.helper?h.left:0),l.top<(o._helper?h.top:0)&&(o.size.height=o.size.height+(o._helper?o.position.top-h.top:o.position.top),u&&(o.size.width=o.size.height*o.aspectRatio,p=!1),o.position.top=o._helper?h.top:0),n=o.containerElement.get(0)===o.element.parent().get(0),a=/relative|absolute/.test(o.containerElement.css("position")),n&&a?(o.offset.left=o.parentData.left+o.position.left,o.offset.top=o.parentData.top+o.position.top):(o.offset.left=o.element.offset().left,o.offset.top=o.element.offset().top),i=Math.abs(o.sizeDiff.width+(o._helper?o.offset.left-d.left:o.offset.left-h.left)),s=Math.abs(o.sizeDiff.height+(o._helper?o.offset.top-d.top:o.offset.top-h.top)),i+o.size.width>=o.parentData.width&&(o.size.width=o.parentData.width-i,u&&(o.size.height=o.size.width/o.aspectRatio,p=!1)),s+o.size.height>=o.parentData.height&&(o.size.height=o.parentData.height-s,u&&(o.size.width=o.size.height*o.aspectRatio,p=!1)),p||(o.position.left=o.prevPosition.left,o.position.top=o.prevPosition.top,o.size.width=o.prevSize.width,o.size.height=o.prevSize.height)},stop:function(){var t=e(this).resizable("instance"),i=t.options,s=t.containerOffset,n=t.containerPosition,a=t.containerElement,o=e(t.helper),r=o.offset(),h=o.outerWidth()-t.sizeDiff.width,l=o.outerHeight()-t.sizeDiff.height;t._helper&&!i.animate&&/relative/.test(a.css("position"))&&e(this).css({left:r.left-n.left-s.left,width:h,height:l}),t._helper&&!i.animate&&/static/.test(a.css("position"))&&e(this).css({left:r.left-n.left-s.left,width:h,height:l})}}),e.ui.plugin.add("resizable","alsoResize",{start:function(){var t=e(this).resizable("instance"),i=t.options;e(i.alsoResize).each(function(){var t=e(this);t.data("ui-resizable-alsoresize",{width:parseInt(t.width(),10),height:parseInt(t.height(),10),left:parseInt(t.css("left"),10),top:parseInt(t.css("top"),10)})})},resize:function(t,i){var s=e(this).resizable("instance"),n=s.options,a=s.originalSize,o=s.originalPosition,r={height:s.size.height-a.height||0,width:s.size.width-a.width||0,top:s.position.top-o.top||0,left:s.position.left-o.left||0};e(n.alsoResize).each(function(){var t=e(this),s=e(this).data("ui-resizable-alsoresize"),n={},a=t.parents(i.originalElement[0]).length?["width","height"]:["width","height","top","left"];e.each(a,function(e,t){var i=(s[t]||0)+(r[t]||0);i&&i>=0&&(n[t]=i||null)}),t.css(n)})},stop:function(){e(this).removeData("resizable-alsoresize")}}),e.ui.plugin.add("resizable","ghost",{start:function(){var t=e(this).resizable("instance"),i=t.options,s=t.size;t.ghost=t.originalElement.clone(),t.ghost.css({opacity:.25,display:"block",position:"relative",height:s.height,width:s.width,margin:0,left:0,top:0}).addClass("ui-resizable-ghost").addClass("string"==typeof i.ghost?i.ghost:""),t.ghost.appendTo(t.helper)},resize:function(){var t=e(this).resizable("instance");t.ghost&&t.ghost.css({position:"relative",height:t.size.height,width:t.size.width})},stop:function(){var t=e(this).resizable("instance");t.ghost&&t.helper&&t.helper.get(0).removeChild(t.ghost.get(0))}}),e.ui.plugin.add("resizable","grid",{resize:function(){var t,i=e(this).resizable("instance"),s=i.options,n=i.size,a=i.originalSize,o=i.originalPosition,r=i.axis,h="number"==typeof s.grid?[s.grid,s.grid]:s.grid,l=h[0]||1,u=h[1]||1,d=Math.round((n.width-a.width)/l)*l,c=Math.round((n.height-a.height)/u)*u,p=a.width+d,f=a.height+c,m=s.maxWidth&&p>s.maxWidth,g=s.maxHeight&&f>s.maxHeight,v=s.minWidth&&s.minWidth>p,y=s.minHeight&&s.minHeight>f;s.grid=h,v&&(p+=l),y&&(f+=u),m&&(p-=l),g&&(f-=u),/^(se|s|e)$/.test(r)?(i.size.width=p,i.size.height=f):/^(ne)$/.test(r)?(i.size.width=p,i.size.height=f,i.position.top=o.top-c):/^(sw)$/.test(r)?(i.size.width=p,i.size.height=f,i.position.left=o.left-d):((0>=f-u||0>=p-l)&&(t=i._getPaddingPlusBorderDimensions(this)),f-u>0?(i.size.height=f,i.position.top=o.top-c):(f=u-t.height,i.size.height=f,i.position.top=o.top+a.height-f),p-l>0?(i.size.width=p,i.position.left=o.left-d):(p=l-t.width,i.size.width=p,i.position.left=o.left+a.width-p))}}),e.ui.resizable,e.widget("ui.dialog",{version:"1.11.4",options:{appendTo:"body",autoOpen:!0,buttons:[],closeOnEscape:!0,closeText:"Close",dialogClass:"",draggable:!0,hide:null,height:"auto",maxHeight:null,maxWidth:null,minHeight:150,minWidth:150,modal:!1,position:{my:"center",at:"center",of:window,collision:"fit",using:function(t){var i=e(this).css(t).offset().top;0>i&&e(this).css("top",t.top-i)}},resizable:!0,show:null,title:null,width:300,beforeClose:null,close:null,drag:null,dragStart:null,dragStop:null,focus:null,open:null,resize:null,resizeStart:null,resizeStop:null},sizeRelatedOptions:{buttons:!0,height:!0,maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0,width:!0},resizableRelatedOptions:{maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0},_create:function(){this.originalCss={display:this.element[0].style.display,width:this.element[0].style.width,minHeight:this.element[0].style.minHeight,maxHeight:this.element[0].style.maxHeight,height:this.element[0].style.height},this.originalPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)},this.originalTitle=this.element.attr("title"),this.options.title=this.options.title||this.originalTitle,this._createWrapper(),this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(this.uiDialog),this._createTitlebar(),this._createButtonPane(),this.options.draggable&&e.fn.draggable&&this._makeDraggable(),this.options.resizable&&e.fn.resizable&&this._makeResizable(),this._isOpen=!1,this._trackFocus()},_init:function(){this.options.autoOpen&&this.open()},_appendTo:function(){var t=this.options.appendTo;return t&&(t.jquery||t.nodeType)?e(t):this.document.find(t||"body").eq(0)},_destroy:function(){var e,t=this.originalPosition;this._untrackInstance(),this._destroyOverlay(),this.element.removeUniqueId().removeClass("ui-dialog-content ui-widget-content").css(this.originalCss).detach(),this.uiDialog.stop(!0,!0).remove(),this.originalTitle&&this.element.attr("title",this.originalTitle),e=t.parent.children().eq(t.index),e.length&&e[0]!==this.element[0]?e.before(this.element):t.parent.append(this.element)},widget:function(){return this.uiDialog},disable:e.noop,enable:e.noop,close:function(t){var i,s=this;if(this._isOpen&&this._trigger("beforeClose",t)!==!1){if(this._isOpen=!1,this._focusedElement=null,this._destroyOverlay(),this._untrackInstance(),!this.opener.filter(":focusable").focus().length)try{i=this.document[0].activeElement,i&&"body"!==i.nodeName.toLowerCase()&&e(i).blur()}catch(n){}this._hide(this.uiDialog,this.options.hide,function(){s._trigger("close",t)})}},isOpen:function(){return this._isOpen},moveToTop:function(){this._moveToTop()},_moveToTop:function(t,i){var s=!1,n=this.uiDialog.siblings(".ui-front:visible").map(function(){return+e(this).css("z-index")}).get(),a=Math.max.apply(null,n);return a>=+this.uiDialog.css("z-index")&&(this.uiDialog.css("z-index",a+1),s=!0),s&&!i&&this._trigger("focus",t),s},open:function(){var t=this;return this._isOpen?(this._moveToTop()&&this._focusTabbable(),void 0):(this._isOpen=!0,this.opener=e(this.document[0].activeElement),this._size(),this._position(),this._createOverlay(),this._moveToTop(null,!0),this.overlay&&this.overlay.css("z-index",this.uiDialog.css("z-index")-1),this._show(this.uiDialog,this.options.show,function(){t._focusTabbable(),t._trigger("focus")}),this._makeFocusTarget(),this._trigger("open"),void 0)},_focusTabbable:function(){var e=this._focusedElement;e||(e=this.element.find("[autofocus]")),e.length||(e=this.element.find(":tabbable")),e.length||(e=this.uiDialogButtonPane.find(":tabbable")),e.length||(e=this.uiDialogTitlebarClose.filter(":tabbable")),e.length||(e=this.uiDialog),e.eq(0).focus()},_keepFocus:function(t){function i(){var t=this.document[0].activeElement,i=this.uiDialog[0]===t||e.contains(this.uiDialog[0],t);i||this._focusTabbable()}t.preventDefault(),i.call(this),this._delay(i)},_createWrapper:function(){this.uiDialog=e("<div>").addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front "+this.options.dialogClass).hide().attr({tabIndex:-1,role:"dialog"}).appendTo(this._appendTo()),this._on(this.uiDialog,{keydown:function(t){if(this.options.closeOnEscape&&!t.isDefaultPrevented()&&t.keyCode&&t.keyCode===e.ui.keyCode.ESCAPE)return t.preventDefault(),this.close(t),void 0;
if(t.keyCode===e.ui.keyCode.TAB&&!t.isDefaultPrevented()){var i=this.uiDialog.find(":tabbable"),s=i.filter(":first"),n=i.filter(":last");t.target!==n[0]&&t.target!==this.uiDialog[0]||t.shiftKey?t.target!==s[0]&&t.target!==this.uiDialog[0]||!t.shiftKey||(this._delay(function(){n.focus()}),t.preventDefault()):(this._delay(function(){s.focus()}),t.preventDefault())}},mousedown:function(e){this._moveToTop(e)&&this._focusTabbable()}}),this.element.find("[aria-describedby]").length||this.uiDialog.attr({"aria-describedby":this.element.uniqueId().attr("id")})},_createTitlebar:function(){var t;this.uiDialogTitlebar=e("<div>").addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(this.uiDialog),this._on(this.uiDialogTitlebar,{mousedown:function(t){e(t.target).closest(".ui-dialog-titlebar-close")||this.uiDialog.focus()}}),this.uiDialogTitlebarClose=e("<button type='button'></button>").button({label:this.options.closeText,icons:{primary:"ui-icon-closethick"},text:!1}).addClass("ui-dialog-titlebar-close").appendTo(this.uiDialogTitlebar),this._on(this.uiDialogTitlebarClose,{click:function(e){e.preventDefault(),this.close(e)}}),t=e("<span>").uniqueId().addClass("ui-dialog-title").prependTo(this.uiDialogTitlebar),this._title(t),this.uiDialog.attr({"aria-labelledby":t.attr("id")})},_title:function(e){this.options.title||e.html("&#160;"),e.text(this.options.title)},_createButtonPane:function(){this.uiDialogButtonPane=e("<div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"),this.uiButtonSet=e("<div>").addClass("ui-dialog-buttonset").appendTo(this.uiDialogButtonPane),this._createButtons()},_createButtons:function(){var t=this,i=this.options.buttons;return this.uiDialogButtonPane.remove(),this.uiButtonSet.empty(),e.isEmptyObject(i)||e.isArray(i)&&!i.length?(this.uiDialog.removeClass("ui-dialog-buttons"),void 0):(e.each(i,function(i,s){var n,a;s=e.isFunction(s)?{click:s,text:i}:s,s=e.extend({type:"button"},s),n=s.click,s.click=function(){n.apply(t.element[0],arguments)},a={icons:s.icons,text:s.showText},delete s.icons,delete s.showText,e("<button></button>",s).button(a).appendTo(t.uiButtonSet)}),this.uiDialog.addClass("ui-dialog-buttons"),this.uiDialogButtonPane.appendTo(this.uiDialog),void 0)},_makeDraggable:function(){function t(e){return{position:e.position,offset:e.offset}}var i=this,s=this.options;this.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(s,n){e(this).addClass("ui-dialog-dragging"),i._blockFrames(),i._trigger("dragStart",s,t(n))},drag:function(e,s){i._trigger("drag",e,t(s))},stop:function(n,a){var o=a.offset.left-i.document.scrollLeft(),r=a.offset.top-i.document.scrollTop();s.position={my:"left top",at:"left"+(o>=0?"+":"")+o+" "+"top"+(r>=0?"+":"")+r,of:i.window},e(this).removeClass("ui-dialog-dragging"),i._unblockFrames(),i._trigger("dragStop",n,t(a))}})},_makeResizable:function(){function t(e){return{originalPosition:e.originalPosition,originalSize:e.originalSize,position:e.position,size:e.size}}var i=this,s=this.options,n=s.resizable,a=this.uiDialog.css("position"),o="string"==typeof n?n:"n,e,s,w,se,sw,ne,nw";this.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:this.element,maxWidth:s.maxWidth,maxHeight:s.maxHeight,minWidth:s.minWidth,minHeight:this._minHeight(),handles:o,start:function(s,n){e(this).addClass("ui-dialog-resizing"),i._blockFrames(),i._trigger("resizeStart",s,t(n))},resize:function(e,s){i._trigger("resize",e,t(s))},stop:function(n,a){var o=i.uiDialog.offset(),r=o.left-i.document.scrollLeft(),h=o.top-i.document.scrollTop();s.height=i.uiDialog.height(),s.width=i.uiDialog.width(),s.position={my:"left top",at:"left"+(r>=0?"+":"")+r+" "+"top"+(h>=0?"+":"")+h,of:i.window},e(this).removeClass("ui-dialog-resizing"),i._unblockFrames(),i._trigger("resizeStop",n,t(a))}}).css("position",a)},_trackFocus:function(){this._on(this.widget(),{focusin:function(t){this._makeFocusTarget(),this._focusedElement=e(t.target)}})},_makeFocusTarget:function(){this._untrackInstance(),this._trackingInstances().unshift(this)},_untrackInstance:function(){var t=this._trackingInstances(),i=e.inArray(this,t);-1!==i&&t.splice(i,1)},_trackingInstances:function(){var e=this.document.data("ui-dialog-instances");return e||(e=[],this.document.data("ui-dialog-instances",e)),e},_minHeight:function(){var e=this.options;return"auto"===e.height?e.minHeight:Math.min(e.minHeight,e.height)},_position:function(){var e=this.uiDialog.is(":visible");e||this.uiDialog.show(),this.uiDialog.position(this.options.position),e||this.uiDialog.hide()},_setOptions:function(t){var i=this,s=!1,n={};e.each(t,function(e,t){i._setOption(e,t),e in i.sizeRelatedOptions&&(s=!0),e in i.resizableRelatedOptions&&(n[e]=t)}),s&&(this._size(),this._position()),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option",n)},_setOption:function(e,t){var i,s,n=this.uiDialog;"dialogClass"===e&&n.removeClass(this.options.dialogClass).addClass(t),"disabled"!==e&&(this._super(e,t),"appendTo"===e&&this.uiDialog.appendTo(this._appendTo()),"buttons"===e&&this._createButtons(),"closeText"===e&&this.uiDialogTitlebarClose.button({label:""+t}),"draggable"===e&&(i=n.is(":data(ui-draggable)"),i&&!t&&n.draggable("destroy"),!i&&t&&this._makeDraggable()),"position"===e&&this._position(),"resizable"===e&&(s=n.is(":data(ui-resizable)"),s&&!t&&n.resizable("destroy"),s&&"string"==typeof t&&n.resizable("option","handles",t),s||t===!1||this._makeResizable()),"title"===e&&this._title(this.uiDialogTitlebar.find(".ui-dialog-title")))},_size:function(){var e,t,i,s=this.options;this.element.show().css({width:"auto",minHeight:0,maxHeight:"none",height:0}),s.minWidth>s.width&&(s.width=s.minWidth),e=this.uiDialog.css({height:"auto",width:s.width}).outerHeight(),t=Math.max(0,s.minHeight-e),i="number"==typeof s.maxHeight?Math.max(0,s.maxHeight-e):"none","auto"===s.height?this.element.css({minHeight:t,maxHeight:i,height:"auto"}):this.element.height(Math.max(0,s.height-e)),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option","minHeight",this._minHeight())},_blockFrames:function(){this.iframeBlocks=this.document.find("iframe").map(function(){var t=e(this);return e("<div>").css({position:"absolute",width:t.outerWidth(),height:t.outerHeight()}).appendTo(t.parent()).offset(t.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_allowInteraction:function(t){return e(t.target).closest(".ui-dialog").length?!0:!!e(t.target).closest(".ui-datepicker").length},_createOverlay:function(){if(this.options.modal){var t=!0;this._delay(function(){t=!1}),this.document.data("ui-dialog-overlays")||this._on(this.document,{focusin:function(e){t||this._allowInteraction(e)||(e.preventDefault(),this._trackingInstances()[0]._focusTabbable())}}),this.overlay=e("<div>").addClass("ui-widget-overlay ui-front").appendTo(this._appendTo()),this._on(this.overlay,{mousedown:"_keepFocus"}),this.document.data("ui-dialog-overlays",(this.document.data("ui-dialog-overlays")||0)+1)}},_destroyOverlay:function(){if(this.options.modal&&this.overlay){var e=this.document.data("ui-dialog-overlays")-1;e?this.document.data("ui-dialog-overlays",e):this.document.unbind("focusin").removeData("ui-dialog-overlays"),this.overlay.remove(),this.overlay=null}}}),e.widget("ui.droppable",{version:"1.11.4",widgetEventPrefix:"drop",options:{accept:"*",activeClass:!1,addClasses:!0,greedy:!1,hoverClass:!1,scope:"default",tolerance:"intersect",activate:null,deactivate:null,drop:null,out:null,over:null},_create:function(){var t,i=this.options,s=i.accept;this.isover=!1,this.isout=!0,this.accept=e.isFunction(s)?s:function(e){return e.is(s)},this.proportions=function(){return arguments.length?(t=arguments[0],void 0):t?t:t={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight}},this._addToManager(i.scope),i.addClasses&&this.element.addClass("ui-droppable")},_addToManager:function(t){e.ui.ddmanager.droppables[t]=e.ui.ddmanager.droppables[t]||[],e.ui.ddmanager.droppables[t].push(this)},_splice:function(e){for(var t=0;e.length>t;t++)e[t]===this&&e.splice(t,1)},_destroy:function(){var t=e.ui.ddmanager.droppables[this.options.scope];this._splice(t),this.element.removeClass("ui-droppable ui-droppable-disabled")},_setOption:function(t,i){if("accept"===t)this.accept=e.isFunction(i)?i:function(e){return e.is(i)};else if("scope"===t){var s=e.ui.ddmanager.droppables[this.options.scope];this._splice(s),this._addToManager(i)}this._super(t,i)},_activate:function(t){var i=e.ui.ddmanager.current;this.options.activeClass&&this.element.addClass(this.options.activeClass),i&&this._trigger("activate",t,this.ui(i))},_deactivate:function(t){var i=e.ui.ddmanager.current;this.options.activeClass&&this.element.removeClass(this.options.activeClass),i&&this._trigger("deactivate",t,this.ui(i))},_over:function(t){var i=e.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this.options.hoverClass&&this.element.addClass(this.options.hoverClass),this._trigger("over",t,this.ui(i)))},_out:function(t){var i=e.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this.options.hoverClass&&this.element.removeClass(this.options.hoverClass),this._trigger("out",t,this.ui(i)))},_drop:function(t,i){var s=i||e.ui.ddmanager.current,n=!1;return s&&(s.currentItem||s.element)[0]!==this.element[0]?(this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function(){var i=e(this).droppable("instance");return i.options.greedy&&!i.options.disabled&&i.options.scope===s.options.scope&&i.accept.call(i.element[0],s.currentItem||s.element)&&e.ui.intersect(s,e.extend(i,{offset:i.element.offset()}),i.options.tolerance,t)?(n=!0,!1):void 0}),n?!1:this.accept.call(this.element[0],s.currentItem||s.element)?(this.options.activeClass&&this.element.removeClass(this.options.activeClass),this.options.hoverClass&&this.element.removeClass(this.options.hoverClass),this._trigger("drop",t,this.ui(s)),this.element):!1):!1},ui:function(e){return{draggable:e.currentItem||e.element,helper:e.helper,position:e.position,offset:e.positionAbs}}}),e.ui.intersect=function(){function e(e,t,i){return e>=t&&t+i>e}return function(t,i,s,n){if(!i.offset)return!1;var a=(t.positionAbs||t.position.absolute).left+t.margins.left,o=(t.positionAbs||t.position.absolute).top+t.margins.top,r=a+t.helperProportions.width,h=o+t.helperProportions.height,l=i.offset.left,u=i.offset.top,d=l+i.proportions().width,c=u+i.proportions().height;switch(s){case"fit":return a>=l&&d>=r&&o>=u&&c>=h;case"intersect":return a+t.helperProportions.width/2>l&&d>r-t.helperProportions.width/2&&o+t.helperProportions.height/2>u&&c>h-t.helperProportions.height/2;case"pointer":return e(n.pageY,u,i.proportions().height)&&e(n.pageX,l,i.proportions().width);case"touch":return(o>=u&&c>=o||h>=u&&c>=h||u>o&&h>c)&&(a>=l&&d>=a||r>=l&&d>=r||l>a&&r>d);default:return!1}}}(),e.ui.ddmanager={current:null,droppables:{"default":[]},prepareOffsets:function(t,i){var s,n,a=e.ui.ddmanager.droppables[t.options.scope]||[],o=i?i.type:null,r=(t.currentItem||t.element).find(":data(ui-droppable)").addBack();e:for(s=0;a.length>s;s++)if(!(a[s].options.disabled||t&&!a[s].accept.call(a[s].element[0],t.currentItem||t.element))){for(n=0;r.length>n;n++)if(r[n]===a[s].element[0]){a[s].proportions().height=0;continue e}a[s].visible="none"!==a[s].element.css("display"),a[s].visible&&("mousedown"===o&&a[s]._activate.call(a[s],i),a[s].offset=a[s].element.offset(),a[s].proportions({width:a[s].element[0].offsetWidth,height:a[s].element[0].offsetHeight}))}},drop:function(t,i){var s=!1;return e.each((e.ui.ddmanager.droppables[t.options.scope]||[]).slice(),function(){this.options&&(!this.options.disabled&&this.visible&&e.ui.intersect(t,this,this.options.tolerance,i)&&(s=this._drop.call(this,i)||s),!this.options.disabled&&this.visible&&this.accept.call(this.element[0],t.currentItem||t.element)&&(this.isout=!0,this.isover=!1,this._deactivate.call(this,i)))}),s},dragStart:function(t,i){t.element.parentsUntil("body").bind("scroll.droppable",function(){t.options.refreshPositions||e.ui.ddmanager.prepareOffsets(t,i)})},drag:function(t,i){t.options.refreshPositions&&e.ui.ddmanager.prepareOffsets(t,i),e.each(e.ui.ddmanager.droppables[t.options.scope]||[],function(){if(!this.options.disabled&&!this.greedyChild&&this.visible){var s,n,a,o=e.ui.intersect(t,this,this.options.tolerance,i),r=!o&&this.isover?"isout":o&&!this.isover?"isover":null;r&&(this.options.greedy&&(n=this.options.scope,a=this.element.parents(":data(ui-droppable)").filter(function(){return e(this).droppable("instance").options.scope===n}),a.length&&(s=e(a[0]).droppable("instance"),s.greedyChild="isover"===r)),s&&"isover"===r&&(s.isover=!1,s.isout=!0,s._out.call(s,i)),this[r]=!0,this["isout"===r?"isover":"isout"]=!1,this["isover"===r?"_over":"_out"].call(this,i),s&&"isout"===r&&(s.isout=!1,s.isover=!0,s._over.call(s,i)))}})},dragStop:function(t,i){t.element.parentsUntil("body").unbind("scroll.droppable"),t.options.refreshPositions||e.ui.ddmanager.prepareOffsets(t,i)}},e.ui.droppable;var y="ui-effects-",b=e;e.effects={effect:{}},function(e,t){function i(e,t,i){var s=d[t.type]||{};return null==e?i||!t.def?null:t.def:(e=s.floor?~~e:parseFloat(e),isNaN(e)?t.def:s.mod?(e+s.mod)%s.mod:0>e?0:e>s.max?s.max:e)}function s(i){var s=l(),n=s._rgba=[];return i=i.toLowerCase(),f(h,function(e,a){var o,r=a.re.exec(i),h=r&&a.parse(r),l=a.space||"rgba";return h?(o=s[l](h),s[u[l].cache]=o[u[l].cache],n=s._rgba=o._rgba,!1):t}),n.length?("0,0,0,0"===n.join()&&e.extend(n,a.transparent),s):a[i]}function n(e,t,i){return i=(i+1)%1,1>6*i?e+6*(t-e)*i:1>2*i?t:2>3*i?e+6*(t-e)*(2/3-i):e}var a,o="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",r=/^([\-+])=\s*(\d+\.?\d*)/,h=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(e){return[e[1],e[2],e[3],e[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(e){return[2.55*e[1],2.55*e[2],2.55*e[3],e[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(e){return[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(e){return[parseInt(e[1]+e[1],16),parseInt(e[2]+e[2],16),parseInt(e[3]+e[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(e){return[e[1],e[2]/100,e[3]/100,e[4]]}}],l=e.Color=function(t,i,s,n){return new e.Color.fn.parse(t,i,s,n)},u={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},d={"byte":{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},c=l.support={},p=e("<p>")[0],f=e.each;p.style.cssText="background-color:rgba(1,1,1,.5)",c.rgba=p.style.backgroundColor.indexOf("rgba")>-1,f(u,function(e,t){t.cache="_"+e,t.props.alpha={idx:3,type:"percent",def:1}}),l.fn=e.extend(l.prototype,{parse:function(n,o,r,h){if(n===t)return this._rgba=[null,null,null,null],this;(n.jquery||n.nodeType)&&(n=e(n).css(o),o=t);var d=this,c=e.type(n),p=this._rgba=[];return o!==t&&(n=[n,o,r,h],c="array"),"string"===c?this.parse(s(n)||a._default):"array"===c?(f(u.rgba.props,function(e,t){p[t.idx]=i(n[t.idx],t)}),this):"object"===c?(n instanceof l?f(u,function(e,t){n[t.cache]&&(d[t.cache]=n[t.cache].slice())}):f(u,function(t,s){var a=s.cache;f(s.props,function(e,t){if(!d[a]&&s.to){if("alpha"===e||null==n[e])return;d[a]=s.to(d._rgba)}d[a][t.idx]=i(n[e],t,!0)}),d[a]&&0>e.inArray(null,d[a].slice(0,3))&&(d[a][3]=1,s.from&&(d._rgba=s.from(d[a])))}),this):t},is:function(e){var i=l(e),s=!0,n=this;return f(u,function(e,a){var o,r=i[a.cache];return r&&(o=n[a.cache]||a.to&&a.to(n._rgba)||[],f(a.props,function(e,i){return null!=r[i.idx]?s=r[i.idx]===o[i.idx]:t})),s}),s},_space:function(){var e=[],t=this;return f(u,function(i,s){t[s.cache]&&e.push(i)}),e.pop()},transition:function(e,t){var s=l(e),n=s._space(),a=u[n],o=0===this.alpha()?l("transparent"):this,r=o[a.cache]||a.to(o._rgba),h=r.slice();return s=s[a.cache],f(a.props,function(e,n){var a=n.idx,o=r[a],l=s[a],u=d[n.type]||{};null!==l&&(null===o?h[a]=l:(u.mod&&(l-o>u.mod/2?o+=u.mod:o-l>u.mod/2&&(o-=u.mod)),h[a]=i((l-o)*t+o,n)))}),this[n](h)},blend:function(t){if(1===this._rgba[3])return this;var i=this._rgba.slice(),s=i.pop(),n=l(t)._rgba;return l(e.map(i,function(e,t){return(1-s)*n[t]+s*e}))},toRgbaString:function(){var t="rgba(",i=e.map(this._rgba,function(e,t){return null==e?t>2?1:0:e});return 1===i[3]&&(i.pop(),t="rgb("),t+i.join()+")"},toHslaString:function(){var t="hsla(",i=e.map(this.hsla(),function(e,t){return null==e&&(e=t>2?1:0),t&&3>t&&(e=Math.round(100*e)+"%"),e});return 1===i[3]&&(i.pop(),t="hsl("),t+i.join()+")"},toHexString:function(t){var i=this._rgba.slice(),s=i.pop();return t&&i.push(~~(255*s)),"#"+e.map(i,function(e){return e=(e||0).toString(16),1===e.length?"0"+e:e}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),l.fn.parse.prototype=l.fn,u.hsla.to=function(e){if(null==e[0]||null==e[1]||null==e[2])return[null,null,null,e[3]];var t,i,s=e[0]/255,n=e[1]/255,a=e[2]/255,o=e[3],r=Math.max(s,n,a),h=Math.min(s,n,a),l=r-h,u=r+h,d=.5*u;return t=h===r?0:s===r?60*(n-a)/l+360:n===r?60*(a-s)/l+120:60*(s-n)/l+240,i=0===l?0:.5>=d?l/u:l/(2-u),[Math.round(t)%360,i,d,null==o?1:o]},u.hsla.from=function(e){if(null==e[0]||null==e[1]||null==e[2])return[null,null,null,e[3]];var t=e[0]/360,i=e[1],s=e[2],a=e[3],o=.5>=s?s*(1+i):s+i-s*i,r=2*s-o;return[Math.round(255*n(r,o,t+1/3)),Math.round(255*n(r,o,t)),Math.round(255*n(r,o,t-1/3)),a]},f(u,function(s,n){var a=n.props,o=n.cache,h=n.to,u=n.from;l.fn[s]=function(s){if(h&&!this[o]&&(this[o]=h(this._rgba)),s===t)return this[o].slice();var n,r=e.type(s),d="array"===r||"object"===r?s:arguments,c=this[o].slice();return f(a,function(e,t){var s=d["object"===r?e:t.idx];null==s&&(s=c[t.idx]),c[t.idx]=i(s,t)}),u?(n=l(u(c)),n[o]=c,n):l(c)},f(a,function(t,i){l.fn[t]||(l.fn[t]=function(n){var a,o=e.type(n),h="alpha"===t?this._hsla?"hsla":"rgba":s,l=this[h](),u=l[i.idx];return"undefined"===o?u:("function"===o&&(n=n.call(this,u),o=e.type(n)),null==n&&i.empty?this:("string"===o&&(a=r.exec(n),a&&(n=u+parseFloat(a[2])*("+"===a[1]?1:-1))),l[i.idx]=n,this[h](l)))})})}),l.hook=function(t){var i=t.split(" ");f(i,function(t,i){e.cssHooks[i]={set:function(t,n){var a,o,r="";if("transparent"!==n&&("string"!==e.type(n)||(a=s(n)))){if(n=l(a||n),!c.rgba&&1!==n._rgba[3]){for(o="backgroundColor"===i?t.parentNode:t;(""===r||"transparent"===r)&&o&&o.style;)try{r=e.css(o,"backgroundColor"),o=o.parentNode}catch(h){}n=n.blend(r&&"transparent"!==r?r:"_default")}n=n.toRgbaString()}try{t.style[i]=n}catch(h){}}},e.fx.step[i]=function(t){t.colorInit||(t.start=l(t.elem,i),t.end=l(t.end),t.colorInit=!0),e.cssHooks[i].set(t.elem,t.start.transition(t.end,t.pos))}})},l.hook(o),e.cssHooks.borderColor={expand:function(e){var t={};return f(["Top","Right","Bottom","Left"],function(i,s){t["border"+s+"Color"]=e}),t}},a=e.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(b),function(){function t(t){var i,s,n=t.ownerDocument.defaultView?t.ownerDocument.defaultView.getComputedStyle(t,null):t.currentStyle,a={};if(n&&n.length&&n[0]&&n[n[0]])for(s=n.length;s--;)i=n[s],"string"==typeof n[i]&&(a[e.camelCase(i)]=n[i]);else for(i in n)"string"==typeof n[i]&&(a[i]=n[i]);return a}function i(t,i){var s,a,o={};for(s in i)a=i[s],t[s]!==a&&(n[s]||(e.fx.step[s]||!isNaN(parseFloat(a)))&&(o[s]=a));return o}var s=["add","remove","toggle"],n={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};e.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(t,i){e.fx.step[i]=function(e){("none"!==e.end&&!e.setAttr||1===e.pos&&!e.setAttr)&&(b.style(e.elem,i,e.end),e.setAttr=!0)}}),e.fn.addBack||(e.fn.addBack=function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}),e.effects.animateClass=function(n,a,o,r){var h=e.speed(a,o,r);return this.queue(function(){var a,o=e(this),r=o.attr("class")||"",l=h.children?o.find("*").addBack():o;l=l.map(function(){var i=e(this);return{el:i,start:t(this)}}),a=function(){e.each(s,function(e,t){n[t]&&o[t+"Class"](n[t])})},a(),l=l.map(function(){return this.end=t(this.el[0]),this.diff=i(this.start,this.end),this}),o.attr("class",r),l=l.map(function(){var t=this,i=e.Deferred(),s=e.extend({},h,{queue:!1,complete:function(){i.resolve(t)}});return this.el.animate(this.diff,s),i.promise()}),e.when.apply(e,l.get()).done(function(){a(),e.each(arguments,function(){var t=this.el;e.each(this.diff,function(e){t.css(e,"")})}),h.complete.call(o[0])})})},e.fn.extend({addClass:function(t){return function(i,s,n,a){return s?e.effects.animateClass.call(this,{add:i},s,n,a):t.apply(this,arguments)}}(e.fn.addClass),removeClass:function(t){return function(i,s,n,a){return arguments.length>1?e.effects.animateClass.call(this,{remove:i},s,n,a):t.apply(this,arguments)}}(e.fn.removeClass),toggleClass:function(t){return function(i,s,n,a,o){return"boolean"==typeof s||void 0===s?n?e.effects.animateClass.call(this,s?{add:i}:{remove:i},n,a,o):t.apply(this,arguments):e.effects.animateClass.call(this,{toggle:i},s,n,a)}}(e.fn.toggleClass),switchClass:function(t,i,s,n,a){return e.effects.animateClass.call(this,{add:i,remove:t},s,n,a)}})}(),function(){function t(t,i,s,n){return e.isPlainObject(t)&&(i=t,t=t.effect),t={effect:t},null==i&&(i={}),e.isFunction(i)&&(n=i,s=null,i={}),("number"==typeof i||e.fx.speeds[i])&&(n=s,s=i,i={}),e.isFunction(s)&&(n=s,s=null),i&&e.extend(t,i),s=s||i.duration,t.duration=e.fx.off?0:"number"==typeof s?s:s in e.fx.speeds?e.fx.speeds[s]:e.fx.speeds._default,t.complete=n||i.complete,t}function i(t){return!t||"number"==typeof t||e.fx.speeds[t]?!0:"string"!=typeof t||e.effects.effect[t]?e.isFunction(t)?!0:"object"!=typeof t||t.effect?!1:!0:!0}e.extend(e.effects,{version:"1.11.4",save:function(e,t){for(var i=0;t.length>i;i++)null!==t[i]&&e.data(y+t[i],e[0].style[t[i]])},restore:function(e,t){var i,s;for(s=0;t.length>s;s++)null!==t[s]&&(i=e.data(y+t[s]),void 0===i&&(i=""),e.css(t[s],i))},setMode:function(e,t){return"toggle"===t&&(t=e.is(":hidden")?"show":"hide"),t},getBaseline:function(e,t){var i,s;switch(e[0]){case"top":i=0;break;case"middle":i=.5;break;case"bottom":i=1;break;default:i=e[0]/t.height}switch(e[1]){case"left":s=0;break;case"center":s=.5;break;case"right":s=1;break;default:s=e[1]/t.width}return{x:s,y:i}},createWrapper:function(t){if(t.parent().is(".ui-effects-wrapper"))return t.parent();var i={width:t.outerWidth(!0),height:t.outerHeight(!0),"float":t.css("float")},s=e("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),n={width:t.width(),height:t.height()},a=document.activeElement;try{a.id}catch(o){a=document.body}return t.wrap(s),(t[0]===a||e.contains(t[0],a))&&e(a).focus(),s=t.parent(),"static"===t.css("position")?(s.css({position:"relative"}),t.css({position:"relative"})):(e.extend(i,{position:t.css("position"),zIndex:t.css("z-index")}),e.each(["top","left","bottom","right"],function(e,s){i[s]=t.css(s),isNaN(parseInt(i[s],10))&&(i[s]="auto")}),t.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),t.css(n),s.css(i).show()},removeWrapper:function(t){var i=document.activeElement;return t.parent().is(".ui-effects-wrapper")&&(t.parent().replaceWith(t),(t[0]===i||e.contains(t[0],i))&&e(i).focus()),t},setTransition:function(t,i,s,n){return n=n||{},e.each(i,function(e,i){var a=t.cssUnit(i);a[0]>0&&(n[i]=a[0]*s+a[1])}),n}}),e.fn.extend({effect:function(){function i(t){function i(){e.isFunction(a)&&a.call(n[0]),e.isFunction(t)&&t()}var n=e(this),a=s.complete,r=s.mode;(n.is(":hidden")?"hide"===r:"show"===r)?(n[r](),i()):o.call(n[0],s,i)}var s=t.apply(this,arguments),n=s.mode,a=s.queue,o=e.effects.effect[s.effect];return e.fx.off||!o?n?this[n](s.duration,s.complete):this.each(function(){s.complete&&s.complete.call(this)}):a===!1?this.each(i):this.queue(a||"fx",i)},show:function(e){return function(s){if(i(s))return e.apply(this,arguments);var n=t.apply(this,arguments);return n.mode="show",this.effect.call(this,n)}}(e.fn.show),hide:function(e){return function(s){if(i(s))return e.apply(this,arguments);var n=t.apply(this,arguments);return n.mode="hide",this.effect.call(this,n)}}(e.fn.hide),toggle:function(e){return function(s){if(i(s)||"boolean"==typeof s)return e.apply(this,arguments);var n=t.apply(this,arguments);return n.mode="toggle",this.effect.call(this,n)}}(e.fn.toggle),cssUnit:function(t){var i=this.css(t),s=[];return e.each(["em","px","%","pt"],function(e,t){i.indexOf(t)>0&&(s=[parseFloat(i),t])}),s}})}(),function(){var t={};e.each(["Quad","Cubic","Quart","Quint","Expo"],function(e,i){t[i]=function(t){return Math.pow(t,e+2)}}),e.extend(t,{Sine:function(e){return 1-Math.cos(e*Math.PI/2)},Circ:function(e){return 1-Math.sqrt(1-e*e)},Elastic:function(e){return 0===e||1===e?e:-Math.pow(2,8*(e-1))*Math.sin((80*(e-1)-7.5)*Math.PI/15)},Back:function(e){return e*e*(3*e-2)},Bounce:function(e){for(var t,i=4;((t=Math.pow(2,--i))-1)/11>e;);return 1/Math.pow(4,3-i)-7.5625*Math.pow((3*t-2)/22-e,2)}}),e.each(t,function(t,i){e.easing["easeIn"+t]=i,e.easing["easeOut"+t]=function(e){return 1-i(1-e)},e.easing["easeInOut"+t]=function(e){return.5>e?i(2*e)/2:1-i(-2*e+2)/2}})}(),e.effects,e.effects.effect.blind=function(t,i){var s,n,a,o=e(this),r=/up|down|vertical/,h=/up|left|vertical|horizontal/,l=["position","top","bottom","left","right","height","width"],u=e.effects.setMode(o,t.mode||"hide"),d=t.direction||"up",c=r.test(d),p=c?"height":"width",f=c?"top":"left",m=h.test(d),g={},v="show"===u;o.parent().is(".ui-effects-wrapper")?e.effects.save(o.parent(),l):e.effects.save(o,l),o.show(),s=e.effects.createWrapper(o).css({overflow:"hidden"}),n=s[p](),a=parseFloat(s.css(f))||0,g[p]=v?n:0,m||(o.css(c?"bottom":"right",0).css(c?"top":"left","auto").css({position:"absolute"}),g[f]=v?a:n+a),v&&(s.css(p,0),m||s.css(f,a+n)),s.animate(g,{duration:t.duration,easing:t.easing,queue:!1,complete:function(){"hide"===u&&o.hide(),e.effects.restore(o,l),e.effects.removeWrapper(o),i()}})},e.effects.effect.bounce=function(t,i){var s,n,a,o=e(this),r=["position","top","bottom","left","right","height","width"],h=e.effects.setMode(o,t.mode||"effect"),l="hide"===h,u="show"===h,d=t.direction||"up",c=t.distance,p=t.times||5,f=2*p+(u||l?1:0),m=t.duration/f,g=t.easing,v="up"===d||"down"===d?"top":"left",y="up"===d||"left"===d,b=o.queue(),_=b.length;for((u||l)&&r.push("opacity"),e.effects.save(o,r),o.show(),e.effects.createWrapper(o),c||(c=o["top"===v?"outerHeight":"outerWidth"]()/3),u&&(a={opacity:1},a[v]=0,o.css("opacity",0).css(v,y?2*-c:2*c).animate(a,m,g)),l&&(c/=Math.pow(2,p-1)),a={},a[v]=0,s=0;p>s;s++)n={},n[v]=(y?"-=":"+=")+c,o.animate(n,m,g).animate(a,m,g),c=l?2*c:c/2;l&&(n={opacity:0},n[v]=(y?"-=":"+=")+c,o.animate(n,m,g)),o.queue(function(){l&&o.hide(),e.effects.restore(o,r),e.effects.removeWrapper(o),i()}),_>1&&b.splice.apply(b,[1,0].concat(b.splice(_,f+1))),o.dequeue()},e.effects.effect.clip=function(t,i){var s,n,a,o=e(this),r=["position","top","bottom","left","right","height","width"],h=e.effects.setMode(o,t.mode||"hide"),l="show"===h,u=t.direction||"vertical",d="vertical"===u,c=d?"height":"width",p=d?"top":"left",f={};e.effects.save(o,r),o.show(),s=e.effects.createWrapper(o).css({overflow:"hidden"}),n="IMG"===o[0].tagName?s:o,a=n[c](),l&&(n.css(c,0),n.css(p,a/2)),f[c]=l?a:0,f[p]=l?0:a/2,n.animate(f,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){l||o.hide(),e.effects.restore(o,r),e.effects.removeWrapper(o),i()}})},e.effects.effect.drop=function(t,i){var s,n=e(this),a=["position","top","bottom","left","right","opacity","height","width"],o=e.effects.setMode(n,t.mode||"hide"),r="show"===o,h=t.direction||"left",l="up"===h||"down"===h?"top":"left",u="up"===h||"left"===h?"pos":"neg",d={opacity:r?1:0};e.effects.save(n,a),n.show(),e.effects.createWrapper(n),s=t.distance||n["top"===l?"outerHeight":"outerWidth"](!0)/2,r&&n.css("opacity",0).css(l,"pos"===u?-s:s),d[l]=(r?"pos"===u?"+=":"-=":"pos"===u?"-=":"+=")+s,n.animate(d,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){"hide"===o&&n.hide(),e.effects.restore(n,a),e.effects.removeWrapper(n),i()}})},e.effects.effect.explode=function(t,i){function s(){b.push(this),b.length===d*c&&n()}function n(){p.css({visibility:"visible"}),e(b).remove(),m||p.hide(),i()}var a,o,r,h,l,u,d=t.pieces?Math.round(Math.sqrt(t.pieces)):3,c=d,p=e(this),f=e.effects.setMode(p,t.mode||"hide"),m="show"===f,g=p.show().css("visibility","hidden").offset(),v=Math.ceil(p.outerWidth()/c),y=Math.ceil(p.outerHeight()/d),b=[];for(a=0;d>a;a++)for(h=g.top+a*y,u=a-(d-1)/2,o=0;c>o;o++)r=g.left+o*v,l=o-(c-1)/2,p.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-o*v,top:-a*y}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:v,height:y,left:r+(m?l*v:0),top:h+(m?u*y:0),opacity:m?0:1}).animate({left:r+(m?0:l*v),top:h+(m?0:u*y),opacity:m?1:0},t.duration||500,t.easing,s)},e.effects.effect.fade=function(t,i){var s=e(this),n=e.effects.setMode(s,t.mode||"toggle");s.animate({opacity:n},{queue:!1,duration:t.duration,easing:t.easing,complete:i})},e.effects.effect.fold=function(t,i){var s,n,a=e(this),o=["position","top","bottom","left","right","height","width"],r=e.effects.setMode(a,t.mode||"hide"),h="show"===r,l="hide"===r,u=t.size||15,d=/([0-9]+)%/.exec(u),c=!!t.horizFirst,p=h!==c,f=p?["width","height"]:["height","width"],m=t.duration/2,g={},v={};e.effects.save(a,o),a.show(),s=e.effects.createWrapper(a).css({overflow:"hidden"}),n=p?[s.width(),s.height()]:[s.height(),s.width()],d&&(u=parseInt(d[1],10)/100*n[l?0:1]),h&&s.css(c?{height:0,width:u}:{height:u,width:0}),g[f[0]]=h?n[0]:u,v[f[1]]=h?n[1]:0,s.animate(g,m,t.easing).animate(v,m,t.easing,function(){l&&a.hide(),e.effects.restore(a,o),e.effects.removeWrapper(a),i()})},e.effects.effect.highlight=function(t,i){var s=e(this),n=["backgroundImage","backgroundColor","opacity"],a=e.effects.setMode(s,t.mode||"show"),o={backgroundColor:s.css("backgroundColor")};"hide"===a&&(o.opacity=0),e.effects.save(s,n),s.show().css({backgroundImage:"none",backgroundColor:t.color||"#ffff99"}).animate(o,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){"hide"===a&&s.hide(),e.effects.restore(s,n),i()}})},e.effects.effect.size=function(t,i){var s,n,a,o=e(this),r=["position","top","bottom","left","right","width","height","overflow","opacity"],h=["position","top","bottom","left","right","overflow","opacity"],l=["width","height","overflow"],u=["fontSize"],d=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],c=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],p=e.effects.setMode(o,t.mode||"effect"),f=t.restore||"effect"!==p,m=t.scale||"both",g=t.origin||["middle","center"],v=o.css("position"),y=f?r:h,b={height:0,width:0,outerHeight:0,outerWidth:0};"show"===p&&o.show(),s={height:o.height(),width:o.width(),outerHeight:o.outerHeight(),outerWidth:o.outerWidth()},"toggle"===t.mode&&"show"===p?(o.from=t.to||b,o.to=t.from||s):(o.from=t.from||("show"===p?b:s),o.to=t.to||("hide"===p?b:s)),a={from:{y:o.from.height/s.height,x:o.from.width/s.width},to:{y:o.to.height/s.height,x:o.to.width/s.width}},("box"===m||"both"===m)&&(a.from.y!==a.to.y&&(y=y.concat(d),o.from=e.effects.setTransition(o,d,a.from.y,o.from),o.to=e.effects.setTransition(o,d,a.to.y,o.to)),a.from.x!==a.to.x&&(y=y.concat(c),o.from=e.effects.setTransition(o,c,a.from.x,o.from),o.to=e.effects.setTransition(o,c,a.to.x,o.to))),("content"===m||"both"===m)&&a.from.y!==a.to.y&&(y=y.concat(u).concat(l),o.from=e.effects.setTransition(o,u,a.from.y,o.from),o.to=e.effects.setTransition(o,u,a.to.y,o.to)),e.effects.save(o,y),o.show(),e.effects.createWrapper(o),o.css("overflow","hidden").css(o.from),g&&(n=e.effects.getBaseline(g,s),o.from.top=(s.outerHeight-o.outerHeight())*n.y,o.from.left=(s.outerWidth-o.outerWidth())*n.x,o.to.top=(s.outerHeight-o.to.outerHeight)*n.y,o.to.left=(s.outerWidth-o.to.outerWidth)*n.x),o.css(o.from),("content"===m||"both"===m)&&(d=d.concat(["marginTop","marginBottom"]).concat(u),c=c.concat(["marginLeft","marginRight"]),l=r.concat(d).concat(c),o.find("*[width]").each(function(){var i=e(this),s={height:i.height(),width:i.width(),outerHeight:i.outerHeight(),outerWidth:i.outerWidth()};
f&&e.effects.save(i,l),i.from={height:s.height*a.from.y,width:s.width*a.from.x,outerHeight:s.outerHeight*a.from.y,outerWidth:s.outerWidth*a.from.x},i.to={height:s.height*a.to.y,width:s.width*a.to.x,outerHeight:s.height*a.to.y,outerWidth:s.width*a.to.x},a.from.y!==a.to.y&&(i.from=e.effects.setTransition(i,d,a.from.y,i.from),i.to=e.effects.setTransition(i,d,a.to.y,i.to)),a.from.x!==a.to.x&&(i.from=e.effects.setTransition(i,c,a.from.x,i.from),i.to=e.effects.setTransition(i,c,a.to.x,i.to)),i.css(i.from),i.animate(i.to,t.duration,t.easing,function(){f&&e.effects.restore(i,l)})})),o.animate(o.to,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){0===o.to.opacity&&o.css("opacity",o.from.opacity),"hide"===p&&o.hide(),e.effects.restore(o,y),f||("static"===v?o.css({position:"relative",top:o.to.top,left:o.to.left}):e.each(["top","left"],function(e,t){o.css(t,function(t,i){var s=parseInt(i,10),n=e?o.to.left:o.to.top;return"auto"===i?n+"px":s+n+"px"})})),e.effects.removeWrapper(o),i()}})},e.effects.effect.scale=function(t,i){var s=e(this),n=e.extend(!0,{},t),a=e.effects.setMode(s,t.mode||"effect"),o=parseInt(t.percent,10)||(0===parseInt(t.percent,10)?0:"hide"===a?0:100),r=t.direction||"both",h=t.origin,l={height:s.height(),width:s.width(),outerHeight:s.outerHeight(),outerWidth:s.outerWidth()},u={y:"horizontal"!==r?o/100:1,x:"vertical"!==r?o/100:1};n.effect="size",n.queue=!1,n.complete=i,"effect"!==a&&(n.origin=h||["middle","center"],n.restore=!0),n.from=t.from||("show"===a?{height:0,width:0,outerHeight:0,outerWidth:0}:l),n.to={height:l.height*u.y,width:l.width*u.x,outerHeight:l.outerHeight*u.y,outerWidth:l.outerWidth*u.x},n.fade&&("show"===a&&(n.from.opacity=0,n.to.opacity=1),"hide"===a&&(n.from.opacity=1,n.to.opacity=0)),s.effect(n)},e.effects.effect.puff=function(t,i){var s=e(this),n=e.effects.setMode(s,t.mode||"hide"),a="hide"===n,o=parseInt(t.percent,10)||150,r=o/100,h={height:s.height(),width:s.width(),outerHeight:s.outerHeight(),outerWidth:s.outerWidth()};e.extend(t,{effect:"scale",queue:!1,fade:!0,mode:n,complete:i,percent:a?o:100,from:a?h:{height:h.height*r,width:h.width*r,outerHeight:h.outerHeight*r,outerWidth:h.outerWidth*r}}),s.effect(t)},e.effects.effect.pulsate=function(t,i){var s,n=e(this),a=e.effects.setMode(n,t.mode||"show"),o="show"===a,r="hide"===a,h=o||"hide"===a,l=2*(t.times||5)+(h?1:0),u=t.duration/l,d=0,c=n.queue(),p=c.length;for((o||!n.is(":visible"))&&(n.css("opacity",0).show(),d=1),s=1;l>s;s++)n.animate({opacity:d},u,t.easing),d=1-d;n.animate({opacity:d},u,t.easing),n.queue(function(){r&&n.hide(),i()}),p>1&&c.splice.apply(c,[1,0].concat(c.splice(p,l+1))),n.dequeue()},e.effects.effect.shake=function(t,i){var s,n=e(this),a=["position","top","bottom","left","right","height","width"],o=e.effects.setMode(n,t.mode||"effect"),r=t.direction||"left",h=t.distance||20,l=t.times||3,u=2*l+1,d=Math.round(t.duration/u),c="up"===r||"down"===r?"top":"left",p="up"===r||"left"===r,f={},m={},g={},v=n.queue(),y=v.length;for(e.effects.save(n,a),n.show(),e.effects.createWrapper(n),f[c]=(p?"-=":"+=")+h,m[c]=(p?"+=":"-=")+2*h,g[c]=(p?"-=":"+=")+2*h,n.animate(f,d,t.easing),s=1;l>s;s++)n.animate(m,d,t.easing).animate(g,d,t.easing);n.animate(m,d,t.easing).animate(f,d/2,t.easing).queue(function(){"hide"===o&&n.hide(),e.effects.restore(n,a),e.effects.removeWrapper(n),i()}),y>1&&v.splice.apply(v,[1,0].concat(v.splice(y,u+1))),n.dequeue()},e.effects.effect.slide=function(t,i){var s,n=e(this),a=["position","top","bottom","left","right","width","height"],o=e.effects.setMode(n,t.mode||"show"),r="show"===o,h=t.direction||"left",l="up"===h||"down"===h?"top":"left",u="up"===h||"left"===h,d={};e.effects.save(n,a),n.show(),s=t.distance||n["top"===l?"outerHeight":"outerWidth"](!0),e.effects.createWrapper(n).css({overflow:"hidden"}),r&&n.css(l,u?isNaN(s)?"-"+s:-s:s),d[l]=(r?u?"+=":"-=":u?"-=":"+=")+s,n.animate(d,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){"hide"===o&&n.hide(),e.effects.restore(n,a),e.effects.removeWrapper(n),i()}})},e.effects.effect.transfer=function(t,i){var s=e(this),n=e(t.to),a="fixed"===n.css("position"),o=e("body"),r=a?o.scrollTop():0,h=a?o.scrollLeft():0,l=n.offset(),u={top:l.top-r,left:l.left-h,height:n.innerHeight(),width:n.innerWidth()},d=s.offset(),c=e("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(t.className).css({top:d.top-r,left:d.left-h,height:s.innerHeight(),width:s.innerWidth(),position:a?"fixed":"absolute"}).animate(u,t.duration,t.easing,function(){c.remove(),i()})},e.widget("ui.progressbar",{version:"1.11.4",options:{max:100,value:0,change:null,complete:null},min:0,_create:function(){this.oldValue=this.options.value=this._constrainedValue(),this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({role:"progressbar","aria-valuemin":this.min}),this.valueDiv=e("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element),this._refreshValue()},_destroy:function(){this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"),this.valueDiv.remove()},value:function(e){return void 0===e?this.options.value:(this.options.value=this._constrainedValue(e),this._refreshValue(),void 0)},_constrainedValue:function(e){return void 0===e&&(e=this.options.value),this.indeterminate=e===!1,"number"!=typeof e&&(e=0),this.indeterminate?!1:Math.min(this.options.max,Math.max(this.min,e))},_setOptions:function(e){var t=e.value;delete e.value,this._super(e),this.options.value=this._constrainedValue(t),this._refreshValue()},_setOption:function(e,t){"max"===e&&(t=Math.max(this.min,t)),"disabled"===e&&this.element.toggleClass("ui-state-disabled",!!t).attr("aria-disabled",t),this._super(e,t)},_percentage:function(){return this.indeterminate?100:100*(this.options.value-this.min)/(this.options.max-this.min)},_refreshValue:function(){var t=this.options.value,i=this._percentage();this.valueDiv.toggle(this.indeterminate||t>this.min).toggleClass("ui-corner-right",t===this.options.max).width(i.toFixed(0)+"%"),this.element.toggleClass("ui-progressbar-indeterminate",this.indeterminate),this.indeterminate?(this.element.removeAttr("aria-valuenow"),this.overlayDiv||(this.overlayDiv=e("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv))):(this.element.attr({"aria-valuemax":this.options.max,"aria-valuenow":t}),this.overlayDiv&&(this.overlayDiv.remove(),this.overlayDiv=null)),this.oldValue!==t&&(this.oldValue=t,this._trigger("change")),t===this.options.max&&this._trigger("complete")}}),e.widget("ui.selectable",e.ui.mouse,{version:"1.11.4",options:{appendTo:"body",autoRefresh:!0,distance:0,filter:"*",tolerance:"touch",selected:null,selecting:null,start:null,stop:null,unselected:null,unselecting:null},_create:function(){var t,i=this;this.element.addClass("ui-selectable"),this.dragged=!1,this.refresh=function(){t=e(i.options.filter,i.element[0]),t.addClass("ui-selectee"),t.each(function(){var t=e(this),i=t.offset();e.data(this,"selectable-item",{element:this,$element:t,left:i.left,top:i.top,right:i.left+t.outerWidth(),bottom:i.top+t.outerHeight(),startselected:!1,selected:t.hasClass("ui-selected"),selecting:t.hasClass("ui-selecting"),unselecting:t.hasClass("ui-unselecting")})})},this.refresh(),this.selectees=t.addClass("ui-selectee"),this._mouseInit(),this.helper=e("<div class='ui-selectable-helper'></div>")},_destroy:function(){this.selectees.removeClass("ui-selectee").removeData("selectable-item"),this.element.removeClass("ui-selectable ui-selectable-disabled"),this._mouseDestroy()},_mouseStart:function(t){var i=this,s=this.options;this.opos=[t.pageX,t.pageY],this.options.disabled||(this.selectees=e(s.filter,this.element[0]),this._trigger("start",t),e(s.appendTo).append(this.helper),this.helper.css({left:t.pageX,top:t.pageY,width:0,height:0}),s.autoRefresh&&this.refresh(),this.selectees.filter(".ui-selected").each(function(){var s=e.data(this,"selectable-item");s.startselected=!0,t.metaKey||t.ctrlKey||(s.$element.removeClass("ui-selected"),s.selected=!1,s.$element.addClass("ui-unselecting"),s.unselecting=!0,i._trigger("unselecting",t,{unselecting:s.element}))}),e(t.target).parents().addBack().each(function(){var s,n=e.data(this,"selectable-item");return n?(s=!t.metaKey&&!t.ctrlKey||!n.$element.hasClass("ui-selected"),n.$element.removeClass(s?"ui-unselecting":"ui-selected").addClass(s?"ui-selecting":"ui-unselecting"),n.unselecting=!s,n.selecting=s,n.selected=s,s?i._trigger("selecting",t,{selecting:n.element}):i._trigger("unselecting",t,{unselecting:n.element}),!1):void 0}))},_mouseDrag:function(t){if(this.dragged=!0,!this.options.disabled){var i,s=this,n=this.options,a=this.opos[0],o=this.opos[1],r=t.pageX,h=t.pageY;return a>r&&(i=r,r=a,a=i),o>h&&(i=h,h=o,o=i),this.helper.css({left:a,top:o,width:r-a,height:h-o}),this.selectees.each(function(){var i=e.data(this,"selectable-item"),l=!1;i&&i.element!==s.element[0]&&("touch"===n.tolerance?l=!(i.left>r||a>i.right||i.top>h||o>i.bottom):"fit"===n.tolerance&&(l=i.left>a&&r>i.right&&i.top>o&&h>i.bottom),l?(i.selected&&(i.$element.removeClass("ui-selected"),i.selected=!1),i.unselecting&&(i.$element.removeClass("ui-unselecting"),i.unselecting=!1),i.selecting||(i.$element.addClass("ui-selecting"),i.selecting=!0,s._trigger("selecting",t,{selecting:i.element}))):(i.selecting&&((t.metaKey||t.ctrlKey)&&i.startselected?(i.$element.removeClass("ui-selecting"),i.selecting=!1,i.$element.addClass("ui-selected"),i.selected=!0):(i.$element.removeClass("ui-selecting"),i.selecting=!1,i.startselected&&(i.$element.addClass("ui-unselecting"),i.unselecting=!0),s._trigger("unselecting",t,{unselecting:i.element}))),i.selected&&(t.metaKey||t.ctrlKey||i.startselected||(i.$element.removeClass("ui-selected"),i.selected=!1,i.$element.addClass("ui-unselecting"),i.unselecting=!0,s._trigger("unselecting",t,{unselecting:i.element})))))}),!1}},_mouseStop:function(t){var i=this;return this.dragged=!1,e(".ui-unselecting",this.element[0]).each(function(){var s=e.data(this,"selectable-item");s.$element.removeClass("ui-unselecting"),s.unselecting=!1,s.startselected=!1,i._trigger("unselected",t,{unselected:s.element})}),e(".ui-selecting",this.element[0]).each(function(){var s=e.data(this,"selectable-item");s.$element.removeClass("ui-selecting").addClass("ui-selected"),s.selecting=!1,s.selected=!0,s.startselected=!0,i._trigger("selected",t,{selected:s.element})}),this._trigger("stop",t),this.helper.remove(),!1}}),e.widget("ui.selectmenu",{version:"1.11.4",defaultElement:"<select>",options:{appendTo:null,disabled:null,icons:{button:"ui-icon-triangle-1-s"},position:{my:"left top",at:"left bottom",collision:"none"},width:null,change:null,close:null,focus:null,open:null,select:null},_create:function(){var e=this.element.uniqueId().attr("id");this.ids={element:e,button:e+"-button",menu:e+"-menu"},this._drawButton(),this._drawMenu(),this.options.disabled&&this.disable()},_drawButton:function(){var t=this;this.label=e("label[for='"+this.ids.element+"']").attr("for",this.ids.button),this._on(this.label,{click:function(e){this.button.focus(),e.preventDefault()}}),this.element.hide(),this.button=e("<span>",{"class":"ui-selectmenu-button ui-widget ui-state-default ui-corner-all",tabindex:this.options.disabled?-1:0,id:this.ids.button,role:"combobox","aria-expanded":"false","aria-autocomplete":"list","aria-owns":this.ids.menu,"aria-haspopup":"true"}).insertAfter(this.element),e("<span>",{"class":"ui-icon "+this.options.icons.button}).prependTo(this.button),this.buttonText=e("<span>",{"class":"ui-selectmenu-text"}).appendTo(this.button),this._setText(this.buttonText,this.element.find("option:selected").text()),this._resizeButton(),this._on(this.button,this._buttonEvents),this.button.one("focusin",function(){t.menuItems||t._refreshMenu()}),this._hoverable(this.button),this._focusable(this.button)},_drawMenu:function(){var t=this;this.menu=e("<ul>",{"aria-hidden":"true","aria-labelledby":this.ids.button,id:this.ids.menu}),this.menuWrap=e("<div>",{"class":"ui-selectmenu-menu ui-front"}).append(this.menu).appendTo(this._appendTo()),this.menuInstance=this.menu.menu({role:"listbox",select:function(e,i){e.preventDefault(),t._setSelection(),t._select(i.item.data("ui-selectmenu-item"),e)},focus:function(e,i){var s=i.item.data("ui-selectmenu-item");null!=t.focusIndex&&s.index!==t.focusIndex&&(t._trigger("focus",e,{item:s}),t.isOpen||t._select(s,e)),t.focusIndex=s.index,t.button.attr("aria-activedescendant",t.menuItems.eq(s.index).attr("id"))}}).menu("instance"),this.menu.addClass("ui-corner-bottom").removeClass("ui-corner-all"),this.menuInstance._off(this.menu,"mouseleave"),this.menuInstance._closeOnDocumentClick=function(){return!1},this.menuInstance._isDivider=function(){return!1}},refresh:function(){this._refreshMenu(),this._setText(this.buttonText,this._getSelectedItem().text()),this.options.width||this._resizeButton()},_refreshMenu:function(){this.menu.empty();var e,t=this.element.find("option");t.length&&(this._parseOptions(t),this._renderMenu(this.menu,this.items),this.menuInstance.refresh(),this.menuItems=this.menu.find("li").not(".ui-selectmenu-optgroup"),e=this._getSelectedItem(),this.menuInstance.focus(null,e),this._setAria(e.data("ui-selectmenu-item")),this._setOption("disabled",this.element.prop("disabled")))},open:function(e){this.options.disabled||(this.menuItems?(this.menu.find(".ui-state-focus").removeClass("ui-state-focus"),this.menuInstance.focus(null,this._getSelectedItem())):this._refreshMenu(),this.isOpen=!0,this._toggleAttr(),this._resizeMenu(),this._position(),this._on(this.document,this._documentClick),this._trigger("open",e))},_position:function(){this.menuWrap.position(e.extend({of:this.button},this.options.position))},close:function(e){this.isOpen&&(this.isOpen=!1,this._toggleAttr(),this.range=null,this._off(this.document),this._trigger("close",e))},widget:function(){return this.button},menuWidget:function(){return this.menu},_renderMenu:function(t,i){var s=this,n="";e.each(i,function(i,a){a.optgroup!==n&&(e("<li>",{"class":"ui-selectmenu-optgroup ui-menu-divider"+(a.element.parent("optgroup").prop("disabled")?" ui-state-disabled":""),text:a.optgroup}).appendTo(t),n=a.optgroup),s._renderItemData(t,a)})},_renderItemData:function(e,t){return this._renderItem(e,t).data("ui-selectmenu-item",t)},_renderItem:function(t,i){var s=e("<li>");return i.disabled&&s.addClass("ui-state-disabled"),this._setText(s,i.label),s.appendTo(t)},_setText:function(e,t){t?e.text(t):e.html("&#160;")},_move:function(e,t){var i,s,n=".ui-menu-item";this.isOpen?i=this.menuItems.eq(this.focusIndex):(i=this.menuItems.eq(this.element[0].selectedIndex),n+=":not(.ui-state-disabled)"),s="first"===e||"last"===e?i["first"===e?"prevAll":"nextAll"](n).eq(-1):i[e+"All"](n).eq(0),s.length&&this.menuInstance.focus(t,s)},_getSelectedItem:function(){return this.menuItems.eq(this.element[0].selectedIndex)},_toggle:function(e){this[this.isOpen?"close":"open"](e)},_setSelection:function(){var e;this.range&&(window.getSelection?(e=window.getSelection(),e.removeAllRanges(),e.addRange(this.range)):this.range.select(),this.button.focus())},_documentClick:{mousedown:function(t){this.isOpen&&(e(t.target).closest(".ui-selectmenu-menu, #"+this.ids.button).length||this.close(t))}},_buttonEvents:{mousedown:function(){var e;window.getSelection?(e=window.getSelection(),e.rangeCount&&(this.range=e.getRangeAt(0))):this.range=document.selection.createRange()},click:function(e){this._setSelection(),this._toggle(e)},keydown:function(t){var i=!0;switch(t.keyCode){case e.ui.keyCode.TAB:case e.ui.keyCode.ESCAPE:this.close(t),i=!1;break;case e.ui.keyCode.ENTER:this.isOpen&&this._selectFocusedItem(t);break;case e.ui.keyCode.UP:t.altKey?this._toggle(t):this._move("prev",t);break;case e.ui.keyCode.DOWN:t.altKey?this._toggle(t):this._move("next",t);break;case e.ui.keyCode.SPACE:this.isOpen?this._selectFocusedItem(t):this._toggle(t);break;case e.ui.keyCode.LEFT:this._move("prev",t);break;case e.ui.keyCode.RIGHT:this._move("next",t);break;case e.ui.keyCode.HOME:case e.ui.keyCode.PAGE_UP:this._move("first",t);break;case e.ui.keyCode.END:case e.ui.keyCode.PAGE_DOWN:this._move("last",t);break;default:this.menu.trigger(t),i=!1}i&&t.preventDefault()}},_selectFocusedItem:function(e){var t=this.menuItems.eq(this.focusIndex);t.hasClass("ui-state-disabled")||this._select(t.data("ui-selectmenu-item"),e)},_select:function(e,t){var i=this.element[0].selectedIndex;this.element[0].selectedIndex=e.index,this._setText(this.buttonText,e.label),this._setAria(e),this._trigger("select",t,{item:e}),e.index!==i&&this._trigger("change",t,{item:e}),this.close(t)},_setAria:function(e){var t=this.menuItems.eq(e.index).attr("id");this.button.attr({"aria-labelledby":t,"aria-activedescendant":t}),this.menu.attr("aria-activedescendant",t)},_setOption:function(e,t){"icons"===e&&this.button.find("span.ui-icon").removeClass(this.options.icons.button).addClass(t.button),this._super(e,t),"appendTo"===e&&this.menuWrap.appendTo(this._appendTo()),"disabled"===e&&(this.menuInstance.option("disabled",t),this.button.toggleClass("ui-state-disabled",t).attr("aria-disabled",t),this.element.prop("disabled",t),t?(this.button.attr("tabindex",-1),this.close()):this.button.attr("tabindex",0)),"width"===e&&this._resizeButton()},_appendTo:function(){var t=this.options.appendTo;return t&&(t=t.jquery||t.nodeType?e(t):this.document.find(t).eq(0)),t&&t[0]||(t=this.element.closest(".ui-front")),t.length||(t=this.document[0].body),t},_toggleAttr:function(){this.button.toggleClass("ui-corner-top",this.isOpen).toggleClass("ui-corner-all",!this.isOpen).attr("aria-expanded",this.isOpen),this.menuWrap.toggleClass("ui-selectmenu-open",this.isOpen),this.menu.attr("aria-hidden",!this.isOpen)},_resizeButton:function(){var e=this.options.width;e||(e=this.element.show().outerWidth(),this.element.hide()),this.button.outerWidth(e)},_resizeMenu:function(){this.menu.outerWidth(Math.max(this.button.outerWidth(),this.menu.width("").outerWidth()+1))},_getCreateOptions:function(){return{disabled:this.element.prop("disabled")}},_parseOptions:function(t){var i=[];t.each(function(t,s){var n=e(s),a=n.parent("optgroup");i.push({element:n,index:t,value:n.val(),label:n.text(),optgroup:a.attr("label")||"",disabled:a.prop("disabled")||n.prop("disabled")})}),this.items=i},_destroy:function(){this.menuWrap.remove(),this.button.remove(),this.element.show(),this.element.removeUniqueId(),this.label.attr("for",this.ids.element)}}),e.widget("ui.slider",e.ui.mouse,{version:"1.11.4",widgetEventPrefix:"slide",options:{animate:!1,distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null,change:null,slide:null,start:null,stop:null},numPages:5,_create:function(){this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this._calculateNewMax(),this.element.addClass("ui-slider ui-slider-"+this.orientation+" ui-widget"+" ui-widget-content"+" ui-corner-all"),this._refresh(),this._setOption("disabled",this.options.disabled),this._animateOff=!1},_refresh:function(){this._createRange(),this._createHandles(),this._setupEvents(),this._refreshValue()},_createHandles:function(){var t,i,s=this.options,n=this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),a="<span class='ui-slider-handle ui-state-default ui-corner-all' tabindex='0'></span>",o=[];for(i=s.values&&s.values.length||1,n.length>i&&(n.slice(i).remove(),n=n.slice(0,i)),t=n.length;i>t;t++)o.push(a);this.handles=n.add(e(o.join("")).appendTo(this.element)),this.handle=this.handles.eq(0),this.handles.each(function(t){e(this).data("ui-slider-handle-index",t)})},_createRange:function(){var t=this.options,i="";t.range?(t.range===!0&&(t.values?t.values.length&&2!==t.values.length?t.values=[t.values[0],t.values[0]]:e.isArray(t.values)&&(t.values=t.values.slice(0)):t.values=[this._valueMin(),this._valueMin()]),this.range&&this.range.length?this.range.removeClass("ui-slider-range-min ui-slider-range-max").css({left:"",bottom:""}):(this.range=e("<div></div>").appendTo(this.element),i="ui-slider-range ui-widget-header ui-corner-all"),this.range.addClass(i+("min"===t.range||"max"===t.range?" ui-slider-range-"+t.range:""))):(this.range&&this.range.remove(),this.range=null)},_setupEvents:function(){this._off(this.handles),this._on(this.handles,this._handleEvents),this._hoverable(this.handles),this._focusable(this.handles)},_destroy:function(){this.handles.remove(),this.range&&this.range.remove(),this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-widget ui-widget-content ui-corner-all"),this._mouseDestroy()},_mouseCapture:function(t){var i,s,n,a,o,r,h,l,u=this,d=this.options;return d.disabled?!1:(this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()},this.elementOffset=this.element.offset(),i={x:t.pageX,y:t.pageY},s=this._normValueFromMouse(i),n=this._valueMax()-this._valueMin()+1,this.handles.each(function(t){var i=Math.abs(s-u.values(t));(n>i||n===i&&(t===u._lastChangedValue||u.values(t)===d.min))&&(n=i,a=e(this),o=t)}),r=this._start(t,o),r===!1?!1:(this._mouseSliding=!0,this._handleIndex=o,a.addClass("ui-state-active").focus(),h=a.offset(),l=!e(t.target).parents().addBack().is(".ui-slider-handle"),this._clickOffset=l?{left:0,top:0}:{left:t.pageX-h.left-a.width()/2,top:t.pageY-h.top-a.height()/2-(parseInt(a.css("borderTopWidth"),10)||0)-(parseInt(a.css("borderBottomWidth"),10)||0)+(parseInt(a.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(t,o,s),this._animateOff=!0,!0))},_mouseStart:function(){return!0},_mouseDrag:function(e){var t={x:e.pageX,y:e.pageY},i=this._normValueFromMouse(t);return this._slide(e,this._handleIndex,i),!1},_mouseStop:function(e){return this.handles.removeClass("ui-state-active"),this._mouseSliding=!1,this._stop(e,this._handleIndex),this._change(e,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1,!1},_detectOrientation:function(){this.orientation="vertical"===this.options.orientation?"vertical":"horizontal"},_normValueFromMouse:function(e){var t,i,s,n,a;return"horizontal"===this.orientation?(t=this.elementSize.width,i=e.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(t=this.elementSize.height,i=e.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),s=i/t,s>1&&(s=1),0>s&&(s=0),"vertical"===this.orientation&&(s=1-s),n=this._valueMax()-this._valueMin(),a=this._valueMin()+s*n,this._trimAlignValue(a)},_start:function(e,t){var i={handle:this.handles[t],value:this.value()};return this.options.values&&this.options.values.length&&(i.value=this.values(t),i.values=this.values()),this._trigger("start",e,i)},_slide:function(e,t,i){var s,n,a;this.options.values&&this.options.values.length?(s=this.values(t?0:1),2===this.options.values.length&&this.options.range===!0&&(0===t&&i>s||1===t&&s>i)&&(i=s),i!==this.values(t)&&(n=this.values(),n[t]=i,a=this._trigger("slide",e,{handle:this.handles[t],value:i,values:n}),s=this.values(t?0:1),a!==!1&&this.values(t,i))):i!==this.value()&&(a=this._trigger("slide",e,{handle:this.handles[t],value:i}),a!==!1&&this.value(i))},_stop:function(e,t){var i={handle:this.handles[t],value:this.value()};this.options.values&&this.options.values.length&&(i.value=this.values(t),i.values=this.values()),this._trigger("stop",e,i)},_change:function(e,t){if(!this._keySliding&&!this._mouseSliding){var i={handle:this.handles[t],value:this.value()};this.options.values&&this.options.values.length&&(i.value=this.values(t),i.values=this.values()),this._lastChangedValue=t,this._trigger("change",e,i)}},value:function(e){return arguments.length?(this.options.value=this._trimAlignValue(e),this._refreshValue(),this._change(null,0),void 0):this._value()},values:function(t,i){var s,n,a;if(arguments.length>1)return this.options.values[t]=this._trimAlignValue(i),this._refreshValue(),this._change(null,t),void 0;if(!arguments.length)return this._values();if(!e.isArray(arguments[0]))return this.options.values&&this.options.values.length?this._values(t):this.value();for(s=this.options.values,n=arguments[0],a=0;s.length>a;a+=1)s[a]=this._trimAlignValue(n[a]),this._change(null,a);this._refreshValue()},_setOption:function(t,i){var s,n=0;switch("range"===t&&this.options.range===!0&&("min"===i?(this.options.value=this._values(0),this.options.values=null):"max"===i&&(this.options.value=this._values(this.options.values.length-1),this.options.values=null)),e.isArray(this.options.values)&&(n=this.options.values.length),"disabled"===t&&this.element.toggleClass("ui-state-disabled",!!i),this._super(t,i),t){case"orientation":this._detectOrientation(),this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-"+this.orientation),this._refreshValue(),this.handles.css("horizontal"===i?"bottom":"left","");break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":for(this._animateOff=!0,this._refreshValue(),s=0;n>s;s+=1)this._change(null,s);this._animateOff=!1;break;case"step":case"min":case"max":this._animateOff=!0,this._calculateNewMax(),this._refreshValue(),this._animateOff=!1;break;case"range":this._animateOff=!0,this._refresh(),this._animateOff=!1}},_value:function(){var e=this.options.value;return e=this._trimAlignValue(e)},_values:function(e){var t,i,s;if(arguments.length)return t=this.options.values[e],t=this._trimAlignValue(t);if(this.options.values&&this.options.values.length){for(i=this.options.values.slice(),s=0;i.length>s;s+=1)i[s]=this._trimAlignValue(i[s]);return i}return[]},_trimAlignValue:function(e){if(this._valueMin()>=e)return this._valueMin();if(e>=this._valueMax())return this._valueMax();var t=this.options.step>0?this.options.step:1,i=(e-this._valueMin())%t,s=e-i;return 2*Math.abs(i)>=t&&(s+=i>0?t:-t),parseFloat(s.toFixed(5))},_calculateNewMax:function(){var e=this.options.max,t=this._valueMin(),i=this.options.step,s=Math.floor(+(e-t).toFixed(this._precision())/i)*i;e=s+t,this.max=parseFloat(e.toFixed(this._precision()))},_precision:function(){var e=this._precisionOf(this.options.step);return null!==this.options.min&&(e=Math.max(e,this._precisionOf(this.options.min))),e},_precisionOf:function(e){var t=""+e,i=t.indexOf(".");return-1===i?0:t.length-i-1},_valueMin:function(){return this.options.min},_valueMax:function(){return this.max},_refreshValue:function(){var t,i,s,n,a,o=this.options.range,r=this.options,h=this,l=this._animateOff?!1:r.animate,u={};this.options.values&&this.options.values.length?this.handles.each(function(s){i=100*((h.values(s)-h._valueMin())/(h._valueMax()-h._valueMin())),u["horizontal"===h.orientation?"left":"bottom"]=i+"%",e(this).stop(1,1)[l?"animate":"css"](u,r.animate),h.options.range===!0&&("horizontal"===h.orientation?(0===s&&h.range.stop(1,1)[l?"animate":"css"]({left:i+"%"},r.animate),1===s&&h.range[l?"animate":"css"]({width:i-t+"%"},{queue:!1,duration:r.animate})):(0===s&&h.range.stop(1,1)[l?"animate":"css"]({bottom:i+"%"},r.animate),1===s&&h.range[l?"animate":"css"]({height:i-t+"%"},{queue:!1,duration:r.animate}))),t=i}):(s=this.value(),n=this._valueMin(),a=this._valueMax(),i=a!==n?100*((s-n)/(a-n)):0,u["horizontal"===this.orientation?"left":"bottom"]=i+"%",this.handle.stop(1,1)[l?"animate":"css"](u,r.animate),"min"===o&&"horizontal"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({width:i+"%"},r.animate),"max"===o&&"horizontal"===this.orientation&&this.range[l?"animate":"css"]({width:100-i+"%"},{queue:!1,duration:r.animate}),"min"===o&&"vertical"===this.orientation&&this.range.stop(1,1)[l?"animate":"css"]({height:i+"%"},r.animate),"max"===o&&"vertical"===this.orientation&&this.range[l?"animate":"css"]({height:100-i+"%"},{queue:!1,duration:r.animate}))},_handleEvents:{keydown:function(t){var i,s,n,a,o=e(t.target).data("ui-slider-handle-index");switch(t.keyCode){case e.ui.keyCode.HOME:case e.ui.keyCode.END:case e.ui.keyCode.PAGE_UP:case e.ui.keyCode.PAGE_DOWN:case e.ui.keyCode.UP:case e.ui.keyCode.RIGHT:case e.ui.keyCode.DOWN:case e.ui.keyCode.LEFT:if(t.preventDefault(),!this._keySliding&&(this._keySliding=!0,e(t.target).addClass("ui-state-active"),i=this._start(t,o),i===!1))return}switch(a=this.options.step,s=n=this.options.values&&this.options.values.length?this.values(o):this.value(),t.keyCode){case e.ui.keyCode.HOME:n=this._valueMin();break;case e.ui.keyCode.END:n=this._valueMax();break;case e.ui.keyCode.PAGE_UP:n=this._trimAlignValue(s+(this._valueMax()-this._valueMin())/this.numPages);break;case e.ui.keyCode.PAGE_DOWN:n=this._trimAlignValue(s-(this._valueMax()-this._valueMin())/this.numPages);break;case e.ui.keyCode.UP:case e.ui.keyCode.RIGHT:if(s===this._valueMax())return;n=this._trimAlignValue(s+a);break;case e.ui.keyCode.DOWN:case e.ui.keyCode.LEFT:if(s===this._valueMin())return;n=this._trimAlignValue(s-a)}this._slide(t,o,n)},keyup:function(t){var i=e(t.target).data("ui-slider-handle-index");this._keySliding&&(this._keySliding=!1,this._stop(t,i),this._change(t,i),e(t.target).removeClass("ui-state-active"))}}}),e.widget("ui.sortable",e.ui.mouse,{version:"1.11.4",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(e,t,i){return e>=t&&t+i>e},_isFloating:function(e){return/left|right/.test(e.css("float"))||/inline|table-cell/.test(e.css("display"))},_create:function(){this.containerCache={},this.element.addClass("ui-sortable"),this.refresh(),this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(e,t){this._super(e,t),"handle"===e&&this._setHandleClassName()},_setHandleClassName:function(){this.element.find(".ui-sortable-handle").removeClass("ui-sortable-handle"),e.each(this.items,function(){(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item).addClass("ui-sortable-handle")})},_destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled").find(".ui-sortable-handle").removeClass("ui-sortable-handle"),this._mouseDestroy();for(var e=this.items.length-1;e>=0;e--)this.items[e].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(t,i){var s=null,n=!1,a=this;return this.reverting?!1:this.options.disabled||"static"===this.options.type?!1:(this._refreshItems(t),e(t.target).parents().each(function(){return e.data(this,a.widgetName+"-item")===a?(s=e(this),!1):void 0}),e.data(t.target,a.widgetName+"-item")===a&&(s=e(t.target)),s?!this.options.handle||i||(e(this.options.handle,s).find("*").addBack().each(function(){this===t.target&&(n=!0)}),n)?(this.currentItem=s,this._removeCurrentsFromItems(),!0):!1:!1)},_mouseStart:function(t,i,s){var n,a,o=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(t),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},e.extend(this.offset,{click:{left:t.pageX-this.offset.left,top:t.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(t),this.originalPageX=t.pageX,this.originalPageY=t.pageY,o.cursorAt&&this._adjustOffsetFromHelper(o.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),o.containment&&this._setContainment(),o.cursor&&"auto"!==o.cursor&&(a=this.document.find("body"),this.storedCursor=a.css("cursor"),a.css("cursor",o.cursor),this.storedStylesheet=e("<style>*{ cursor: "+o.cursor+" !important; }</style>").appendTo(a)),o.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",o.opacity)),o.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",o.zIndex)),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",t,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!s)for(n=this.containers.length-1;n>=0;n--)this.containers[n]._trigger("activate",t,this._uiHash(this));
return e.ui.ddmanager&&(e.ui.ddmanager.current=this),e.ui.ddmanager&&!o.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this.dragging=!0,this.helper.addClass("ui-sortable-helper"),this._mouseDrag(t),!0},_mouseDrag:function(t){var i,s,n,a,o=this.options,r=!1;for(this.position=this._generatePosition(t),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-t.pageY<o.scrollSensitivity?this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop+o.scrollSpeed:t.pageY-this.overflowOffset.top<o.scrollSensitivity&&(this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop-o.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-t.pageX<o.scrollSensitivity?this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft+o.scrollSpeed:t.pageX-this.overflowOffset.left<o.scrollSensitivity&&(this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft-o.scrollSpeed)):(t.pageY-this.document.scrollTop()<o.scrollSensitivity?r=this.document.scrollTop(this.document.scrollTop()-o.scrollSpeed):this.window.height()-(t.pageY-this.document.scrollTop())<o.scrollSensitivity&&(r=this.document.scrollTop(this.document.scrollTop()+o.scrollSpeed)),t.pageX-this.document.scrollLeft()<o.scrollSensitivity?r=this.document.scrollLeft(this.document.scrollLeft()-o.scrollSpeed):this.window.width()-(t.pageX-this.document.scrollLeft())<o.scrollSensitivity&&(r=this.document.scrollLeft(this.document.scrollLeft()+o.scrollSpeed))),r!==!1&&e.ui.ddmanager&&!o.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(s=this.items[i],n=s.item[0],a=this._intersectsWithPointer(s),a&&s.instance===this.currentContainer&&n!==this.currentItem[0]&&this.placeholder[1===a?"next":"prev"]()[0]!==n&&!e.contains(this.placeholder[0],n)&&("semi-dynamic"===this.options.type?!e.contains(this.element[0],n):!0)){if(this.direction=1===a?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(s))break;this._rearrange(t,s),this._trigger("change",t,this._uiHash());break}return this._contactContainers(t),e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),this._trigger("sort",t,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(t,i){if(t){if(e.ui.ddmanager&&!this.options.dropBehaviour&&e.ui.ddmanager.drop(this,t),this.options.revert){var s=this,n=this.placeholder.offset(),a=this.options.axis,o={};a&&"x"!==a||(o.left=n.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft)),a&&"y"!==a||(o.top=n.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,e(this.helper).animate(o,parseInt(this.options.revert,10)||500,function(){s._clear(t)})}else this._clear(t,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp({target:null}),"original"===this.options.helper?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):this.currentItem.show();for(var t=this.containers.length-1;t>=0;t--)this.containers[t]._trigger("deactivate",null,this._uiHash(this)),this.containers[t].containerCache.over&&(this.containers[t]._trigger("out",null,this._uiHash(this)),this.containers[t].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),e.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?e(this.domPosition.prev).after(this.currentItem):e(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(t){var i=this._getItemsAsjQuery(t&&t.connected),s=[];return t=t||{},e(i).each(function(){var i=(e(t.item||this).attr(t.attribute||"id")||"").match(t.expression||/(.+)[\-=_](.+)/);i&&s.push((t.key||i[1]+"[]")+"="+(t.key&&t.expression?i[1]:i[2]))}),!s.length&&t.key&&s.push(t.key+"="),s.join("&")},toArray:function(t){var i=this._getItemsAsjQuery(t&&t.connected),s=[];return t=t||{},i.each(function(){s.push(e(t.item||this).attr(t.attribute||"id")||"")}),s},_intersectsWith:function(e){var t=this.positionAbs.left,i=t+this.helperProportions.width,s=this.positionAbs.top,n=s+this.helperProportions.height,a=e.left,o=a+e.width,r=e.top,h=r+e.height,l=this.offset.click.top,u=this.offset.click.left,d="x"===this.options.axis||s+l>r&&h>s+l,c="y"===this.options.axis||t+u>a&&o>t+u,p=d&&c;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>e[this.floating?"width":"height"]?p:t+this.helperProportions.width/2>a&&o>i-this.helperProportions.width/2&&s+this.helperProportions.height/2>r&&h>n-this.helperProportions.height/2},_intersectsWithPointer:function(e){var t="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top,e.height),i="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left,e.width),s=t&&i,n=this._getDragVerticalDirection(),a=this._getDragHorizontalDirection();return s?this.floating?a&&"right"===a||"down"===n?2:1:n&&("down"===n?2:1):!1},_intersectsWithSides:function(e){var t=this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top+e.height/2,e.height),i=this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left+e.width/2,e.width),s=this._getDragVerticalDirection(),n=this._getDragHorizontalDirection();return this.floating&&n?"right"===n&&i||"left"===n&&!i:s&&("down"===s&&t||"up"===s&&!t)},_getDragVerticalDirection:function(){var e=this.positionAbs.top-this.lastPositionAbs.top;return 0!==e&&(e>0?"down":"up")},_getDragHorizontalDirection:function(){var e=this.positionAbs.left-this.lastPositionAbs.left;return 0!==e&&(e>0?"right":"left")},refresh:function(e){return this._refreshItems(e),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var e=this.options;return e.connectWith.constructor===String?[e.connectWith]:e.connectWith},_getItemsAsjQuery:function(t){function i(){r.push(this)}var s,n,a,o,r=[],h=[],l=this._connectWith();if(l&&t)for(s=l.length-1;s>=0;s--)for(a=e(l[s],this.document[0]),n=a.length-1;n>=0;n--)o=e.data(a[n],this.widgetFullName),o&&o!==this&&!o.options.disabled&&h.push([e.isFunction(o.options.items)?o.options.items.call(o.element):e(o.options.items,o.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),o]);for(h.push([e.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):e(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),s=h.length-1;s>=0;s--)h[s][0].each(i);return e(r)},_removeCurrentsFromItems:function(){var t=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=e.grep(this.items,function(e){for(var i=0;t.length>i;i++)if(t[i]===e.item[0])return!1;return!0})},_refreshItems:function(t){this.items=[],this.containers=[this];var i,s,n,a,o,r,h,l,u=this.items,d=[[e.isFunction(this.options.items)?this.options.items.call(this.element[0],t,{item:this.currentItem}):e(this.options.items,this.element),this]],c=this._connectWith();if(c&&this.ready)for(i=c.length-1;i>=0;i--)for(n=e(c[i],this.document[0]),s=n.length-1;s>=0;s--)a=e.data(n[s],this.widgetFullName),a&&a!==this&&!a.options.disabled&&(d.push([e.isFunction(a.options.items)?a.options.items.call(a.element[0],t,{item:this.currentItem}):e(a.options.items,a.element),a]),this.containers.push(a));for(i=d.length-1;i>=0;i--)for(o=d[i][1],r=d[i][0],s=0,l=r.length;l>s;s++)h=e(r[s]),h.data(this.widgetName+"-item",o),u.push({item:h,instance:o,width:0,height:0,left:0,top:0})},refreshPositions:function(t){this.floating=this.items.length?"x"===this.options.axis||this._isFloating(this.items[0].item):!1,this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var i,s,n,a;for(i=this.items.length-1;i>=0;i--)s=this.items[i],s.instance!==this.currentContainer&&this.currentContainer&&s.item[0]!==this.currentItem[0]||(n=this.options.toleranceElement?e(this.options.toleranceElement,s.item):s.item,t||(s.width=n.outerWidth(),s.height=n.outerHeight()),a=n.offset(),s.left=a.left,s.top=a.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)a=this.containers[i].element.offset(),this.containers[i].containerCache.left=a.left,this.containers[i].containerCache.top=a.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(t){t=t||this;var i,s=t.options;s.placeholder&&s.placeholder.constructor!==String||(i=s.placeholder,s.placeholder={element:function(){var s=t.currentItem[0].nodeName.toLowerCase(),n=e("<"+s+">",t.document[0]).addClass(i||t.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper");return"tbody"===s?t._createTrPlaceholder(t.currentItem.find("tr").eq(0),e("<tr>",t.document[0]).appendTo(n)):"tr"===s?t._createTrPlaceholder(t.currentItem,n):"img"===s&&n.attr("src",t.currentItem.attr("src")),i||n.css("visibility","hidden"),n},update:function(e,n){(!i||s.forcePlaceholderSize)&&(n.height()||n.height(t.currentItem.innerHeight()-parseInt(t.currentItem.css("paddingTop")||0,10)-parseInt(t.currentItem.css("paddingBottom")||0,10)),n.width()||n.width(t.currentItem.innerWidth()-parseInt(t.currentItem.css("paddingLeft")||0,10)-parseInt(t.currentItem.css("paddingRight")||0,10)))}}),t.placeholder=e(s.placeholder.element.call(t.element,t.currentItem)),t.currentItem.after(t.placeholder),s.placeholder.update(t,t.placeholder)},_createTrPlaceholder:function(t,i){var s=this;t.children().each(function(){e("<td>&#160;</td>",s.document[0]).attr("colspan",e(this).attr("colspan")||1).appendTo(i)})},_contactContainers:function(t){var i,s,n,a,o,r,h,l,u,d,c=null,p=null;for(i=this.containers.length-1;i>=0;i--)if(!e.contains(this.currentItem[0],this.containers[i].element[0]))if(this._intersectsWith(this.containers[i].containerCache)){if(c&&e.contains(this.containers[i].element[0],c.element[0]))continue;c=this.containers[i],p=i}else this.containers[i].containerCache.over&&(this.containers[i]._trigger("out",t,this._uiHash(this)),this.containers[i].containerCache.over=0);if(c)if(1===this.containers.length)this.containers[p].containerCache.over||(this.containers[p]._trigger("over",t,this._uiHash(this)),this.containers[p].containerCache.over=1);else{for(n=1e4,a=null,u=c.floating||this._isFloating(this.currentItem),o=u?"left":"top",r=u?"width":"height",d=u?"clientX":"clientY",s=this.items.length-1;s>=0;s--)e.contains(this.containers[p].element[0],this.items[s].item[0])&&this.items[s].item[0]!==this.currentItem[0]&&(h=this.items[s].item.offset()[o],l=!1,t[d]-h>this.items[s][r]/2&&(l=!0),n>Math.abs(t[d]-h)&&(n=Math.abs(t[d]-h),a=this.items[s],this.direction=l?"up":"down"));if(!a&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[p])return this.currentContainer.containerCache.over||(this.containers[p]._trigger("over",t,this._uiHash()),this.currentContainer.containerCache.over=1),void 0;a?this._rearrange(t,a,null,!0):this._rearrange(t,null,this.containers[p].element,!0),this._trigger("change",t,this._uiHash()),this.containers[p]._trigger("change",t,this._uiHash(this)),this.currentContainer=this.containers[p],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[p]._trigger("over",t,this._uiHash(this)),this.containers[p].containerCache.over=1}},_createHelper:function(t){var i=this.options,s=e.isFunction(i.helper)?e(i.helper.apply(this.element[0],[t,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return s.parents("body").length||e("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(s[0]),s[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(!s[0].style.width||i.forceHelperSize)&&s.width(this.currentItem.width()),(!s[0].style.height||i.forceHelperSize)&&s.height(this.currentItem.height()),s},_adjustOffsetFromHelper:function(t){"string"==typeof t&&(t=t.split(" ")),e.isArray(t)&&(t={left:+t[0],top:+t[1]||0}),"left"in t&&(this.offset.click.left=t.left+this.margins.left),"right"in t&&(this.offset.click.left=this.helperProportions.width-t.right+this.margins.left),"top"in t&&(this.offset.click.top=t.top+this.margins.top),"bottom"in t&&(this.offset.click.top=this.helperProportions.height-t.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var t=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&e.ui.ie)&&(t={top:0,left:0}),{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var e=this.currentItem.position();return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:e.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t,i,s,n=this.options;"parent"===n.containment&&(n.containment=this.helper[0].parentNode),("document"===n.containment||"window"===n.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,"document"===n.containment?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,("document"===n.containment?this.document.width():this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(n.containment)||(t=e(n.containment)[0],i=e(n.containment).offset(),s="hidden"!==e(t).css("overflow"),this.containment=[i.left+(parseInt(e(t).css("borderLeftWidth"),10)||0)+(parseInt(e(t).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(e(t).css("borderTopWidth"),10)||0)+(parseInt(e(t).css("paddingTop"),10)||0)-this.margins.top,i.left+(s?Math.max(t.scrollWidth,t.offsetWidth):t.offsetWidth)-(parseInt(e(t).css("borderLeftWidth"),10)||0)-(parseInt(e(t).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(s?Math.max(t.scrollHeight,t.offsetHeight):t.offsetHeight)-(parseInt(e(t).css("borderTopWidth"),10)||0)-(parseInt(e(t).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(t,i){i||(i=this.position);var s="absolute"===t?1:-1,n="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,a=/(html|body)/i.test(n[0].tagName);return{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():a?0:n.scrollTop())*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():a?0:n.scrollLeft())*s}},_generatePosition:function(t){var i,s,n=this.options,a=t.pageX,o=t.pageY,r="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,h=/(html|body)/i.test(r[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(t.pageX-this.offset.click.left<this.containment[0]&&(a=this.containment[0]+this.offset.click.left),t.pageY-this.offset.click.top<this.containment[1]&&(o=this.containment[1]+this.offset.click.top),t.pageX-this.offset.click.left>this.containment[2]&&(a=this.containment[2]+this.offset.click.left),t.pageY-this.offset.click.top>this.containment[3]&&(o=this.containment[3]+this.offset.click.top)),n.grid&&(i=this.originalPageY+Math.round((o-this.originalPageY)/n.grid[1])*n.grid[1],o=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-n.grid[1]:i+n.grid[1]:i,s=this.originalPageX+Math.round((a-this.originalPageX)/n.grid[0])*n.grid[0],a=this.containment?s-this.offset.click.left>=this.containment[0]&&s-this.offset.click.left<=this.containment[2]?s:s-this.offset.click.left>=this.containment[0]?s-n.grid[0]:s+n.grid[0]:s)),{top:o-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():h?0:r.scrollTop()),left:a-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():h?0:r.scrollLeft())}},_rearrange:function(e,t,i,s){i?i[0].appendChild(this.placeholder[0]):t.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?t.item[0]:t.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var n=this.counter;this._delay(function(){n===this.counter&&this.refreshPositions(!s)})},_clear:function(e,t){function i(e,t,i){return function(s){i._trigger(e,s,t._uiHash(t))}}this.reverting=!1;var s,n=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(s in this._storedCSS)("auto"===this._storedCSS[s]||"static"===this._storedCSS[s])&&(this._storedCSS[s]="");this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!t&&n.push(function(e){this._trigger("receive",e,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||t||n.push(function(e){this._trigger("update",e,this._uiHash())}),this!==this.currentContainer&&(t||(n.push(function(e){this._trigger("remove",e,this._uiHash())}),n.push(function(e){return function(t){e._trigger("receive",t,this._uiHash(this))}}.call(this,this.currentContainer)),n.push(function(e){return function(t){e._trigger("update",t,this._uiHash(this))}}.call(this,this.currentContainer)))),s=this.containers.length-1;s>=0;s--)t||n.push(i("deactivate",this,this.containers[s])),this.containers[s].containerCache.over&&(n.push(i("out",this,this.containers[s])),this.containers[s].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,t||this._trigger("beforeStop",e,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!t){for(s=0;n.length>s;s++)n[s].call(this,e);this._trigger("stop",e,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){e.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(t){var i=t||this;return{helper:i.helper,placeholder:i.placeholder||e([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:t?t.element:null}}}),e.widget("ui.spinner",{version:"1.11.4",defaultElement:"<input>",widgetEventPrefix:"spin",options:{culture:null,icons:{down:"ui-icon-triangle-1-s",up:"ui-icon-triangle-1-n"},incremental:!0,max:null,min:null,numberFormat:null,page:10,step:1,change:null,spin:null,start:null,stop:null},_create:function(){this._setOption("max",this.options.max),this._setOption("min",this.options.min),this._setOption("step",this.options.step),""!==this.value()&&this._value(this.element.val(),!0),this._draw(),this._on(this._events),this._refresh(),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_getCreateOptions:function(){var t={},i=this.element;return e.each(["min","max","step"],function(e,s){var n=i.attr(s);void 0!==n&&n.length&&(t[s]=n)}),t},_events:{keydown:function(e){this._start(e)&&this._keydown(e)&&e.preventDefault()},keyup:"_stop",focus:function(){this.previous=this.element.val()},blur:function(e){return this.cancelBlur?(delete this.cancelBlur,void 0):(this._stop(),this._refresh(),this.previous!==this.element.val()&&this._trigger("change",e),void 0)},mousewheel:function(e,t){if(t){if(!this.spinning&&!this._start(e))return!1;this._spin((t>0?1:-1)*this.options.step,e),clearTimeout(this.mousewheelTimer),this.mousewheelTimer=this._delay(function(){this.spinning&&this._stop(e)},100),e.preventDefault()}},"mousedown .ui-spinner-button":function(t){function i(){var e=this.element[0]===this.document[0].activeElement;e||(this.element.focus(),this.previous=s,this._delay(function(){this.previous=s}))}var s;s=this.element[0]===this.document[0].activeElement?this.previous:this.element.val(),t.preventDefault(),i.call(this),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur,i.call(this)}),this._start(t)!==!1&&this._repeat(null,e(t.currentTarget).hasClass("ui-spinner-up")?1:-1,t)},"mouseup .ui-spinner-button":"_stop","mouseenter .ui-spinner-button":function(t){return e(t.currentTarget).hasClass("ui-state-active")?this._start(t)===!1?!1:(this._repeat(null,e(t.currentTarget).hasClass("ui-spinner-up")?1:-1,t),void 0):void 0},"mouseleave .ui-spinner-button":"_stop"},_draw:function(){var e=this.uiSpinner=this.element.addClass("ui-spinner-input").attr("autocomplete","off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());this.element.attr("role","spinbutton"),this.buttons=e.find(".ui-spinner-button").attr("tabIndex",-1).button().removeClass("ui-corner-all"),this.buttons.height()>Math.ceil(.5*e.height())&&e.height()>0&&e.height(e.height()),this.options.disabled&&this.disable()},_keydown:function(t){var i=this.options,s=e.ui.keyCode;switch(t.keyCode){case s.UP:return this._repeat(null,1,t),!0;case s.DOWN:return this._repeat(null,-1,t),!0;case s.PAGE_UP:return this._repeat(null,i.page,t),!0;case s.PAGE_DOWN:return this._repeat(null,-i.page,t),!0}return!1},_uiSpinnerHtml:function(){return"<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>"},_buttonHtml:function(){return"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'><span class='ui-icon "+this.options.icons.up+"'>&#9650;</span>"+"</a>"+"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>"+"<span class='ui-icon "+this.options.icons.down+"'>&#9660;</span>"+"</a>"},_start:function(e){return this.spinning||this._trigger("start",e)!==!1?(this.counter||(this.counter=1),this.spinning=!0,!0):!1},_repeat:function(e,t,i){e=e||500,clearTimeout(this.timer),this.timer=this._delay(function(){this._repeat(40,t,i)},e),this._spin(t*this.options.step,i)},_spin:function(e,t){var i=this.value()||0;this.counter||(this.counter=1),i=this._adjustValue(i+e*this._increment(this.counter)),this.spinning&&this._trigger("spin",t,{value:i})===!1||(this._value(i),this.counter++)},_increment:function(t){var i=this.options.incremental;return i?e.isFunction(i)?i(t):Math.floor(t*t*t/5e4-t*t/500+17*t/200+1):1},_precision:function(){var e=this._precisionOf(this.options.step);return null!==this.options.min&&(e=Math.max(e,this._precisionOf(this.options.min))),e},_precisionOf:function(e){var t=""+e,i=t.indexOf(".");return-1===i?0:t.length-i-1},_adjustValue:function(e){var t,i,s=this.options;return t=null!==s.min?s.min:0,i=e-t,i=Math.round(i/s.step)*s.step,e=t+i,e=parseFloat(e.toFixed(this._precision())),null!==s.max&&e>s.max?s.max:null!==s.min&&s.min>e?s.min:e},_stop:function(e){this.spinning&&(clearTimeout(this.timer),clearTimeout(this.mousewheelTimer),this.counter=0,this.spinning=!1,this._trigger("stop",e))},_setOption:function(e,t){if("culture"===e||"numberFormat"===e){var i=this._parse(this.element.val());return this.options[e]=t,this.element.val(this._format(i)),void 0}("max"===e||"min"===e||"step"===e)&&"string"==typeof t&&(t=this._parse(t)),"icons"===e&&(this.buttons.first().find(".ui-icon").removeClass(this.options.icons.up).addClass(t.up),this.buttons.last().find(".ui-icon").removeClass(this.options.icons.down).addClass(t.down)),this._super(e,t),"disabled"===e&&(this.widget().toggleClass("ui-state-disabled",!!t),this.element.prop("disabled",!!t),this.buttons.button(t?"disable":"enable"))},_setOptions:h(function(e){this._super(e)}),_parse:function(e){return"string"==typeof e&&""!==e&&(e=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(e,10,this.options.culture):+e),""===e||isNaN(e)?null:e},_format:function(e){return""===e?"":window.Globalize&&this.options.numberFormat?Globalize.format(e,this.options.numberFormat,this.options.culture):e},_refresh:function(){this.element.attr({"aria-valuemin":this.options.min,"aria-valuemax":this.options.max,"aria-valuenow":this._parse(this.element.val())})},isValid:function(){var e=this.value();return null===e?!1:e===this._adjustValue(e)},_value:function(e,t){var i;""!==e&&(i=this._parse(e),null!==i&&(t||(i=this._adjustValue(i)),e=this._format(i))),this.element.val(e),this._refresh()},_destroy:function(){this.element.removeClass("ui-spinner-input").prop("disabled",!1).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"),this.uiSpinner.replaceWith(this.element)},stepUp:h(function(e){this._stepUp(e)}),_stepUp:function(e){this._start()&&(this._spin((e||1)*this.options.step),this._stop())},stepDown:h(function(e){this._stepDown(e)}),_stepDown:function(e){this._start()&&(this._spin((e||1)*-this.options.step),this._stop())},pageUp:h(function(e){this._stepUp((e||1)*this.options.page)}),pageDown:h(function(e){this._stepDown((e||1)*this.options.page)}),value:function(e){return arguments.length?(h(this._value).call(this,e),void 0):this._parse(this.element.val())},widget:function(){return this.uiSpinner}}),e.widget("ui.tabs",{version:"1.11.4",delay:300,options:{active:null,collapsible:!1,event:"click",heightStyle:"content",hide:null,show:null,activate:null,beforeActivate:null,beforeLoad:null,load:null},_isLocal:function(){var e=/#.*$/;return function(t){var i,s;t=t.cloneNode(!1),i=t.href.replace(e,""),s=location.href.replace(e,"");try{i=decodeURIComponent(i)}catch(n){}try{s=decodeURIComponent(s)}catch(n){}return t.hash.length>1&&i===s}}(),_create:function(){var t=this,i=this.options;this.running=!1,this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible",i.collapsible),this._processTabs(),i.active=this._initialActive(),e.isArray(i.disabled)&&(i.disabled=e.unique(i.disabled.concat(e.map(this.tabs.filter(".ui-state-disabled"),function(e){return t.tabs.index(e)}))).sort()),this.active=this.options.active!==!1&&this.anchors.length?this._findActive(i.active):e(),this._refresh(),this.active.length&&this.load(i.active)},_initialActive:function(){var t=this.options.active,i=this.options.collapsible,s=location.hash.substring(1);return null===t&&(s&&this.tabs.each(function(i,n){return e(n).attr("aria-controls")===s?(t=i,!1):void 0}),null===t&&(t=this.tabs.index(this.tabs.filter(".ui-tabs-active"))),(null===t||-1===t)&&(t=this.tabs.length?0:!1)),t!==!1&&(t=this.tabs.index(this.tabs.eq(t)),-1===t&&(t=i?!1:0)),!i&&t===!1&&this.anchors.length&&(t=0),t},_getCreateEventData:function(){return{tab:this.active,panel:this.active.length?this._getPanelForTab(this.active):e()}},_tabKeydown:function(t){var i=e(this.document[0].activeElement).closest("li"),s=this.tabs.index(i),n=!0;if(!this._handlePageNav(t)){switch(t.keyCode){case e.ui.keyCode.RIGHT:case e.ui.keyCode.DOWN:s++;break;case e.ui.keyCode.UP:case e.ui.keyCode.LEFT:n=!1,s--;break;case e.ui.keyCode.END:s=this.anchors.length-1;break;case e.ui.keyCode.HOME:s=0;break;case e.ui.keyCode.SPACE:return t.preventDefault(),clearTimeout(this.activating),this._activate(s),void 0;case e.ui.keyCode.ENTER:return t.preventDefault(),clearTimeout(this.activating),this._activate(s===this.options.active?!1:s),void 0;default:return}t.preventDefault(),clearTimeout(this.activating),s=this._focusNextTab(s,n),t.ctrlKey||t.metaKey||(i.attr("aria-selected","false"),this.tabs.eq(s).attr("aria-selected","true"),this.activating=this._delay(function(){this.option("active",s)},this.delay))}},_panelKeydown:function(t){this._handlePageNav(t)||t.ctrlKey&&t.keyCode===e.ui.keyCode.UP&&(t.preventDefault(),this.active.focus())},_handlePageNav:function(t){return t.altKey&&t.keyCode===e.ui.keyCode.PAGE_UP?(this._activate(this._focusNextTab(this.options.active-1,!1)),!0):t.altKey&&t.keyCode===e.ui.keyCode.PAGE_DOWN?(this._activate(this._focusNextTab(this.options.active+1,!0)),!0):void 0},_findNextTab:function(t,i){function s(){return t>n&&(t=0),0>t&&(t=n),t}for(var n=this.tabs.length-1;-1!==e.inArray(s(),this.options.disabled);)t=i?t+1:t-1;return t},_focusNextTab:function(e,t){return e=this._findNextTab(e,t),this.tabs.eq(e).focus(),e},_setOption:function(e,t){return"active"===e?(this._activate(t),void 0):"disabled"===e?(this._setupDisabled(t),void 0):(this._super(e,t),"collapsible"===e&&(this.element.toggleClass("ui-tabs-collapsible",t),t||this.options.active!==!1||this._activate(0)),"event"===e&&this._setupEvents(t),"heightStyle"===e&&this._setupHeightStyle(t),void 0)},_sanitizeSelector:function(e){return e?e.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):""},refresh:function(){var t=this.options,i=this.tablist.children(":has(a[href])");t.disabled=e.map(i.filter(".ui-state-disabled"),function(e){return i.index(e)}),this._processTabs(),t.active!==!1&&this.anchors.length?this.active.length&&!e.contains(this.tablist[0],this.active[0])?this.tabs.length===t.disabled.length?(t.active=!1,this.active=e()):this._activate(this._findNextTab(Math.max(0,t.active-1),!1)):t.active=this.tabs.index(this.active):(t.active=!1,this.active=e()),this._refresh()},_refresh:function(){this._setupDisabled(this.options.disabled),this._setupEvents(this.options.event),this._setupHeightStyle(this.options.heightStyle),this.tabs.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1}),this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-hidden":"true"}),this.active.length?(this.active.addClass("ui-tabs-active ui-state-active").attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0}),this._getPanelForTab(this.active).show().attr({"aria-hidden":"false"})):this.tabs.eq(0).attr("tabIndex",0)},_processTabs:function(){var t=this,i=this.tabs,s=this.anchors,n=this.panels;
this.tablist=this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role","tablist").delegate("> li","mousedown"+this.eventNamespace,function(t){e(this).is(".ui-state-disabled")&&t.preventDefault()}).delegate(".ui-tabs-anchor","focus"+this.eventNamespace,function(){e(this).closest("li").is(".ui-state-disabled")&&this.blur()}),this.tabs=this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({role:"tab",tabIndex:-1}),this.anchors=this.tabs.map(function(){return e("a",this)[0]}).addClass("ui-tabs-anchor").attr({role:"presentation",tabIndex:-1}),this.panels=e(),this.anchors.each(function(i,s){var n,a,o,r=e(s).uniqueId().attr("id"),h=e(s).closest("li"),l=h.attr("aria-controls");t._isLocal(s)?(n=s.hash,o=n.substring(1),a=t.element.find(t._sanitizeSelector(n))):(o=h.attr("aria-controls")||e({}).uniqueId()[0].id,n="#"+o,a=t.element.find(n),a.length||(a=t._createPanel(o),a.insertAfter(t.panels[i-1]||t.tablist)),a.attr("aria-live","polite")),a.length&&(t.panels=t.panels.add(a)),l&&h.data("ui-tabs-aria-controls",l),h.attr({"aria-controls":o,"aria-labelledby":r}),a.attr("aria-labelledby",r)}),this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role","tabpanel"),i&&(this._off(i.not(this.tabs)),this._off(s.not(this.anchors)),this._off(n.not(this.panels)))},_getList:function(){return this.tablist||this.element.find("ol,ul").eq(0)},_createPanel:function(t){return e("<div>").attr("id",t).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy",!0)},_setupDisabled:function(t){e.isArray(t)&&(t.length?t.length===this.anchors.length&&(t=!0):t=!1);for(var i,s=0;i=this.tabs[s];s++)t===!0||-1!==e.inArray(s,t)?e(i).addClass("ui-state-disabled").attr("aria-disabled","true"):e(i).removeClass("ui-state-disabled").removeAttr("aria-disabled");this.options.disabled=t},_setupEvents:function(t){var i={};t&&e.each(t.split(" "),function(e,t){i[t]="_eventHandler"}),this._off(this.anchors.add(this.tabs).add(this.panels)),this._on(!0,this.anchors,{click:function(e){e.preventDefault()}}),this._on(this.anchors,i),this._on(this.tabs,{keydown:"_tabKeydown"}),this._on(this.panels,{keydown:"_panelKeydown"}),this._focusable(this.tabs),this._hoverable(this.tabs)},_setupHeightStyle:function(t){var i,s=this.element.parent();"fill"===t?(i=s.height(),i-=this.element.outerHeight()-this.element.height(),this.element.siblings(":visible").each(function(){var t=e(this),s=t.css("position");"absolute"!==s&&"fixed"!==s&&(i-=t.outerHeight(!0))}),this.element.children().not(this.panels).each(function(){i-=e(this).outerHeight(!0)}),this.panels.each(function(){e(this).height(Math.max(0,i-e(this).innerHeight()+e(this).height()))}).css("overflow","auto")):"auto"===t&&(i=0,this.panels.each(function(){i=Math.max(i,e(this).height("").height())}).height(i))},_eventHandler:function(t){var i=this.options,s=this.active,n=e(t.currentTarget),a=n.closest("li"),o=a[0]===s[0],r=o&&i.collapsible,h=r?e():this._getPanelForTab(a),l=s.length?this._getPanelForTab(s):e(),u={oldTab:s,oldPanel:l,newTab:r?e():a,newPanel:h};t.preventDefault(),a.hasClass("ui-state-disabled")||a.hasClass("ui-tabs-loading")||this.running||o&&!i.collapsible||this._trigger("beforeActivate",t,u)===!1||(i.active=r?!1:this.tabs.index(a),this.active=o?e():a,this.xhr&&this.xhr.abort(),l.length||h.length||e.error("jQuery UI Tabs: Mismatching fragment identifier."),h.length&&this.load(this.tabs.index(a),t),this._toggle(t,u))},_toggle:function(t,i){function s(){a.running=!1,a._trigger("activate",t,i)}function n(){i.newTab.closest("li").addClass("ui-tabs-active ui-state-active"),o.length&&a.options.show?a._show(o,a.options.show,s):(o.show(),s())}var a=this,o=i.newPanel,r=i.oldPanel;this.running=!0,r.length&&this.options.hide?this._hide(r,this.options.hide,function(){i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),n()}):(i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),r.hide(),n()),r.attr("aria-hidden","true"),i.oldTab.attr({"aria-selected":"false","aria-expanded":"false"}),o.length&&r.length?i.oldTab.attr("tabIndex",-1):o.length&&this.tabs.filter(function(){return 0===e(this).attr("tabIndex")}).attr("tabIndex",-1),o.attr("aria-hidden","false"),i.newTab.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0})},_activate:function(t){var i,s=this._findActive(t);s[0]!==this.active[0]&&(s.length||(s=this.active),i=s.find(".ui-tabs-anchor")[0],this._eventHandler({target:i,currentTarget:i,preventDefault:e.noop}))},_findActive:function(t){return t===!1?e():this.tabs.eq(t)},_getIndex:function(e){return"string"==typeof e&&(e=this.anchors.index(this.anchors.filter("[href$='"+e+"']"))),e},_destroy:function(){this.xhr&&this.xhr.abort(),this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible"),this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role"),this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeUniqueId(),this.tablist.unbind(this.eventNamespace),this.tabs.add(this.panels).each(function(){e.data(this,"ui-tabs-destroy")?e(this).remove():e(this).removeClass("ui-state-default ui-state-active ui-state-disabled ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role")}),this.tabs.each(function(){var t=e(this),i=t.data("ui-tabs-aria-controls");i?t.attr("aria-controls",i).removeData("ui-tabs-aria-controls"):t.removeAttr("aria-controls")}),this.panels.show(),"content"!==this.options.heightStyle&&this.panels.css("height","")},enable:function(t){var i=this.options.disabled;i!==!1&&(void 0===t?i=!1:(t=this._getIndex(t),i=e.isArray(i)?e.map(i,function(e){return e!==t?e:null}):e.map(this.tabs,function(e,i){return i!==t?i:null})),this._setupDisabled(i))},disable:function(t){var i=this.options.disabled;if(i!==!0){if(void 0===t)i=!0;else{if(t=this._getIndex(t),-1!==e.inArray(t,i))return;i=e.isArray(i)?e.merge([t],i).sort():[t]}this._setupDisabled(i)}},load:function(t,i){t=this._getIndex(t);var s=this,n=this.tabs.eq(t),a=n.find(".ui-tabs-anchor"),o=this._getPanelForTab(n),r={tab:n,panel:o},h=function(e,t){"abort"===t&&s.panels.stop(!1,!0),n.removeClass("ui-tabs-loading"),o.removeAttr("aria-busy"),e===s.xhr&&delete s.xhr};this._isLocal(a[0])||(this.xhr=e.ajax(this._ajaxSettings(a,i,r)),this.xhr&&"canceled"!==this.xhr.statusText&&(n.addClass("ui-tabs-loading"),o.attr("aria-busy","true"),this.xhr.done(function(e,t,n){setTimeout(function(){o.html(e),s._trigger("load",i,r),h(n,t)},1)}).fail(function(e,t){setTimeout(function(){h(e,t)},1)})))},_ajaxSettings:function(t,i,s){var n=this;return{url:t.attr("href"),beforeSend:function(t,a){return n._trigger("beforeLoad",i,e.extend({jqXHR:t,ajaxSettings:a},s))}}},_getPanelForTab:function(t){var i=e(t).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+i))}}),e.widget("ui.tooltip",{version:"1.11.4",options:{content:function(){var t=e(this).attr("title")||"";return e("<a>").text(t).html()},hide:!0,items:"[title]:not([disabled])",position:{my:"left top+15",at:"left bottom",collision:"flipfit flip"},show:!0,tooltipClass:null,track:!1,close:null,open:null},_addDescribedBy:function(t,i){var s=(t.attr("aria-describedby")||"").split(/\s+/);s.push(i),t.data("ui-tooltip-id",i).attr("aria-describedby",e.trim(s.join(" ")))},_removeDescribedBy:function(t){var i=t.data("ui-tooltip-id"),s=(t.attr("aria-describedby")||"").split(/\s+/),n=e.inArray(i,s);-1!==n&&s.splice(n,1),t.removeData("ui-tooltip-id"),s=e.trim(s.join(" ")),s?t.attr("aria-describedby",s):t.removeAttr("aria-describedby")},_create:function(){this._on({mouseover:"open",focusin:"open"}),this.tooltips={},this.parents={},this.options.disabled&&this._disable(),this.liveRegion=e("<div>").attr({role:"log","aria-live":"assertive","aria-relevant":"additions"}).addClass("ui-helper-hidden-accessible").appendTo(this.document[0].body)},_setOption:function(t,i){var s=this;return"disabled"===t?(this[i?"_disable":"_enable"](),this.options[t]=i,void 0):(this._super(t,i),"content"===t&&e.each(this.tooltips,function(e,t){s._updateContent(t.element)}),void 0)},_disable:function(){var t=this;e.each(this.tooltips,function(i,s){var n=e.Event("blur");n.target=n.currentTarget=s.element[0],t.close(n,!0)}),this.element.find(this.options.items).addBack().each(function(){var t=e(this);t.is("[title]")&&t.data("ui-tooltip-title",t.attr("title")).removeAttr("title")})},_enable:function(){this.element.find(this.options.items).addBack().each(function(){var t=e(this);t.data("ui-tooltip-title")&&t.attr("title",t.data("ui-tooltip-title"))})},open:function(t){var i=this,s=e(t?t.target:this.element).closest(this.options.items);s.length&&!s.data("ui-tooltip-id")&&(s.attr("title")&&s.data("ui-tooltip-title",s.attr("title")),s.data("ui-tooltip-open",!0),t&&"mouseover"===t.type&&s.parents().each(function(){var t,s=e(this);s.data("ui-tooltip-open")&&(t=e.Event("blur"),t.target=t.currentTarget=this,i.close(t,!0)),s.attr("title")&&(s.uniqueId(),i.parents[this.id]={element:this,title:s.attr("title")},s.attr("title",""))}),this._registerCloseHandlers(t,s),this._updateContent(s,t))},_updateContent:function(e,t){var i,s=this.options.content,n=this,a=t?t.type:null;return"string"==typeof s?this._open(t,e,s):(i=s.call(e[0],function(i){n._delay(function(){e.data("ui-tooltip-open")&&(t&&(t.type=a),this._open(t,e,i))})}),i&&this._open(t,e,i),void 0)},_open:function(t,i,s){function n(e){l.of=e,o.is(":hidden")||o.position(l)}var a,o,r,h,l=e.extend({},this.options.position);if(s){if(a=this._find(i))return a.tooltip.find(".ui-tooltip-content").html(s),void 0;i.is("[title]")&&(t&&"mouseover"===t.type?i.attr("title",""):i.removeAttr("title")),a=this._tooltip(i),o=a.tooltip,this._addDescribedBy(i,o.attr("id")),o.find(".ui-tooltip-content").html(s),this.liveRegion.children().hide(),s.clone?(h=s.clone(),h.removeAttr("id").find("[id]").removeAttr("id")):h=s,e("<div>").html(h).appendTo(this.liveRegion),this.options.track&&t&&/^mouse/.test(t.type)?(this._on(this.document,{mousemove:n}),n(t)):o.position(e.extend({of:i},this.options.position)),o.hide(),this._show(o,this.options.show),this.options.show&&this.options.show.delay&&(r=this.delayedShow=setInterval(function(){o.is(":visible")&&(n(l.of),clearInterval(r))},e.fx.interval)),this._trigger("open",t,{tooltip:o})}},_registerCloseHandlers:function(t,i){var s={keyup:function(t){if(t.keyCode===e.ui.keyCode.ESCAPE){var s=e.Event(t);s.currentTarget=i[0],this.close(s,!0)}}};i[0]!==this.element[0]&&(s.remove=function(){this._removeTooltip(this._find(i).tooltip)}),t&&"mouseover"!==t.type||(s.mouseleave="close"),t&&"focusin"!==t.type||(s.focusout="close"),this._on(!0,i,s)},close:function(t){var i,s=this,n=e(t?t.currentTarget:this.element),a=this._find(n);return a?(i=a.tooltip,a.closing||(clearInterval(this.delayedShow),n.data("ui-tooltip-title")&&!n.attr("title")&&n.attr("title",n.data("ui-tooltip-title")),this._removeDescribedBy(n),a.hiding=!0,i.stop(!0),this._hide(i,this.options.hide,function(){s._removeTooltip(e(this))}),n.removeData("ui-tooltip-open"),this._off(n,"mouseleave focusout keyup"),n[0]!==this.element[0]&&this._off(n,"remove"),this._off(this.document,"mousemove"),t&&"mouseleave"===t.type&&e.each(this.parents,function(t,i){e(i.element).attr("title",i.title),delete s.parents[t]}),a.closing=!0,this._trigger("close",t,{tooltip:i}),a.hiding||(a.closing=!1)),void 0):(n.removeData("ui-tooltip-open"),void 0)},_tooltip:function(t){var i=e("<div>").attr("role","tooltip").addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content "+(this.options.tooltipClass||"")),s=i.uniqueId().attr("id");return e("<div>").addClass("ui-tooltip-content").appendTo(i),i.appendTo(this.document[0].body),this.tooltips[s]={element:t,tooltip:i}},_find:function(e){var t=e.data("ui-tooltip-id");return t?this.tooltips[t]:null},_removeTooltip:function(e){e.remove(),delete this.tooltips[e.attr("id")]},_destroy:function(){var t=this;e.each(this.tooltips,function(i,s){var n=e.Event("blur"),a=s.element;n.target=n.currentTarget=a[0],t.close(n,!0),e("#"+i).remove(),a.data("ui-tooltip-title")&&(a.attr("title")||a.attr("title",a.data("ui-tooltip-title")),a.removeData("ui-tooltip-title"))}),this.liveRegion.remove()}})});
define('ngApp/website/main/main',["app/extensions/core/currency",
        //"app/extensions/core/paidActivityRedirect",
        "app/core/login",
        "jquery-ui-1.11.4.min"],
   //function(CurrencyMgr,PaidActivityRedirect) {
     function(CurrencyMgr,LoginMgr) {

	//Raven.config('https://0661163eff1e4f7ba84745a9222d2a9f@sentry.io/246084').install();
	var itrVersion = "";
	var app = angular.module('visitacity', ['ngRoute','ui.bootstrap','blockUI','ui.slider','dibari.angular-ellipsis','nsPopover','720kb.socialshare','ngRaven',function($httpProvider) {
			// Use x-www-form-urlencoded Content-Type
			  $httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';
			  var param = function(obj) {
				    var query = '', name, value, fullSubName, subName, subValue, innerObj, i;
				      
				    for(name in obj) {
				      value = obj[name];
				        
				      if(value instanceof Array) {
				        for(i=0; i<value.length; ++i) {
				          subValue = value[i];
				          fullSubName = name + '[' + i + ']';
				          innerObj = {};
				          innerObj[fullSubName] = subValue;
				          query += param(innerObj) + '&';
				        }
				      }
				      else if(value instanceof Object) {
				        for(subName in value) {
				          subValue = value[subName];
				          fullSubName = name + '[' + subName + ']';
				          innerObj = {};
				          innerObj[fullSubName] = subValue;
				          query += param(innerObj) + '&';
				        }
				      }
				      else if(value !== undefined && value !== null)
				        query += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';
				    }
				      
				    return query.length ? query.substr(0, query.length - 1) : query;
				  };
				 
				  // Override $http service's default transformRequest
				  $httpProvider.defaults.transformRequest = [function(data) {
				    return angular.isObject(data) && String(data) !== '[object File]' ? param(data) : data;
				  }];
				 
				  $httpProvider.interceptors.push('httpRequestInterceptor');
				  $httpProvider.interceptors.push(function ($q) {	
			             return {
			                 'request': function (config) {
			                	if (config.url.indexOf("jsonws") >=0) {
				                	if (ieVersion == null || ieVersion > 9) {
				                		config.url = jsonRoot + config.url;
				                		var lastModJsonObj = angular.fromJson(lastModJson);
					   				  	var lastModJsonObj1 = angular.fromJson(lastMod1Json);
					   				  	var confUrl = config.url;
					   				  	if (confUrl.indexOf("directaccess") > 0) {
					   				  		//support for not using the clm... option
					   				  		config.url = config.url.replace("directaccess","");
					   				  	} else if (confUrl.indexOf("paid-activities-prices") >=0) {
					   				 		var str = lastModJsonObj != null ? lastModJsonObj.curCityPaPrice : lastModJsonObj1.cityOne; //in case comming from the home page we need this
					   				 		config.url = config.url.replace("/jsonws/","/jsonws/" + str + "/");
					   				 	} else if (confUrl.indexOf("city-paid-activities") >=0) {
					   				 		var str = lastModJsonObj != null ? lastModJsonObj.curCityPa : lastModJsonObj1.cityOne; //in case comming from the home page we need this
					   				 		config.url = config.url.replace("/jsonws/","/jsonws/" + str + "/");
					   				 		if (lastModJsonObj.curCityDestinationOverrideId == "null") {
					   				 			//remove the no override if it is not required (no destination override id)
					   				 			config.url = config.url.replace("-no-override","");
					   				 		}
					   				 	} else if (confUrl.indexOf("city-weekly-update") >=0) {
					   				 		var str = lastModJsonObj != null ? lastModJsonObj.curCityOpeningHours : lastModJsonObj1.cityOne; //in case comming from the home page we need this
					   				 		config.url = config.url.replace("/jsonws/","/jsonws/" + str + "/");
					   				 	} else if (confUrl.indexOf("-for-home") >=0) {
				                			var str = lastModJsonObj != null ? lastModJsonObj.cityOne : lastModJsonObj1.cityOne;
				                			config.url = config.url.replace("/jsonws/","/jsonws/" + str + "/");
				                		} else {
				                			var str = lastModJsonObj != null ? lastModJsonObj.curCity : lastModJsonObj1.cityOne; //in case comming from the home page we need this
				                			config.url = config.url.replace("/jsonws/","/jsonws/" + str + "/");
				                		}
			                		} else {
			                			config.url = appRoot + config.url;
			                		}
			                	}
			                    return config || $q.when(config);

			                 }

			             }	
			         });
			}]);
		try {
			if (Raven != null) {
				Raven.config('https://0661163eff1e4f7ba84745a9222d2a9f@sentry.io/246084').install();
			}
		} catch (err) {
			console.error ("Error loading Sentry" + err)
		}
		
		var clickCounter = 0;
		app.run(['$rootScope', 'blockUI','$http','$filter','$location','activitiesService','viatorCityRedirect','paidActivityRedirectService','emailConsentService','visitDebugSvc','$timeout','exprService',
		         function($rootScope, blockUI,$http,$filter,$location,activitiesService,viatorCityRedirect,paidActivityRedirectService,emailConsentService,visitDebugSvc,$timeout,exprService) {
			
			var openVisit = readCookie('expr-click-open-viator-visit');
			var openVisitVersion = readCookie('expr-click-open-viator-visit-num');
			
			if (!openVisitVersion) {
				if (openVisit) {
					openVisitVersion = 1;
				} else {
					openVisitVersion = Math.floor(Math.random() * 4) + 1;
				}
			}
			createCookie('expr-click-open-viator-visit-num',openVisitVersion,750);
			
			var waitTime = 90000;
			var minNUmOfClicks = 1;
			var versionForEvent = "";
			if (openVisitVersion == 2) {
				waitTime = 120000;
				minNUmOfClicks = 5;
				versionForEvent = "-2"
			} else if (openVisitVersion == 3) {
				waitTime = 0;
				minNUmOfClicks = 9;
				versionForEvent = "-3"
			} else if (openVisitVersion == 4) {
				minNUmOfClicks = 14;
				versionForEvent = "-4"
			}
			
			exprService.fireExperimentEvent("click-open-viator","click-open-viator-visitactiy" + versionForEvent);
			
			/*var clickRedirectExperiment = exprService.isInExperiment("expr-click-open-viator",50);
			var openVisit = true;
			if (clickRedirectExperiment) {
				var openVisit = exprService.isInExperiment("expr-click-open-viator-visit",100);
				if (openVisit) {
					exprService.fireExperimentEvent("click-open-viator","click-open-viator-visitactiy");
				} else {
					exprService.fireExperimentEvent("click-open-viator","click-open-viator-true");
				}
				
			} else {
				exprService.fireExperimentEvent("click-open-viator","click-open-viator-false");
			}*/
			
			//if (clickRedirectExperiment) {
			try {
				var lastPaClickDate = wrapGetLocalStorage("paidActivityClickDate");
				var bindClick = false;
				if (lastPaClickDate != null) {
					var intervalFromLastClick = new Date().valueOf() - lastPaClickDate;
		        	var actionInterval = 1209600 * 1000; //60*60*24 (day) * 14 (14 days) * 1000 (time in mili)
		        	if (intervalFromLastClick > actionInterval) {
		        		bindClick = true;
		        	}
				} else {
					bindClick = true;
				}
	        	
				if (bindClick) {
					$('body').on( "click", function(evt) {
						clickCounter += 1;
						if (clickCounter > minNUmOfClicks) {
							$(this).off("click");
						}
					});
					
					$timeout(function() {
						$('body').click(function(evt) {
							if (clickCounter > minNUmOfClicks) {
								if ($location.path().indexOf("/activities/") < 0) {
									$timeout(function() { //wait for PA click 
										var lastPaClickDate = wrapGetLocalStorage("paidActivityClickDate");
										var intervalFromLastClick = null
										var actionInterval = 1209600 * 1000; //60*60*24 (day) * 14 (14 days) * 1000 (time in mili)
										if (lastPaClickDate != null) {
											intervalFromLastClick = new Date().valueOf() - lastPaClickDate;
										}
										if (lastPaClickDate == null || intervalFromLastClick > actionInterval) {
											wrapSetLocalStorage("paidActivityClickDate", new Date().valueOf());
											var eventOff = viatorCityRedirect.doRedirect(openVisit);
											if (eventOff) {
												//turn off event only if window has opened
												$(this).off("click");
											}
										} else {
											$(this).off("click");
										}
										
									},100);
								}
								
							}
													
						});
					},waitTime); //wait for 1.5 minutes before counting
				}
			} catch (err) {}
			//}
			
			emailConsentService.init();
			$rootScope.$on('$routeChangeStart', function (event, next, current) {
				//kill running blockUIs if needed
				blockUI.reset();
				var doRedirect = true;
				if (doRedirect && $location.path().indexOf("/activity/") > 0) {
					
					event.preventDefault();
		    		activitiesService.init(next.params.city).then(
		   				 function(results) {
		   					var pa = $filter('filter')(activitiesService.allActivities, {vendorProductId: next.params.vendorId},true)[0];
	   						paidActivityRedirectService.doRedirect(pa.vendor, pa.title, pa.link, "redirected from api", pa.vendorProductId, pa.id,pa.cityId,true,pa.price,"s");
		   				 }
		    		);
		    	}
				});
		    //});
		}]);
		
		
		app.service('viatorCityRedirect', ['$routeParams','GetCitiesService','$filter','$timeout','CityService',function($routeParams,GetCitiesService,$filter,$timeout,CityService) {
			
			this.doRedirect = function(openVisit) {
				//if (openVisit) {
					var curCityLegal = $routeParams.city;
					if (curCityLegal == null) {
						curCityLegal = CityService.getCurCity() != null ?  CityService.getCurCity().legalName : null;
					}
					var lang = "en";
					if ($routeParams.lang != null) {
						lang = $routeParams.lang;
					}
					if (curCityLegal != null) {
						var redirectUrl = "https://www.visitacity.com/"+lang+"/" + curCityLegal + "/activities/all-activities";
						window.open(redirectUrl, '_blank');
						fireEvent("General","open visitacity");
						return true;
					} else {
						return false;
					}
				//} else {
					/*GetCitiesService.async().then(
						function(results) {
							var curCityLegal = $routeParams.city;
							if (curCityLegal == null) {
								curCityLegal = CityService.getCurCity() != null ?  CityService.getCurCity().legalName : null;
							}
							var loggedInUserId = LoginMgr.getInstance().getLoggedInUserId();
							var redirectUrl = "https://www.viator.com/?eap=visitacity-"+loggedInUserId+"-14055&aid=vba14055en"
							if (curCityLegal != null) {
								 var curCity = $filter('filter')(results, {legalName: curCityLegal}, true);
					   			 if (curCity.length == 1 && curCity[0].vendorId != null) {
					            	var redirectUrl = "https://www.viator.com/"+curCity[0].name+"/d"+curCity[0].vendorId+"-ttd?eap=visitacity-"+loggedInUserId+"-14055&aid=vba14055en"
					   			 }
							}
			   				window.open(redirectUrl, '_blank');
			   				fireEvent("General","open viator");
			   				fireLocalEvent("website-user-data", null, null, "click-open-viator-viator", true);
			   				return true;
				   		}, function(errors) {
				   			return true;
				   		}
				   	);*/
				//}
			}
			
		}]);
		
		app.service('emailConsentService', ['$http','$interval','$uibModal','$location','GlobalDefs','$filter','$q','visitDebugSvc',
		                                    function($http,$interval,$uibModal,$location,GlobalDefs,$filter,$q,visitDebugSvc) {
			this._emailAddress = null;
			//this._timerLength = 90000;
			this._timerLength = 90000;
			this._intervalTimer = null;
			this._loggedInMgr = LoginMgr.getInstance();
			this._modalNumber = null;
			this._toolUser = null;
			//this._bannerWaitTime = 60*60*24*7*1000;//1 week in miliseconds
			this._bannerWaitTime = 60*60*24*7*1000;//1 week in miliseconds
			
			this.init = function() {
				var _self = this;
				_self.consentRequired().then(function(isRequired) {
					if (isRequired) {
						_self.startTimer();
					}
				});
			}
			
			this.getModalNumber = function() {
				var cmn = readCookie('cmn');
				if (cmn != null) {
					num = cmn;
				} else {
					//use only #3 as it has the best percentage.
					//Remove the cookie after 9/2018, and leave only option 3
					num = 3;
					//num = Math.floor((Math.random() * 3) + 1);
					//createCookie("cmn", num);
				}
				return num;
				//return 3;
			}
			
			this.consentRequired = function() {
				var _self = this;
	        	var deffered =  new $.Deferred();
				if (!_self.isEuMember()) {
					deffered.resolve(false);
				} else {
					$q.all(new Array(_self._loggedInMgr.getLoggedInUserObject(),_self._loggedInMgr.getSubscribeLevel())).then(function(data) {
						_self.emailAddress = data[0].email;
						var isRequired = false;
						if (data[1] == "4") {
							//user activly unsubscribed
							isRequired = true;
						} else if (data[0] != null && !data[0].allowReceiveEmails && (data[0].email == null || data[0].email == "") ) {
							//user did not unregister, maybe we don't have his email
							isRequired = true;
	   	   				} 
						deffered.resolve(isRequired);
	   	          	 });
				}
				return deffered;
			}
				
			this.updateUserConsent = function(allow,emailAddress) {
				var _self = this;
				_self._emailAddress = emailAddress;
				_self._loggedInMgr.getLoggedInUserObject().then(function(data) {
					_self._toolUser = data;
					if (_self.isEuMember()) {
						//EU
						if (!allow) {
							_self.startTimer(true);
						} 
						_self.subscribeUser(allow ? 0 : 4);
					} else {
						//handle non-EU
						_self._loggedInMgr.modifyLoginData(emailAddress, true);
					}
   	          	 });
			}
				
			this.isEuMember = function() {
				var isEuMember = readCookie('eu_member');
				//isEuMember = visitDebugSvc.getValue(isEuMember,true);
				return isEuMember;
			}
			
			this.startTimer = function(doForce) {
				var _self = this;
				if (!_self.isEuMember()) {
					//don't start for non eu
					return;
				}
				if (_self._intervalTimer != null) {
					//timer already running
					return;
				}
				if (!doForce) {
					var lastBannerShowTime = readCookie("lastTimeShowSubscribeBanner");
		        	if (lastBannerShowTime == null) {
		        		//first time user, set banner to 0 for first time user
		        		createCookie("lastTimeShowSubscribeBanner", 0);
		        		return;
		        	} else if (lastBannerShowTime != 0){
		        		var intervalFromLastShow = new Date().valueOf() - lastBannerShowTime;
		            	if (intervalFromLastShow < _self._bannerWaitTime) {
		            		//1 week has not passed
		            		return; 
		            	}
		        	} else if (lastBannerShowTime == 0) {
		        		createCookie("lastTimeShowSubscribeBanner", new Date().valueOf());
		        		return;
		        	}
				}
				
				_self._intervalTimer = $interval(function() {
					//don't open modal on modal, also check if consent is still required
					_self.consentRequired().then(function(isRequired) {
						if (isRequired) {
							if (!_self.isModelOpen()) {
								createCookie("lastTimeShowSubscribeBanner", new Date().valueOf());
								_self.openModal();
							}
						} else {
							//consent no longer required. stop timer
							$interval.cancel(_self._intervalTimer);
						}
						
					});
					
				},_self._timerLength);
			}
			
			this.openModal = function() {
				var _self = this;
				_self._modalNumber = _self.getModalNumber();
				fireEvent("Subscribe banner","banner_" + _self._modalNumber + "_open");
				var mi = $uibModal.open({
					templateUrl: appWebRoot + '/shared/modals/emailConsent' + _self._modalNumber + '.html',
					windowClass : 'email-consent-modal' + _self._modalNumber,
					controller: function($scope) {
						$scope.imagesCdn = GlobalDefs.getImagesCdn();
						$scope.emailAddress = _self.emailAddress;
						$scope.requireEmail = $scope.emailAddress == null || $scope.emailAddress.length == 0;
						$scope.invalidEmail = false;
						$scope.submittedOk = false;
						$interval.cancel(_self._intervalTimer);
						$scope.confirm = function(res) {
							if (res == null) {
								//close by x
								fireEvent("Subscribe banner","banner_" + _self._modalNumber + "_cancel");
								mi.close(res);
							} else if (isEmail($scope.emailAddress)) {
								$scope.submittedOk = true;
								fireEvent("Subscribe banner","banner_" + _self._modalNumber + "_ok");
								_self._emailAddress = $scope.emailAddress;
								mi.close($scope.emailAddress);
							} else {
								$scope.invalidEmail = true;
								$("#emailAddressSend").attr("placeholder","please enter a valid email");
								fireEvent("Subscribe banner","banner_" + _self._modalNumber + "_invalid_email");
							}
							
						}
					}
			    });
				
				mi.result.then(function (result) {
					if (result != null && result.length > 0) {
						//subscribe user
						_self.updateUserConsent(true,result);
						
					}
				}, function () {
					fireEvent("Subscribe banner","banner_" + _self._modalNumber + "_cancel");
				});
			}
			
			/**
			 * Check if any model or dialog is open
			 * If modal is open, or if:
			 * 		qtip is visible
			 * 		if in activities page
			 * 		if in activities tab in itinerary
			 * 		if in signup page
			 * 		if in activity page
			 */
			this.isModelOpen = function() {
				return $location.url().indexOf("signup") > 0 || 
					$location.url().indexOf("tab=activities") > 0 ||
					$location.url().indexOf("/activities/") > 0 ||
					$location.url().indexOf("/activity-") > 0 ||
					$(".modal-dialog").length > 0 || 
					$('.qtip:visible').length > 0;
			}
			
			/**
			 * Re-subscribe the user
			 * Handle both unsubscribe and tool_users info
			 */
			this.subscribeUser = function(level) {
				var _self = this;
				var allowReceive = level == 0 ? true : false;
				_self._loggedInMgr.modifyLoginData(_self._emailAddress, allowReceive, true).then(function(isAdded){
					if (allowReceive) {
						fireLocalEvent("Login", "consent", "yes", _self._emailAddress, true, false);
					}
					if (!isAdded && allowReceive) {
						//for a registered user, if changing consent, fire email received new
						fireEvent("Email Received", "new");
					} 
					//make sure user is unsubscribed
					$http.post(appRoot + '/emailunsubscribeDo', {
	   					  tuid: _self._toolUser.id,
	   					  level	: level
	   				  }).success(function(data, status, headers, config) {
	   				  }).error(function(data, status, headers, config) {
	   					  throw "failed to unsubscribe " + data
	   				});
				});
				
			}
				
		}]);
		
		/**
		 * Log page views for angular transitions
		 */
		app.run(['$rootScope', '$location','$filter','$timeout','$routeParams','paidActivityRedirectService','activitiesService','GlobalDefs',
		         function($rootScope, $location,$filter,$timeout,$routeParams,paidActivityRedirectService,activitiesService,GlobalDefs) {
		    $rootScope.$on('$routeChangeSuccess', function (event, current, prev) {
		    	
		    	if (prev != null) {
		    		ga('set', 'page', $location.url());
		    		ga('send', 'pageview');
					logPageLoaded();
				}
		    	 $rootScope.actualLocation = $location.path();
		    });
		}]);
		
		app.factory('httpRequestInterceptor', function ($q, $location) {
		    return {
		        'responseError': function(rejection) {
		            // do something on error
		            if(rejection.status === 404){
		                $location.path('/404/');                    
		            }
		            return $q.reject(rejection);
		         }
		     };
		});
		
			$.fn.isOnScreen = function(){
			    try {
			    	var win = $(window);
				    
				    var viewport = {
				        top : win.scrollTop(),
				        left : win.scrollLeft()
				    };
				    viewport.right = viewport.left + win.width();
				    viewport.bottom = viewport.top + win.height();
				    
				    var bounds = this.offset();
				    bounds.right = bounds.left + this.outerWidth();
				    bounds.bottom = bounds.top + this.outerHeight();
				    
				    return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));
			    } catch (err) {}
			};
			
			
			//Disable auto block ui for any http request
			app.config(function(blockUIConfig) {
					blockUIConfig.autoBlock = false;
			});
			
			//disable auto animate unless using animate-hide class
			app.config(function($animateProvider) {
				  $animateProvider.classNameFilter(/animate-hide/);
			});
			
			
			
			/*app.config(['$uibModalProvider', function($uibModalProvider)  {
				$uibModalProvider.options.animation = false;
			}]);*/
			
			/**
			 * Handle Angular exceptions
			 */
			app.factory('$exceptionHandler', ['$injector', function($injector) {
				  var $location;
				  return function(exception, cause) {
					  $location = $location || $injector.get('$location');
					  console.error(exception.stack);
					  //fireLocalEvent("Error", $location.path(), exception.message, exception.stack, true);
					  fireEvent("Error-Desktop", exception.message, exception.stack);
					  Raven.captureException(exception);
				  };
			}]);
		
	    	app.directive('mainHeader', function() {
	    		  return {
	    		        restrict: 'C',
	    		        scope: {showmyplans: '=',maxwidth: '='},
	    		        controller: 'headerController',
	    		        templateUrl: appWebRoot + '/shared/mainHeader.html'
	    		  }
	    	});
	    	
	    	app.directive('mapHeader', function() {
	    		  return {
	    		        restrict: 'C',
	    		        scope: {showmyplans: '=',maxwidth: '='},
	    		        controller: 'headerController',
	    		        templateUrl: appWebRoot + '/shared/mapHeader.html'
	    		  }
	    	});
	    	
	    	app.directive('mainFooter',[function() {
	  		  return {
	  		        restrict: 'C',
	  		        controller: 'footerController',
	  		        scope: {},
	  		        templateUrl: appWebRoot + '/shared/mainFooter.html'
	  		  }
	    	}]);
	    	
	    	app.directive('homeSubtitle', function() {
	    		  return {
	    		        restrict: 'C',
	    		        scope: {imgpath: '=', lang:'='},
	    		        templateUrl: appWebRoot + '/home/homeSubtitle.html'
	    		  }
	      	});
	    	
	    	app.directive('myPlans', function() {
	    		  return {
	    		        restrict: 'C',
	    		        scope: {fontcolor: '@'},
	    		        controller: 'myPlansController',
	    		        templateUrl: appWebRoot + '/shared/myPlans.html'
	    		  }
	      	});
	    	
	    	app.directive('cityHeader', function() {
	  		  return {
	  		        restrict: 'C',
	  		        scope: {maxwidth: '='},
	  		        controller: 'cityHeaderController',
	  		        templateUrl: appWebRoot + '/shared/cityHeader.html'
	  		  }
	    	});
	    	
	    	app.directive('popularCities', function() {
		  		  return {
		  		        restrict: 'C',
		  		        scope: {popularCitiesArr: '=', lang: '='},
		  		        controller: 'cityHeaderController',
		  		        templateUrl: appWebRoot + '/directives/city/popular-cities.html'
		  		  }
	    	});
	    	
	    	app.directive('popularCountryCities', function() {
		  		  return {
		  		        restrict: 'C',
		  		        scope: {popularCitiesArr: '=', lang: '='},
		  		        controller: 'cityHeaderController',
		  		        templateUrl: appWebRoot + '/directives/city/popular-country-cities.html'
		  		  }
	    	});
	    	
	    	app.directive('cityWeatherWidget', function() {
		  		  return {
		  		        restrict: 'C',
		  		        scope: {
		  		        	cityObj: '=',
		  		        	degreeLetter: '=',
		  		        	topCities: '=',
		  		        	isCountry: '=',
		  		        	wIndex: '='
		  		        },
		  		        transclude: true,
		  		        controller: function($scope,$filter,$rootScope) {
		  		        	var max = null;
			  		  		var min = null;
			  		  		var cityName = null;
			  		  		$scope.getMargingBottom = function(wObj) {
			  		  			if ($scope.cityObj.resetTemp) {
			  		  				//reset
			  		  				$scope.cityObj.resetTemp = false;
			  		  				max = null;
			  		  				min = null;
			  		  			}
			  		  			var FIXED_HEIGHT = 95-60; //height of the td minus the height of the green bar
			  		  			if (max == null || min == null) {
			  		  				for (var i=0;i<$scope.cityObj.weatherList.length;i++) {
			  		  					if (max == null || max < $scope.cityObj.weatherList[i].maxTemp) {
			  		  						max = $scope.cityObj.weatherList[i].maxTemp;
			  		  					}
			  		  					if (min == null || min > $scope.cityObj.weatherList[i].maxTemp) {
			  		  						min = $scope.cityObj.weatherList[i].maxTemp;
			  		  					}
			  		  				}
			  		  			}
			  		  			
			  		  			//var mb = FIXED_HEIGHT/(max-min)*wObj.maxTemp;
			  		  			var diffMinMax = max-min;
			  		  			var scale = FIXED_HEIGHT/diffMinMax;
			  		  			var mb = (wObj.maxTemp-min)*scale;
			  		  			return {"margin-bottom":mb+"px"};
			  		  		}
			  		  		$scope.changeUnit = function(activeUnit) {
			  		  			max = null;
			  		  			min = null;
			  		  			cityName = null;
			  		  			createCookie("is_metric", activeUnit == "KM" ? true : false);
			  		  			createCookie("us_timeformat", activeUnit == "KM" ? false : true);
			  		  			createCookie("units_changed", true);
			  		  			fireEvent("General","ChangeUnits", activeUnit == "KM" ? "metric" : "non-metric");
			  		  			if ($scope.topCities != null && $scope.topCities.length > 0) {
			  		  				for (var i=0;i<$scope.topCities.length;i++) {
			  		  					$scope.topCities[i].resetTemp = true;
			  		  					$scope.$parent.normalizeTemp($scope.topCities[i]);
			  		  				}
			  		  			} else {
			  		  				$scope.$parent.normalizeTemp($scope.cityObj);
			  		  			}
			  		  			
			  		  		}
		  		        },
		  		        templateUrl: appWebRoot + '/directives/city/weather-temp.html'
		  		  }
	    	});
	    	
	    	app.directive('activitiesHeader', function() {
		  		  return {
		  		        restrict: 'C',
		  		        scope: {
		  		        	maxwidth: '=',
		  		        	cityObj: '='
		  		        },
		  		        controller: 'activitiesController',
		  		        templateUrl: appWebRoot + '/shared/activitiesHeader.html'
		  		  }
		    	});
	    	
	    	app.directive('cityActions',['exprService','$timeout','$uibModal','$location', function(exprService,$timeout,$uibModal,$location) {
		  		return {
		  			restrict: 'C',
		  		    	scope: {maxdays: '=', selected: '@', approot:'=', lang:'=', guidenum:'=', itinnum:'=', paCats:'=paCats', cityObj:'=', attrnnum:'=', countryGuides:'='},
		  		        templateUrl: appWebRoot + '/shared/cityActionLinks.html',
		  		        controller: function($scope,$rootScope) {
		  		        	$scope.defaultDaysSelectModal = 1;
		  		        	if ($location.url().indexOf("/itinerary-by-day") < 0) {
			  		        	$scope.oneToSevenOpenPopup = exprService.isInExperiment("expr-city-one-to-seven-action",50);
			  		        	if ($scope.oneToSevenOpenPopup) {
			  		        		$scope.defaultDaysSelectModal = readCookie('expr-city-one-to-seven-action-modal-num');
			  		        		if ($scope.defaultDaysSelectModal == null) {
			  		        			$scope.defaultDaysSelectModal = Math.floor(Math.random() * 2) + 1;
			  		        		}
			  		        		createCookie('expr-city-one-to-seven-action-modal-num',$scope.defaultDaysSelectModal,750);
			  		        		exprService.fireExperimentEvent("expr-city-one-to-seven-action","expr-city-one-to-seven-action-" + $scope.defaultDaysSelectModal);
			  		        	} else {
			  		        		exprService.fireExperimentEvent("expr-city-one-to-seven-action","expr-city-one-to-seven-action-none");
			  		        	}
		  		        	}
		  		        	
		  		        	$scope.modalInstance = null;
		  		        	$scope.openDaysSelectModal = function() {
		  		        		$scope.modalInstance = $uibModal.open({
		  		        		templateUrl: appWebRoot + '/directives/city/modals/days-select-'+$scope.defaultDaysSelectModal+'.html',
		  		        		windowClass : 'days-select-modal-wrapper',
		  		        		scope: $scope
		  		        	});
		  		  			
		  		        	$scope.modalInstance.result.then(function (result) {
		  		        			fireEvent("General","1 to 7 popup","ok " + $scope.defaultDaysSelectModal);
			  		  			}, function () {
			  		  				fireEvent("General","1 to 7 popup","cancel " + $scope.defaultDaysSelectModal);
			  		  			});
		  		        	}
			  		        	
		  		        	
		  		        	$scope.counter = 1; //things to do
		  		        	var availWidth = $("#container11").width();
		  		        	var atWatch = $scope.$watch('attrnnum', function(newVal, oldVal) {
								if (newVal != null) {
									if (newVal > 0) {
										$scope.counter += 2;//map and attractions
									} else if ($scope.countryGuides != null && $scope.countryGuides.length > 0) {
										//$scope.counter += 1;
										if (newVal == 0) {
											$scope.counter += 1;
										}	
									} else {
										$scope.counter += 2;
									}
									atWatch();
								}
					    	},true);
		  		        	var guidenumWatch = $scope.$watch('guidenum', function(newVal, oldVal) {
								if (newVal != null) {
									if ($scope.cityObj.hotelUrl != null && $scope.cityObj.hotelUrl.length > 0) {
										$scope.counter++;
									} else if (newVal > 0 && ($scope.countryGuides == null || $scope.countryGuides.length == 0)) {
										$scope.counter++;
									}
									guidenumWatch();
								}
					    	},true);
		  		        	var itinnumWatch = $scope.$watch('itinnum', function(newVal, oldVal) {
								if (newVal != null) {
									if (newVal > 0) {
										$scope.counter++;
									}
									itinnumWatch();
								}
					    	},true);
		  		        	var countryGuidesWatch = $scope.$watch('countryGuides', function(newVal, oldVal) {
								if (newVal != null) {
									if (newVal.length > 0) {
				  		        		//availWidth = availWidth - 220;
										$scope.counter++;
				  		        		if ($scope.cityObj.hotelUrl != null && $scope.cityObj.hotelUrl.length > 0 && $scope.countryGuides != null && $scope.countryGuides.length > 0) {
											$scope.counter--;
										}
									}
									countryGuidesWatch();
								}
					    	},true);
		  		        	
		  		        	$scope.$watch('counter', function(newVal, oldVal) {
								if (newVal != null) {
									$scope.calcButtonWidth();
								}
					    	},true);
		  		        	
		  		        	$scope.calcButtonWidth = function() {
		  		        		var spaces = ($scope.counter-1)*15;
								/*if ($scope.cityObj.hotelUrl != null && $scope.cityObj.hotelUrl.length > 0) {
									spaces = ($scope.counter-1)*15;
									availWidth = availWidth - spaces;
									//handle width of accomodations button
									var defWidth = 25;
									if ($scope.countryGuides != null && $scope.countryGuides.length > 0) {
										defWidth = 30;
									} 						
									$scope.hotelBtnWidth = (availWidth/$scope.counter)+defWidth+ "px";
									availWidth = availWidth - defWidth;
								} else {*/
								availWidth = availWidth - spaces;
								//}
								if ($scope.counter > 3 && $scope.countryGuides != null && $scope.countryGuides.length > 0) {
									$scope.minWidthDef = "min-width:220px";
								}
								$scope.btnWidth = (availWidth/$scope.counter) + "px";
		  		        	}
		  		        	
		  		        	$(window).on("resize.doResize", function (){
		  		        		$timeout(function() {
		  		        			availWidth = $("#container11").width();
		  		        			$scope.calcButtonWidth();
		    	    			}, 500);
		  		        	});
		  		        	
		  		        	$scope.generateHotelUrl = function(baseUrl) {
		  		        		if (baseUrl != null) {
		  		        			var loggedInUserId = LoginMgr.getInstance().getLoggedInUserId();
			  		        		baseUrl = baseUrl.replace("srcuid",loggedInUserId);
			  		        		return baseUrl;
		  		        		}
		  		        		
		  		        	}
		  		        	
		  		        	/*$scope.fireHotelEvent = function(page) {
		  		        		hotelService.fireHotelClicked(page);
		  		        	}*/
		  		        	
		  		        }
		  			}
		    }]);
	    	
	    	
	    	app.directive('countryActions',['hotelService', function(hotelService) {
		  		  return {
		  			  restrict: 'C',
		  			  scope: {citylegal: '@',maxdays: '@',mindays: '@', selected: '@', approot:'@', cityname:'@', lang:'@', itinnum:'@', paCats:'=paCats', region:'@', attrnnum:'@', hotel:'@', scrollTo:'@'},
		  			  templateUrl: appWebRoot + '/shared/countryActionLinks.html',
		  			  controller: function($scope) {
		  				$scope.fireHotelEvent = function() {
	  		        		hotelService.fireHotelClicked("country page");
	  		        	}
		  			  }
		  		  }
	    	}]);
	    	
	    	app.directive('cityActionsAttracion', function() {
		  		  return {
		  		        restrict: 'C',
		  		        scope: {citylegal: '@',maxdays: '@', selected: '@', approot:'@', cityname:'@', lang:'@'},
		  		        templateUrl: appWebRoot + '/shared/cityActionLinksAttraction.html'
		  		  }
		    	});
	    	
	    	app.directive('largePaidActivity', function() {
	  		  return {
	  		        restrict: 'AEC',
	  		        scope: {
	    	        	pa: '=paidActivity',
	    	        	paLabel: '=paLabel',
	    	        	imagesCdn: '=imagesCdn',
	    	        	randomNum: '=randomNum'
	    	        },
	  		        templateUrl: appWebRoot + '/directives/activities/large-pa.html'
	  		  }
	    	});
	    	
	    	app.directive('gridPaidActivity', function() {
		  		  return {
		  		        restrict: 'AEC',
		  		        scope: {
		    	        	pa: '=paidActivity',
		    	        	paLabel: '=paLabel',
		    	        	imagesCdn: '=imagesCdn',
		    	        	randomNum: '=randomNum'
		    	        },
		  		        templateUrl: appWebRoot + '/directives/activities/grid-pa.html'
		  		  }
	    	});
	    	
	    	app.directive('relatedPaidActivity', function() {
		  		  return {
		  		        restrict: 'AEC',
		  		        scope: {
		    	        	pa: '=paidActivity',
		    	        	paLabel: '=paLabel',
		    	        	imagesCdn: '=imagesCdn',
		    	        	randomNum: '=randomNum'
		    	        },
		  		        templateUrl: appWebRoot + '/directives/activities/related-pa.html'
		  		  }
		    });
	    	
	    	
	    	app.directive('singlePaidActivity',['$location',function($location) {
		  		  return {
		  		        restrict: 'AEC',
		  		        scope: {
		    	        	pa: '=paidActivity',
		    	        	imagesCdn: '=imagesCdn',
		    	        	randomNum: '=randomNum',
		    	        	paArrOrig: '=',
		    	        	paArrSec: '=',
		    	        	selectedCategory: '=',
		    	        	isPilot: '=',
		    	        	appRoot: '=',
		    	        	cityObj: '=',
		    	        	lang: '='
		    	        },
		    	        controller: function($scope,$filter,$rootScope) {
		    	        	$scope.paLabel = "activities page";
		    	    		if ($location.url().indexOf("/itineraries") >=0) {
		    	    			$scope.paLabel = "itinerary activity tabs";
		    	    		}
		    	        	$scope.getRelatedPa = function(pa,paArrOrig,paArrSec) {
		    	        		var paArr = new Array();
		    	        		pa.showRelated = !pa.showRelated;
		    	        		if (pa.showRelated) {
		    	        			fireEvent("Activities", "compare open");
		    	        		} else {
		    	        			fireEvent("Activities", "compare close");
		    	        		}
		    	        		
		    	        		if (pa.showRelated) {
		    	        			angular.forEach(pa.relatedPaidActivityList, function (relatedPa) {
		    	        				if (!relatedPa.pa) {
		    	        					var foundPa = $filter('filter')(paArrOrig, {id: relatedPa.relatedActivityId}, true);
			    	    			    	if (foundPa.length > 0) {
			    	    			    		relatedPa.pa = foundPa[0];
			    	    			    		//paArr.push(foundPa[0]);
			    	    			    	} else {
			    	    			    		//secondary
			    	    			    		foundPa = $filter('filter')(paArrSec, {id: relatedPa.relatedActivityId}, true);
			    	    			    		if (foundPa.length > 0) {
			    	    			    			relatedPa.pa = foundPa[0];
			    	    			    			//paArr.push(foundPa[0]);
			    	    				    	}
			    	    			    	}
		    	        				}
			    	    			});
			    	    			return pa.relatedPaidActivityList;
		    	        		}
		    	    		}
		    	        	$scope.runFeaturesFilters = function(feature) {
		    	        		$rootScope.$broadcast("runFeaturesFilters",feature);
		    	        	}
			  	        },
			  	        templateUrl: appWebRoot + '/directives/activities/single-pa.html'
		  		  }
		    }]);
	    	
	    	app.directive('homePaidActivity', function() {
		  		  return {
		  		        restrict: 'AEC',
		  		        scope: {
		    	        	pa: '=paidActivity',
		    	        	paLabel: '=paLabel',
		    	        	imagesCdn: '=imagesCdn',
		    	        	randomNum: '=randomNum'
		    	        },
		  		        templateUrl: appWebRoot + '/directives/activities/home-pa.html'
		  		  }
		    	});
	    	
	    	app.directive('myThingsPaidActivity', function() {
		  		  return {
		  		        restrict: 'AEC',
		  		        scope: {
		    	        	pa: '=paidActivity',
		    	        	paLabel: '=paLabel',
		    	        	imagesCdn: '=imagesCdn',
		    	        	randomNum: '=randomNum',
		    	        	eventFrom: '=eventFrom',
		    	        	openStyle: '=openStyle'
		    	        },
		  		        templateUrl: appWebRoot + '/directives/activities/my-things-pa.html'
		  		  }
		    	});
	    	
	    	
	    	app.directive('mapActivity', function() {
	  		  return {
	  		        restrict: 'AEC',
	  		        scope: {
	    	        	pa: '=paidActivity',
	    	        	paLabel: '=paLabel',
	    	        	imagesCdn: '=imagesCdn',
	    	        	randomNum: '=randomNum'
	    	        },
	  		        templateUrl: appWebRoot + '/directives/activities/map-activity.html'
	  		  }
	    	});
	    	
    	
	    	app.directive('itineraryActivity',['redirectPaScv', function(redirectPaScv) {
		  		  return {
		  		        restrict: 'AEC',
		  		        scope: {
		    	        	pa: '=paidActivity',
		    	        	paLabel: '=paLabel',
		    	        	imagesCdn: '=imagesCdn',
		    	        	randomNum: '=randomNum',
		    	        	cityObj: '=cityObj',
		    	        	appRoot: '=appRoot',
		    	        	lang: '=lang',
		    	        	newgen: '=newgen'
		    	        },
		  		        templateUrl: appWebRoot + '/directives/activities/itinerary-activity.html',
			  		    controller: function($scope,redirectPaScv) {
				  		    $scope.redirectFunc = function(pa,label) {
			  		    		redirectPaScv.doRedirect(pa,label)
			  		    	}
			  	        }
		  		  }
		    }]);
	    	
	    	
	    	app.directive('starsRating', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        scope: {
	    	        	averageRating: '=ratingVal',
	    	        	imagesCdn: '=imagesCdn',
	    	        	size: '=starSize'
	    	        },
	    	        templateUrl: appWebRoot + '/directives/stars/stars.html'
	    	    }
	    	});
	    	
	    	app.directive('starsRatingNg', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        scope: {
	    	        	averageRating: '=ratingVal',
	    	        	imagesCdn: '=imagesCdn',
	    	        	size: '=starSize'
	    	        },
	    	        templateUrl: appWebRoot + '/directives/stars/stars-ng.html'
	    	    }
	    	});
	    	
	    	app.directive('singleAttraction', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/directives/attractions/single-attraction.html',
	    	        controller: 'singleAttractionController',
	    	        scope: {
	    	        	siteid : "=",
	    	        	//sites : "=",
	    	        	attractions : '=',
	    	        	paPass : '=',
	    	        	noOfSites : '=',
	    	        	showNearBy: '=',
	    	        	retainedScroll: '='
	    	        }
	    	    }
	    	});
	    	
	    	app.directive('attractionPaidActivity', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/directives/activities/attraction-paid-activity.html',
	    	        scope: {
	    	        	pa : '=',
	    	        	isBorderRadus: '='
	    	        }
	    	    }
	    	});
	    	
	    	app.directive('attractionRightPaidActivity', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/directives/activities/attraction-right-paid-activity.html',
	    	        scope: {
	    	        	pa : '='
	    	        }
	    	    }
	    	});
	    	
	    	app.directive('attractionModalPaidActivity', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/directives/activities/attraction-modal-paid-activity.html',
	    	        scope: {
	    	        	pa : '='
	    	        }
	    	    }
	    	});
	    	
	    	app.directive('attractionModalPaidActivityV2', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/directives/activities/attraction-modal-paid-activity-v2.html',
	    	        scope: {
	    	        	pa : '='
	    	        }
	    	    }
	    	});
	    	
	    	app.directive('singleAttractionNg', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/single-attraction.html',
	    	        controller: 'singleAttractionController',
	    	        scope: {
	    	        	siteid : "=",
	    	        	attractions : '=',
	    	        	paPass : '=',
	    	        	noOfSites : '=',
	    	        	showNearBy: '=',
	    	        	retainedScroll: '=',
	    	        	index: '='
	    	        }
	    	    }
	    	});
	    	
	    	
	    	app.directive('itineraryLargeSiteOverlay', ['$http','$compile','$templateCache',function($http,$compile,$templateCache) {
	    		return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/itinerary-large-site-overlay.html',
	    	        controller: 'singleAttractionController',
	    	        scope: {
	    	        	siteid : "="
	    	        }
	    	    }
		   }]);
	    	
	    	app.directive('itineraryLargeRestaurantOverlay', ['$http','$compile','$templateCache',function($http,$compile,$templateCache) {
	    		return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/itinerary-large-restaurant-overlay.html'
	    	    }
		   }]);
	    	
	    	app.directive('itineraryWishlist', [function() {
	    		return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/wishlist.html'
	    	    }
		   }]);
	    	
	    	app.directive('wishlistSite', [function() {
	    		return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/wishlist-site.html',
	    	        scope: {
	    	        	itrSite: '=',
	    	        	imagesCdn: '='
	    	        },controller: function($scope,$rootScope,$timeout) {
	    	        	$scope.wishlistRemoveFromWishlist = function (itrSite) {
	    	    			$scope.removeWishlistRunning = true;
	    	    			$timeout(function() {
	    	    				$scope.removeWishlistRunning = false;
	    	    				$rootScope.$broadcast("addToWishlist",'{"itrSiteId":"'+itrSite.id+'","from":"wishlist tab"}');
	    	    			}, 1200);
	    	    		}
	    	        	
	    	        	$scope.wishlistNameClick = function (itrSite,from) {
	    	        		$rootScope.$broadcast("wishlistNameClick",'{"itrSiteId":"'+itrSite.id+'","from":"'+from+'"}');
	    	        	}
	    	        	
	    	        }
	    	    }
		   }]);
	    	
	    	
	    	app.directive('itineraryPersonalSiteOverlay', [function() {
	    		return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/itinerary-personal-site-overlay.html',
	    	        controller: 'singleAttractionController',
	    	        scope: {
	    	        	siteid : "="
	    	        }
	    	    }
		   }]);
	    	
	    	
	    	app.directive('personalSite', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/directives/itinerary/personal-site.html',
	    	        scope: {
	    	        	itrSite: '=itrsite',
	    	        	imagesCdn: '=imagesCdn',
	    	        	cityObj: '=cityobj',
	    	        	appRoot: '=appRoot',
	    	        	itineraryTab: '=itineraryTab',
	    	        	isMyPlaces: '=myPlaces',
	    	        	itinerary: '=itinerary'
	    	        },controller: function($scope,$rootScope, $filter) {
	    	        	$scope.timeFormat = getTimeFormat();
	    	        	if ($scope.itinerary.startDate != null && $scope.itrSite.dayInTrip > 0) {
	    					var startDate = new Date($scope.itinerary.startDate);
	    					startDate.setDate(startDate.getDate() + $scope.itrSite.dayInTrip); 
	    					$scope.itrSite.dateStr = $filter('date')(startDate, 'fullDate');
	    				}
	    	        	$scope.changeTab = function(tabName) {
	    	        		$('.qtip').qtip('hide'); //hide qtip
	    	       			$rootScope.$broadcast("itinerary_change_tab",tabName);
	    	       		}
		  	        }
	    	    }
	    	});
	    	
	    	app.directive('itinerarySiteActions', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/directives/itinerary/itinerary-site-actions.html',
	    	        scope: {
	    	        	attraction: '=attraction',
	    	        	from : '='
	    	        },controller: function($scope,$rootScope) {
	    	        	$scope.changeTab = function(tabName) {
	    	        		$('.qtip').qtip('hide'); //hide qtip
	    	       			$rootScope.$broadcast("itinerary_change_tab",tabName);
	    	       		}
		  	        }
	    	    }
	    	});
	    	
	    	app.directive('itinerarySiteActionsNg', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        scope: {
	    	        	selectedAttractionNg: '=',
	    	        	isSmall: '=',
	    	        	from: '=',
	    	        	siteIndex: '='
	    	        },
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/site-actions-ng.html'
	    	    }
	    	});
	    	
	    	app.directive('itineraryActionsNg', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        scope: {
	    	        	from: '=',
	    	        	showHotel: '=',
	    	        	itineraryService: '='
	    	        },
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/itinerary-actions-ng.html'
	    	    }
	    	});
	    	
	    	app.directive('attractionSites', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        controller: 'attractionsController',
	    	        templateUrl: appWebRoot + '/directives/attractions/attraction-sites.html'
	    	    }
	    	});
	    	
	    	app.directive('itineraryAboveTabText', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/above-tab-text.html',
	    	        scope: {
	    	        	cityObj: '='
	    	        }
	    	    }
	    	});
	    	
	    	app.directive('itineraryTabs', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/itinerary-tabs.html'
	    	    }
	    	});
	    	
	    	app.directive('itineraryStuckTabs', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/itinerary-stuck-tabs.html'
	    	    }
	    	});
	    	
	    	app.directive('regionalAddDestinations', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/itinerary-regional/directives/add-destinations/add-destinations.html',
	    	        controller: 'addDestinationsController'
	    	    }
	    	});
	    	
	    	app.directive('activityList', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/directives/activities/activities-list.html',
	    	        /*scope: {
    		        	catLegal : '=',
    		        },*/
	    	        link: function(scope, element, attrs) {
	    	        	if (attrs.catLegal != null) {
	    	        		scope.changeActivityCat(attrs.catLegal);
	    	        	}
	    	        	
	    	        },
	    	        controller: 'activitiesController'
	    	        
	    	    }
	    	});
	    	
	    	app.directive('itinDownloadPrint1', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/directives/itinerary/download-print-ad1.html'
	    	    }
	    	});

	    	app.directive('itineraryDetails', function() {
	    		  return {
	    		        restrict: 'AEC',
	    		        controller: 'itineraryDetailsController',
	    		        templateUrl: appWebRoot + '/directives/itinerary/itinerary-details.html',
	    		        scope: {
	    		        	paPass : '=',
	    		        	transitIcon : '='
	    		        }
	    		  }
	      	});
	    	
	    	app.directive('itineraryDetailsNg', function() {
	    		  return {
	    		        restrict: 'AEC',
	    		        controller: 'itineraryDetailsController',
	    		        templateUrl: appWebRoot + '/itinerary-ng/directives/itinerary-details.html',
	    		        scope: {
	    		        	paPass : '=',
	    		        	transitIcon : '='
	    		        }
	    		  }
	      	});
	    	
	    	app.directive('itineraryAds', function() {
	    		  return {
	    		        restrict: 'AEC',
	    		        controller: 'itineraryAdsController',
	    		        templateUrl: appWebRoot + '/directives/itinerary/itinerary-ads.html',
	    		        scope: {
	    		        	newgen : '=',
	    		        }
	    		  }
	      	});
	    	
	    	app.directive('itineraryTickets', function() {
	    		  return {
	    		        restrict: 'AEC',
	    		        controller: 'itineraryTicktesController',
	    		        templateUrl: appWebRoot + '/directives/itinerary/itinerary-tickets.html',
	    		        scope: {}
	    		  }
	      	});
    	

	    	app.directive('tripOverview', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        controller: 'tripOverviewController',
	    	        templateUrl: appWebRoot + '/directives/itinerary/trip-overview.html',
	    	        scope: {}
	    	    }
	    	});
	    	
	    	app.directive('itineraryMapDrawer', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        controller: 'itineraryMapDrawerController',
	    	        templateUrl: appWebRoot + '/directives/itinerary/itinerary-drawerNmap.html',
	    	        scope: {}
	    	    }
	    	});
	    	
	    	app.directive('itineraryMapDrawerNg', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        //controller: 'itineraryMapDrawerControllerNg',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/itinerary-drawerNmap.html',
	    	        scope: {}
	    	    }
	    	});
	    	
	    	app.directive('attractionInformation', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/attraction/attraction-information.html',
	    	        scope: {
	    	        	attraction: '=',
	    	        	hideDuration: '='
	    	        }
	    	    }
	    	});
	    	
	    	app.directive('itineraryMapOverlayNg', function() {
	    	    return {
	    	        restrict: 'A',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/map-details-pane.html',
	    	        scope: {
	    	        	selectedAttractionNg: '=',
	    	        	imagesCdn: '='
	    	        },controller: function($scope,$rootScope) {
	    	        	$scope.showSite = function(site) {
	    	       			$rootScope.$broadcast("showSite",site);
	    	       		}
		  	        }
	    	    }
	    	});
	    	
	    	app.directive('itineraryMapOverlayPlaceNg', function() {
	    	    return {
	    	        restrict: 'A',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/map-details-pane-place.html',
	    	        scope: {
	    	        	selectedAttractionNg: '=',
	    	        	imagesCdn: '='
	    	        },controller: function($scope,$rootScope) {
	    	        	$scope.showSite = function(site) {
	    	       			$rootScope.$broadcast("showSite",site);
	    	       		}
		  	        }
	    	    }
	    	});

	    	
	    	app.directive('itineraryDrawers', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/itinerary-drawers.html'
	    	    }
	    	});
	    	
	    	app.directive('itineraryDrawersAttractions', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/itinerary-drawers-attractions.html',
	    	        controller: 'attractionsController'
	    	    }
	    	});
	    	
	    	app.directive('itineraryDrawersRestaurants', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/itinerary-drawers-restaurants.html'
	    	    }
	    	});
	    	
	    	app.directive('itineraryShareHeader', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        controller: 'itineraryShareCenterController',
	    	        templateUrl: appWebRoot + '/directives/itinerary/share/share-header.html'
	    	    }
	    	});
	    	
	    	app.directive('itineraryHelpBarDirective', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/directives/itinerary/itinerary-help-bar.html'
	    	    }
	    	});
	    	
	    	app.directive('itineraryNgHelpBarDirective', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        templateUrl: appWebRoot + '/itinerary-ng/directives/itinerary-help-bar.html'
	    	    }
	    	});
	    	
	    	app.directive('productReviews', function() {
		  		  return {
		  		        restrict: 'AEC',
		  		        scope: {
		    	        	review: '='
		    	        },
		    	        templateUrl: appWebRoot + '/directives/activity/review.html'
		  		  }
		    });
	    	
	    	
	    	app.directive('chatBotWindow', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        controller: 'chatBotController',
	    	        templateUrl: appWebRoot + '/directives/chatBot/chatBotMain.html'
	    	    }
	    	});
	    	
	    	app.directive('chatBotBottom', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        controller: 'chatBotIconController',
	    	        templateUrl: appWebRoot + '/directives/chatBot/bottomBot.html'
	    	    }
	    	});
	    	
	    	
	    	app.directive('travelersPlans', function() {
	    	    return {
	    	        restrict: 'AEC',
	    	        controller: 'travelersPlansController',
	    	        templateUrl: appWebRoot + '/directives/attractions/attractionNumbers.html',
	    	        scope: {
	    	        	nearbyattraction : '=',
	    	        	appRoot: '=',
	    	        	cityObj: '=',
	    	        	attractionsArr: '=',
	    	        	transitMethod: '=',
	    	        	noOfSites: '='
    		        }
	    	    }
	    	});
	    	
	    	app.directive('emailConsentCheckbox', function() {
		  		  return {
		  		        restrict: 'AEC',
		  		        templateUrl: appWebRoot + '/directives/shared/email-consent.html'
		  		  }
		    });
	    	
	    	app.directive('activityOptions',[function() {
		  		  return {
		  		        restrict: 'AEC',
		  		        controller: 'activityOptionsController',
		  		        templateUrl: appWebRoot + '/directives/activity/activity_options.html'
		  		  }
		   	}]);
	    	
	    	// route config
	        app.config(['$routeProvider','$locationProvider', function ($routeProvider,$locationProvider) {   
	            $routeProvider.
		            when('/itinerary/share', {
		            	templateUrl: appWebRoot + '/itinerary-share/itinerary-share.html',
		            	controller: 'itineraryShareController'
		            }).
	            	when('/', {
		            	templateUrl: appWebRoot + '/home/home.html',
		            	controller: 'homeContoller'
		            }).
		            when('/:lang/:city', {
		            	templateUrl: appWebRoot + '/cityHome/cityHome.html'
		            }).
		            when('/:lang/:city/destinations', {
		            	templateUrl: appWebRoot + '/destinations/destinations.html',
		            	controller: 'destinationsController'
		            }).
		            when('/:lang/:city/attractions-map', {
		            	templateUrl: appWebRoot + '/map/cityMap.html',
		            	reloadOnSearch: false
		            }).
/*		            when('/:lang/:city/:mapType', {
		            	templateUrl: appWebRoot + '/map/restaurantsMap.html',
		            	reloadOnSearch: false
		            }).*/
		            when('/:lang/:city/itinerary-by-day/:days', {
                        templateUrl: appWebRoot + '/itinerary-by-day/itinerary-by-day.html',
                        controller: 'itinByDayController'
                    }).
		            when('/:lang/:city/activities/:categoty', {
		            	templateUrl: appWebRoot + '/activities/activities.html',
		            	reloadOnSearch: false
		            }).
		            when('/:lang/:city/activity-details/activity/:visitId/:vendorId', {
		            	templateUrl: appWebRoot + '/activity/activity.html',
		            	controller: 'activityController'
		            }).
		            when('/:lang/:city/activity-details/activityoptions/:visitId/:vendorId', {
		            	templateUrl: appWebRoot + '/activity/activity_options.html',
		            	controller: 'activityOptionsController',
		            	reloadOnSearch: false
		            }).
		            when('/:lang/:city/activity-details/order-traveler-details/:visitId/:vendorId', {
		            	templateUrl: appWebRoot + '/activity/activity_order_details.html',
		            	controller: 'activityOrderBillingDetailsController'
		            }).
		            when('/:lang/:city/activity-details/order-summary/:visitId/:vendorId/:bookingId', {
		            	templateUrl: appWebRoot + '/activity/activity_order_summary.html',
		            	controller: 'activityOrderSummaryController'
		            }).
		            when('/:lang/:city/attraction-by-type/:type', {
		            	templateUrl: appWebRoot + '/attractions/attractions.html',
		            	reloadOnSearch: false
		            }).
		            when('/:lang/:city/attractions/:name', {
		            	templateUrl: appWebRoot + '/attraction/attraction.html'
		            }).
		           /* when('/itineraries-user', {
		            	templateUrl: appWebRoot + '/itinerary/itinerary-main.html',
		            	controller: 'itineraryController',
		            	reloadOnSearch: false
		            }).*/
		            when('/itineraries-user', {
		            	templateUrl: appWebRoot + '/itinerary-ng/itinerary-main.html',
		            	controller: 'itineraryControllerNg',
		            	reloadOnSearch: false
		            }).
		            when('/:lang/:city/itineraries/:itineraryName', {
		            	templateUrl: appWebRoot + '/itinerary-ng/itinerary-main.html',
		            	controller: 'itineraryControllerNg',
		            	reloadOnSearch: false
		            }).
		            when('/:lang/:city/itineraries-og/:itineraryName', {
		            	templateUrl: appWebRoot + '/itinerary/itinerary-main.html',
		            	controller: 'itineraryController',
		            	reloadOnSearch: false
		            }).
		            when('/:lang/:city/itineraries-r/:itineraryName', {
		            	templateUrl: appWebRoot + '/itinerary-regional/itinerary-regional.html',
		            	controller: 'regionalController',
		            	reloadOnSearch: false
		            }).
		            when('/itineraries-user-r', {
		            	templateUrl: appWebRoot + '/itinerary-regional/itinerary-regional.html',
		            	controller: 'regionalController',
		            	reloadOnSearch: false
		            }).
		            when('/itinerary/share-center', {
		            	templateUrl: appWebRoot + '/itinerary-share/itinerary-shareCenter.html',
		            	controller: 'itineraryShareCenterController'
		            }).
		            when('/itinerary/share-center-unsubscribe', {
		            	templateUrl: appWebRoot + '/itinerary-share/itinerary-shareCenter-unsubscribe.html',
		            	controller: 'itineraryShareCenterController'
		            }).
		            when('/:lang/:city/guides-list/all', {
		            	templateUrl: appWebRoot + '/guides/guides.html',
		            	controller: 'guidesController'
		            }).
		            when('/:lang/:city/guides/:guideLegal', {
		            	templateUrl: appWebRoot + '/guide/guide.html',
		            	controller: 'guideController'
		            }).
		            when('/:lang/tips/:guideLegal', {
		            	templateUrl: appWebRoot + '/guide/guide.html',
		            	controller: 'guideController'
		            }).
		            when('/my-plans', {
		            	templateUrl: appWebRoot + '/my-plans-page/my-plans-page.html',
		            	controller: 'myPlansPageController'
		            }).
		            when('/about', {
		            	templateUrl: appWebRoot + '/shared/general_pages/about_us.html',
		            	controller: 'generalPagesController'
		            }).
		            when('/privacy', {
		            	templateUrl: appWebRoot + '/shared/general_pages/privacy.html',
		            	controller: 'generalPagesController'
		            }).
		            when('/terms-and-conditions', {
		            	templateUrl: appWebRoot + '/shared/general_pages/terms-and-conditions.html',
		            	controller: 'generalPagesController'
		            }).
		            when('/copyright', {
		            	templateUrl: appWebRoot + '/shared/general_pages/copyright.html',
		            	controller: 'generalPagesController'
		            }).
		            when('/faq', {
		            	templateUrl: appWebRoot + '/shared/general_pages/faq.html',
		            	controller: 'generalPagesController',
		            	reloadOnSearch: false
		            }).
		            when('/emailunsubscribe', {
		            	templateUrl: appWebRoot + '/shared/general_pages/unsubscribe.html',
		            	controller: 'generalPagesController'
		            }).
		            when('/login', {
		            	templateUrl: appWebRoot + '/login/login.html',
		            	controller: 'loginController'
		            }).
		            when('/signup', {
		            	templateUrl: appWebRoot + '/login/signup.html',
		            	controller: 'loginController'
		            }).
		            when('/signup-consent', {
		            	templateUrl: appWebRoot + '/login/signup-consent.html',
		            	controller: 'loginController'
		            }).
		            when('/profile', {
		            	templateUrl: appWebRoot + '/login/profile.html',
		            	controller: 'loginController'
		            }).
		            when('/contact', {
		            	templateUrl: appWebRoot + '/shared/general_pages/contactus.html',
		            	controller: 'generalPagesController'
		            }).
		            when('/feedback', {
		            	templateUrl: appWebRoot + '/shared/general_pages/feedback.html',
		            	controller: 'generalPagesController'
		            }).
		            when('/low-price-guarantee', {
		            	templateUrl: appWebRoot + '/shared/general_pages/low-price-guarantee.html',
		            	controller: 'generalPagesController'
		            }).
		            otherwise({
		            	redirectTo: '/'
		            });
	            
	            	$locationProvider.html5Mode(true);
	            	$locationProvider.hashPrefix('!');
	            	
	        	}
	        ]);  
	        
	        
	        
	        
});


define(
    'app/core/defferedQueue',[],
    function() {
 
        function DefferedQueue(context, executeCallback, arParams) {
        	this._context = context;
        	this._executeCallback = executeCallback;
        	this._arParams = arParams;
        	this._arRes = [];
        	this._executeDoneDefferd = new $.Deferred();
            return( this );
        }
        
        DefferedQueue.prototype.execute = function() {
        	this.executeOne();
        	return this._executeDoneDefferd;
        };
        
        DefferedQueue.prototype.executeOne = function() {
        	var _self = this;
        	
        	if (this._arParams.length == 0) {
        		this._executeDoneDefferd.resolve(this._arRes);
        		return;
        	}       	
        	        	
        	var curParam = this._arParams.shift();
        	var curDeffered = new $.Deferred();
        	var str = "this._context." + this._executeCallback + "(curParam, curDeffered);";
        	eval(str);
        	
        	curDeffered.then(function(response) {
        		_self._arRes.push(response);
        		_self.executeOne();
        	},
        	function(e) {
        		_self._executeDoneDefferd.reject(e);
        	});
        };
        
        return(DefferedQueue);
    }

);

define(
    'app/core/mapServices',["app/core/defferedQueue"],
    function(DefferedQueue) {
 
        function MapServices(travelMode){
        	try {
        		var googleTravelMode = google.maps.TravelMode.WALKING;
            	if (travelMode == "transit") {
            		googleTravelMode = google.maps.TravelMode.TRANSIT;
            	} else if (travelMode == "driving") {
            		googleTravelMode = google.maps.TravelMode.DRIVING;
            	}
            	this._travelMode = googleTravelMode;
        	} catch (err) {}
        	
            return( this );
        }
        
        MapServices.getLatLng = function(latitude, longitude) {
        	return new google.maps.LatLng(latitude, longitude);
        };

        MapServices.prototype.geocode = function(address, deffered) {
        	var geocoder = new google.maps.Geocoder();
        	
            geocoder.geocode( { 'address': address}, function(results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                	deffered.resolve(results[0].geometry.location);
                } else {
                	deffered.reject();
                }
              });        	
        }; 
        
        MapServices.prototype.getBasicRouteData = function(pointsAr, type) {
        	var _self = this;
        	var deffered = new $.Deferred();
        	var chunks = [];
        	
        	// build chunks
        	var chunkSizeLimit = 20;
        	var limitedIdx = 0;
        	var curChunkAr = [];
        	for (var i=0;i<pointsAr.length;i++) {        		
        		if (limitedIdx >= chunkSizeLimit || limitedIdx == 0) {
        			curChunkAr = [];
        			chunks.push(curChunkAr);     
        			
        			if (limitedIdx >= chunkSizeLimit) {
        				curChunkAr.push(pointsAr[i - 1]);
        				limitedIdx = 1;
        			}
        		}
        		
        		curChunkAr.push(pointsAr[i]);	
        		limitedIdx++;
        	}
        	
        	var defferdQueue = new DefferedQueue(this, "getRouteDataLimited", chunks);        	
        	defferdQueue.execute().then(function(routeResArr) {       
        		var res = [];        		
        		for (var i=0;i<routeResArr.length;i++) {
        			var legs = routeResArr[i].routes[0].legs;
        			
        			for (var j=0;j<legs.length;j++) {
        				res.push({
        					durationSeconds : legs[j].duration.value,
        					distanceMeters : legs[j].distance.value,
        					travelMode : type
        				});
        			}
        		}
        		
        		deffered.resolve(res);
        	},
        	function() {
        		// dont fail, go for estimated
        		console.log("failed getting data from google directions service, going for estimated");
        		
        		_self.getEstimatedBasicRouteData(pointsAr).then(function(res) {
        			deffered.resolve(res);
        		}, 
        		function (e) {
        			deffered.reject("failed getting data from google directions service and estimated");
        		})        		
        	});
        	
        	return deffered;
        };
        
        MapServices.prototype.getRouteDataLimited = function(pointsAr, deffered) {
        	var _self = this;
        	//var directionsService = new google.maps.DirectionsService();  
        	var waypts = [];
        	var wayPointsStr = "";
        	for (var i=1;i<(pointsAr.length-1);i++) {
        	      waypts.push({
        	            location: pointsAr[i],
        	            stopover:true}
        	      );
        	      if (wayPointsStr.length >0) {
  	      			wayPointsStr += "|";
  	      		}
  	      		wayPointsStr += pointsAr[i].lat().toFixed(3) + "," + pointsAr[i].lng().toFixed(3);
        	}
        	  
        	  var request = {
        	      origin: pointsAr[0],
        	      destination: pointsAr[pointsAr.length -1],
        	      waypoints: waypts,
        	      optimizeWaypoints: false,
        	      travelMode: _self._travelMode,
        	      transitOptions: {
        	    	  departureTime: new Date()
        	      }
        	  };
        	 
        	  
        	  var originStr =  pointsAr[0].lat().toFixed(3) + "," + pointsAr[0].lng().toFixed(3);
        	  var destinationStr =  pointsAr[pointsAr.length -1].lat().toFixed(3) + "," + pointsAr[pointsAr.length -1].lng().toFixed(3);
  	      	
        	
        	  _self.getRouteFromServer(originStr,destinationStr,wayPointsStr,_self._travelMode).then(function(results) {
        		  
  	      		var obj = new Object();
  		      	try {
  		      		obj = JSON.parse(results);
  		      	} catch (ex) {
  		      		//console.log(ex);
  		      	}
  		      	if (obj.status != null && obj.status == "OK") {
  		      		deffered.resolve(obj);
  		      	} else {
  		      		//log sentry
  		      		var status = "empty";
  		      		if (obj.status != null) {
  		      			status = obj.status;
  		      		}
  		      		Raven.captureException(new Error('Failed to get directions from server: ' + status), {
  		      		  logger: status
  		      		});
  		      		deffered.reject("failed in MapServices.getRouteDataLimited");
  		      	}
  		      	
        	  });
        	 /* directionsService.route(request, function(response, status) {
				if (status == google.maps.DirectionsStatus.OK) {
					deffered.resolve(response);
					//console.log("request ok");
				}
				else {
					//console.log("failed in MapServices.getRouteDataLimited", pointsAr, response, status);
					deffered.reject("failed in MapServices.getRouteDataLimited");
				}
        	  });       */
        };
        
        MapServices.prototype.getRouteFromServer = function(origin,destination,wayPointsStr,travelMode) {
      		var deffered = new $.Deferred();
      		var url = globExprWeb["google-photos-cloudfront"] + "/api/getRoute?travelMode="+travelMode.toLowerCase()+"&origin="+origin+"&destination=" + destination + "&waypoints=" + wayPointsStr;
      		$.ajax({
    			  url: url,
    			  type: "GET",
    			  cache: true
	     	}).done(function(results) {
	  	      	deffered.resolve(results); 	      		
	  	    }).fail(function() {
	  	    	deffered.resolve("");
	  	    });
      		return deffered;
      	}
        
       /* MapServices.prototype.getRouteSitesRoutes = function(prevSite,destSite) {
        	var deffered = new $.Deferred();
        	var _self = this;
        	var directionsService = new google.maps.DirectionsService();  
       	  
        	var request = {
        		origin: prevSite,
        		destination: destSite,
        		travelMode: _self._travelMode
        	};
        	
        	directionsService.route(request, function(response, status) {
        		if (status == google.maps.DirectionsStatus.OK) {
					deffered.resolve(response);
				} else {
					deffered.reject("failed in MapServices.getRouteSitesRoutes");
				}
        	  });       
        };*/
        
        MapServices.prototype.getEstimatedBasicRouteData = function(pointsAr) {
        	var _self = this;
        	var deffered = new $.Deferred();
        	var res = [];
        	
        	for (var i=1;i<pointsAr.length;i++) {
        		var distanceMeters = this.calcDistanceBetween(pointsAr[i].lat(), pointsAr[i].lng(), pointsAr[i - 1].lat(), pointsAr[i -1].lng());
				if (_self._travelMode == "WALKING") {
					res.push({
						durationSeconds : parseInt(distanceMeters / 1.28), //estimated 1.3 meters per second rate
						distanceMeters : parseInt(distanceMeters)
					});        	
				} else if (_self._travelMode == "DRIVING") {
					res.push({
						durationSeconds : parseInt(MapServices.drivingEstimate(distanceMeters)), 
						distanceMeters : parseInt(distanceMeters)
					});        	
				} else if (_self._travelMode == "TRANSIT") {
					res.push({
						durationSeconds : parseInt(MapServices.transitEstimate(distanceMeters)), 
						distanceMeters : parseInt(distanceMeters)
					});        	
				}
				
        			
        	}
        	
        	deffered.resolve(res);
        	
        	return deffered;
        };
        
        MapServices.drivingEstimate= function(distanceMeters) {
        	var averageDrivingSpeedCity = 20000; //(20kmh)
        	var averageDrivingSpeedOutOfCity = 80000; //(80 kmh);
        	var maxDistanceInCity = 8000;
    		var averageTransitSpeedCity = 30000; //(30kmh)
        	
    		var transitDurationSeconds = 0;
			if (distanceMeters < maxDistanceInCity) {
				transitDurationSeconds += (distanceMeters / (averageDrivingSpeedCity/60)) * 60; 
			} else {
				transitDurationSeconds += (maxDistanceInCity / (averageDrivingSpeedCity/60)) * 60; 
				transitDurationSeconds += ((distanceMeters-maxDistanceInCity) / (averageDrivingSpeedOutOfCity/60) * 60); //80 KMH
			}
			if (transitDurationSeconds <= 60) {
				//default to 3 minutes drive if it's short
				transitDurationSeconds <= 180;
			}
			return transitDurationSeconds;
        }
        
        MapServices.transitEstimate = function(distanceMeters) {
        	var averageDrivingSpeedCity = 20000; //(20kmh)
        	var averageDrivingSpeedOutOfCity = 80000; //(80 kmh);
        	var maxDistanceInCity = 8000;
    		var averageTransitSpeedCity = 30000; //(30kmh)
        	
        	var transitDurationSeconds = 0;
			if (distanceMeters < maxDistanceInCity) {
				transitDurationSeconds += (distanceMeters / (averageTransitSpeedCity/60)) * 60;
			} else {
				transitDurationSeconds += (maxDistanceInCity / (averageTransitSpeedCity/60)) * 60;
				transitDurationSeconds += ((distanceMeters-maxDistanceInCity) / (averageDrivingSpeedOutOfCity/60) * 60); //80 KMH
			}
			if (transitDurationSeconds > 60) {
				transitDurationSeconds += 15*60 //add extra 15 min;
			} else {
				//use walking in this case
				transitDurationSeconds = parseInt(distanceMeters / 1.28)
			}
			
			return transitDurationSeconds;
        }
        
        MapServices.prototype.toRad = function(Value) {
		    /** Converts numeric degrees to radians */
		    return Value * Math.PI / 180;
		};			
        
        MapServices.prototype.calcDistanceBetween = function(lat1, lon1, lat2, lon2) {
		    var R = 6371; // km
		    var dLat = this.toRad(lat2-lat1);
		    var dLon = this.toRad(lon2-lon1); 
		    var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
		            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * 
		            Math.sin(dLon/2) * Math.sin(dLon/2); 
		    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
		    var d = R * c;
		    return d * 1000  * 1.3; // meters. the 1.3 is relation between air distance and route distance
		};

		function toRad(Value) {
		    /** Converts numeric degrees to radians */
		    return Value * Math.PI / 180;
		}	
        
        MapServices.prototype.getDistanceMatrix = function(originArr, distanceArr) {
        	var deffered = new $.Deferred();
        	var service = new google.maps.DistanceMatrixService();
        	var _self = this;
        	
        	service.getDistanceMatrix( {
        	    origins: originArr,
        	    destinations:distanceArr,
        	    unitSystem: getMapUnitSystem(),
        	    travelMode: google.maps.TravelMode.WALKING
        		}, 
        		function(response, status) {
        			if (status == google.maps.DistanceMatrixStatus.OK) {
        				deffered.resolve(response);
        			}
        			else {
        				deffered.reject(response);
        			}
        		}
        	);   
        	
        	return deffered;
        };
        
        
        return(MapServices);
    }

);

define(
    'app/mobile/core/mapLoader',[ ],
    function () {
    	function MapLoader() {
    		this._mapLoadedDeferred = null;
    		return( this );
    	}    	
    	
        MapLoader.prototype.load = function() {
        	if (this._mapLoadedDeferred != null) {
        		return this._mapLoadedDeferred;
        	}
        	
        	this._mapLoadedDeferred = new $.Deferred();
        	// add google maps
          	var script = document.createElement('script');
          	script.type = 'text/javascript';
          	script.src = 'https://maps.googleapis.com/maps/api/js?libraries=places,geometry&callback=mapReady&key=' + googleMapsKey;
          	document.body.appendChild(script);  	
          	
          	return this._mapLoadedDeferred;
        };
        
        MapLoader.prototype.setMapLoaded = function() {
        	this._mapLoadedDeferred.resolve();
        }
         
        var instance = new MapLoader();
        
        MapLoader.getInstance = function() {
        	return instance;
        };
         
        return(MapLoader);
    }
);

function mapReady() {
	require([	"app/mobile/core/mapLoader"], 
    function( MapLoader) {		
		MapLoader.getInstance().setMapLoaded();
	});										
}
;
define('ngApp/website/home/homeContoller',["ngApp/website/main/main","app/core/mapServices","app/mobile/core/mapLoader"],
    function(main,MapServices,MapLoader) {
    var app = angular.module('visitacity');

/*	app.filter('filterCities', function(){
	   	 return function(citiesArr, input) {
	   	    var array = [];
	   	    for(var i=0;i<citiesArr.length;i++) {
	   	        if (citiesArr[i].name.indexOf(input) == 0) {
	   	        	array.push(citiesArr[i]);
	   	        }
	   	    }

	   	    return array;
	   	 }
	   }); */
	
	app.filter('filterHomeCities', function(){
	   	 return function(continent,isMore) {
	   		if (continent.citiesArr == null) {
	   			return;
	   		}
	   		if ($(window).width() < 992) {
	   			return isMore ? continent.citiesMoreArriPad : continent.citiesArriPad
	   		} else {
	   			return isMore ? continent.citiesMoreArr : continent.citiesArr
	   			
	   		}

	   	 }
	   }); 
	
	
	app.directive('regularCity', function() {
		  return {
		        restrict: 'AEC',
		        transclue: true,
		        scope: {
		        		city: '=',
		        		imagesCdn: '=',
		        		lang: '=',
		        		appRoot: '=',
		        		imageId: '=',
		        		classType: '='
		        },
		        templateUrl: appWebRoot + '/home/regular-city.html'
		  }
	});
	
	/**
	 * Handle select if typing before the page fully loads
	 */
	app.directive('typeaheadAsSelect', [function() {
	    return {
	        restrict: 'A',
	        require: ['ngModel'],
	        link: function(scope, $element, attrs, ctrls){
	        	scope.$on('customFilter', function(){
		            ctrls[0].$setViewValue(scope.customSelectedTmp);
	            }); 
	        	scope.$on("$destroy",function() {
	        		$( window ).off("customFilter");
	    		});   
	        }
	    }
	}]);

	
	
	app.controller('homeContoller', ['$scope','$http','$q','$filter','$location','GetCitiesService','GlobalDefs','CitySearch','$timeout','$rootScope','$window','$routeParams',
	                                 function($scope, $http, $q, $filter, $location, GetCitiesService,GlobalDefs,CitySearch,$timeout,$rootScope,$window,$routeParams) {
		/*$(window).resize(function() {
			$scope.$apply();

		});*/
		
		var to1 = null;
		$scope.customSelected = null;
		$scope.customSelectedTmp = null;
		$scope.citiesArr = null;
		$scope.lastVisitedCities = new Array();
		$scope.popularCitiesArr = new Array();
		$scope.paArr = null;
		$scope.paRedirect = null;
		$scope.curruncyMgr = null;
		$scope.citySearch = CitySearch;
		$scope.lang = getActiveLang(true);
		//$scope.lang = $routeParams.lang;
		$scope.sameCityPa = true;
		$scope.continetArr = [/*{
        	name: 'Popular Destinations',
        	shortName: 'Popular'		
        },*/{
			name: 'Europe',
        	shortName: 'Europe',
        	discoverTitle: 'Discover Europe',
        	discoverSubTitle: 'With **x** Travel Guides',
        	discoverSubTitleNum: "550+",
        	doShow: false,
        	id: 1
		},{
			name: 'US',
        	shortName: 'US & Canada',
        	discoverTitle: 'United States & Canada',
        	discoverSubTitle: '**x** Travel Guides',
        	discoverSubTitleNum: "300+",
        	doShow: false,
        	id: 2
		},{
			name: 'Asia',
        	shortName: 'Asia',
        	discoverTitle: 'Discover Asia',
        	discoverSubTitle: 'With **x** Travel Guides',
        	discoverSubTitleNum: "200+",
        	doShow: false,
        	id: 3
		},{
			name: 'Australia',
        	shortName: 'Australia & New Zealand',
        	discoverTitle: 'Australia & New Zealand',
        	discoverSubTitle: '**x** Travel Guides',
        	discoverSubTitleNum: "100+",
        	doShow: false,
        	id: 4
		},{
			name: 'Central/South America',
        	shortName: 'Central & South America',
        	discoverTitle: 'Discover Central & South America',
        	discoverSubTitle: 'With **x** Travel Guides',
        	discoverSubTitleNum: "150+",
        	doShow: false,
        	id: 5
		},{
			name: 'Africa',
        	shortName: 'Africa & Middle East',
        	discoverTitle: 'Africa & The Middle East',
        	discoverSubTitle: '**x** Travel Guides',
        	discoverSubTitleNum: "50+",
        	doShow: false,
        	id: 6
		}];
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		
		var userSelectedPath = "";
		if ($scope.lang != "en") {
			userSelectedPath = "&lang=" + $scope.lang;
		}
		$scope.paArr = new Array();
		$scope.lastVisitedCities = new Array();
		var ajaxLoadTiming = new TrackTiming("PageCoreLoadNew", "ajax_data_time"); 
		var callA = GetCitiesService.async();
		//var callB = $q.defer();
		var callB = $http.get(appRoot + '/api/user/getUserSelectedActivities?rnd='+new Date().getTime() + userSelectedPath, {timeout: 3000}).then(
				function (result) {
			    	$scope.paArr = $filter('limitTo')(result.data.lstPaidActivity,4);
   				 	$scope.lastVisitedCities = $filter('limitTo')(result.data.lastCities,3);
			    }, function (rejected) {
			    	fireEvent("homepage", "timeout loading user activities");
			    	//cash it for the next time anyhow	
			    	$http.get(appRoot + '/api/user/getUserSelectedActivities?rnd='+new Date().getTime() + userSelectedPath);
			    }
		);
		var callC = MapLoader.getInstance().load();
		
		$q.all(new Array(callA, callB,callC)).then(
    			 function(results) {
    				 ajaxLoadTiming.send();
    				 //$scope.citiesArr = $filter('filter')(results[0], function(value, index){if (value.imageOpt != null && value.status == 'production'){return true}}, true);
    				 $scope.citiesArr = results[0];

    				 $scope.productionCities = $filter('filter')(results[0], function(value, index){if (value.imageOpt != null && value.status == 'production'){return true}}, true);
    				 
    				 var prevCityId = null;
    				 for (var i=0;i<$scope.paArr.length;i++) {
    					 if (prevCityId != null) {
    						 if ($scope.paArr[i].cityId != prevCityId) {
    							 $scope.sameCityPa = false;
    						 }
    					 }
    					 prevCityId = $scope.paArr[i].cityId;
    					 try {
    						 updateCityLegal($scope.paArr[i]);
    					 } catch (ex) {}
    				 }

    				 $scope.populatePopularCities();
    				 
    				 for (var i=0;i<$scope.continetArr.length;i++) {
    					 var curCont = $scope.continetArr[i];
    					 //get cur continent and exclude my popular
    					 var contCities = $filter('filter')($scope.citiesArr, function(value, index) {
    						 	if (value.destinationOverrideId != null && value.region != null) {
    						 		return false;
    						 	}
    						 	if (value.continent == curCont.name && value.status == 'production' && 
    						 			$filter('filter')($scope.popularCitiesArr,{id:value.id}, true).length == 0){
    						 		return true
    						 	}
    						 	
    					 		}, true);
    					 if (contCities.length < 4) {
    						 contCities = $filter('filter')($scope.citiesArr, function(value, index) {
     						 	if (value.destinationOverrideId != null && value.region != null) {
     						 		return false;
     						 	}
     						 	if (value.continent == curCont.name && value.status == 'production'){
     						 		return true
     						 	}
     						 	
     					 		}, true);
    					 }
    					 contCities = $filter('orderBy')(contCities, "numOfUserPlans", true); //sort by number of plans
    					 $scope.getCityArr(contCities,curCont,false);
    					 $scope.getCityArr(contCities,curCont,true);
    				 }
    				 
    				 
    				 
    				 require(
	    	    	    ["app/extensions/core/currency"],
	    	    	    function(CurrencyMgr) {
	    	    	    	$scope.curruncyMgr = new CurrencyMgr();
	    	    	    	for (var i=0;i<$scope.paArr.length;i++) {
	       					 	$scope.curruncyMgr.fixCurrencyElement(document.getElementById("pa_" + $scope.paArr[i].id));
	       					 	if ($scope.paArr[i].priceBeforeDiscount != null) {
	       					 	$scope.curruncyMgr.fixCurrencyElement(document.getElementById("pabefore_" + $scope.paArr[i].id));
	       					 	}
	       					 
	       				 	}
	    	    	});
    				 
    				 if ($scope.customSelected != null) {
    					 $scope.customSelectedTmp = $scope.customSelected;
    					 $scope.customSelected = null;
    					 to1 = $timeout(function() {
    						 $rootScope.$broadcast('customFilter');
    						 $scope.customSelected = $scope.customSelectedTmp;
    					 }, 1000);	
     				 }
    				 $window.document.title = "Visit A City: Create Your Personal Travel Guide";
    				 individualPageLoadTiming.send();
    				 
    				 var trustbox = document.getElementById('trustbox');
    				 window.Trustpilot.loadFromElement(trustbox);
    			 },
    	         function(errors) {
    				 console.log('err');
    			 }
    	);
		
		$scope.$on("$destroy",function() {
			$timeout.cancel( to1 );
		 });    
		
		$scope.populatePopularCities = function() {
			var getArr = [];
			var doFixOrder = false;
			if ($scope.lastVisitedCities.length == 3) {
				getArr = [2,2,1];
				doFixOrder = true;
			} else if ($scope.lastVisitedCities.length == 2) {
				getArr = [3,2];
				
			} else {
				getArr = [5];
			}
			//handle no cities;
			if ($scope.lastVisitedCities.length == 0) {
				$scope.lastVisitedCities.push($scope.productionCities[0].id)
			}
			for (var i=0;i<$scope.lastVisitedCities.length;i++) {
				var curCity = $filter('filter')($scope.productionCities,{id:$scope.lastVisitedCities[i]}, true)[0]; //get the city
				if (curCity == null) {
					//handle on work cities
					continue;
				}
				$scope.fixPopularNearBy(curCity);
				var popularNearByArr = curCity.popularNearby.split(",");
				var num = getArr[i];
				for (var j=0;j<num;j++) {
					var pushCity = $filter('filter')($scope.productionCities,{id:parseInt(popularNearByArr[j])}, true)[0]; //get the city
					//do not include duplicates
					if (pushCity != null) {
						var foundCity = $filter('filter')($scope.popularCitiesArr,{id:pushCity.id}, true);
						if (foundCity == 0) {
							$scope.popularCitiesArr.push(pushCity);
						} else {
							//found duplicate, get another
							num++;
						}
					} else {
						num++;
					}
					
				}
			}
			if (doFixOrder) {
				//in case we have 2 cities, we want to switch 4 and 5 to get the proper positions
				var pos3 = $scope.popularCitiesArr[3];
				var pos4 = $scope.popularCitiesArr[4];
				$scope.popularCitiesArr[3] = pos4;
				$scope.popularCitiesArr[4] = pos3;
			}
			
		}
		
		$scope.fixPopularNearBy = function(curCity) {
			if (curCity.popularNearby != null && curCity.popularNearby.length > 0) {
				return;
			} else {
				var mapSvc = new MapServices();
				//get nearby cities
				var productionArr = $scope.productionCities;
				productionArr.sort(function(a, b) {
		    		var diffA = mapSvc.calcDistanceBetween(curCity.latitude, curCity.longitude, a.latitude, a.longitude);
		    		var diffB = mapSvc.calcDistanceBetween(curCity.latitude, curCity.longitude, b.latitude, b.longitude);
		    		if (isNaN(diffA) || isNaN(diffB)) {
		    			return -1;
		    		} else {
		    			return diffA - diffB;
		    		}
		    	});
				var popularNearbyStr = "";
				for (var i=0;i<productionArr.length;i++) {
					popularNearbyStr += productionArr[i].id + ",";
				}
				curCity.popularNearby = popularNearbyStr;
			}
		}
    	   
    	//Get first 8 and next 8 cities
		$scope.getCityArr = function(arr,curCont,isIpadPortrait) {
			var resArr = new Array();
			var tmpArr = angular.copy(arr,tmpArr);
			
			var devideBy = 4;
			var spliceAt = 12;
			if (isIpadPortrait) {
				devideBy = 3;
				spliceAt = 9;
			}
			while (tmpArr.length % devideBy != 0) {
				tmpArr.pop();
			}
			
			tmpArr.splice(spliceAt,tmpArr.length-spliceAt);
			resArr[0] = angular.copy(tmpArr);
			var tmpArr = angular.copy(arr,tmpArr);
			while (tmpArr.length % devideBy != 0) {
				tmpArr.pop();
			}
			tmpArr.splice(0, spliceAt);
			resArr[1] = angular.copy(tmpArr);
			if (isIpadPortrait) {
				curCont.citiesArriPad = resArr[0];
				curCont.citiesMoreArriPad = resArr[1];
			} else {
				curCont.citiesArr = resArr[0];
				curCont.citiesMoreArr = resArr[1];
			}
			
			return resArr;
		}
		
    	function updateCityLegal(pa) {
    		for (var i=0;i<$scope.citiesArr.length;i++) {
    			if (pa.cityId == $scope.citiesArr[i].id) {
    				pa.cityLegalName = $scope.citiesArr[i].legalName;
    				pa.cityName = $scope.citiesArr[i].name;
    				break;
    			}
    		}
    	}
    	
    	$scope.animateShowContinent = function(continent) {
    		continent.doShow = true;
    		var elem = $("#continent_" + continent.id);
    		 $(elem).parent().next("div").css("height", "100%");
    		   var h = $(elem).parent().next("div").height();
    		   $(elem).parent().next("div").css("height", "0px");
    		   $(elem).parent().next("div").animate({height: h}, 5000, function() {
    		   });
    	}
    	
    	/**
    	 * Scroll to the continent you want
    	 */
    	$scope.gotoElement = function (eID){
    		$("html, body").animate({
            	scrollTop:  $("#" + eID).offset().top
            }, 1000);
	      
	    };
    	    
	    require(["app/extensions/core/paidActivityRedirect"],
                function(PaidActivityRedirect) {
		 					$scope.paRedirect = PaidActivityRedirect;                                         
                         }
	    		);                        
               
	    $scope.redirectPa = function(paData) {
			$scope.paRedirect.redirect(paData.vendor, paData.title, paData.link, null);
		}
    	    

    	
		
	}]);
	
});	

    	

/* qTip2 v2.2.0 tips modal viewport svg imagemap ie6 | qtip2.com | Licensed MIT, GPL | Thu Nov 21 2013 20:34:59 */
(function(t,e,i){(function(t){"use strict";"function"==typeof define&&define.amd?define('jquery.qtip.min',["jquery"],t):jQuery&&!jQuery.fn.qtip&&t(jQuery)})(function(s){"use strict";function o(t,e,i,o){this.id=i,this.target=t,this.tooltip=E,this.elements={target:t},this._id=X+"-"+i,this.timers={img:{}},this.options=e,this.plugins={},this.cache={event:{},target:s(),disabled:k,attr:o,onTooltip:k,lastClass:""},this.rendered=this.destroyed=this.disabled=this.waiting=this.hiddenDuringWait=this.positioning=this.triggering=k}function n(t){return t===E||"object"!==s.type(t)}function r(t){return!(s.isFunction(t)||t&&t.attr||t.length||"object"===s.type(t)&&(t.jquery||t.then))}function a(t){var e,i,o,a;return n(t)?k:(n(t.metadata)&&(t.metadata={type:t.metadata}),"content"in t&&(e=t.content,n(e)||e.jquery||e.done?e=t.content={text:i=r(e)?k:e}:i=e.text,"ajax"in e&&(o=e.ajax,a=o&&o.once!==k,delete e.ajax,e.text=function(t,e){var n=i||s(this).attr(e.options.content.attr)||"Loading...",r=s.ajax(s.extend({},o,{context:e})).then(o.success,E,o.error).then(function(t){return t&&a&&e.set("content.text",t),t},function(t,i,s){e.destroyed||0===t.status||e.set("content.text",i+": "+s)});return a?n:(e.set("content.text",n),r)}),"title"in e&&(n(e.title)||(e.button=e.title.button,e.title=e.title.text),r(e.title||k)&&(e.title=k))),"position"in t&&n(t.position)&&(t.position={my:t.position,at:t.position}),"show"in t&&n(t.show)&&(t.show=t.show.jquery?{target:t.show}:t.show===W?{ready:W}:{event:t.show}),"hide"in t&&n(t.hide)&&(t.hide=t.hide.jquery?{target:t.hide}:{event:t.hide}),"style"in t&&n(t.style)&&(t.style={classes:t.style}),s.each(R,function(){this.sanitize&&this.sanitize(t)}),t)}function h(t,e){for(var i,s=0,o=t,n=e.split(".");o=o[n[s++]];)n.length>s&&(i=o);return[i||t,n.pop()]}function l(t,e){var i,s,o;for(i in this.checks)for(s in this.checks[i])(o=RegExp(s,"i").exec(t))&&(e.push(o),("builtin"===i||this.plugins[i])&&this.checks[i][s].apply(this.plugins[i]||this,e))}function c(t){return G.concat("").join(t?"-"+t+" ":" ")}function d(i){return i&&{type:i.type,pageX:i.pageX,pageY:i.pageY,target:i.target,relatedTarget:i.relatedTarget,scrollX:i.scrollX||t.pageXOffset||e.body.scrollLeft||e.documentElement.scrollLeft,scrollY:i.scrollY||t.pageYOffset||e.body.scrollTop||e.documentElement.scrollTop}||{}}function p(t,e){return e>0?setTimeout(s.proxy(t,this),e):(t.call(this),i)}function u(t){return this.tooltip.hasClass(ee)?k:(clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this.timers.show=p.call(this,function(){this.toggle(W,t)},this.options.show.delay),i)}function f(t){if(this.tooltip.hasClass(ee))return k;var e=s(t.relatedTarget),i=e.closest(U)[0]===this.tooltip[0],o=e[0]===this.options.show.target[0];if(clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this!==e[0]&&"mouse"===this.options.position.target&&i||this.options.hide.fixed&&/mouse(out|leave|move)/.test(t.type)&&(i||o))try{t.preventDefault(),t.stopImmediatePropagation()}catch(n){}else this.timers.hide=p.call(this,function(){this.toggle(k,t)},this.options.hide.delay,this)}function g(t){return this.tooltip.hasClass(ee)||!this.options.hide.inactive?k:(clearTimeout(this.timers.inactive),this.timers.inactive=p.call(this,function(){this.hide(t)},this.options.hide.inactive),i)}function m(t){this.rendered&&this.tooltip[0].offsetWidth>0&&this.reposition(t)}function v(t,i,o){s(e.body).delegate(t,(i.split?i:i.join(he+" "))+he,function(){var t=T.api[s.attr(this,H)];t&&!t.disabled&&o.apply(t,arguments)})}function y(t,i,n){var r,h,l,c,d,p=s(e.body),u=t[0]===e?p:t,f=t.metadata?t.metadata(n.metadata):E,g="html5"===n.metadata.type&&f?f[n.metadata.name]:E,m=t.data(n.metadata.name||"qtipopts");try{m="string"==typeof m?s.parseJSON(m):m}catch(v){}if(c=s.extend(W,{},T.defaults,n,"object"==typeof m?a(m):E,a(g||f)),h=c.position,c.id=i,"boolean"==typeof c.content.text){if(l=t.attr(c.content.attr),c.content.attr===k||!l)return k;c.content.text=l}if(h.container.length||(h.container=p),h.target===k&&(h.target=u),c.show.target===k&&(c.show.target=u),c.show.solo===W&&(c.show.solo=h.container.closest("body")),c.hide.target===k&&(c.hide.target=u),c.position.viewport===W&&(c.position.viewport=h.container),h.container=h.container.eq(0),h.at=new z(h.at,W),h.my=new z(h.my),t.data(X))if(c.overwrite)t.qtip("destroy",!0);else if(c.overwrite===k)return k;return t.attr(Y,i),c.suppress&&(d=t.attr("title"))&&t.removeAttr("title").attr(se,d).attr("title",""),r=new o(t,c,i,!!l),t.data(X,r),t.one("remove.qtip-"+i+" removeqtip.qtip-"+i,function(){var t;(t=s(this).data(X))&&t.destroy(!0)}),r}function b(t){return t.charAt(0).toUpperCase()+t.slice(1)}function w(t,e){var s,o,n=e.charAt(0).toUpperCase()+e.slice(1),r=(e+" "+be.join(n+" ")+n).split(" "),a=0;if(ye[e])return t.css(ye[e]);for(;s=r[a++];)if((o=t.css(s))!==i)return ye[e]=s,o}function _(t,e){return Math.ceil(parseFloat(w(t,e)))}function x(t,e){this._ns="tip",this.options=e,this.offset=e.offset,this.size=[e.width,e.height],this.init(this.qtip=t)}function q(t,e){this.options=e,this._ns="-modal",this.init(this.qtip=t)}function C(t){this._ns="ie6",this.init(this.qtip=t)}var T,j,z,M,I,W=!0,k=!1,E=null,S="x",L="y",A="width",B="height",D="top",F="left",O="bottom",P="right",N="center",$="flipinvert",V="shift",R={},X="qtip",Y="data-hasqtip",H="data-qtip-id",G=["ui-widget","ui-tooltip"],U="."+X,Q="click dblclick mousedown mouseup mousemove mouseleave mouseenter".split(" "),J=X+"-fixed",K=X+"-default",Z=X+"-focus",te=X+"-hover",ee=X+"-disabled",ie="_replacedByqTip",se="oldtitle",oe={ie:function(){for(var t=3,i=e.createElement("div");(i.innerHTML="<!--[if gt IE "+ ++t+"]><i></i><![endif]-->")&&i.getElementsByTagName("i")[0];);return t>4?t:0/0}(),iOS:parseFloat((""+(/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent)||[0,""])[1]).replace("undefined","3_2").replace("_",".").replace("_",""))||k};j=o.prototype,j._when=function(t){return s.when.apply(s,t)},j.render=function(t){if(this.rendered||this.destroyed)return this;var e,i=this,o=this.options,n=this.cache,r=this.elements,a=o.content.text,h=o.content.title,l=o.content.button,c=o.position,d=("."+this._id+" ",[]);return s.attr(this.target[0],"aria-describedby",this._id),this.tooltip=r.tooltip=e=s("<div/>",{id:this._id,"class":[X,K,o.style.classes,X+"-pos-"+o.position.my.abbrev()].join(" "),width:o.style.width||"",height:o.style.height||"",tracking:"mouse"===c.target&&c.adjust.mouse,role:"alert","aria-live":"polite","aria-atomic":k,"aria-describedby":this._id+"-content","aria-hidden":W}).toggleClass(ee,this.disabled).attr(H,this.id).data(X,this).appendTo(c.container).append(r.content=s("<div />",{"class":X+"-content",id:this._id+"-content","aria-atomic":W})),this.rendered=-1,this.positioning=W,h&&(this._createTitle(),s.isFunction(h)||d.push(this._updateTitle(h,k))),l&&this._createButton(),s.isFunction(a)||d.push(this._updateContent(a,k)),this.rendered=W,this._setWidget(),s.each(R,function(t){var e;"render"===this.initialize&&(e=this(i))&&(i.plugins[t]=e)}),this._unassignEvents(),this._assignEvents(),this._when(d).then(function(){i._trigger("render"),i.positioning=k,i.hiddenDuringWait||!o.show.ready&&!t||i.toggle(W,n.event,k),i.hiddenDuringWait=k}),T.api[this.id]=this,this},j.destroy=function(t){function e(){if(!this.destroyed){this.destroyed=W;var t=this.target,e=t.attr(se);this.rendered&&this.tooltip.stop(1,0).find("*").remove().end().remove(),s.each(this.plugins,function(){this.destroy&&this.destroy()}),clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this._unassignEvents(),t.removeData(X).removeAttr(H).removeAttr(Y).removeAttr("aria-describedby"),this.options.suppress&&e&&t.attr("title",e).removeAttr(se),this._unbind(t),this.options=this.elements=this.cache=this.timers=this.plugins=this.mouse=E,delete T.api[this.id]}}return this.destroyed?this.target:(t===W&&"hide"!==this.triggering||!this.rendered?e.call(this):(this.tooltip.one("tooltiphidden",s.proxy(e,this)),!this.triggering&&this.hide()),this.target)},M=j.checks={builtin:{"^id$":function(t,e,i,o){var n=i===W?T.nextid:i,r=X+"-"+n;n!==k&&n.length>0&&!s("#"+r).length?(this._id=r,this.rendered&&(this.tooltip[0].id=this._id,this.elements.content[0].id=this._id+"-content",this.elements.title[0].id=this._id+"-title")):t[e]=o},"^prerender":function(t,e,i){i&&!this.rendered&&this.render(this.options.show.ready)},"^content.text$":function(t,e,i){this._updateContent(i)},"^content.attr$":function(t,e,i,s){this.options.content.text===this.target.attr(s)&&this._updateContent(this.target.attr(i))},"^content.title$":function(t,e,s){return s?(s&&!this.elements.title&&this._createTitle(),this._updateTitle(s),i):this._removeTitle()},"^content.button$":function(t,e,i){this._updateButton(i)},"^content.title.(text|button)$":function(t,e,i){this.set("content."+e,i)},"^position.(my|at)$":function(t,e,i){"string"==typeof i&&(t[e]=new z(i,"at"===e))},"^position.container$":function(t,e,i){this.rendered&&this.tooltip.appendTo(i)},"^show.ready$":function(t,e,i){i&&(!this.rendered&&this.render(W)||this.toggle(W))},"^style.classes$":function(t,e,i,s){this.rendered&&this.tooltip.removeClass(s).addClass(i)},"^style.(width|height)":function(t,e,i){this.rendered&&this.tooltip.css(e,i)},"^style.widget|content.title":function(){this.rendered&&this._setWidget()},"^style.def":function(t,e,i){this.rendered&&this.tooltip.toggleClass(K,!!i)},"^events.(render|show|move|hide|focus|blur)$":function(t,e,i){this.rendered&&this.tooltip[(s.isFunction(i)?"":"un")+"bind"]("tooltip"+e,i)},"^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)":function(){if(this.rendered){var t=this.options.position;this.tooltip.attr("tracking","mouse"===t.target&&t.adjust.mouse),this._unassignEvents(),this._assignEvents()}}}},j.get=function(t){if(this.destroyed)return this;var e=h(this.options,t.toLowerCase()),i=e[0][e[1]];return i.precedance?i.string():i};var ne=/^position\.(my|at|adjust|target|container|viewport)|style|content|show\.ready/i,re=/^prerender|show\.ready/i;j.set=function(t,e){if(this.destroyed)return this;var o,n=this.rendered,r=k,c=this.options;return this.checks,"string"==typeof t?(o=t,t={},t[o]=e):t=s.extend({},t),s.each(t,function(e,o){if(n&&re.test(e))return delete t[e],i;var a,l=h(c,e.toLowerCase());a=l[0][l[1]],l[0][l[1]]=o&&o.nodeType?s(o):o,r=ne.test(e)||r,t[e]=[l[0],l[1],o,a]}),a(c),this.positioning=W,s.each(t,s.proxy(l,this)),this.positioning=k,this.rendered&&this.tooltip[0].offsetWidth>0&&r&&this.reposition("mouse"===c.position.target?E:this.cache.event),this},j._update=function(t,e){var i=this,o=this.cache;return this.rendered&&t?(s.isFunction(t)&&(t=t.call(this.elements.target,o.event,this)||""),s.isFunction(t.then)?(o.waiting=W,t.then(function(t){return o.waiting=k,i._update(t,e)},E,function(t){return i._update(t,e)})):t===k||!t&&""!==t?k:(t.jquery&&t.length>0?e.empty().append(t.css({display:"block",visibility:"visible"})):e.html(t),this._waitForContent(e).then(function(t){t.images&&t.images.length&&i.rendered&&i.tooltip[0].offsetWidth>0&&i.reposition(o.event,!t.length)}))):k},j._waitForContent=function(t){var e=this.cache;return e.waiting=W,(s.fn.imagesLoaded?t.imagesLoaded():s.Deferred().resolve([])).done(function(){e.waiting=k}).promise()},j._updateContent=function(t,e){this._update(t,this.elements.content,e)},j._updateTitle=function(t,e){this._update(t,this.elements.title,e)===k&&this._removeTitle(k)},j._createTitle=function(){var t=this.elements,e=this._id+"-title";t.titlebar&&this._removeTitle(),t.titlebar=s("<div />",{"class":X+"-titlebar "+(this.options.style.widget?c("header"):"")}).append(t.title=s("<div />",{id:e,"class":X+"-title","aria-atomic":W})).insertBefore(t.content).delegate(".qtip-close","mousedown keydown mouseup keyup mouseout",function(t){s(this).toggleClass("ui-state-active ui-state-focus","down"===t.type.substr(-4))}).delegate(".qtip-close","mouseover mouseout",function(t){s(this).toggleClass("ui-state-hover","mouseover"===t.type)}),this.options.content.button&&this._createButton()},j._removeTitle=function(t){var e=this.elements;e.title&&(e.titlebar.remove(),e.titlebar=e.title=e.button=E,t!==k&&this.reposition())},j.reposition=function(i,o){if(!this.rendered||this.positioning||this.destroyed)return this;this.positioning=W;var n,r,a=this.cache,h=this.tooltip,l=this.options.position,c=l.target,d=l.my,p=l.at,u=l.viewport,f=l.container,g=l.adjust,m=g.method.split(" "),v=h.outerWidth(k),y=h.outerHeight(k),b=0,w=0,_=h.css("position"),x={left:0,top:0},q=h[0].offsetWidth>0,C=i&&"scroll"===i.type,T=s(t),j=f[0].ownerDocument,z=this.mouse;if(s.isArray(c)&&2===c.length)p={x:F,y:D},x={left:c[0],top:c[1]};else if("mouse"===c)p={x:F,y:D},!z||!z.pageX||!g.mouse&&i&&i.pageX?i&&i.pageX||((!g.mouse||this.options.show.distance)&&a.origin&&a.origin.pageX?i=a.origin:(!i||i&&("resize"===i.type||"scroll"===i.type))&&(i=a.event)):i=z,"static"!==_&&(x=f.offset()),j.body.offsetWidth!==(t.innerWidth||j.documentElement.clientWidth)&&(r=s(e.body).offset()),x={left:i.pageX-x.left+(r&&r.left||0),top:i.pageY-x.top+(r&&r.top||0)},g.mouse&&C&&z&&(x.left-=(z.scrollX||0)-T.scrollLeft(),x.top-=(z.scrollY||0)-T.scrollTop());else{if("event"===c?i&&i.target&&"scroll"!==i.type&&"resize"!==i.type?a.target=s(i.target):i.target||(a.target=this.elements.target):"event"!==c&&(a.target=s(c.jquery?c:this.elements.target)),c=a.target,c=s(c).eq(0),0===c.length)return this;c[0]===e||c[0]===t?(b=oe.iOS?t.innerWidth:c.width(),w=oe.iOS?t.innerHeight:c.height(),c[0]===t&&(x={top:(u||c).scrollTop(),left:(u||c).scrollLeft()})):R.imagemap&&c.is("area")?n=R.imagemap(this,c,p,R.viewport?m:k):R.svg&&c&&c[0].ownerSVGElement?n=R.svg(this,c,p,R.viewport?m:k):(b=c.outerWidth(k),w=c.outerHeight(k),x=c.offset()),n&&(b=n.width,w=n.height,r=n.offset,x=n.position),x=this.reposition.offset(c,x,f),(oe.iOS>3.1&&4.1>oe.iOS||oe.iOS>=4.3&&4.33>oe.iOS||!oe.iOS&&"fixed"===_)&&(x.left-=T.scrollLeft(),x.top-=T.scrollTop()),(!n||n&&n.adjustable!==k)&&(x.left+=p.x===P?b:p.x===N?b/2:0,x.top+=p.y===O?w:p.y===N?w/2:0)}return x.left+=g.x+(d.x===P?-v:d.x===N?-v/2:0),x.top+=g.y+(d.y===O?-y:d.y===N?-y/2:0),R.viewport?(x.adjusted=R.viewport(this,x,l,b,w,v,y),r&&x.adjusted.left&&(x.left+=r.left),r&&x.adjusted.top&&(x.top+=r.top)):x.adjusted={left:0,top:0},this._trigger("move",[x,u.elem||u],i)?(delete x.adjusted,o===k||!q||isNaN(x.left)||isNaN(x.top)||"mouse"===c||!s.isFunction(l.effect)?h.css(x):s.isFunction(l.effect)&&(l.effect.call(h,this,s.extend({},x)),h.queue(function(t){s(this).css({opacity:"",height:""}),oe.ie&&this.style.removeAttribute("filter"),t()})),this.positioning=k,this):this},j.reposition.offset=function(t,i,o){function n(t,e){i.left+=e*t.scrollLeft(),i.top+=e*t.scrollTop()}if(!o[0])return i;var r,a,h,l,c=s(t[0].ownerDocument),d=!!oe.ie&&"CSS1Compat"!==e.compatMode,p=o[0];do"static"!==(a=s.css(p,"position"))&&("fixed"===a?(h=p.getBoundingClientRect(),n(c,-1)):(h=s(p).position(),h.left+=parseFloat(s.css(p,"borderLeftWidth"))||0,h.top+=parseFloat(s.css(p,"borderTopWidth"))||0),i.left-=h.left+(parseFloat(s.css(p,"marginLeft"))||0),i.top-=h.top+(parseFloat(s.css(p,"marginTop"))||0),r||"hidden"===(l=s.css(p,"overflow"))||"visible"===l||(r=s(p)));while(p=p.offsetParent);return r&&(r[0]!==c[0]||d)&&n(r,1),i};var ae=(z=j.reposition.Corner=function(t,e){t=(""+t).replace(/([A-Z])/," $1").replace(/middle/gi,N).toLowerCase(),this.x=(t.match(/left|right/i)||t.match(/center/)||["inherit"])[0].toLowerCase(),this.y=(t.match(/top|bottom|center/i)||["inherit"])[0].toLowerCase(),this.forceY=!!e;var i=t.charAt(0);this.precedance="t"===i||"b"===i?L:S}).prototype;ae.invert=function(t,e){this[t]=this[t]===F?P:this[t]===P?F:e||this[t]},ae.string=function(){var t=this.x,e=this.y;return t===e?t:this.precedance===L||this.forceY&&"center"!==e?e+" "+t:t+" "+e},ae.abbrev=function(){var t=this.string().split(" ");return t[0].charAt(0)+(t[1]&&t[1].charAt(0)||"")},ae.clone=function(){return new z(this.string(),this.forceY)},j.toggle=function(t,i){var o=this.cache,n=this.options,r=this.tooltip;if(i){if(/over|enter/.test(i.type)&&/out|leave/.test(o.event.type)&&n.show.target.add(i.target).length===n.show.target.length&&r.has(i.relatedTarget).length)return this;o.event=d(i)}if(this.waiting&&!t&&(this.hiddenDuringWait=W),!this.rendered)return t?this.render(1):this;if(this.destroyed||this.disabled)return this;var a,h,l,c=t?"show":"hide",p=this.options[c],u=(this.options[t?"hide":"show"],this.options.position),f=this.options.content,g=this.tooltip.css("width"),m=this.tooltip.is(":visible"),v=t||1===p.target.length,y=!i||2>p.target.length||o.target[0]===i.target;return(typeof t).search("boolean|number")&&(t=!m),a=!r.is(":animated")&&m===t&&y,h=a?E:!!this._trigger(c,[90]),this.destroyed?this:(h!==k&&t&&this.focus(i),!h||a?this:(s.attr(r[0],"aria-hidden",!t),t?(o.origin=d(this.mouse),s.isFunction(f.text)&&this._updateContent(f.text,k),s.isFunction(f.title)&&this._updateTitle(f.title,k),!I&&"mouse"===u.target&&u.adjust.mouse&&(s(e).bind("mousemove."+X,this._storeMouse),I=W),g||r.css("width",r.outerWidth(k)),this.reposition(i,arguments[2]),g||r.css("width",""),p.solo&&("string"==typeof p.solo?s(p.solo):s(U,p.solo)).not(r).not(p.target).qtip("hide",s.Event("tooltipsolo"))):(clearTimeout(this.timers.show),delete o.origin,I&&!s(U+'[tracking="true"]:visible',p.solo).not(r).length&&(s(e).unbind("mousemove."+X),I=k),this.blur(i)),l=s.proxy(function(){t?(oe.ie&&r[0].style.removeAttribute("filter"),r.css("overflow",""),"string"==typeof p.autofocus&&s(this.options.show.autofocus,r).focus(),this.options.show.target.trigger("qtip-"+this.id+"-inactive")):r.css({display:"",visibility:"",opacity:"",left:"",top:""}),this._trigger(t?"visible":"hidden")},this),p.effect===k||v===k?(r[c](),l()):s.isFunction(p.effect)?(r.stop(1,1),p.effect.call(r,this),r.queue("fx",function(t){l(),t()})):r.fadeTo(90,t?1:0,l),t&&p.target.trigger("qtip-"+this.id+"-inactive"),this))},j.show=function(t){return this.toggle(W,t)},j.hide=function(t){return this.toggle(k,t)},j.focus=function(t){if(!this.rendered||this.destroyed)return this;var e=s(U),i=this.tooltip,o=parseInt(i[0].style.zIndex,10),n=T.zindex+e.length;return i.hasClass(Z)||this._trigger("focus",[n],t)&&(o!==n&&(e.each(function(){this.style.zIndex>o&&(this.style.zIndex=this.style.zIndex-1)}),e.filter("."+Z).qtip("blur",t)),i.addClass(Z)[0].style.zIndex=n),this},j.blur=function(t){return!this.rendered||this.destroyed?this:(this.tooltip.removeClass(Z),this._trigger("blur",[this.tooltip.css("zIndex")],t),this)},j.disable=function(t){return this.destroyed?this:("toggle"===t?t=!(this.rendered?this.tooltip.hasClass(ee):this.disabled):"boolean"!=typeof t&&(t=W),this.rendered&&this.tooltip.toggleClass(ee,t).attr("aria-disabled",t),this.disabled=!!t,this)},j.enable=function(){return this.disable(k)},j._createButton=function(){var t=this,e=this.elements,i=e.tooltip,o=this.options.content.button,n="string"==typeof o,r=n?o:"Close tooltip";e.button&&e.button.remove(),e.button=o.jquery?o:s("<a />",{"class":"qtip-close "+(this.options.style.widget?"":X+"-icon"),title:r,"aria-label":r}).prepend(s("<span />",{"class":"ui-icon ui-icon-close",html:"&times;"})),e.button.appendTo(e.titlebar||i).attr("role","button").click(function(e){return i.hasClass(ee)||t.hide(e),k})},j._updateButton=function(t){if(!this.rendered)return k;var e=this.elements.button;t?this._createButton():e.remove()},j._setWidget=function(){var t=this.options.style.widget,e=this.elements,i=e.tooltip,s=i.hasClass(ee);i.removeClass(ee),ee=t?"ui-state-disabled":"qtip-disabled",i.toggleClass(ee,s),i.toggleClass("ui-helper-reset "+c(),t).toggleClass(K,this.options.style.def&&!t),e.content&&e.content.toggleClass(c("content"),t),e.titlebar&&e.titlebar.toggleClass(c("header"),t),e.button&&e.button.toggleClass(X+"-icon",!t)},j._storeMouse=function(t){(this.mouse=d(t)).type="mousemove"},j._bind=function(t,e,i,o,n){var r="."+this._id+(o?"-"+o:"");e.length&&s(t).bind((e.split?e:e.join(r+" "))+r,s.proxy(i,n||this))},j._unbind=function(t,e){s(t).unbind("."+this._id+(e?"-"+e:""))};var he="."+X;s(function(){v(U,["mouseenter","mouseleave"],function(t){var e="mouseenter"===t.type,i=s(t.currentTarget),o=s(t.relatedTarget||t.target),n=this.options;e?(this.focus(t),i.hasClass(J)&&!i.hasClass(ee)&&clearTimeout(this.timers.hide)):"mouse"===n.position.target&&n.hide.event&&n.show.target&&!o.closest(n.show.target[0]).length&&this.hide(t),i.toggleClass(te,e)}),v("["+H+"]",Q,g)}),j._trigger=function(t,e,i){var o=s.Event("tooltip"+t);return o.originalEvent=i&&s.extend({},i)||this.cache.event||E,this.triggering=t,this.tooltip.trigger(o,[this].concat(e||[])),this.triggering=k,!o.isDefaultPrevented()},j._bindEvents=function(t,e,o,n,r,a){if(n.add(o).length===n.length){var h=[];e=s.map(e,function(e){var o=s.inArray(e,t);return o>-1?(h.push(t.splice(o,1)[0]),i):e}),h.length&&this._bind(o,h,function(t){var e=this.rendered?this.tooltip[0].offsetWidth>0:!1;(e?a:r).call(this,t)})}this._bind(o,t,r),this._bind(n,e,a)},j._assignInitialEvents=function(t){function e(t){return this.disabled||this.destroyed?k:(this.cache.event=d(t),this.cache.target=t?s(t.target):[i],clearTimeout(this.timers.show),this.timers.show=p.call(this,function(){this.render("object"==typeof t||o.show.ready)},o.show.delay),i)}var o=this.options,n=o.show.target,r=o.hide.target,a=o.show.event?s.trim(""+o.show.event).split(" "):[],h=o.hide.event?s.trim(""+o.hide.event).split(" "):[];/mouse(over|enter)/i.test(o.show.event)&&!/mouse(out|leave)/i.test(o.hide.event)&&h.push("mouseleave"),this._bind(n,"mousemove",function(t){this._storeMouse(t),this.cache.onTarget=W}),this._bindEvents(a,h,n,r,e,function(){clearTimeout(this.timers.show)}),(o.show.ready||o.prerender)&&e.call(this,t)},j._assignEvents=function(){var i=this,o=this.options,n=o.position,r=this.tooltip,a=o.show.target,h=o.hide.target,l=n.container,c=n.viewport,d=s(e),p=(s(e.body),s(t)),v=o.show.event?s.trim(""+o.show.event).split(" "):[],y=o.hide.event?s.trim(""+o.hide.event).split(" "):[];s.each(o.events,function(t,e){i._bind(r,"toggle"===t?["tooltipshow","tooltiphide"]:["tooltip"+t],e,null,r)}),/mouse(out|leave)/i.test(o.hide.event)&&"window"===o.hide.leave&&this._bind(d,["mouseout","blur"],function(t){/select|option/.test(t.target.nodeName)||t.relatedTarget||this.hide(t)}),o.hide.fixed?h=h.add(r.addClass(J)):/mouse(over|enter)/i.test(o.show.event)&&this._bind(h,"mouseleave",function(){clearTimeout(this.timers.show)}),(""+o.hide.event).indexOf("unfocus")>-1&&this._bind(l.closest("html"),["mousedown","touchstart"],function(t){var e=s(t.target),i=this.rendered&&!this.tooltip.hasClass(ee)&&this.tooltip[0].offsetWidth>0,o=e.parents(U).filter(this.tooltip[0]).length>0;e[0]===this.target[0]||e[0]===this.tooltip[0]||o||this.target.has(e[0]).length||!i||this.hide(t)}),"number"==typeof o.hide.inactive&&(this._bind(a,"qtip-"+this.id+"-inactive",g),this._bind(h.add(r),T.inactiveEvents,g,"-inactive")),this._bindEvents(v,y,a,h,u,f),this._bind(a.add(r),"mousemove",function(t){if("number"==typeof o.hide.distance){var e=this.cache.origin||{},i=this.options.hide.distance,s=Math.abs;(s(t.pageX-e.pageX)>=i||s(t.pageY-e.pageY)>=i)&&this.hide(t)}this._storeMouse(t)}),"mouse"===n.target&&n.adjust.mouse&&(o.hide.event&&this._bind(a,["mouseenter","mouseleave"],function(t){this.cache.onTarget="mouseenter"===t.type}),this._bind(d,"mousemove",function(t){this.rendered&&this.cache.onTarget&&!this.tooltip.hasClass(ee)&&this.tooltip[0].offsetWidth>0&&this.reposition(t)})),(n.adjust.resize||c.length)&&this._bind(s.event.special.resize?c:p,"resize",m),n.adjust.scroll&&this._bind(p.add(n.container),"scroll",m)},j._unassignEvents=function(){var i=[this.options.show.target[0],this.options.hide.target[0],this.rendered&&this.tooltip[0],this.options.position.container[0],this.options.position.viewport[0],this.options.position.container.closest("html")[0],t,e];this._unbind(s([]).pushStack(s.grep(i,function(t){return"object"==typeof t})))},T=s.fn.qtip=function(t,e,o){var n=(""+t).toLowerCase(),r=E,h=s.makeArray(arguments).slice(1),l=h[h.length-1],c=this[0]?s.data(this[0],X):E;return!arguments.length&&c||"api"===n?c:"string"==typeof t?(this.each(function(){var t=s.data(this,X);if(!t)return W;if(l&&l.timeStamp&&(t.cache.event=l),!e||"option"!==n&&"options"!==n)t[n]&&t[n].apply(t,h);else{if(o===i&&!s.isPlainObject(e))return r=t.get(e),k;t.set(e,o)}}),r!==E?r:this):"object"!=typeof t&&arguments.length?i:(c=a(s.extend(W,{},t)),this.each(function(t){var e,o;return o=s.isArray(c.id)?c.id[t]:c.id,o=!o||o===k||1>o.length||T.api[o]?T.nextid++:o,e=y(s(this),o,c),e===k?W:(T.api[o]=e,s.each(R,function(){"initialize"===this.initialize&&this(e)}),e._assignInitialEvents(l),i)}))},s.qtip=o,T.api={},s.each({attr:function(t,e){if(this.length){var i=this[0],o="title",n=s.data(i,"qtip");if(t===o&&n&&"object"==typeof n&&n.options.suppress)return 2>arguments.length?s.attr(i,se):(n&&n.options.content.attr===o&&n.cache.attr&&n.set("content.text",e),this.attr(se,e))}return s.fn["attr"+ie].apply(this,arguments)},clone:function(t){var e=(s([]),s.fn["clone"+ie].apply(this,arguments));return t||e.filter("["+se+"]").attr("title",function(){return s.attr(this,se)}).removeAttr(se),e}},function(t,e){if(!e||s.fn[t+ie])return W;var i=s.fn[t+ie]=s.fn[t];s.fn[t]=function(){return e.apply(this,arguments)||i.apply(this,arguments)}}),s.ui||(s["cleanData"+ie]=s.cleanData,s.cleanData=function(t){for(var e,i=0;(e=s(t[i])).length;i++)if(e.attr(Y))try{e.triggerHandler("removeqtip")}catch(o){}s["cleanData"+ie].apply(this,arguments)}),T.version="2.2.0",T.nextid=0,T.inactiveEvents=Q,T.zindex=15e3,T.defaults={prerender:k,id:k,overwrite:W,suppress:W,content:{text:W,attr:"title",title:k,button:k},position:{my:"top left",at:"bottom right",target:k,container:k,viewport:k,adjust:{x:0,y:0,mouse:W,scroll:W,resize:W,method:"flipinvert flipinvert"},effect:function(t,e){s(this).animate(e,{duration:200,queue:k})}},show:{target:k,event:"mouseenter",effect:W,delay:90,solo:k,ready:k,autofocus:k},hide:{target:k,event:"mouseleave",effect:W,delay:0,fixed:k,inactive:k,leave:"window",distance:k},style:{classes:"",widget:k,width:k,height:k,def:W},events:{render:E,move:E,show:E,hide:E,toggle:E,visible:E,hidden:E,focus:E,blur:E}};var le,ce="margin",de="border",pe="color",ue="background-color",fe="transparent",ge=" !important",me=!!e.createElement("canvas").getContext,ve=/rgba?\(0, 0, 0(, 0)?\)|transparent|#123456/i,ye={},be=["Webkit","O","Moz","ms"];if(me)var we=t.devicePixelRatio||1,_e=function(){var t=e.createElement("canvas").getContext("2d");return t.backingStorePixelRatio||t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||1}(),xe=we/_e;else var qe=function(t,e,i){return"<qtipvml:"+t+' xmlns="urn:schemas-microsoft.com:vml" class="qtip-vml" '+(e||"")+' style="behavior: url(#default#VML); '+(i||"")+'" />'};s.extend(x.prototype,{init:function(t){var e,i;i=this.element=t.elements.tip=s("<div />",{"class":X+"-tip"}).prependTo(t.tooltip),me?(e=s("<canvas />").appendTo(this.element)[0].getContext("2d"),e.lineJoin="miter",e.miterLimit=1e5,e.save()):(e=qe("shape",'coordorigin="0,0"',"position:absolute;"),this.element.html(e+e),t._bind(s("*",i).add(i),["click","mousedown"],function(t){t.stopPropagation()},this._ns)),t._bind(t.tooltip,"tooltipmove",this.reposition,this._ns,this),this.create()},_swapDimensions:function(){this.size[0]=this.options.height,this.size[1]=this.options.width},_resetDimensions:function(){this.size[0]=this.options.width,this.size[1]=this.options.height},_useTitle:function(t){var e=this.qtip.elements.titlebar;return e&&(t.y===D||t.y===N&&this.element.position().top+this.size[1]/2+this.options.offset<e.outerHeight(W))},_parseCorner:function(t){var e=this.qtip.options.position.my;return t===k||e===k?t=k:t===W?t=new z(e.string()):t.string||(t=new z(t),t.fixed=W),t},_parseWidth:function(t,e,i){var s=this.qtip.elements,o=de+b(e)+"Width";return(i?_(i,o):_(s.content,o)||_(this._useTitle(t)&&s.titlebar||s.content,o)||_(s.tooltip,o))||0},_parseRadius:function(t){var e=this.qtip.elements,i=de+b(t.y)+b(t.x)+"Radius";return 9>oe.ie?0:_(this._useTitle(t)&&e.titlebar||e.content,i)||_(e.tooltip,i)||0},_invalidColour:function(t,e,i){var s=t.css(e);return!s||i&&s===t.css(i)||ve.test(s)?k:s},_parseColours:function(t){var e=this.qtip.elements,i=this.element.css("cssText",""),o=de+b(t[t.precedance])+b(pe),n=this._useTitle(t)&&e.titlebar||e.content,r=this._invalidColour,a=[];return a[0]=r(i,ue)||r(n,ue)||r(e.content,ue)||r(e.tooltip,ue)||i.css(ue),a[1]=r(i,o,pe)||r(n,o,pe)||r(e.content,o,pe)||r(e.tooltip,o,pe)||e.tooltip.css(o),s("*",i).add(i).css("cssText",ue+":"+fe+ge+";"+de+":0"+ge+";"),a},_calculateSize:function(t){var e,i,s,o=t.precedance===L,n=this.options.width,r=this.options.height,a="c"===t.abbrev(),h=(o?n:r)*(a?.5:1),l=Math.pow,c=Math.round,d=Math.sqrt(l(h,2)+l(r,2)),p=[this.border/h*d,this.border/r*d];return p[2]=Math.sqrt(l(p[0],2)-l(this.border,2)),p[3]=Math.sqrt(l(p[1],2)-l(this.border,2)),e=d+p[2]+p[3]+(a?0:p[0]),i=e/d,s=[c(i*n),c(i*r)],o?s:s.reverse()},_calculateTip:function(t,e,i){i=i||1,e=e||this.size;var s=e[0]*i,o=e[1]*i,n=Math.ceil(s/2),r=Math.ceil(o/2),a={br:[0,0,s,o,s,0],bl:[0,0,s,0,0,o],tr:[0,o,s,0,s,o],tl:[0,0,0,o,s,o],tc:[0,o,n,0,s,o],bc:[0,0,s,0,n,o],rc:[0,0,s,r,0,o],lc:[s,0,s,o,0,r]};return a.lt=a.br,a.rt=a.bl,a.lb=a.tr,a.rb=a.tl,a[t.abbrev()]},_drawCoords:function(t,e){t.beginPath(),t.moveTo(e[0],e[1]),t.lineTo(e[2],e[3]),t.lineTo(e[4],e[5]),t.closePath()},create:function(){var t=this.corner=(me||oe.ie)&&this._parseCorner(this.options.corner);return(this.enabled=!!this.corner&&"c"!==this.corner.abbrev())&&(this.qtip.cache.corner=t.clone(),this.update()),this.element.toggle(this.enabled),this.corner},update:function(e,i){if(!this.enabled)return this;var o,n,r,a,h,l,c,d,p=this.qtip.elements,u=this.element,f=u.children(),g=this.options,m=this.size,v=g.mimic,y=Math.round;e||(e=this.qtip.cache.corner||this.corner),v===k?v=e:(v=new z(v),v.precedance=e.precedance,"inherit"===v.x?v.x=e.x:"inherit"===v.y?v.y=e.y:v.x===v.y&&(v[e.precedance]=e[e.precedance])),n=v.precedance,e.precedance===S?this._swapDimensions():this._resetDimensions(),o=this.color=this._parseColours(e),o[1]!==fe?(d=this.border=this._parseWidth(e,e[e.precedance]),g.border&&1>d&&!ve.test(o[1])&&(o[0]=o[1]),this.border=d=g.border!==W?g.border:d):this.border=d=0,c=this.size=this._calculateSize(e),u.css({width:c[0],height:c[1],lineHeight:c[1]+"px"}),l=e.precedance===L?[y(v.x===F?d:v.x===P?c[0]-m[0]-d:(c[0]-m[0])/2),y(v.y===D?c[1]-m[1]:0)]:[y(v.x===F?c[0]-m[0]:0),y(v.y===D?d:v.y===O?c[1]-m[1]-d:(c[1]-m[1])/2)],me?(r=f[0].getContext("2d"),r.restore(),r.save(),r.clearRect(0,0,6e3,6e3),a=this._calculateTip(v,m,xe),h=this._calculateTip(v,this.size,xe),f.attr(A,c[0]*xe).attr(B,c[1]*xe),f.css(A,c[0]).css(B,c[1]),this._drawCoords(r,h),r.fillStyle=o[1],r.fill(),r.translate(l[0]*xe,l[1]*xe),this._drawCoords(r,a),r.fillStyle=o[0],r.fill()):(a=this._calculateTip(v),a="m"+a[0]+","+a[1]+" l"+a[2]+","+a[3]+" "+a[4]+","+a[5]+" xe",l[2]=d&&/^(r|b)/i.test(e.string())?8===oe.ie?2:1:0,f.css({coordsize:c[0]+d+" "+(c[1]+d),antialias:""+(v.string().indexOf(N)>-1),left:l[0]-l[2]*Number(n===S),top:l[1]-l[2]*Number(n===L),width:c[0]+d,height:c[1]+d}).each(function(t){var e=s(this);e[e.prop?"prop":"attr"]({coordsize:c[0]+d+" "+(c[1]+d),path:a,fillcolor:o[0],filled:!!t,stroked:!t}).toggle(!(!d&&!t)),!t&&e.html(qe("stroke",'weight="'+2*d+'px" color="'+o[1]+'" miterlimit="1000" joinstyle="miter"'))})),t.opera&&setTimeout(function(){p.tip.css({display:"inline-block",visibility:"visible"})},1),i!==k&&this.calculate(e,c)},calculate:function(t,e){if(!this.enabled)return k;var i,o,n=this,r=this.qtip.elements,a=this.element,h=this.options.offset,l=(r.tooltip.hasClass("ui-widget"),{});return t=t||this.corner,i=t.precedance,e=e||this._calculateSize(t),o=[t.x,t.y],i===S&&o.reverse(),s.each(o,function(s,o){var a,c,d;o===N?(a=i===L?F:D,l[a]="50%",l[ce+"-"+a]=-Math.round(e[i===L?0:1]/2)+h):(a=n._parseWidth(t,o,r.tooltip),c=n._parseWidth(t,o,r.content),d=n._parseRadius(t),l[o]=Math.max(-n.border,s?c:h+(d>a?d:-a)))
}),l[t[i]]-=e[i===S?0:1],a.css({margin:"",top:"",bottom:"",left:"",right:""}).css(l),l},reposition:function(t,e,s){function o(t,e,i,s,o){t===V&&l.precedance===e&&c[s]&&l[i]!==N?l.precedance=l.precedance===S?L:S:t!==V&&c[s]&&(l[e]=l[e]===N?c[s]>0?s:o:l[e]===s?o:s)}function n(t,e,o){l[t]===N?g[ce+"-"+e]=f[t]=r[ce+"-"+e]-c[e]:(a=r[o]!==i?[c[e],-r[e]]:[-c[e],r[e]],(f[t]=Math.max(a[0],a[1]))>a[0]&&(s[e]-=c[e],f[e]=k),g[r[o]!==i?o:e]=f[t])}if(this.enabled){var r,a,h=e.cache,l=this.corner.clone(),c=s.adjusted,d=e.options.position.adjust.method.split(" "),p=d[0],u=d[1]||d[0],f={left:k,top:k,x:0,y:0},g={};this.corner.fixed!==W&&(o(p,S,L,F,P),o(u,L,S,D,O),l.string()===h.corner.string()||h.cornerTop===c.top&&h.cornerLeft===c.left||this.update(l,k)),r=this.calculate(l),r.right!==i&&(r.left=-r.right),r.bottom!==i&&(r.top=-r.bottom),r.user=this.offset,(f.left=p===V&&!!c.left)&&n(S,F,P),(f.top=u===V&&!!c.top)&&n(L,D,O),this.element.css(g).toggle(!(f.x&&f.y||l.x===N&&f.y||l.y===N&&f.x)),s.left-=r.left.charAt?r.user:p!==V||f.top||!f.left&&!f.top?r.left+this.border:0,s.top-=r.top.charAt?r.user:u!==V||f.left||!f.left&&!f.top?r.top+this.border:0,h.cornerLeft=c.left,h.cornerTop=c.top,h.corner=l.clone()}},destroy:function(){this.qtip._unbind(this.qtip.tooltip,this._ns),this.qtip.elements.tip&&this.qtip.elements.tip.find("*").remove().end().remove()}}),le=R.tip=function(t){return new x(t,t.options.style.tip)},le.initialize="render",le.sanitize=function(t){if(t.style&&"tip"in t.style){var e=t.style.tip;"object"!=typeof e&&(e=t.style.tip={corner:e}),/string|boolean/i.test(typeof e.corner)||(e.corner=W)}},M.tip={"^position.my|style.tip.(corner|mimic|border)$":function(){this.create(),this.qtip.reposition()},"^style.tip.(height|width)$":function(t){this.size=[t.width,t.height],this.update(),this.qtip.reposition()},"^content.title|style.(classes|widget)$":function(){this.update()}},s.extend(W,T.defaults,{style:{tip:{corner:W,mimic:k,width:6,height:6,border:W,offset:0}}});var Ce,Te,je="qtip-modal",ze="."+je;Te=function(){function t(t){if(s.expr[":"].focusable)return s.expr[":"].focusable;var e,i,o,n=!isNaN(s.attr(t,"tabindex")),r=t.nodeName&&t.nodeName.toLowerCase();return"area"===r?(e=t.parentNode,i=e.name,t.href&&i&&"map"===e.nodeName.toLowerCase()?(o=s("img[usemap=#"+i+"]")[0],!!o&&o.is(":visible")):!1):/input|select|textarea|button|object/.test(r)?!t.disabled:"a"===r?t.href||n:n}function i(t){1>c.length&&t.length?t.not("body").blur():c.first().focus()}function o(t){if(h.is(":visible")){var e,o=s(t.target),a=n.tooltip,l=o.closest(U);e=1>l.length?k:parseInt(l[0].style.zIndex,10)>parseInt(a[0].style.zIndex,10),e||o.closest(U)[0]===a[0]||i(o),r=t.target===c[c.length-1]}}var n,r,a,h,l=this,c={};s.extend(l,{init:function(){return h=l.elem=s("<div />",{id:"qtip-overlay",html:"<div></div>",mousedown:function(){return k}}).hide(),s(e.body).bind("focusin"+ze,o),s(e).bind("keydown"+ze,function(t){n&&n.options.show.modal.escape&&27===t.keyCode&&n.hide(t)}),h.bind("click"+ze,function(t){n&&n.options.show.modal.blur&&n.hide(t)}),l},update:function(e){n=e,c=e.options.show.modal.stealfocus!==k?e.tooltip.find("*").filter(function(){return t(this)}):[]},toggle:function(t,o,r){var c=(s(e.body),t.tooltip),d=t.options.show.modal,p=d.effect,u=o?"show":"hide",f=h.is(":visible"),g=s(ze).filter(":visible:not(:animated)").not(c);return l.update(t),o&&d.stealfocus!==k&&i(s(":focus")),h.toggleClass("blurs",d.blur),o&&h.appendTo(e.body),h.is(":animated")&&f===o&&a!==k||!o&&g.length?l:(h.stop(W,k),s.isFunction(p)?p.call(h,o):p===k?h[u]():h.fadeTo(parseInt(r,10)||90,o?1:0,function(){o||h.hide()}),o||h.queue(function(t){h.css({left:"",top:""}),s(ze).length||h.detach(),t()}),a=o,n.destroyed&&(n=E),l)}}),l.init()},Te=new Te,s.extend(q.prototype,{init:function(t){var e=t.tooltip;return this.options.on?(t.elements.overlay=Te.elem,e.addClass(je).css("z-index",T.modal_zindex+s(ze).length),t._bind(e,["tooltipshow","tooltiphide"],function(t,i,o){var n=t.originalEvent;if(t.target===e[0])if(n&&"tooltiphide"===t.type&&/mouse(leave|enter)/.test(n.type)&&s(n.relatedTarget).closest(Te.elem[0]).length)try{t.preventDefault()}catch(r){}else(!n||n&&"tooltipsolo"!==n.type)&&this.toggle(t,"tooltipshow"===t.type,o)},this._ns,this),t._bind(e,"tooltipfocus",function(t,i){if(!t.isDefaultPrevented()&&t.target===e[0]){var o=s(ze),n=T.modal_zindex+o.length,r=parseInt(e[0].style.zIndex,10);Te.elem[0].style.zIndex=n-1,o.each(function(){this.style.zIndex>r&&(this.style.zIndex-=1)}),o.filter("."+Z).qtip("blur",t.originalEvent),e.addClass(Z)[0].style.zIndex=n,Te.update(i);try{t.preventDefault()}catch(a){}}},this._ns,this),t._bind(e,"tooltiphide",function(t){t.target===e[0]&&s(ze).filter(":visible").not(e).last().qtip("focus",t)},this._ns,this),i):this},toggle:function(t,e,s){return t&&t.isDefaultPrevented()?this:(Te.toggle(this.qtip,!!e,s),i)},destroy:function(){this.qtip.tooltip.removeClass(je),this.qtip._unbind(this.qtip.tooltip,this._ns),Te.toggle(this.qtip,k),delete this.qtip.elements.overlay}}),Ce=R.modal=function(t){return new q(t,t.options.show.modal)},Ce.sanitize=function(t){t.show&&("object"!=typeof t.show.modal?t.show.modal={on:!!t.show.modal}:t.show.modal.on===i&&(t.show.modal.on=W))},T.modal_zindex=T.zindex-200,Ce.initialize="render",M.modal={"^show.modal.(on|blur)$":function(){this.destroy(),this.init(),this.qtip.elems.overlay.toggle(this.qtip.tooltip[0].offsetWidth>0)}},s.extend(W,T.defaults,{show:{modal:{on:k,effect:W,blur:W,stealfocus:W,escape:W}}}),R.viewport=function(i,s,o,n,r,a,h){function l(t,e,i,o,n,r,a,h,l){var c=s[n],p=_[t],b=x[t],w=i===V,q=p===n?l:p===r?-l:-l/2,C=b===n?h:b===r?-h:-h/2,T=v[n]+y[n]-(f?0:u[n]),j=T-c,z=c+l-(a===A?g:m)-T,M=q-(_.precedance===t||p===_[e]?C:0)-(b===N?h/2:0);return w?(M=(p===n?1:-1)*q,s[n]+=j>0?j:z>0?-z:0,s[n]=Math.max(-u[n]+y[n],c-M,Math.min(Math.max(-u[n]+y[n]+(a===A?g:m),c+M),s[n],"center"===p?c-q:1e9))):(o*=i===$?2:0,j>0&&(p!==n||z>0)?(s[n]-=M+o,d.invert(t,n)):z>0&&(p!==r||j>0)&&(s[n]-=(p===N?-M:M)+o,d.invert(t,r)),v>s[n]&&-s[n]>z&&(s[n]=c,d=_.clone())),s[n]-c}var c,d,p,u,f,g,m,v,y,b=o.target,w=i.elements.tooltip,_=o.my,x=o.at,q=o.adjust,C=q.method.split(" "),T=C[0],j=C[1]||C[0],z=o.viewport,M=o.container,I=i.cache,W={left:0,top:0};return z.jquery&&b[0]!==t&&b[0]!==e.body&&"none"!==q.method?(u=M.offset()||W,f="static"===M.css("position"),c="fixed"===w.css("position"),g=z[0]===t?z.width():z.outerWidth(k),m=z[0]===t?z.height():z.outerHeight(k),v={left:c?0:z.scrollLeft(),top:c?0:z.scrollTop()},y=z.offset()||W,("shift"!==T||"shift"!==j)&&(d=_.clone()),W={left:"none"!==T?l(S,L,T,q.x,F,P,A,n,a):0,top:"none"!==j?l(L,S,j,q.y,D,O,B,r,h):0},d&&I.lastClass!==(p=X+"-pos-"+d.abbrev())&&w.removeClass(i.cache.lastClass).addClass(i.cache.lastClass=p),W):W},R.polys={polygon:function(t,e){var i,s,o,n={width:0,height:0,position:{top:1e10,right:0,bottom:0,left:1e10},adjustable:k},r=0,a=[],h=1,l=1,c=0,d=0;for(r=t.length;r--;)i=[parseInt(t[--r],10),parseInt(t[r+1],10)],i[0]>n.position.right&&(n.position.right=i[0]),i[0]<n.position.left&&(n.position.left=i[0]),i[1]>n.position.bottom&&(n.position.bottom=i[1]),i[1]<n.position.top&&(n.position.top=i[1]),a.push(i);if(s=n.width=Math.abs(n.position.right-n.position.left),o=n.height=Math.abs(n.position.bottom-n.position.top),"c"===e.abbrev())n.position={left:n.position.left+n.width/2,top:n.position.top+n.height/2};else{for(;s>0&&o>0&&h>0&&l>0;)for(s=Math.floor(s/2),o=Math.floor(o/2),e.x===F?h=s:e.x===P?h=n.width-s:h+=Math.floor(s/2),e.y===D?l=o:e.y===O?l=n.height-o:l+=Math.floor(o/2),r=a.length;r--&&!(2>a.length);)c=a[r][0]-n.position.left,d=a[r][1]-n.position.top,(e.x===F&&c>=h||e.x===P&&h>=c||e.x===N&&(h>c||c>n.width-h)||e.y===D&&d>=l||e.y===O&&l>=d||e.y===N&&(l>d||d>n.height-l))&&a.splice(r,1);n.position={left:a[0][0],top:a[0][1]}}return n},rect:function(t,e,i,s){return{width:Math.abs(i-t),height:Math.abs(s-e),position:{left:Math.min(t,i),top:Math.min(e,s)}}},_angles:{tc:1.5,tr:7/4,tl:5/4,bc:.5,br:.25,bl:.75,rc:2,lc:1,c:0},ellipse:function(t,e,i,s,o){var n=R.polys._angles[o.abbrev()],r=0===n?0:i*Math.cos(n*Math.PI),a=s*Math.sin(n*Math.PI);return{width:2*i-Math.abs(r),height:2*s-Math.abs(a),position:{left:t+r,top:e+a},adjustable:k}},circle:function(t,e,i,s){return R.polys.ellipse(t,e,i,i,s)}},R.svg=function(t,i,o){for(var n,r,a,h,l,c,d,p,u,f,g,m=s(e),v=i[0],y=s(v.ownerSVGElement),b=1,w=1,_=!0;!v.getBBox;)v=v.parentNode;if(!v.getBBox||!v.parentNode)return k;n=y.attr("width")||y.width()||parseInt(y.css("width"),10),r=y.attr("height")||y.height()||parseInt(y.css("height"),10);var x=(parseInt(i.css("stroke-width"),10)||0)/2;switch(x&&(b+=x/n,w+=x/r),v.nodeName){case"ellipse":case"circle":f=R.polys.ellipse(v.cx.baseVal.value,v.cy.baseVal.value,(v.rx||v.r).baseVal.value+x,(v.ry||v.r).baseVal.value+x,o);break;case"line":case"polygon":case"polyline":for(u=v.points||[{x:v.x1.baseVal.value,y:v.y1.baseVal.value},{x:v.x2.baseVal.value,y:v.y2.baseVal.value}],f=[],p=-1,c=u.numberOfItems||u.length;c>++p;)d=u.getItem?u.getItem(p):u[p],f.push.apply(f,[d.x,d.y]);f=R.polys.polygon(f,o);break;default:f=v.getBoundingClientRect(),f={width:f.width,height:f.height,position:{left:f.left,top:f.top}},_=!1}return g=f.position,y=y[0],_&&(y.createSVGPoint&&(a=v.getScreenCTM(),u=y.createSVGPoint(),u.x=g.left,u.y=g.top,h=u.matrixTransform(a),g.left=h.x,g.top=h.y),y.viewBox&&(l=y.viewBox.baseVal)&&l.width&&l.height&&(b*=n/l.width,w*=r/l.height)),g.left+=m.scrollLeft(),g.top+=m.scrollTop(),f},R.imagemap=function(t,e,i){e.jquery||(e=s(e));var o,n,r,a,h,l=e.attr("shape").toLowerCase().replace("poly","polygon"),c=s('img[usemap="#'+e.parent("map").attr("name")+'"]'),d=s.trim(e.attr("coords")),p=d.replace(/,$/,"").split(",");if(!c.length)return k;if("polygon"===l)a=R.polys.polygon(p,i);else{if(!R.polys[l])return k;for(r=-1,h=p.length,n=[];h>++r;)n.push(parseInt(p[r],10));a=R.polys[l].apply(this,n.concat(i))}return o=c.offset(),o.left+=Math.ceil((c.outerWidth(k)-c.width())/2),o.top+=Math.ceil((c.outerHeight(k)-c.height())/2),a.position.left+=o.left,a.position.top+=o.top,a};var Me,Ie='<iframe class="qtip-bgiframe" frameborder="0" tabindex="-1" src="javascript:\'\';"  style="display:block; position:absolute; z-index:-1; filter:alpha(opacity=0); -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";"></iframe>';s.extend(C.prototype,{_scroll:function(){var e=this.qtip.elements.overlay;e&&(e[0].style.top=s(t).scrollTop()+"px")},init:function(i){var o=i.tooltip;1>s("select, object").length&&(this.bgiframe=i.elements.bgiframe=s(Ie).appendTo(o),i._bind(o,"tooltipmove",this.adjustBGIFrame,this._ns,this)),this.redrawContainer=s("<div/>",{id:X+"-rcontainer"}).appendTo(e.body),i.elements.overlay&&i.elements.overlay.addClass("qtipmodal-ie6fix")&&(i._bind(t,["scroll","resize"],this._scroll,this._ns,this),i._bind(o,["tooltipshow"],this._scroll,this._ns,this)),this.redraw()},adjustBGIFrame:function(){var t,e,i=this.qtip.tooltip,s={height:i.outerHeight(k),width:i.outerWidth(k)},o=this.qtip.plugins.tip,n=this.qtip.elements.tip;e=parseInt(i.css("borderLeftWidth"),10)||0,e={left:-e,top:-e},o&&n&&(t="x"===o.corner.precedance?[A,F]:[B,D],e[t[1]]-=n[t[0]]()),this.bgiframe.css(e).css(s)},redraw:function(){if(1>this.qtip.rendered||this.drawing)return this;var t,e,i,s,o=this.qtip.tooltip,n=this.qtip.options.style,r=this.qtip.options.position.container;return this.qtip.drawing=1,n.height&&o.css(B,n.height),n.width?o.css(A,n.width):(o.css(A,"").appendTo(this.redrawContainer),e=o.width(),1>e%2&&(e+=1),i=o.css("maxWidth")||"",s=o.css("minWidth")||"",t=(i+s).indexOf("%")>-1?r.width()/100:0,i=(i.indexOf("%")>-1?t:1)*parseInt(i,10)||e,s=(s.indexOf("%")>-1?t:1)*parseInt(s,10)||0,e=i+s?Math.min(Math.max(e,s),i):e,o.css(A,Math.round(e)).appendTo(r)),this.drawing=0,this},destroy:function(){this.bgiframe&&this.bgiframe.remove(),this.qtip._unbind([t,this.qtip.tooltip],this._ns)}}),Me=R.ie6=function(t){return 6===oe.ie?new C(t):k},Me.initialize="render",M.ie6={"^content|style$":function(){this.redraw()}}})})(window,document);

define(
    'ngApp/website/map/mapSiteOverlay',["jquery.qtip.min"],
    function() {
    	
    	MapSiteOverlay.prototype = new google.maps.OverlayView();
    	
  	
        function MapSiteOverlay(map, site, imgSize, divContainerId, isSelected, showMarker, showNumbers, showBoldTitle, disableOverlay,isCity) {
            // Now initialize all properties.
            this.map = map;
            this.site = site;		
        	this.imgSize = imgSize;
        	this.isSelected = isSelected;
        	this.showMarker = showMarker;
        	this.showNumbers = showNumbers;
        	this.showBoldTitle = showBoldTitle;
        	this.disableOverlay = disableOverlay;
        	this.isCity = isCity;
        	//this.mapWidth = $("#" + divContainerId).width();
        	//this.mapHeight = $("#" + divContainerId).height();
            
            this.div = null;

            // Explicitly call setMap on this overlay
            this.setMap(map);    	
            return( this );
        }
        
        MapSiteOverlay.prototype.onAdd = function() {
        	 var _self = this;
        	var imageSrc = appImagesFolder + "/blue-location.png";
        	var zindex = 300 - this.site.noPerUsers;
        	var border = "";
        	this.imgSize = this.isCity ? "12" : "16";
        	var className = this.isCity ? "_city" : ""; 
        	var markerFontSite = "";
        	if (this.showMarker && !this.isCity) {
        		markerFontSite = " map_name_wrapper-large";
        		this.imgSize = "16";
        	}
        	var cursor = "cursor:pointer"; 
        	// special element?
        	if (this.site.id == -1) {
        		imageSrc = this.site.imageSrc;
        		cursor = "";
        	}
        	var showNumbersHidden = "none";
        	if (this.showNumbers) {
        		showNumbersHidden = "";
        	}
        	
        	        	
        	if (this.isSelected) {
        		markerFontSite = " map_name_wrapper_city_selected";
        		zindex = "999999";
        	}
        	
        	
            var html = "";	
            
            var opacity = 1;
            if (this.isCity) {
            	opacity = 0;
            } else if (!this.isCity && this.map.getZoom() <= 11) {
            	opacity = 0;
            }
            
            var name = this.isCity || (this.site.shortTitle == null) ? this.site.name : this.site.shortTitle;
            var idPrefix = this.isCity ? "MapCityImg_" : "MapImg_";
            
        	html += "<div zindex='"+zindex+"' id='div" + idPrefix + this.site.id + "'" +
        		"style='opacity:"+opacity+";margin:0 auto;z-index:"+zindex+";border:" + (this.isSelected ? "rgb(113,123,249)" : "white") + ";" +  
        		"position: absolute;" + cursor + ";width:10px'>";
        	html += "<div id='mapCircleWrapper_" + this.site.id + "'><img style='height:"+this.imgSize+"px;width:"+this.imgSize+"px' id='imgMapImg_" + this.site.id + "' src='"+appImagesFolder+ "/map/markers/circle-map-marker.png'/></div>";

        	html += "<div style='opacity:1' id='title" + idPrefix + this.site.id + "' class='map_name_wrapper"+className+markerFontSite+"'>"+name+"</div>";
        	
        	html += "</div>";
        	
        	var $newDiv = $(html);
        	this.div = $newDiv;
        	$newDiv.appendTo($("body"));
        	
        	var panes = this.getPanes();			        	
        	panes.overlayMouseTarget.appendChild($newDiv[0]);
        	
          	var me = this;
          	if (!this.disableOverlay) {
          		/*google.maps.event.addDomListener($newDiv[0], 'click', function() {
          			var scope = angular.element(document.getElementById("mapController")).scope();
          			scope.changeAttraction(me.site);
          			scope.fireEvent('MapAttractions','attraction map clicked')
          		});*/
          		
          		//handle creation of the overlay. Use a timeout so that overlay is not created when just passing over attraction
          		var evt1 = google.maps.event.addDomListener($newDiv[0], 'click', function() {
          			me.timeOutEvt = setTimeout( function() {
          				var idPrefix = me.isCity ? "MapCityImg_" : "MapImg_";
          				if (!$("div" + idPrefix + me.site.id).qtip().rendered) {
          					var scope = angular.element(document.getElementById("mapController")).scope();
                  			scope.showSite(me.site);
          				}
          				
              			//google.maps.event.removeListener(evt1);
        			}, 400 );
          	    });
          		google.maps.event.addDomListener($newDiv[0], 'mouseover', function() {
          			$(this.children[1]).addClass("map_name_wrapper-hover map_name_wrapper_inverted");
          		});
          		google.maps.event.addDomListener($newDiv[0], 'mouseout', function() {
          			clearTimeout(me.timeOutEvt);
          			$(this.children[1]).removeClass("map_name_wrapper-hover map_name_wrapper_inverted")
          		});
          	} else {
          		google.maps.event.addDomListener($newDiv[0], 'click', function() {
          			var scope = angular.element(document.getElementById("attractionController")).scope();
          			scope.changeAttraction(_self.site);
          		});
          		google.maps.event.addDomListener($newDiv[0], 'mouseover', function() {
          			var scope = angular.element(document.getElementById("attractionController")).scope();
          			scope.showSite(_self.site);
          		});
          		google.maps.event.addDomListener($newDiv[0], 'mouseout', function() {
          			var scope = angular.element(document.getElementById("attractionController")).scope();
          			scope.hideSite(_self.site);
          		});
          	}
        	
        	/*if (this.showMarker) { 
        		$('#titleMapImg_' + this.site.id).hide();
        	}*/
        	
        	// create info div
        	/*if (!this.disableOverlay) {
        		this.addContextTip($newDiv);
        	}*/
          };
          
          

          MapSiteOverlay.prototype.draw = function() {
            var overlayProjection = this.getProjection();
            var latLng = new google.maps.LatLng(this.site.latitude,this.site.longitude);
            
            var centerPoint = overlayProjection.fromLatLngToDivPixel(latLng);

            // place image div
            var $div = this.div;
            $div.css("left", (centerPoint.x - this.imgSize/2) + 'px');
            $div.css("top", (centerPoint.y- this.imgSize/2) + 'px');
            
            
          };
          
        MapSiteOverlay.prototype.addContextTip = function(curDiv) {
        		var _self = this;
        	  //connect the qtip to the map image
        	  //allow a short delay so map is loaded without interuption
        		//curDiv.mouseover(function() {
        			setTimeout( function() {
        				var $body = angular.element(document.body);
        				var $rootScope = $body.scope().$root;
        				$rootScope.$broadcast("maphoverin-ng",[curDiv,_self.site.id]);
        			}, 0 );
        		//});
        	  return;
          }
          
          function calculateIsCenter(site,overlay) {
        	  var latLng = new google.maps.LatLng(site.longitude, site.latitude);
              var point = overlay.getProjection().fromLatLngToContainerPixel(latLng);
              var centerOffset = 150;
              var fullWidth = $(window).width();
              var elemPos = point.x + $( "#detailsColumn" ).width();
              var centerPoint = fullWidth/2;
              if (elemPos <= centerPoint+centerOffset && elemPos >= centerPoint-centerOffset) {
            	  return true;
              }
              return false;
          }
         
          
          
         MapSiteOverlay.prototype.remove = function() {
        	 this.setMap(null);
    	  }
          
         MapSiteOverlay.prototype.onRemove = function() {
        	 if (this.div != null) {
        		 try {
        			 this.div.remove();
        			 //fail quietly
        		 } catch (ex) {}
        		 
        	 }
        	  
          }; 
          
          return(MapSiteOverlay);
    }    

);

define(
    'ngApp/website/map/mapMgr',["app/core/mapServices"],
    function(MapServices) {
 
        function MapMgr(){ 
        	this._map = null;
        	this._mainMap = null;
        	this._mapDiv = null;
        	this._mapSiteOverlay = null;
        	this._mapSiteOverlayArray = new Array();
        	this._mapMgrDeferred = null;
        	this._fireLoadedEvent = false;
        	this._attachedListeners = new Array();
        	this._mapPositionData = null;
        	this._mapBounds = null;
        	this._mapFited = false;
        	this._directionsDisplayAr = [];
        	this._fitMapTimeout = null;
        	this._fitMapInnerTimeout = null;
            return( this );
        }

        MapMgr.prototype.load = function() {
        	var _self = this;
        	if (this._mapMgrDeferred != null) {
        		return this._mapMgrDeferred;
        	}
        	
        	this._mapMgrDeferred = new $.Deferred();
        	require( ["ngApp/website/map/mapSiteOverlay"],
					    function(MapSiteOverlay){
        						_self._mapSiteOverlay = MapSiteOverlay
        						_self.setMapMgrLoaded();
        	});
        	
        	this._mapMgrDeferred = new $.Deferred();
        	
	
          	return this._mapMgrDeferred;
        }
        
        MapMgr.prototype.setMapMgrLoaded = function() {
        	//console.timeEnd('MapMgr');
        	this._mapMgrDeferred.resolve();
        }
        
        MapMgr.prototype.getOverlayById = function(id) {
        	var _self = this;
        	var res = null;
        	for (var i=0;i<_self._mapSiteOverlayArray.length;i++) {
        		var overlay = _self._mapSiteOverlayArray[i];
        		if (id == overlay.site.id) {
        			res = overlay;
        			break;
        		}
        	}
        	return res;
        }
        
        MapMgr.prototype.removeOverlays = function(id) {
        	var _self = this;
        	for (var i=0;i<_self._mapSiteOverlayArray.length;i++) {
        		var overlay = _self._mapSiteOverlayArray[i];
        		if (id == null || id == overlay.site.id) {
        			if (overlay.hasOwnProperty("icon")) {
                 		overlay.setMap(null);
                 	} else {
                 		overlay.remove();
                 		overlay.setMap(null);
                 	}
        			if (id != null) {
        				_self._mapSiteOverlayArray.splice(i,1);
        				$("#divMapCityImg_" + id).remove();
        				$("#divMapImg_" + id).remove();
        				break;
        			}
        		}
        		
        	}
        	if (id == null) {
        		_self._mapSiteOverlayArray = new Array();
        	}
        }
        
        MapMgr.prototype.hideMap = function(attr) {
        	var _self = this;
        	//clear the fit map timeout so it doesn't run unexpectedly
        	clearTimeout(_self._fitMapTimeout);
        	clearTimeout(_self._fitMapInnerTimeout);
        	if (attr) {
        		//$("#attrDivMapParent").appendTo($("body"));
            	//$("#attrDivMapParent").hide();
        		try {
    				document.body.appendChild(document.getElementById("attrDivMapParent_child"));
    			} catch (ex) {}
            	//$("#attrDivMapParent_child").appendTo($("body"));
            	$("#attrDivMapParent_child").hide();
        	} else {
        		if (_self._map != null) {
        			_self._map.setZoom(1);
        		}
        		
        		try {
    				document.body.appendChild(document.getElementById("divMapParent_child"));
    			} catch (ex) {}
            	$("#divMapParent_child").hide();
        	}
        	
        }
       
        MapMgr.prototype.initMapObject = function(mapOptions,doFitMap,isNew,divParent) {
        	
        	var divChild = divParent + "_child";
        	if (divParent == null) {
        		divParent = "divMapParent";
        		divChild = "divMap";
        	}
        	var _self = this;
        	_self._mapDiv = divParent;
        	
        	//reset bounds
        	_self._mapBounds = null; 
        	_self._mapPositionData = null;
        	
        	if ($("#" + divParent).length == 0) {
				var html = '<div style="height:100%;width:100%;display:none" id="'+divParent+'"></div>';
          		var mapContainer = $(html);
          		$(mapContainer).appendTo($("body"));
			}
        	if (_self._map == null) {
        		if ($("#" + divChild).length == 0) {
        			var html = '<div style="height:100%;width:100%" id="'+divChild+'"></div>';
              		var mapContainer = $(html);
              		$(mapContainer).appendTo($("#" + divParent));
        		} else {
        			$("#" + divChild).appendTo($("#" + divParent));
        			$("#" + divChild).show();
        		}
          		_self._map = new google.maps.Map($("#"+divChild).get(0), mapOptions);
          	} else {
          		//TODO: fix this, no need to create a new map instance every time
          		//_self._map = new google.maps.Map($("#"+divChild).get(0), mapOptions);
          		_self._fireLoadedEvent = true;
          		$("#" + divChild).appendTo($("#" + divParent));
          		$("#" + divChild).show();
          		_self._map.setOptions(mapOptions);
          	}
          	
          	$( "body").trigger( "mapCreate");
      		$( "body").off("mapCreate");
      		
	      		_self._map.setOptions({styles: _self.getMapStyleOptions(isNew)});
	      		if (doFitMap) {
	      			
	      			_self._mapFited = false;
	      			_self._fitMapTimeout = setTimeout( function() {
	      				_self.fitMap();
	      				//fit map after 1000 even if it's not ready
	      			},1000);
	      			var evt = google.maps.event.addListener(_self._map, 'idle', function() {
	          			_self.fitMap();
	          			google.maps.event.removeListener(evt);
	    					
	    			});
	      		}
      		
	      	return _self._map;
        }
        
       MapMgr.prototype.drawOverlays = function(mapDivContainerId, mapPositionData, cityMap , selectedSiteId, numOfSites, showNumbers, disableOverlay,showCity,ignoreZoom,treatAsCity,attrZoom) {
        	var _self = this;
        	$('.map-marker-overlay-custom').remove()
        	if (attrZoom == null) {
        		attrZoom = 11;
        	}
        	var bounds = new google.maps.LatLngBounds();
        	var maxMarkers = 99;
        	var curMarkers = 0;
        	//_self.removeOverlays();
        	var curKey = 0;
        	var overlayIdsArr = new Array();
        	for (key in cityMap) {
        		curKey++;
        		var siteArr = cityMap[key].attractionsArr;
        		//ignore zoom is used by the city map
        		if (siteArr != null && (ignoreZoom || _self._map.getZoom() >= attrZoom)) {
        			cityMap[key].attrVisible = false;
        			var maxLargeFont = siteArr.length / 100 * 10;
        			for (var i=0;i<siteArr.length;i++) {
        				var curSite = siteArr[i].site != null ? siteArr[i].site : siteArr[i];
        				curSite.attrVisible = false;
        				var doProcess = false;
        				if (mapPositionData == null) {
        					//ignore bounds if using autofit
        					doProcess = true;
        				} else {
        					var latLng = new google.maps.LatLng(curSite.latitude, curSite.longitude);
            	    		if (_self._map.getBounds() != null && _self._map.getBounds() .contains(latLng)) {
            	    			doProcess = true;
							}
            	    			
        				}
						if (doProcess) {
							cityMap[key].attrVisible = true;
							curSite.attrVisible = true;
							if (_self.getOverlayById(curSite.id) == null) {
								var isSelected = curSite.id == selectedSiteId;
	            				var overlay = new _self._mapSiteOverlay(_self._map, curSite, 30, mapDivContainerId, isSelected, i>maxLargeFont ? false : true, showNumbers, i < numOfSites/3 ? true : false, disableOverlay,treatAsCity) ;
	            				_self._mapSiteOverlayArray.push(overlay);
	            				bounds.extend(MapServices.getLatLng(curSite.latitude, curSite.longitude));
							} 
        	    		} else {
        	    			overlayIdsArr.push(curSite.id);
        	    			curSite.wasCreated = null; //reset overlay creation
        	    		}
        				
        			}
        		}
              	/*if (doAddRoute) {
                  	
    	          	if (siteArr.length > 7) {
    	          		this.addWayPoints(siteArr, 0, 7,null);
    	          		this.addWayPoints(siteArr, 7, siteArr.length-1,null);
    	          	}
    	          	else {
    	          		if (siteArr.length > 1) {
    	          			this.addWayPoints(siteArr, 0, siteArr.length-1,null);	
    	          		}          			
    	          	}
              	}*/
        		if (showCity && _self._map.getZoom() < attrZoom) {
        			var maxLargeFont = Object.keys(cityMap).length / 100 * 10;
        			var latLng = new google.maps.LatLng(cityMap[key].latitude, cityMap[key].longitude);
        			var isSelected = cityMap[key].id == selectedSiteId;
    	    		if (_self._map.getBounds() != null && _self._map.getBounds().contains(latLng)) {
    	    			var doCreate = false;
    	    			if (_self.getOverlayById(key) == null) {
    	    				doCreate = true;
    	    			} else if (isSelected) {
    	    				//make sure selected is created
    	    				doCreate = true;
    	    			} else if (curMarkers <= maxMarkers && !cityMap[key].isOverlay) {
    	    				doCreate = true;
    	    				_self.removeOverlays(key);
    	    			} else if (cityMap[key].isOverlay && curMarkers > maxMarkers) {
    	    				doCreate = true;
    	    				_self.removeOverlays(key);
    	    			}
    	    			if (doCreate) {
    	    				if (curMarkers <= maxMarkers) {
    	    					var overlay = new _self._mapSiteOverlay(_self._map, cityMap[key], 30, mapDivContainerId, isSelected, curKey>maxLargeFont ? false : true, showNumbers, curKey < numOfSites/3 ? true : false, disableOverlay,true) ;
        	    				bounds.extend(MapServices.getLatLng(cityMap[key].latitude, cityMap[key].longitude));
        	    				_self._mapSiteOverlayArray.push(overlay);
        	    				cityMap[key].isOverlay = true;
        	    				curMarkers++;
    	    				} else {
    	    					 var mapMarker = {
    	    						url: appImagesFolder+ "/map/markers/circle-map-marker.png",
    	    						scaledSize: new google.maps.Size(12, 12)
    	    					 };
    	    					var marker = new google.maps.Marker({
    	    					    position: {lat: cityMap[key].latitude, lng: cityMap[key].longitude},
    	    					    map: _self._map,
    	    					    icon: mapMarker,
    	    					    title: cityMap[key].name,
    	    					    id: "divMapCityImg_" + cityMap[key].id,
    	    					    site: cityMap[key]
    	    					  });
    	    					 marker.addListener('click', function(event) {
    	    						 var me = this.site;
    	    						 if (!$("divMapCityImg_" + me.id).qtip().rendered) {
    	    							 var scale = Math.pow(2, _self._map.getZoom());
    	    						        var nw = new google.maps.LatLng(
    	    						            _self._map.getBounds().getNorthEast().lat(),
    	    						            _self._map.getBounds().getSouthWest().lng()
    	    						        );
    	    						        var worldCoordinateNW = _self._map.getProjection().fromLatLngToPoint(nw);
    	    						        var worldCoordinate = _self._map.getProjection().fromLatLngToPoint(this.getPosition());
    	    						        var pixelOffset = new google.maps.Point(
    	    						            Math.floor((worldCoordinate.x - worldCoordinateNW.x) * scale),
    	    						            Math.floor((worldCoordinate.y - worldCoordinateNW.y) * scale)
    	    						        );
    	    						        
    	    						        
    	    						        var elm = '<div class="map-marker-overlay-custom mouse_hover" title="'+me.name+'" id="divMapCityImg_'+me.id+'" style="opacity:0.5;width:9px;height:9px;position:absolute;top:'+(pixelOffset.y-9) + 'px;left:'+(pixelOffset.x-4)+'px"></div>';
    	    						        $(elm).appendTo($("#divMapParent"));
    	    	          					var scope = angular.element(document.getElementById("mapController")).scope();
    	    	                  			scope.showSite(me);
    	    	          			}
    	    				      });
    	    					_self._mapSiteOverlayArray.push(marker);
    	    				}
    	    			} else if (cityMap[key].isOverlay) {
    	    				//count created
    	    				curMarkers++;
    	    			}
    	    		} else {
    	    			cityMap[key].isOverlay = false;
    	    			overlayIdsArr.push(key);
    	    		}
        		}
        	}
        	for (var i=0;i<overlayIdsArr.length;i++) {
        		_self.removeOverlays(overlayIdsArr[i]);
        	}
        }
        
       
       MapMgr.prototype.project = function(latLng) {
    	   var TILE_SIZE = 256;
           var siny = Math.sin(latLng.lat() * Math.PI / 180);

           // Truncating to 0.9999 effectively limits latitude to 89.189. This is
           // about a third of a tile past the edge of the world tile.
           siny = Math.min(Math.max(siny, -0.9999), 0.9999);

           return new google.maps.Point(
               TILE_SIZE * (0.5 + latLng.lng() / 360),
               TILE_SIZE * (0.5 - Math.log((1 + siny) / (1 - siny)) / (4 * Math.PI)));
         }
        
        MapMgr.prototype.initializeMap = function(mapDivContainerId, mapPositionData, cityMap, selectedSiteId, numOfSites, showNumbers, disableOverlay, showCity) {
        	var _self = this;
        	var bounds = new google.maps.LatLngBounds();
        	var mapServices = new MapServices();
        	var allSitesOnMap = true;        	
        	var boundElementCount = 0;
         	
        	var maxLargeFont = 5; //TODO: Fix this?
        	if (mapPositionData != null && !mapPositionData.fitBounds) {
          		_self._map.setCenter(new google.maps.LatLng(mapPositionData.lat, mapPositionData.lng));
          		_self._map.setZoom(mapPositionData.zoom);
          	}
        	
        	for (key in cityMap) {
        		var siteArr = cityMap[key].attractionsArr;
        		if (siteArr != null) {
        			for (var i=0;i<siteArr.length;i++) {
        				var lat = siteArr[i].site != null ? siteArr[i].site.latitude : siteArr[i].latitude;
        				var lng = siteArr[i].site != null ? siteArr[i].site.longitude : siteArr[i].longitude;
        				bounds.extend(MapServices.getLatLng(lat,lng));
        			}
        		}
        		if (showCity) {
        			//var overlay = new _self._mapSiteOverlay(_self._map, cityMap[key], 30, mapDivContainerId, isSelected, i>maxLargeFont ? false : true, showNumbers, i < numOfSites/3 ? true : false, disableOverlay,true) ;
            		bounds.extend(MapServices.getLatLng(cityMap[key].latitude, cityMap[key].longitude));
            		//_self._mapSiteOverlayArray.push(overlay);
        		}
        		
        	}

            _self._mapPositionData = mapPositionData;
            _self._mapBounds = bounds;

          	if (_self._fireLoadedEvent) {
          		var to1 = setTimeout( function() {
          			google.maps.event.trigger(_self._map, 'tilesloaded');
          			google.maps.event.trigger(_self._map, 'resize'); 
          			clearTimeout(to1);
    			}, 500 );
          		
          	}
        	
          	
            return _self._map;
        };	  
        MapMgr.prototype.fitMapPending = function() {
        	//required when map is loaded as idle
        	var _self = this;
        	if (!_self._mapFited) {
        		_self.fitMap();
        	}
        };
        
        MapMgr.prototype.fitMap = function() {
        	var _self = this;
        	_self._mapFited = true;
        	_self._fitMapInnerTimeout = setTimeout( function() {
        		//if (_self._mapPositionData != null && !_self._mapPositionData.fitBounds) {
        		if (_self._mapPositionData != null) {
        			if (_self._mapPositionData.fitBounds && ! _self._mapPositionData.zoom) {
        				_self._mapPositionData.zoom = 15;//default zoom for autofit
        			}
        			
              		_self._map.setCenter(new google.maps.LatLng(_self._mapPositionData.lat, _self._mapPositionData.lng));
              		_self._map.setZoom(_self._mapPositionData.zoom);
              	} else if (_self._mapBounds != null) {
              		_self._map.fitBounds(_self._mapBounds);	
              		_self._map.setCenter(_self._mapBounds.getCenter());
              	}
        		$( "body").trigger( "unblockui");
        		$( "body").off("unblockui");
        		google.maps.event.trigger(_self._map, 'resize');
            }, 800 );
    		
        }
        
        MapMgr.prototype.addEventListener = function(lstnr) {
        	var _self = this;
        	_self._attachedListeners.push(lstnr);
        }
        
        MapMgr.prototype.clearEventListeners = function(lstnr) {
        	var _self = this;
        	for (var i=0;i<_self._attachedListeners.length;i++) {
        		google.maps.event.removeListener(_self._attachedListeners[i]);
        	}
        }
        
        /*MapMgr.prototype.addWayPoints = function (siteArr, fromIdx, toIdx,lineColOverride) {
	      	var directionsService = new google.maps.DirectionsService();
      	  
	      	var lineColor = lineColOverride != null ? lineColOverride : "#00b3fd";
	      	 
	      	var lineSymbol = {
	      		  path: google.maps.SymbolPath.CIRCLE,
	      		  scale: lineColOverride != null ? 1 : 2,
	      		  strokeColor: lineColor,
	      		  fillColor: lineColor,
	      		  fillOpacity:1.0 
	      	 };
      	   
	      	var polylineOptionsActual = {	    
      		    icons: [{
      		        icon: lineSymbol,
      		        repeat: lineColOverride != null ? "5px" : "10px"
      		     }],
      		    strokeWeight:0
	      	};  
	      	
	      	// avoid putting special line on safari. causing safari to crash 
	      	if (navigator.userAgent.indexOf('Mac OS X') != -1) {
	      		polylineOptionsActual = null;
	      	} 
      		
	      	var rendererOptions = {
      			polylineOptions: polylineOptionsActual,
      			suppressMarkers:true,
      			preserveViewport:true
	      	};
	      	
	      	var directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
	      	this._directionsDisplayAr.push(directionsDisplay);
	      	directionsDisplay.setMap(this._map);
      	  
	      	var start = siteArr[fromIdx].getLatLng();
	      	var end = siteArr[toIdx].getLatLng();
	      	var waypts = [];
      	  
	      	for (var i=(fromIdx + 1);i<(toIdx);i++) {
	      		var stopOver = fromIdx == 0 ? false : true;
	      		waypts.push({
	      			location:  siteArr[i].getLatLng(),
      	            stopover:stopOver}
	      		);	          	  		  
	      	}
      	  
	      	var request = {
	      			origin: start,
	      			destination: end,
	      			waypoints: waypts,
	      			optimizeWaypoints: false,
	      			travelMode: google.maps.TravelMode.WALKING
	      	};
      	  
	      	directionsService.route(request, function(response, status) {
	      		if (status == google.maps.DirectionsStatus.OK) {
	      			directionsDisplay.setDirections(response);
	      			var distanceMeters = response.routes[0].legs[0].distance.value;
	      			var duration = response.routes[0].legs[0].duration.value;
	      		}
	      	});
      	};  */
        
      	MapMgr.prototype.clearDirections = function() {
          	for (var i=0;i<this._directionsDisplayAr.length;i++) {
          		this._directionsDisplayAr[i].setMap(null);
          		this._directionsDisplayAr[i] = null;
          	}
          	this._directionsDisplayAr = [];
      	}
        
        MapMgr.prototype.getMapStyleOptions = function(isNew) {
        	
        	var poi = "";
        	if (isNew) {
        		var noPoi =  		[
                             		  {
                             		    "featureType": "landscape",
                             		    "stylers": [ {
                             		        "color": "#dfdfdf"
                             		      }]
                             		  },{
                             		    "featureType": "poi",
                             		    "elementType": "labels.icon",
                             		    "stylers": [{
                             		    	"visibility": "off"
                             		      }]
                             		  },{
                             		    "featureType": "poi",
                             		    "elementType": "labels.text",
                             		    "stylers": [{
                             		        "visibility": "off"
                             		      }]
                             		  },{
                             		    "featureType": "poi.park",
                             		    "stylers": [{
                             		        "color": "#a3d25b"
                             		      }]
                             		  },{
                             		    "featureType": "road",
                             		    "stylers": [{
                             		        "visibility": "simplifed"
                             		      },{
                             		        "weight": "0"
                             		      }]
                             		  },{
                             		    "featureType": "road",
                             		    "elementType": "labels.icon",
                             		    "stylers": [{
                             		        "hue": "#fff700"
                             		      },{
                             		        "saturation": -26
                             		      },{
                             		        "lightness": 37
                             		      },{
                             		        "visibility": "simplified"
                             		      }]
                             		  },{
                             		    "featureType": "road.highway",
                             		    "elementType": "geometry",
                             		    "stylers": [{
                             		        "color": "#BBBBBB"
                             		      },{
                             		        "weight": 0.4
                             		      }]
                             		  },{
                             		    "featureType": "road.local",
                             		    "stylers": [{
                             		        "visibility": "on"
                             		      }]
                             		  },{
                             		    "featureType": "transit",
                             		    "stylers": [{
                             		        "visibility": "off"
                             		      }]
                             		  },{
                             		    "featureType": "transit",
                             		    "elementType": "labels.text",
                             		    "stylers": [{
                             		        "visibility": "off"
                             		      }]
                             		  },{
                             		    "featureType": "water",
                             		    "stylers": [{
                             		        "color": "#24a0d0"
                             		      },{
                             		        "saturation": 50
                             		      },{
                             		        "lightness": 25
                             		      }
                             		    ]
                             		  }
                             		]
        	} else {
          	//Remove google places
          	noPoi = [{
			    featureType: "road",
			    elementType: "all",
			    stylers: [
			              { visibility: 'simplifed', weight:0 }
			            ]
			},{
				featureType: "poi",
				elementType: 'labels.text',
			    stylers: [
			              { visibility: 'off' }
			            ]
			},{
				featureType: "poi",
				elementType: 'labels.icon',
			    stylers: [
			              { visibility: 'off' }
			            ]
			},{
				featureType: "transit",
				elementType: "labels.text",
			    stylers: [
			              { visibility: 'off' }
			            ]
			}, {
          	    "featureType": "water",
          	    "stylers": [
          	      { "saturation": 48 },
          	      { "hue": "#00ff4d" },
          	      { "lightness": 26 },
          	      { "gamma": 0.85 },
          	      { "color": "#3fb3de" }
          	    ]
          	  },{
          	    "featureType": "road.highway",
          	    "elementType": "geometry",
          	    "stylers": [
          	      { "color": "#BBBBBB" },
          	      { "weight": 0.4 }
          	    ]
          	  },{
          	    "featureType": "road",
          	    "elementType": "labels.icon",
          	    "stylers": [
          	            { "hue": "#fff700" },
          	            { "lightness": 37 },
          	            { "saturation": -26 },
          	            { "visibility": "simplified" }
          	     ]
          	  }];
        	}
          	return noPoi;
        }
        
        
        
        var instance = new MapMgr();
        var instance2 = new MapMgr();
        
        MapMgr.getInstance = function(mapId) {
        	if (mapId == "attrDivMapParent") {
        		return instance2;
        	} else {
        		return instance;
        	}
        	
        }; 
        
        MapMgr.newInstance = function() {
        	return new MapMgr();
        }; 
 
        return(MapMgr);
    }

);

define('ngApp/website/cityHome/cityController',["ngApp/website/main/main",
        "app/core/mapServices",
        "app/mobile/core/mapLoader",
        "ngApp/website/map/mapMgr"],
    function(main,MapServices,MapLoader,MapMgr) {
	var app = angular.module('visitacity');

	app.controller('cityController',['$scope','$rootScope','$http','$q','$filter','$routeParams','$timeout','$location','CitySearch','GlobalDefs','GetCitiesService','MyPlansService',
	                                 'activitiesService','dataWearhouseService','paidActivityRedirectService','attractionsService','lastModService','$window','$templateCache','$compile',
	                                 'attrMapService','hotelService','validateJsonService','exprService',
	                                 function($scope,$rootScope,$http,$q, $filter, $routeParams,$timeout,$location,CitySearch,GlobalDefs,GetCitiesService,MyPlansService,
	                                		 activitiesService,dataWearhouseService,paidActivityRedirectService,attractionsService,lastModService,$window,$templateCache,$compile,
	                                		 attrMapService,hotelService,validateJsonService,exprService) {
		
		
		var hotJarInstalled = $('script').filter(function () {
		    return ($(this).attr('src') != null && $(this).attr('src').indexOf('static.hotjar.com') >=0);
		}).length;
		
		if (hotJarInstalled == 0 && ($location.$$path.indexOf("/paris") > 0 || $location.$$path.indexOf("/rome") > 0 || $location.$$path.indexOf("/london") > 0)) {
			(function(h,o,t,j,a,r){
				h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
			    h._hjSettings={hjid:1192992,hjsv:6};
			    a=o.getElementsByTagName('head')[0];
			    r=o.createElement('script');r.async=1;
			    r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
			    a.appendChild(r);
			})(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');
		}
		
		
		
		var to1 = null;
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.cityLegal = $routeParams.city;
		$scope.homeImage = null;
		$scope.cityObj = null;
		$scope.cityName = null;
		$scope.numOfGuides = null;
		$scope.itinArr = null;
		$scope.countryTopItins = null;
		$scope.maxDays = null;
		$scope.minDays = null;
		$scope.itinDays = new Array();
		$scope.cityLinks = null;
		$scope.siteTypeArr = null;
		$scope.paCategoryArr = null;
		$scope.mixedSitesCategoriesArr = new Array();
		$scope.citiesArr = null;
		$scope.regionCities = null;
		$scope.popularCitiesArr = null;
		$scope.topPa = null;
		$scope.curruncyMgr = null;
		$scope.selectedDays = null;
		$scope.selectedItin = null;
		//$scope.paRedirect = paidActivityRedirectService;
		$scope.allAttractions = null;
		$scope.allPaidActivities = null;
		$scope.attractions = null;
		$scope.searchSelected;
		$scope.citySearch = CitySearch;
		$scope.pageName = "city";
		$scope.cityTitle = "";
		$scope.hide_my_plans = "none";
		$scope.lang = $routeParams.lang;
		createCookie("activeLang",$scope.lang,365);
		$scope.descMain = null;
		$scope.descMore = null;
		$scope.selectedCity = null;
		$scope.itrLimit = 4;
		$scope.regionName = null;
		$scope.hasAttractions = false;
		$scope.showEdit = $location.$$search.edit;
		var numbers = ["","One","Two","Three","Four","Five","Six","Seven","Eight","Nine",
		               "Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen","Twenty",
		               "Twenty One","Twenty Two","Twenty Three","Twenty Four","Twenty Five"];
		$scope.showMapOverlay = false;
		$scope.degreeLetter = null;
		$scope.regionMapHeight = null;
		$scope.topCities = null;
		$scope.itrPath = "";
		$scope.country = null;
		var mapPosition = null;
		var cityMap = new Object();
		
		//trustpilot widget
		$scope.showTrustPilot = false;
		$scope.trCitiesArr = ["/paris","/rome","/london","/tokyo","/florence","/barcelona","/sydney"];
       	for (var i=0;i<$scope.trCitiesArr.length;i++) {
       		if ($location.$$path.indexOf($scope.trCitiesArr[i]) > 0) {
        		$scope.showTrustPilot = true;
        		var trustbox = document.getElementById('trustbox');
        		window.Trustpilot.loadFromElement(trustbox);
        		break;
       		}
       	}
		
		
		var ajaxLoadTiming = new TrackTiming("PageCoreLoadNew", "ajax_data_time"); 
		lastModService.setLastMod($scope.cityLegal).then(
	   			 function(results) {
	   				loadCity();
	   			 }, function(errors) {
	   			 
	   			 }
	   	);
		
		function loadCity() {
			var callLink = '/jsonws/' + $scope.cityLegal + '/city-data' + getActivitiesVendorPath(); 
			var wearhouseId = "city-data-" + $scope.cityLegal + $routeParams.lang;
			if ($routeParams.lang != "en") {
				callLink += "/" + $routeParams.lang;
			}
			
			var callA = dataWearhouseService.getData(callLink,wearhouseId);
			var callB = GetCitiesService.async();
			$q.all(new Array(callA,callB)).then(
	   			 function(results) {
	   				ajaxLoadTiming.send();
	   				$scope.hasAttractions = results[0].data.attractionJson.length > 0;
	   				$scope.cityObj = hotelService.isShowHotel(results[0].data.city,"city");
	   				
	   				/**
	   				 * EXPERIMENTS
	   				 */
	   				$scope.paStartIdx = 0;
	   				$scope.additionlPaidActivities = exprService.isInExperiment("expr-city-additional-pa",80);
	   				$scope.additionlPaidActivitiesWithTitle = false;
	   				$scope.title1 = $filter('translateFilter')("Popular **city** Guides","**city**",$scope.cityObj.name);
	   				$scope.title2 = "";
	   				if ($scope.additionlPaidActivities) {
	   					$scope.additionlPaidActivitiesWithTitle = exprService.isInExperiment("expr-city-additional-pa-with-title",50);
	   					$scope.additionlPaidActivitiesTitleSelfGuided = exprService.isInExperiment("expr-city-additional-pa-with-title-self-guided",50);
	   					$scope.paStartIdx = 4;
	   					if ($scope.additionlPaidActivitiesWithTitle) {
	   						if ($scope.additionlPaidActivitiesTitleSelfGuided) {
	   							exprService.fireExperimentEvent("expr-city-additional-pa","expr-city-additional-pa-two-titles-self-guided");
	   							$scope.title1 = $filter('translateFilter')("Popular **city** Self-Guided Tours","**city**",$scope.cityObj.name);
	   							$scope.title2 = $filter('translateFilter')("Popular **city** Guided Tours & Activities","**city**",$scope.cityObj.name);
	   						} else {
	   							exprService.fireExperimentEvent("expr-city-additional-pa","expr-city-additional-pa-two-titles-itinerary");
	   							$scope.title1 = $filter('translateFilter')("Popular **city** Itineraries","**city**",$scope.cityObj.name);
	   							$scope.title2 = $filter('translateFilter')("Popular **city** Tours & Activities","**city**",$scope.cityObj.name);
	   						}
	   					} else {
	   						if ($scope.additionlPaidActivitiesTitleSelfGuided) {
	   							exprService.fireExperimentEvent("expr-city-additional-pa","expr-city-additional-pa-one-title-self-guided");
	   							$scope.title1 = $filter('translateFilter')("Popular **city** Self-Guided Tours & Activities","**city**",$scope.cityObj.name);
	   						} else {
	   							exprService.fireExperimentEvent("expr-city-additional-pa","expr-city-additional-pa-one-title-itinerary");
	   							$scope.title1 = $filter('translateFilter')("Popular **city** Itineraries, Tours & Activities","**city**",$scope.cityObj.name);
	   						}
	   					}
	   				} else {
	   					exprService.fireExperimentEvent("expr-city-additional-pa","expr-city-additional-pa-false");
	   				}
	   				
	   				/**
	   				 * ***********************************************
	   				 */
	   				
	   				
	   				$scope.homeImage = $scope.cityObj.wideImageOpt != null && $scope.cityObj.wideImageOpt.id != null ? $scope.imagesCdn + "/uploaded-new/" + $scope.cityObj.wideImageOpt.id : $scope.imagesCdn+"/cities/"+$scope.cityLegal+"/home/slideshow/city_home.jpg";
	   				$scope.regionName = $scope.cityObj.region;
	   				$scope.topCities = results[0].data.topCities;
	   				$scope.selectedCity = $scope.cityObj; 
	   				$scope.maxDays = results[0].data.cityMaxItrDays;
	   				$scope.minDays = results[0].data.cityMinItrDays != null ? results[0].data.cityMinItrDays : 1;
	   				$scope.numOfGuides = results[0].data.numOfGuides;
	   				$scope.itinArr = results[0].data.topItins;
	   				var mapPositionStr = results[0].data.mapPosition;
	   				$scope.countryTopItins = results[0].data.countryTopItins;
	   				$scope.regionTopItins = results[0].data.regionTopItins;
	   				
	   				//limits
	   				$scope.regionLimit = 6;
	   				$scope.countryLimit = 6;
	   				if ($scope.countryTopItins != null && $scope.countryTopItins.length > 0 && $scope.regionTopItins != null && $scope.regionTopItins.length) {
	   					$scope.regionLimit = 4;
		   				$scope.countryLimit = 4;
	   				}
	   				$scope.citiesArr = results[1];
	   				$scope.country = $filter('filter')($scope.citiesArr, function(value, index){ if (value.status == 'production' && value.legalName.toLowerCase() == $scope.cityObj.country.legalName.toLowerCase() && value.id != $scope.cityObj.id) { return true;}});
	   				$scope.regionCity = $filter('filter')($scope.citiesArr, function(value, index){ if ($scope.cityObj.region != null && $scope.cityObj.region.length > 0 && value.status == 'production' && value.cityType == 'region' && value.region != null && value.region.toLowerCase() == $scope.cityObj.region.toLowerCase()) { return true;}})[0];
   				
	   				$scope.siteTypeArr = $filter('filter')(results[0].data.siteTypes, {hasMenuItem: true}, true);
	   				$scope.paCategoryArr = results[0].data.paCategory;
	   				if (results[0].data.regionMapHeight != null) {
	   					//handle height of the region map
	   					$scope.regionMapHeight = results[0].data.regionMapHeight;
	   				}
	   				$scope.cityName = $scope.cityObj.name;
	   				if ($scope.cityObj.destinationOverrideId != null && $scope.cityObj.region != null && $scope.cityObj.region.length > 0) {
	   					$scope.cityName = $scope.cityObj.region
	   				}
	   				if ($scope.cityObj.cityType == 'region' && $scope.topCities.length > 0) {
	   					$scope.cityObj.weatherList = $scope.topCities[0].weatherList;
	   					$scope.topCities = null;
	   				}
	   				$scope.normalizeTemp($scope.cityObj);
	   				if ($scope.topCities != null && $scope.topCities.length > 0) {
	   					for (var i=0;i<$scope.topCities.length;i++) {
	   						$scope.normalizeTemp($scope.topCities[i]);
	   					}
	   				}
   				
	   				//Filter out sub categories
	   				$scope.paCategoryArr = $filter('filter')($scope.paCategoryArr,  function(value, index){ return value.vendorSubCatId==null});
	   				//$scope.topPa = $filter('limitTo')(results[0].data.topPa, 4);
	   				$scope.topPa = results[0].data.topPa;
	   				$scope.attractions = results[0].data.attractionJson;
	   				for (var i=0;i<$scope.attractions.length;i++) {
	   					//required for country/region
	   					var attrCity = $filter('filter')($scope.citiesArr, {id:$scope.attractions[i].cityId}, true)[0];
	   					if (attrCity != null) {
	   						$scope.attractions[i].cityName = attrCity.name;
		   					$scope.attractions[i].cityLegal = attrCity.legalName;
	   					}
	   					
	   				}
	   				$scope.cityTitle = $filter('translateFilter')("Create Your **city** Guide","**city**",$scope.cityObj.name);
	   				
	   				$scope.regionCities = results[0].data.regionCities;
	   				if ($scope.cityObj.cityType == 'country' || $scope.cityObj.cityType == 'region') {
	   					$scope.itrPath = "-r";
	   					if ($scope.cityObj.cityType == 'country') {
	   						$scope.itrLimit = 9;
	   					}
	   					$scope.regionName = $scope.cityObj.name; 
	   					
	   				} else if ($scope.regionCities != null && $scope.regionCities.length > 0) {
	   					mapPosition = new Object();
	   					mapPosition.lat = $scope.cityObj.latitude;
	   					mapPosition.lng = $scope.cityObj.longitude;
	   					mapPosition.zoom = 8;
	   					//$scope.cityObj.region = $scope.cityObj.name;
	   				}
	   				$scope.processItins($scope.itinArr);
	   				if ($scope.countryTopItins != null && $scope.countryTopItins.length > 0) {
	   					$scope.processItins($scope.countryTopItins);
	   				}
	   				if ($scope.regionTopItins != null && $scope.regionTopItins.length) {
	   					$scope.processItins($scope.regionTopItins);
	   				}
	   				
	   				//$scope.cityObj.region = $scope.cityObj.region == null || $scope.cityObj.region.length == 0 ? $scope.cityObj.name : $scope.cityObj.region;
	   				if (mapPositionStr != null && mapPositionStr.length > 0) {
	   					mapPosition = angular.fromJson(mapPositionStr);
	   				}
	   				
	   				if ($scope.cityObj.description != null && $scope.cityObj.description.length > 0) {
	   					var tmpArr = $filter('cut')($scope.cityObj.description,true,550,'','.',true);
	   	   				if ((tmpArr[1] != null && tmpArr[1].length < 100 || $scope.itinArr.length == 0)) {
	   	   					$scope.descMain = $scope.cityObj.description;
	   	   				} else {
	   	   					$scope.descMain = tmpArr[0];
	   	   					$scope.descMore = tmpArr[1];
	   	   				}
	   				}
	   				
	   				
	   				setNearbyCities();
	   				if ($scope.regionCities != null && $scope.regionCities.length > 0) {
	   					$scope.regionMapExperiment = exprService.isInExperiment("expr-city-region-map",50);
	   					if ($scope.regionMapExperiment) {
	   						exprService.fireExperimentEvent("expr-city-region-map","expr-city-region-map-show");
	   						angular.element($window).bind("scroll", function() {
		   						loadMapOnScroll();
		   			        });
	   					} else {
	   						exprService.fireExperimentEvent("expr-city-region-map","expr-city-region-map-hide");
	   					}
	   				}
	   				

	   				
	   				var paCatIdx = 2;
	   				var siteCatIdx = 2;
	   				//1,4,6
	   				if ($scope.cityObj.cityType != 'country' && $scope.cityObj.cityType != 'region') {
		   				for (var i=0;i<9;i++) {
		   					if (i == 0) {
		   						$scope.mixedSitesCategoriesArr.push(generateObj($scope.paCategoryArr[0],$filter('translateFilter')("Popular Things To Do in **city**","**city**",$scope.cityObj.name)));
		   						continue;
		   					}
		   					if (i == 1 && $scope.siteTypeArr.length > 0 && $scope.attractions.length > 0) {
		   						$scope.mixedSitesCategoriesArr.push(generateObj($scope.siteTypeArr[0],$filter('translateFilter')("**city** Attractions","**city**",$scope.cityObj.name)));
		   						
		   						continue;
		   					}
		   					if (i == 4 || i ==6) {
		   						if ($scope.siteTypeArr[siteCatIdx] != null) {
		   							$scope.mixedSitesCategoriesArr.push(generateObj($scope.siteTypeArr[siteCatIdx]));
		   							siteCatIdx++;
		   							continue;
		   						}
		   					}
		   					if ($scope.paCategoryArr[paCatIdx] != null) {
		   						$scope.mixedSitesCategoriesArr.push(generateObj($scope.paCategoryArr[paCatIdx]));
		   						paCatIdx++
		   					}
		   				}
	   				} else {
	   					$scope.mixedSitesCategoriesArr.push(generateObj($scope.paCategoryArr[0],$filter('translateFilter')("Popular Things To Do in **city**","**city**",$scope.cityObj.name)));
	   					var maxCats = 8;
	   					if ($scope.paCategoryArr.length < maxCats) {
	   						maxCats = $scope.paCategoryArr;
	   					}
	   					for (var i=3;i<maxCats;i++) {
	   						$scope.mixedSitesCategoriesArr.push(generateObj($scope.paCategoryArr[i]));;
	   					}
	   				}
	   				
	   				for (var i=$scope.minDays;i<=$scope.maxDays;i++) {
	   					if (i==1) {
	   						$scope.itinDays.push($filter('translateFilter')("**city** in","**city**",$scope.cityObj.name) + " " + $filter('translateFilter')(numbers[i]) + " " + $filter('translateFilter')("Day"));
	   					} else {
	   						$scope.itinDays.push($filter('translateFilter')("**city** in","**city**",$scope.cityObj.name) + " " + $filter('translateFilter')(numbers[i]) + " " + $filter('translateFilter')("Days"));
	   					}
	   				}
	   				
	   				$scope.selectedDays = $scope.itinDays[$scope.cityObj.popularNoOfDays-$scope.minDays];
	   				if ($scope.itinArr.length > 0) {
	   					$scope.selectedItin = $scope.itinArr[0];
	   				}
	   				
	   				require(
		    	    	    ["app/extensions/core/currency"],
		    	    	    function(CurrencyMgr) {
		    	    	    	$scope.curruncyMgr = new CurrencyMgr();
		    	    	    	for (var i=0;i<$scope.topPa.length;i++) {
		       					 	$scope.curruncyMgr.fixCurrencyElement(document.getElementById("pa_" + $scope.topPa[i].id));
		       					 	if ($scope.topPa[i].priceBeforeDiscount != null) {
		       					 		$scope.curruncyMgr.fixCurrencyElement(document.getElementById("pabefore_" + $scope.topPa[i].id));
		       					 	}
		       					 
		       				 	}
		    	    	    });
	   				individualPageLoadTiming.send();
	   				
	   				//load attractions and activities json for cache
	   				to1 = $timeout(function() {
	   					var callArr = new Array();
	   					if ($scope.cityObj.cityType != "country" && $scope.cityObj.cityType != "region" && $scope.hasAttractions) {
	   						callArr.push(attractionsService.init($scope.cityLegal));
	   					}
	   					callArr.push(activitiesService.init($scope.cityLegal));
	   					$q.all(callArr).then(
	   			   			 function(results) {
	   			   				 if (attractionsService.allAttractionsData != null && attractionsService.allAttractionsData.lstSites != null) {
	   			   					 $scope.allAttractions = attractionsService.allAttractionsData.lstSites;
	   			   					 $scope.allAttractions = $scope.allAttractions.concat(activitiesService.allActivities);
	   			   				 }
	   			   				 
	   			   		}, function(errors) {
	   		   			 
	   	   			 
	   					});
	   					
	                 }, 500);
	   				
	   				$timeout(function() {
	   					var bc = new Array();
	   					$rootScope.$broadcast("update_breadcrumb",bc, $scope.cityObj, $scope.lang);
	   					$window.document.title = "Visit " + $scope.cityObj.name + " - " + $scope.cityObj.name + " Trip Planning";
	   					$rootScope.$broadcast("update_main_header_width","attractionController");
	   				}, 200);
   				
	   			 }, function(errors) {
	   				validateJsonService.validateJsonObject(null, "city-data", null, null, null);
	   			 }
		   	);
		}
		
		$(window).on("resize.doResize", function (){
			$rootScope.$broadcast("update_main_header_width","attractionController");
		});
		
		

		//Load the map of the region only when user scrolls to that location
		function loadMapOnScroll() {
			var mapIndicator = $("#cityMapIndicator");
			var mapIndicatorPosition = 	mapIndicator.position().top; 
			var scrollTop = $(window).scrollTop();
			//console.log(mapIndicatorPosition + "::" + (scrollTop + $(window).height()));
			if (mapIndicatorPosition-200 <= (scrollTop + $(window).height())) {
				window.angular.element($window).off('scroll');
				var callA = MapLoader.getInstance().load();
				var callB = attrMapService.init($scope.cityLegal,"citypage",true);
				$q.all(new Array(callA,callB)).then(
			   			 function(results) {
			   				 loadMapAsync();
			   			 });
				
			}
			
		}
		
		$scope.$on("$destroy",function() {
			//attractionsService.cleanup();
			MapMgr.getInstance().removeOverlays();
	    	MapMgr.getInstance().hideMap();
	    	MapMgr.getInstance().clearEventListeners();
			$( window ).off( "resize.doResize" );
			$timeout.cancel( to1 );
			window.angular.element($window).off('scroll');
		 });    
		
		$scope.processItins = function(itinArr) {
			for (var i=0;i<itinArr.length;i++) {
				var curItin = itinArr[i];
				if (curItin == null) {
					continue;
				}
				var itinCity = $scope.cityObj;
				if ($scope.cityObj.id != curItin.cityId) {
					itinCity = $filter('filter')($scope.citiesArr, {id:curItin.cityId}, true)[0];
				}
				curItin.city = itinCity;
				curItin.itrPath = itinCity.cityType == 'country' || itinCity.cityType == 'region' ? "-r" : "";
			}
		}
		
		$scope.normalizeTemp = function(city) {
			if (city.weatherList != null) {
				for (var i=0;i<city.weatherList.length;i++) {
					var cur = city.weatherList[i];
					cur.maxTemp = getIsMeter() ? cur.maxTempCel :  cur.maxTempFar;
					cur.minTemp = getIsMeter() ? cur.minTempCel :  cur.minTempFar
				}
			}
			$scope.degreeLetter = getIsMeter() ? "C" : "F";
		}
		
		function loadMapAsync() {
			var callA = MapMgr.getInstance().load();
			var callB = attrMapService.processData($scope.cityObj);
			$q.all(new Array(callA,callB)).then(
  				function(results) {
  					$scope.citiesArr = attrMapService.getCitiesArr();
   					$scope.allCities = attrMapService.getAllCities();
   					cityMap = attrMapService.getCityMap();

  					var mapOptions = {
				        zoom: 14,
				        mapTypeId: google.maps.MapTypeId.ROADMAP,
				        scrollwheel: false,
				        panControl: false,
				        draggable: true,
				        zoomControlOptions: {
				        	position: google.maps.ControlPosition.LEFT_BOTTOM
				        },
				        scaleControl: false,
				        streetViewControl: false
		            };
  					attrMapService.setMap(MapMgr.getInstance().initMapObject(mapOptions,true,false,"divMapParent"));

					MapMgr.getInstance().initializeMap("divMapParent", mapPosition, cityMap , $scope.cityObj.id, null,false, true, false, false);
					
					
					
					//zoom event
					var gEvt1 = google.maps.event.addListener(attrMapService.getMap(), 'idle', function() {
						if (attrMapService.getMap().getBounds() != null) {
							MapMgr.getInstance().drawOverlays("divMapParent", mapPosition, cityMap , $scope.cityObj.id, $scope.numOfSites, $scope.showEdit == 1 ? true : false,false,true);
							var si = setInterval(function(){
								var doRun = false;
								for (key in cityMap) {
									if ($("#divMapCityImg_" + key)[0] != null) {
			        					doRun = true;
			        					break;
			        				}
								}
								if (doRun) {
									clearInterval(si);
									setTimeout( function() {
										attrMapService.setAttrZoom(attrMapService.getMap().getZoom() >= 11)
										//handleMap();
										attrMapService.attractionInView();
									},200);

								}
							}, 100);
							
						}
					});
					MapMgr.getInstance().addEventListener(gEvt1);
							
  				}
  			);
		}
		
		$( "body" ).on( "mapCreate", function() {
			 $("#divMapParent").css("border","none");
			 $("#divMapParent").css('height',$scope.regionMapHeight != null && $scope.regionMapHeight.length > 0 ? $scope.regionMapHeight : "530px");
			 
		});
		
		//Restore all the lables to be shown and the fix collisons
		function handleMap() {
			attrMapService.setAttrZoom(attrMapService.getMap().getZoom() >= 11)
			for (key in cityMap) {
				$('#titleMapCityImg_' +key).css("opacity","1");
				$('#divMapCityImg_' +key).css("opacity","1");
			}
			attrMapService.fixColision($scope.citiesArr,"MapCityImg_",true);
			var showCounter = 0;
			for (key in cityMap) {
				if ($('#titleMapCityImg_' + key).css("opacity") != "0.01") {
					$('#titleMapCityImg_' + key).css("opacity","1");
					$('#divMapCityImg_' + key).css("opacity","1");
					
					
					if ($('#titleMapCityImg_' + key)[0]) {
						showCounter++;
						if (showCounter < 15) {
    						$('#titleMapCityImg_' + key).addClass("map_name_wrapper-large");
    					}
					}
				} else {
					$('#titleMapCityImg_' + key).css("opacity","0");
					$('#divMapCityImg_' + key).css("opacity","0");
					$('#titleMapCityImg_' + key).removeClass("map_name_wrapper-large");
				}
			}
			
			/*for (var i=0;i<cityMap[$scope.cityObj.id].attractionsArr.length;i++) {
				$('#titleMapCityImg' +  cityMap[$scope.cityObj.id].attractionsArr[i].id).show();
				$('#titleMapCityImg' +  cityMap[$scope.cityObj.id].attractionsArr[i].id).css("opacity","1");
				$('#divMapCityImg_' +  cityMap[$scope.cityObj.id].attractionsArr[i].id).css("opacity","1");
				$('#divMapCityImg_' +  cityMap[$scope.cityObj.id].attractionsArr[i].id).show();
				$('#titleMapCityImg' +  cityMap[$scope.cityObj.id]).addClass("map_name_wrapper-large");
			}
			try {
				attrMapService.fixColision(cityMap[$scope.cityObj.id].attractionsArr,"MapCityImg_",true);
			} catch (err) {}*/
			
		}
		
		
		$scope.hideMapOverlay = function() {
			$('#cityMapOverlay').animate({"width": '-=200'},500,function() {
				$scope.showMapOverlay = false;
				$scope.$apply();
			});
		}
		
		
		$scope.showSite = function(curSite){
			/*$scope.selectedCity = curSite;
			fireEvent("citypage","region map clicked",curSite.legalName);
			//if (!$scope.showMapOverlay) {
			$('#cityMapOverlay').animate({"width": '+=200'});
			$scope.showMapOverlay = true;
			//}
			$scope.$apply();*/
			
			//if (curSite.wasCreated == null) {
				//$rootScope.$broadcast("maphoverin-ng",[$(baseDivId + attr.id),attr.id]);
			var baseDivId = "#divMapCityImg_";
			attrMapService.prepareQtip($(baseDivId + curSite.id),curSite.id,curSite);
			//curSite.wasCreated = true;
			//}
		}
		
	
		$scope.hideSite = function(curSite) {
			if (curSite.notVisible && curSite.id != $scope.selectedCity.id) {
				$('#titleMapImg_' + curSite.id).hide();
				$('#divMapImg_' + curSite.id).hide();
			}
		}
		
		
		
		var maxP = null;
		var minP = null;
		$scope.getMargingBottomPrecipitation = function(wObj) {
			var FIXED_HEIGHT = 75-35; //height of the td minus the height of the green bar
			if (maxP == null || minP == null) {
				for (var i=0;i<$scope.cityObj.weatherList.length;i++) {
					if (maxP == null || maxP < $scope.cityObj.weatherList[i].chancePrecipitation) {
						maxP = $scope.cityObj.weatherList[i].chancePrecipitation;
					}
					if (minP == null || minP > $scope.cityObj.weatherList[i].chancePrecipitation) {
						minP = $scope.cityObj.weatherList[i].chancePrecipitation;
					}
				}
			}
			
			var diffMinMax = maxP-minP;
			var scale = FIXED_HEIGHT/diffMinMax;
			var mb = (wObj.chancePrecipitation-minP)*scale;
			return {"margin-bottom":mb+"px"};
		}
		
		
		
		function generateObj(origObj,title) {
			var obj = new Object();
			if (title) {
				obj.name = title;
			} else {
				obj.name = origObj.shortName != null ? origObj.shortName : origObj.name;
			}	
			if (origObj.externalImageUrl==null) {
				obj.imagePath = imagesCdn + "/uploaded-new/" + origObj.imageOpt.id;
				obj.url = appRoot + "/"+ $routeParams.lang +"/" + $scope.cityObj.legalName + "/attraction-by-type/" + origObj.legalName;
			} else {
				obj.imagePath = origObj.externalImageUrl;
				obj.url = appRoot + "/"+ $routeParams.lang +"/" + $scope.cityObj.legalName + "/activities/" + origObj.legalName;
			}
			return obj;
		}
		
		
		$scope.goToItinDay = function(id) {
			var numOfDays = $scope.itinDays.indexOf($('#' + id).find(":selected").text()) + $scope.minDays;
			$location.path("/"+ $routeParams.lang +"/" + $scope.cityObj.legalName + "/itinerary-by-day/" + numOfDays);
			if(!$scope.$$phase) $scope.$apply()
			//var url = $scope.appRoot + "/"+ $routeParams.lang +"/" + $scope.cityObj.legalName + "/itinerary-by-day/" + numOfDays;
			//window.location = url;
		}
		
		$scope.goToItin = function(id) {
			var selectedItinName = $('#' + id).find(":selected").text();
			for (var i=0;i<$scope.itinArr.length;i++) {
				if ($scope.itinArr[i].name == selectedItinName) {
					$location.path("/"+ $routeParams.lang +"/" + $scope.cityObj.legalName + "/itineraries/" + $scope.itinArr[i].legalName + "-day-1");
					if(!$scope.$$phase) $scope.$apply();
					break;
				}
			}
		}
		
		
		
		/*require(["app/extensions/core/paidActivityRedirect"],
                function(PaidActivityRedirect) {
		 					$scope.paRedirect = PaidActivityRedirect;                                         
                         }
	    		);         */
		
		$scope.redirectPa = function(paData) {
			paidActivityRedirectService.doRedirect(paData.vendor, paData.title, paData.link, "city search things to do",paData.vendorProductId, paData.id,paData.cityId,false,paData.price);
		}
		
		$scope.getCitySearchData = function() {
			console.log('getting search data');
		}
		
		$scope.cityActivitySearch = function(val) {
			if ($scope.allAttractions == null) {
				var callA = $http.get(appRoot + '/"+ $routeParams.lang +"/' + $scope.cityLegal + '/json-attractions');
				var callB = $http.get('/jsonws/' + $scope.cityLegal + '/json-activities-all');
				return $q.all(new Array(callA,callB)).then(
			   			 function(results) {
			   				$scope.allAttractions = results[1].data;
			   				$scope.allAttractions = $scope.allAttractions.concat(results[0].data);
			   				return doRunSearch(val);
			   			 }
				);
			} else {
				return doRunSearch(val); 
			}
			return new Array();
		}
		
		
		//Get the cities nearby to display in the popular attractions
		function setNearbyCities() {
			var mapSvc = new MapServices();
			var city = $filter('filter')($scope.citiesArr, {id:$scope.cityObj.id}, true)[0];
			if (city == null) {
				return;
			}
			//numOfUserPlans
			if ($scope.cityObj.cityType != null && $scope.cityObj.cityType == 'country') {
				$scope.citiesArr =  $filter('filter')($scope.citiesArr, function(value, index){ if (value.status == 'production' && value.country.id == $scope.cityObj.country.id && value.id != $scope.cityObj.id) { return true;}});
				$scope.citiesArr = $filter('orderBy')($scope.citiesArr, "numOfUserPlans", true);
			} else if (city.region != null && city.region.length > 0) {
				//check if this is a parent city
				var childRegions = $filter('filter')($scope.citiesArr, function(value, index){ if (value.parentCityId == city.id) { return true;}});
				
				if (childRegions.length > 0) {
					//show all cities in child regions
					$scope.citiesArr = $filter('filter')($scope.citiesArr, function(value, index){ 
						if (value.status != 'production') {
							return false;
						}
						var matchRegion = false;
						for (var i=0;i<childRegions.length;i++) {
							if (value.region == childRegions[i].region) {
								//match any of the child regions
								return true;
							}
						}
						return false;

					});
					
				} else {
					//show all cities in region
					$scope.citiesArr = $filter('filter')($scope.citiesArr, function(value, index){ if (value.status == 'production' && value.region == city.region) { return true;}});
				}
				
				//sort by name
				$scope.citiesArr = $filter('orderBy')($scope.citiesArr, "name", false);
				 
			} else {
				//filter production cities and not current city
				$scope.citiesArr = $filter('filter')($scope.citiesArr, function(value, index){
					if (value.status == 'production' && value.id != city.id) {
						if (value.destinationOverrideId != null && value.region != null && value.region.length > 0) {
							//skip small cities
							return false;
						}
						return true;
					}
				});
				$scope.citiesArr.sort(function(a, b) {
		    		var diffA = mapSvc.calcDistanceBetween(city.latitude, city.longitude, a.latitude, a.longitude);
		    		var diffB = mapSvc.calcDistanceBetween(city.latitude, city.longitude, b.latitude, b.longitude);
		    		if (isNaN(diffA) || isNaN(diffB)) {
		    			return -1;
		    		} else {
		    			return diffA - diffB;
		    		}
	    				
		    	});
			}
			

			if ($scope.cityObj.cityType != null && $scope.cityObj.cityType == 'country') {
				$scope.popularCitiesArr = $filter('limitTo')($scope.citiesArr,9);
			} else if (city.region != null && city.region.length > 0) {
				$scope.popularCitiesArr = $scope.citiesArr;
			} else {
				$scope.popularCitiesArr = $filter('limitTo')($scope.citiesArr,6);
			}
			
		}
		
		function doRunSearch(val) {
			fireEvent("citypage","activities search",val);
			var attractionsArray = new Array();
			var activitiesArray = new Array();
			var obj = new Object();
			obj.type = "title";
			obj.name = $filter("translateFilter")("Tours & Activities in **city**","**city**",$scope.cityObj.name);
			activitiesArray.push(obj);
			obj = new Object();
			obj.type = "title";
			obj.name = $filter("translateFilter")("Attractions in **city**","**city**",$scope.cityObj.name);
			attractionsArray.push(obj);
			for (var i=0;i<$scope.allAttractions.length;i++) {
				if ($scope.allAttractions[i].title != null && $scope.allAttractions[i].title.toLowerCase().indexOf(val.toLowerCase()) >= 0) {
					var title = $scope.allAttractions[i].title;
					var re = new RegExp(val,"gi");
					title = title.replace(re, "<b style='text-transform: capitalize;'>"+val+"</b>");
					$scope.allAttractions[i].searchDisplay = $filter('cut')(title,true,100);
					$scope.allAttractions[i].imgUrl = $filter('vacinternal')($scope.allAttractions[i].externalImageUrl);
					$scope.allAttractions[i].rating = $scope.allAttractions[i].averageRating;
					activitiesArray.push($scope.allAttractions[i]);
				}
				if ($scope.allAttractions[i].name != null && $scope.allAttractions[i].name.toLowerCase().indexOf(val.toLowerCase()) >= 0) {
					//$scope.allAttractions[i].searchDisplay = $scope.allAttractions[i].name;
					var title = $scope.allAttractions[i].name;
					var re = new RegExp(val,"gi");
					title = title.replace(re, "<b style='text-transform: capitalize;'>"+val+"</b>");
					$scope.allAttractions[i].searchDisplay = title;
					$scope.allAttractions[i].imgUrl = $scope.imagesCdn+"/uploaded-new/"+$scope.allAttractions[i].imageOpt.id;
					attractionsArray.push($scope.allAttractions[i]);
				} 
			}

			//Limit each to 10 but only if both have data, otherwise limit to 10
			var limitTo = 11;
			if (attractionsArray.length > 1 && activitiesArray.length > 1) {
				limitTo = 6;
			}
			
			var addMore = false;
			if (activitiesArray.length > limitTo) {
				addMore = true;
				
			}
			attractionsArray = $filter('limitTo')(attractionsArray, limitTo);
			activitiesArray = $filter('limitTo')(activitiesArray, limitTo);
			
			if (addMore) {
				//Show the more results link
				var obj = new Object();
				obj.type = "more";
				obj.moreval = val;
				obj.name = $filter("translateFilter")("See more **val** results","**val**",val) + " >>";
				activitiesArray.push(obj);
			}
			
			
			var res = new Array();
			
			if (activitiesArray.length > 1) {
				res = res.concat(activitiesArray);
			}
			if (attractionsArray.length > 1) {
				res = res.concat(attractionsArray);
			}
			return $filter('limitTo')(res, 20);
		}
		
		$scope.doRedirect = function(item, model, label) {
    		if (item) {
    			if (item.type == "more") {
    				var url = "/"+ $routeParams.lang +"/" + $scope.cityObj.legalName + "/activities/all-activities";//?activitiesSearchByName=" + item.moreval;
    				$location.path(url).search('activitiesSearchByName', item.moreval);
    				if(!$scope.$$phase) $scope.$apply();
    				//window.location = url;
    			} else if (item.externalImageUrl != null) {
    				$scope.redirectPa(item);
    			} else if (!item.legalName) {
    				var url = "/"+ $routeParams.lang +"/" + $scope.cityObj.legalName + "/activities/all-activities"//?activitiesSearchByName=" + $scope.searchSelected + "&activitiesSortBy=reviewersNum";
    				$location.path(url).search('activitiesSearchByName', $scope.searchSelected);
    				if(!$scope.$$phase) $scope.$apply();
    				//window.location = url;
    			} else {
    				var url = "/"+ $routeParams.lang +"/" + $scope.cityObj.legalName + "/attractions/" + item.legalName;
    				//window.location = url;
    				$location.path(url);
    				if(!$scope.$$phase) $scope.$apply();
    			}
    		}
		}
		
		$scope.doSearchEnter = function() {
    		if ($scope.searchSelected != null && $scope.searchSelected.length > 0) {
    			var arr = $scope.cityActivitySearch($scope.searchSelected);
    			if (arr.length > 0) {
    				$scope.doRedirect(arr[0]);
    			}
    		}
    	}
		
		//Save map in admin mode
		$scope.saveMap = function() {

	  		var mapData = getMapPosition();
    	
	    	$http.post(appRoot + '/admin/modifyCityGeneralConf', {cityId : $scope.cityObj.id,key: "city_page_map_position", value: angular.toJson(mapData)}).
			  success(function(data, status, headers, config) {
				  alert("Save Successfull");
			  }).error(function(data, status, headers, config) {
				  alert("Save Failed")
			  });
	    	
	    	//$http.post(appRoot + '/admin/modifyCityGeneralConf', {cityId : $scope.cityObj.id,key: "sites_on_map", value: $scope.numOfSites});
	  	}
	  	
	  	function getMapPosition() {
	    	var center = attrMapService.getMap().getCenter();
	    	
	    	return {
	    		lat: center.lat(),
	    		lng: center.lng(),
	    		zoom: attrMapService.getMap().getZoom()
	    	}
	    }
		
	}]);
	
});	

define('ngApp/website/destinations/destinationsController',["ngApp/website/main/main"],
    function(main) {
	var app = angular.module('visitacity');

	app.controller('destinationsController',['$scope','$rootScope','$http','$q','$filter','$routeParams','GlobalDefs','lastModService','GetCitiesService','$window','$timeout',
	                                 function($scope,$rootScope,$http,$q, $filter, $routeParams,GlobalDefs,lastModService,GetCitiesService,$window,$timeout) {
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.cityLegal = $routeParams.city;
		$scope.cityObj = null;
		$scope.citiesArr = null;
		$scope.lang = $routeParams.lang;
		
		var ajaxLoadTiming = new TrackTiming("PageCoreLoadNew", "ajax_data_time"); 
		lastModService.setLastMod($scope.cityLegal).then(
	   			 function(results) {
	   				loadCity();
	   			 }, function(errors) {
	   			 
	   			 }
	   	);
		
		function loadCity() {
			var callA = GetCitiesService.async();
			var callB = $http.get('/jsonws/' + $scope.cityLegal + '/cityInfo');
			$q.all(new Array(callA,callB)).then(
	   			 function(results) {
	   				ajaxLoadTiming.send();
	   				$scope.citiesArr = results[0];
	   				$scope.cityObj = $filter('filter')($scope.citiesArr, {legalName: $routeParams.city}, true)[0];
	   				$scope.regionCities = $filter('filter')($scope.citiesArr, function(value, index){ if (value.status == 'production' && value.country.id == $scope.cityObj.country.id && value.id != $scope.cityObj.id && value.cityType == 'region') { return true;}});
	   				$scope.countryCities = $filter('filter')($scope.citiesArr, function(value, index){ if (value.status == 'production' && value.country.id == $scope.cityObj.country.id && value.id != $scope.cityObj.id) { return true;}});
	   				
	   				$scope.regionCities = $filter('orderBy')($scope.regionCities, "name", false);
	   				$scope.countryCities = $filter('orderBy')($scope.countryCities, "name", false);
	   				
	   				$scope.maxDays = results[1].data.cityMaxItrDays;
	   				$scope.minDays = results[1].data.cityMinItrDays != null ? results[1].data.cityMinItrDays : 1;
	   				
	   				
	   				var bc = new Array();
   	  				bc.push({name: "Destinations"});
	   				var to1 = $timeout(function() {
	   					$rootScope.$broadcast("update_breadcrumb",bc, $scope.cityObj, $routeParams.lang);
		   				$window.document.title = "Visit " + $scope.cityObj.name + " - " + $scope.cityObj.name + " Trip Planning";
		   				$rootScope.$broadcast("update_main_header_width","countryDestinations");
		   				$timeout.cancel(to1);
	                 }, 500);
	   				
	   				
	   			 }, function(errors) {
	   			 
	   			 }
		   	);
		}
		
		$(window).on("resize.doResize", function (){
			$rootScope.$broadcast("update_main_header_width","countryDestinations");
		});
		
		$scope.$on("$destroy",function() {
			
		 });    
		
		$scope.findLongestWord = function(str) {
			  return str
			    .split(' ')
			    .sort(function(a, b) { return a.length-b.length; }) 
			    .pop().length;
		}
		
		
	}]);
	
});	

define(
    'ngApp/website/map/mapController',["app/mobile/core/mapLoader",
     "ngApp/website/map/mapMgr",
     "app/core/mapServices",
     "app/extensions/core/currency",
     "ngApp/website/main/main"],
    function(MapLoader,MapMgr,MapServices) {
	var app = angular.module('visitacity');
	
	app.controller('mapController',['$scope','$rootScope','$http', '$q', '$routeParams', 'GlobalDefs', 'dataWearhouseService', '$timeout', 
	                                'anchorSmoothScroll', '$filter', '$location', '$uibModal','attractionsService','lastModService','restaurantsService',
	                                '$window', 'LogedInUserService', 'blockUI', 'activitiesService','$templateCache','$compile','GetCitiesService','attrMapService','emailConsentService',
	                                function($scope,$rootScope,$http, $q, $routeParams, GlobalDefs, dataWearhouseService, $timeout, 
	                                		anchorSmoothScroll, $filter, $location, $uibModal,attractionsService,lastModService,restaurantsService,$window,LogedInUserService,blockUI,
	                                		activitiesService,$templateCache,$compile,GetCitiesService,attrMapService,emailConsentService) {
		
		
		emailConsentService.consentRequired().then(function(data) {
			$scope.requireEmailConsent = data;
		});
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.cityLegal = $routeParams.city;
		$scope.cityObj = null;
		$scope.noMaxDays = "";
		$scope.noMinDays = "";
		$scope.noMaxDaysLink = "";
		$scope.pageName = "cityhome"; //we want the 1 to 7 days bolder in this page
		$scope.selectedAttraction = null;
		$scope.curruncyMgr = null;
		$scope.map = null;
		$scope.directionsDisplayTransit = null;
		$scope.directionsDisplayWalking = null;
		//$scope.directionsService = null;
		//$scope.siteTypes = null;
		//$scope.selectedCategory = null;
		$scope.attractions = new Array();
		$scope.visibleAttractions = null;
		$scope.showEdit = $location.$$search.edit;
		$scope.numOfSites = null;
		$scope.directionSource = "attraction";
		//$scope.myPosition = null;
		$scope.lastNavigationDestination = null;
		$scope.leftPaneTitle = null;
		$scope.leftPaneSubTitle = null;
		$scope.inViewArrtaction = null;
		$scope.hideAttrMouseOver = null;
		$scope.paPass = null;
		$scope.lang = $routeParams.lang;
		createCookie("activeLang",$scope.lang,365);
		var gEvt1 = null;
		var gEvt2 = null;
		var gEvt3 = null;
		var allCountryActivities = null;
		$scope.citiesArr = new Array();
		$scope.allCities = new Array();
		$scope.attrZoom = true;
		$scope.defaultAttrZoom = 11;
		$scope.currentCity = null;
		$scope.isRestaurantMap = $routeParams.mapType == "restaurants-map";
		
		GetCitiesService.async();
		blockUI.start("Loading Map of Attractions...");
		var mapPosition;
		require(
	 	    	    ["app/extensions/core/currency"],
	 	    	    function(CurrencyMgr) {
	 	    	    	$scope.curruncyMgr = new CurrencyMgr();
	 	    	    });
		
		require(["app/core/login"], function(LoginMgr) {
			LoginMgr.getInstance().getLoggedInUserObject().then(function(data){
				$scope.curUsr = data;
			});
		});
		
		
		$scope.getSelectedAttractionActivities = function() {
			if ($scope.selectedAttraction != null) {
				return activitiesService.getSitePaidActivities($scope.selectedAttraction.id);	
			}
			else {
				return activitiesService.allActivities;
			}
		}
		
		var ajaxLoadTiming = new TrackTiming("PageCoreLoadNew", "ajax_data_time"); 
		
		lastModService.setLastMod($scope.cityLegal).then(
	   			 function(results) {
	   				 if ($scope.isRestaurantMap) {
	   					 $scope.loadRestaurantsMap();
	   				 } else {
	   					$scope.loadData();
	   				 }
	   				 
	   			 }, function(errors) {
	   			 
	   			 }
	   	);
		
		$scope.loadData = function() {
			var callA = attractionsService.init($scope.cityLegal);
			var callB = activitiesService.init($scope.cityLegal);
			var callC = attrMapService.init($scope.cityLegal,"MapAttractions",$scope.attrZoom);
			$q.all(new Array(callA,callB,callC)).then(
	   			 function(results) {
	   				var callD = MapMgr.getInstance().load();
	   				ajaxLoadTiming.send();
	   				$scope.cityObj = attractionsService.allAttractionsData.city;
	   				$scope.currentCity = $scope.cityObj;
	   				$scope.attractions = attractionsService.allAttractionsData.lstSites;
	   				attrMapService.processData($scope.cityObj).then(function() {
	   					$scope.citiesArr = attrMapService.getCitiesArr();
	   					$scope.allCities = attrMapService.getAllCities();
	   					cityMap = attrMapService.getCityMap();
		   				$scope.noMaxDays = attractionsService.allAttractionsData.cityMaxItrDays;
		   				$scope.noMinDays = attractionsService.allAttractionsData.cityMinItrDays;
		   				$scope.allCountryAttractions = new Array();
		   				
		   				for (key in cityMap) {
		   	        		var siteArr = cityMap[key].attractionsArr;
		   	        		if (siteArr != null) {
		   	        			cityMap[key].attractionsArr = $filter('orderBy')(cityMap[key].attractionsArr, "noPerUsers", false);
		   	        			cityMap[key].midLat = medianLat(siteArr);
		   	        			cityMap[key].midLng = medianLng(siteArr)
		   	        		}
		   	        		if (key == $scope.cityObj.id) {
		   	        			cityMap[key].attractionsArr = $scope.attractions
		   	        		}
		   				}
		   				
		   				//handle cities without attractions
		   				if ($scope.attractions.length == 0) {
		   					$scope.attractions = $scope.citiesArr[0].attractionsArr;
		   				}
		   				
		   				//use 3 for link to city itinerary unless city does not have 3 days
		   				if (parseInt($scope.noMaxDays) >=3) {
		   					$scope.noMaxDaysLink = "3";
		   				} else {
		   					$scope.noMaxDaysLink = $scope.noMaxDays;
		   				}
		   				
		   				
		   				if (isTablet()) {
		   					$scope.attractions = $scope.attractions.slice(0,80);
		   				}
		   				
		   				$scope.leftPaneTitle = "Popular " + $scope.cityObj.name;
		   				$scope.leftPaneSubTitle = "Tours & Activities";
		   				$scope.paPass = attractionsService.allAttractionsData.paPass;
		   				
		 
		   				//Map position - if not defined default to first site
		   				
		   				if (attractionsService.allAttractionsData.mapPosition) {
		   					mapPosition = angular.fromJson(attractionsService.allAttractionsData.mapPosition);
		   				} else {
		   					mapPosition = new Object();
		   					mapPosition.lat = $scope.attractions[0].latitude;
		   					mapPosition.lng = $scope.attractions[0].longitude;
		   					mapPosition.zoom = 15;
		   				}
		   				if (mapPosition.zoom < $scope.defaultAttrZoom && ($scope.cityObj.cityType == null || $scope.cityObj.cityType == 'city')) {
		   					//don't change attr zoom for cities
		   					//otherwise, if city zoom is smaller than 11 like hawaii, reikyavik etc, use this zoom as default for attractions 
		   					$scope.defaultAttrZoom = mapPosition.zoom - 1;
		   					$scope.attrZoom = false;
		   					attrMapService.setAttrZoom($scope.attrZoom);
		   				}
		   				
		   				var mapMaxDistance = attractionsService.allAttractionsData.mapMaxDistance;
		   				var mapCentralSiteId = attractionsService.allAttractionsData.mapCentralSiteId;
		   				var mapMaxDistance = attractionsService.allAttractionsData.mapMaxDistance;
		   				//$scope.numOfSites = results[0].data.sites_on_map;
		   				$scope.numOfSites  = $scope.attractions.length;
		   				//angular.copy($scope.attractions,$scope.attractions);
		   				//$scope.attractions  = JSON.parse(JSON.stringify($scope.attractions));
		   				//$scope.selectedCategory = $scope.siteTypes[0];
		   				
		   				if ($routeParams.siteId) {
							var attr = $filter('filter')($scope.attractions, {id: parseInt($routeParams.siteId)}, true)[0];
							if (attr == null) {
								for (key in cityMap) {
					        		var siteArr = cityMap[key].attractionsArr;
					        		if (siteArr != null) {
					        			attr = $filter('filter')(siteArr, {id: $routeParams.siteId}, true)[0];
					        			if (attr != null) {
					        				break;
					        			}
					        		}
								}
							}
							$scope.selectedAttraction = attr;
							if (mapPosition == null) {
								mapPosition = new Object()
							}
							mapPosition.lat = attr.latitude;
		   					mapPosition.lng = attr.longitude;
		   					if ($routeParams.mapZoom) {
		   						mapPosition.zoom = parseInt($routeParams.mapZoom);
		   						if ($routeParams.mapLat) {
		   							mapPosition.lng = $routeParams.mapLng;
		   		   					mapPosition.lat = $routeParams.mapLat;
		   						}
		   							
		   					}
		   					
		   				} else {
		   					if (mapPosition.zoom >= $scope.defaultAttrZoom) {
		   						$scope.selectedAttraction = $scope.attractions[0];
		   					}
		   				}
		  				
		   				
		   				
		   				$q.all(new Array(callD)).then(
		   						function(results) {
		   							var mapOptions = {
		   					              zoom: 14,
		   					              mapTypeId: google.maps.MapTypeId.ROADMAP,
		   					              scrollwheel: true,
		   					              panControl: false,
		   					              draggable: true,
		   					              fullscreenControl: false,
		   					              zoomControlOptions: {
		   					                  position: google.maps.ControlPosition.LEFT_BOTTOM
		   					              },
		   					              scaleControl: true,
		   					              streetViewControl: false
		   					            };
		   							attrMapService.setMap(MapMgr.getInstance().initMapObject(mapOptions,true,false,"divMapParent"));
		   							for (var i=0;i<$scope.attractions.length;i++) {
		   								$scope.attractions[i].wasCreated = null; //reset
		   							}
		   							MapMgr.getInstance().initializeMap("divMapParent", mapPosition, cityMap, $scope.selectedAttraction, $scope.numOfSites, $scope.showEdit == 1 ? true : false,false,true);
		   							
		   							//drag event
		   							gEvt1 = google.maps.event.addListener(attrMapService.getMap(), 'resize', function() {
		   								setIconSize();
		   								if ($scope.selectedAttraction != null) {
		   									$("#attraction_" + $scope.selectedAttraction.id).qtip("hide");	
		   								}
		   								
		   							});
		   							MapMgr.getInstance().addEventListener(gEvt1);
		   							
		   							//idle event
		   							gEvt2 = google.maps.event.addListener(attrMapService.getMap(), 'idle', function() {
		   								$timeout(function() {
		   									//destroy all qtip and qtip related data
		   									$('div[data-hasqtip]').each(function(){
			   									  $(this).removeAttr("data-hasqtip");
			   									  $(this).removeAttr("aria-describedby");
			   									  $(this).qtip().rendered = false;
			   									})
			   								$('div[aria-describedby]').each(function(){
			   									  $(this).removeAttr("data-hasqtip");
			   									  $(this).removeAttr("aria-describedby");
			   									  $(this).qtip().rendered = false;
			   									})
			   								$(".qtip").remove();
		   								},100);

		   								
		   								if (attrMapService.getMap().getBounds() != null) {
		   									$scope.attrZoom = attrMapService.getMap().getZoom() >= $scope.defaultAttrZoom;
		   									attrMapService.setAttrZoom($scope.attrZoom)
		   									$scope.$apply();
		   									doDrawOverlaysAsync();
		   									setIconSize();
		   									individualPageLoadTiming.send();
		   								}
		  								
		 								
		   							});
		   							MapMgr.getInstance().addEventListener(gEvt2);
	
		   				});
	   				});
	   				
	   				//Handle Breadcrumbs
	   				var bc = new Array({name: $filter('translateFilter')("Map")});
	   				var to1 = $timeout(function() {
	   					$rootScope.$broadcast("update_breadcrumb",bc, $scope.cityObj, $scope.lang);
		   				$rootScope.$broadcast("update_main_header_width","mapColumn");
		   				$window.document.title = $scope.cityObj.name + " Attractions Map | Visit A City";
		   				$timeout.cancel(to1);
	   				},1000);
	   				
	   				
	   			 }, function(errors) {
	   				 console.log(errors)
	   			 }
			);
		}
		
		$scope.loadRestaurantsMap = function() {
			//var callD = MapMgr.getInstance().load();
			var callA = MapLoader.getInstance().load();
			var callB = dataWearhouseService.getData('/jsonws/' + $scope.cityLegal  + '/city-restaurant-map-data',"city-restaurant-map-data" + $scope.cityLegal);
			$q.all(new Array(callA,callB)).then(
				function(results) {
					$scope.cityObj = results[1].data.city;
					var mapPositionData = results[1].data.mapPosition;
					MapMgr.getInstance().load().then(function() {
						var mapOptions = {
					              zoom: 14,
					              mapTypeId: google.maps.MapTypeId.ROADMAP,
					              scrollwheel: true,
					              panControl: false,
					              draggable: true,
					              fullscreenControl: false,
					              zoomControlOptions: {
					                  position: google.maps.ControlPosition.LEFT_BOTTOM
					              },
					              scaleControl: true,
					              streetViewControl: false
					            };
						MapMgr.getInstance().initMapObject(mapOptions,true,false,"divMapParent");
						MapMgr.getInstance()._mapPositionData = angular.fromJson(mapPositionData);
						restaurantsService.searchRestaurantsInArea();
						blockUI.reset();
					});
						
					
							//restaurantsService.searchRestaurantsInArea();
							/*var mapOptions = {
					              zoom: 14,
					              mapTypeId: google.maps.MapTypeId.ROADMAP,
					              scrollwheel: true,
					              panControl: false,
					              draggable: true,
					              fullscreenControl: false,
					              zoomControlOptions: {
					                  position: google.maps.ControlPosition.LEFT_BOTTOM
					              },
					              scaleControl: true,
					              streetViewControl: false
					            };*/
						}
			);
		}
		
		function doDrawOverlaysAsync() {
			MapMgr.getInstance().drawOverlays("divMapParent", mapPosition, cityMap , $scope.selectedAttraction, $scope.numOfSites, $scope.showEdit == 1 ? true : false,false,true,false,false,$scope.defaultAttrZoom);
				//$("#attraction_" + $scope.selectedAttraction.id).qtip("hide");
				$scope.fireEvent("MapAttractions","Map bounds changed","zoom");
				var si = setInterval(function(){
					var doRun = false;
					for (key in cityMap) {
						if ($("#divMapCityImg_" + key)[0] != null) {
							doRun = true;
							break;
						}
		        		var siteArr = cityMap[key].attractionsArr;
		        		if (siteArr != null) {
		        			for (var i=0;i<siteArr.length;i++) {
		        				if ($("#divMapImg_" + siteArr[i].id)[0] != null) {
		        					doRun = true;
		        					break;
		        				}
		        			}
		        		}
					}
					if (doRun) {
						clearInterval(si);
						setTimeout( function() {
								attrMapService.attractionInView();
								if ($routeParams.siteId) {
									//Handle when opening from attraction page
									if ($scope.selectedAttraction != null) {
										var attr = $scope.selectedAttraction;
										setTimeout( function() {
											$scope.showSite(attr);
										},1600);
										$location.search({}).replace();
										
	   								}
								}
							},200);

					}
				}, 100);
		}
		
		$( "body" ).on( "mapCreate", function() {
			 $("#divMapParent").css("border","1px solid #bebebe");
			 $("#divMapParent").css("min-heigh","300px");
			 $("#divMapParent").css("height",$(window).height() - 55);
		});
		$( "body" ).on( "unblockui", function() {
			setTimeout( function() {
				blockUI.reset();
				$scope.$apply();
			},500);
			$( "body").off("unblockui");
		});
		
		
		/**
		 * When zoom in/out, set the icon size and position
		 */
		function setIconSize() {
			var mapZoom = attrMapService.getMap().getZoom();
				if (mapZoom >= 13) {
					var iconSize = (mapZoom - 13) * 2 + 16 + "px";
					for (var i=0;i<$scope.allCountryAttractions.length;i++) {
			  			var curAttr = $scope.allCountryAttractions[i];
			  			$("#imgMapImg_" + curAttr.id).css("height",iconSize);
			  			$("#imgMapImg_" + curAttr.id).css("width",iconSize);
					}
				}
			
		}
		
		
		
		
		
		$scope.showSite = function(attr,evt1) {
			if (evt1) {
				google.maps.event.removeListener(evt1);
			}
			var to = 0;
			var latLng = new google.maps.LatLng(attr.latitude, attr.longitude);
    		if (!attrMapService.getMap().getBounds().contains(latLng)) {
    			attrMapService.getMap().panTo(latLng);
    			to = 500;
    		}
    		var baseDivId = "#divMapImg_";
    		var city = null;
    		if (attr.country != null) {
    			baseDivId = "#divMapCityImg_";
    			city = attr;
    		}
    		setTimeout( function() {
				//if (attr.wasCreated == null) {
    			if (!$(baseDivId + attr.id).qtip().rendered) {
					attr.wasCreated = true;
					attrMapService.prepareQtip($(baseDivId + attr.id),attr.id,city);
				} else {
					setTimeout( function() {
						$(baseDivId + attr.id).qtip('show');
					},200);
					
				}
    		},to);
		}
		
		var curCityId = null;
		$scope.changeAttraction = function(attr) {
			if (attr.cityId != curCityId) {
				//load activities when changing cities
				activitiesService.init(attr.cityId);
				curCityId = attr.cityId;
			}

			var latLng = new google.maps.LatLng(attr.latitude, attr.longitude);
    		if (!attrMapService.getMap().getBounds().contains(latLng)) {
    			attrMapService.getMap().panTo(latLng);
    		}
    		
			$scope.selectedAttraction = attr;
			$("#detailsPane").fadeOut({
				start:function() {
					$scope.leftPaneTitle = $scope.selectedAttraction.shortTitle;
					$scope.leftPaneSubTitle = "Related Activities";
				},
				duration: 200,
				always:function() {
					$("#detailsPane").fadeIn(2000);
				}
			});
			

		}
		
		$scope.panToCity = function(city) {
			var latLng = new google.maps.LatLng(city.latitude, city.longitude);
			attrMapService.getMap().panTo(latLng);
			attrMapService.getMap().setZoom(14);
		}
		
		function medianLat(array) {
			array.sort(function(a, b) {
				return a.latitude - b.latitude;
			});
			var mid = array.length / 2;
			var res = mid % 1 ? array[mid - 0.5] : (array[mid - 1] + array[mid]) / 2; 
			return res.latitude 
		}
  	  
		function medianLng(array) {
			array.sort(function(a, b) {
				return a.longitude - b.longitude;
			});
			var mid = array.length / 2;
			var res = mid % 1 ? array[mid - 0.5] : (array[mid - 1] + array[mid]) / 2; 
			return res.longitude 
		}
  	    
		
		
		
		
		//Show site pic on mouse over
		$scope.showPicMouseOver = function(attraction) {
			$('#titleMapImg_' + attraction.id).addClass("map_name_wrapper_inverted");
			$('#titleMapImg_' + attraction.id).css("z-index","11");
			$('#titleMapImg_' + attraction.id).attr("isvisible",$('#titleMapImg_' + attraction.id).is(':visible'));
			$('#titleMapImg_' + attraction.id).show();
		}
		
		$scope.hidePicMouseOver = function(attraction) {
			$('#titleMapImg_' + attraction.id).removeClass("map_name_wrapper_inverted");
			$('#titleMapImg_' + attraction.id).css("z-index","10");
			
			//If name was previously hidden, rehide on mouse out
			if ($('#titleMapImg_' + attraction.id).attr("isvisible") == "false") {
				$('#titleMapImg_' + attraction.id).hide();
			}
			$('#titleMapImg_' + attraction.id).attr("isvisible","");
		}
		
		$scope.highlightCity = function(id) {
			if ($('#divMapCityImg_' + id).css("display") != "block") {
				$('#divMapCityImg_' + id).show();
			}
			$('#titleMapCityImg_' + id).addClass("map_name_wrapper_inverted");
		}
		
		$scope.unHighlightCity = function(id) {
			$('#titleMapCityImg_' + id).removeClass("map_name_wrapper_inverted");
		}
		
		
		/*require(["app/extensions/core/paidActivityRedirect"],
                function(PaidActivityRedirect) {
		 					$scope.paRedirect = PaidActivityRedirect;                                         
                         }
	    		);         */
		
		/*$scope.redirectPa = function(paData, src) {
			if (paData == "citypass") {
				paData = $scope.paPass; 
			}
			if (paData.id == null) {
				var paIdInt = parseInt(paData);
				for (var i=0;i<$scope.attractions.length;i++) {
					var currAttPaList = activitiesService.getSitePaidActivities($scope.attractions[i].id);
					var pa = $filter('filter')(currAttPaList, {id: paIdInt}, true);
					if(pa.length > 0) {
						paData = pa[0];
						break;
					}
				}
				
			}
			$scope.paRedirect.redirect(paData.vendor, paData.title, paData.link, src);
		}*/
		 
		
		
		
		
		$scope.fireEvent = function(category, action, value) {
			fireEvent(category, action, value);
		}
		
		
		
		
		//Save map in admin mode
		$scope.saveMap = function() {

	  		var mapData = getMapPosition();
    	
	    	$http.post(appRoot + '/admin/modifyCityGeneralConf', {cityId : $scope.cityObj.id,key: "city_map_position", value: angular.toJson(mapData)}).
			  success(function(data, status, headers, config) {
				  $http.post(appRoot + '/admin/modifyCityGeneralConf', {cityId : $scope.cityObj.id,key: "sites_on_map", value: $scope.numOfSites}).
					  success(function(data, status, headers, config) {
						  alert("Save Successfull");
						  
					  }).error(function(data, status, headers, config) {
						  alert("Save Failed")
					  });
			  }).error(function(data, status, headers, config) {
				  alert("Save Failed")
			  });
	    	
	    	//$http.post(appRoot + '/admin/modifyCityGeneralConf', {cityId : $scope.cityObj.id,key: "sites_on_map", value: $scope.numOfSites});
	  	}
	  	
	  	function getMapPosition() {
	    	var center = attrMapService.getMap().getCenter();
	    	
	    	return {
	    		lat: center.lat(),
	    		lng: center.lng(),
	    		zoom: attrMapService.getMap().getZoom()
	    	}
	    }
	  	
	  	//Show/hide print/download dialog
	    $scope.toggleModal = function(action){
	    	if (!$scope.attrZoom) {
	    		return;
	    	}
	    	//"without-stay-uptodate"
	    	//var modalVer = "";
	    	
	    	//experiment active for download, non-eu and english only
	    	/*try {
	    		if (globExprVars != null && globExprVars["map_download_expr"] != null
	    				&& !$scope.requireEmailConsent 
	    				&& $scope.lang == "en") {
	    			modalVer = globExprVars["map_download_expr"];
	    		}
	    	} catch (ex) {}*/
	    	
	    	$scope.abNum = $scope.requireEmailConsent ? "100" : "1";
	    	fireEvent("Download",action.toLowerCase() + "_map_" + $scope.abNum + "_open","map page");
	    	var di = $uibModal.open({
			      templateUrl: 'ngApp/website/map/download-modal.html',
			      windowClass : 'itinerary-download-black-lg',
			      controller: 'ModalInstanceCtrl',
			      resolve: {
			          city: function () {
			            return $scope.currentCity;
			          },
			          action: function () {
			        	  return action
			          },
			          user: function() {
			        	  return $scope.curUsr != null ? $scope.curUsr.email : null;
			          }
			          
			       }
			});
	    };
	    
	    //Show/hide print/download dialog
	    $scope.downloadApp = function(action){
	    	$scope.abNum = $scope.requireEmailConsent ? "100" : "1";
	    	fireEvent("Download","download_app_" + $scope.abNum + "_open","map page");
	    	var di = $uibModal.open({
	    			templateUrl: 'ngApp/website/itinerary/modals/download-app.html',
	    			windowClass : 'itinerary-download-black',
	    			controller: 'ModalInstanceCtrl',
	    			resolve: {
			          city: function () {
			            return $scope.cityObj;
			          },
			          action: function () {
			        	  return ""
			          },
			          user: function() {
			        	  return $scope.curUsr != null ? $scope.curUsr.email : null;
			          }
			          
			       }
			});
	    };

	    
	    $scope.$on('map_update_selected', function(event,selectedAttraction,currentCity,attractions) {
	    	$scope.currentCity = currentCity;
			$scope.attractions = attractions;;
			$scope.selectedAttraction = selectedAttraction;
	    });
	    
	    $scope.$on('map_update_city', function(event,siteArr,city) {
	    	$scope.attractions = siteArr;
	    	$scope.currentCity = city;
	    });
	    
	    $scope.$on('map_change_attraction', function(event,site) {
	    	$scope.changeAttraction(site);
	    });
	    
	    $scope.$on('$destroy', function() {
	    	/*for (var i=0;i<qtipArr.length;i++) {
	    		$(qtipArr[i]).qtip('destroy', true);
	    	}*/
	    	$('.qtip').each(function(){
	    		$(this).data('qtip').destroy();
	    	})
	    	MapMgr.getInstance().removeOverlays();
	    	MapMgr.getInstance().hideMap();
	    	MapMgr.getInstance().clearEventListeners();
		 });
		
	}]);
	
	
	angular.module('visitacity').controller('ModalInstanceCtrl', ['$scope','$http','$uibModalInstance','$timeout','city', 'action', 'user','GlobalDefs','emailConsentService', function ($scope,$http,$uibModalInstance,$timeout,city,action,user,GlobalDefs,emailConsentService) {

		
		
		emailConsentService.consentRequired().then(function(data) {
			$scope.requireEmailConsent = data;
			$scope.abNum = $scope.requireEmailConsent ? "100" : "1";
		});
		
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.city = city;
		$scope.cityObj = city;
		$scope.action = action;
		$scope.emailAddress = user;
		$scope.lang = getActiveLang(true);
		$scope.submitted = false;
		$scope.submittedOk = false;
		$scope.modalInstance = $uibModalInstance;
		$scope.downloadPending = true;
		$scope.yahooMail=false;

		$scope.modalInstance.result.then(function (result) {
				if ($scope.downloadPending) {
			    	var type = $scope.action.length > 0 ? "map" : "app";
			    	//fireEvent("Download","download_"+type+"_" + $scope.abNum + "_cancel","map page");
			    }
			
		    }, function () {
		    	if ($scope.downloadPending) {
			    	var type = $scope.action.length > 0 ? "map" : "app";
			    	//fireEvent("Download","download_"+type+"_" + $scope.abNum + "_cancel","map page");
			    }
		});
		
		  /*$scope.downloadMapCancel = function () {
		    $uibModalInstance.dismiss('cancel');
		    //fireEvent('Dialog',$scope.action+'map-cancel','');
		    if ($scope.downloadPending) {
		    	var type = $scope.action.length > 0 ? "map" : "app";
		    	fireEvent("Download","download_"+type+"_" + $scope.abNum + "_cancel","map page");
		    }
		    
		  };*/
		  
		  $scope.downloadMapClose = function () {
			  $uibModalInstance.close();
		  };

		  $scope.downloadMap = function (hasEmailConsent) {
			  $scope.emailAddress = $("#downloadMapEmail").val(); //Get the value using jquery to avoid angular autofil issue
			  if (isEmail($scope.emailAddress)) {
				  $scope.downloadPending = false;
				  $scope.submitted = true;
				  if ($scope.requireEmailConsent) {
					  var consent = hasEmailConsent ? "ok_with_consent" : "ok_no_consent";
					  //if consent is required fire OK and also ok_consent/ok_no_consent
					  fireEvent("Download",$scope.action.toLowerCase() + "_map_" + $scope.abNum + "_" + consent,null);
				  }
				  fireEvent("Download",$scope.action.toLowerCase() + "_map_" + $scope.abNum + "_ok",null);
				  $http.post(appRoot + '/map/send', {emailTo : $scope.emailAddress, cityId : $scope.city.id, lang: $scope.lang != "en" ? $scope.lang : null,}).
				  success(function(data, status, headers, config) {
					  emailConsentService.updateUserConsent(hasEmailConsent,$scope.emailAddress);
					  /*require(["app/core/login"], function(LoginMgr) {
							LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
						})*/
						$timeout(function() {
							$scope.submittedOk = true;
						  	$scope.submitted = false;
						  	/*if ($scope.emailAddress.toLowerCase().indexOf("yahoo.") > 0 || $scope.emailAddress.toLowerCase().indexOf("aol.") > 0 || $scope.emailAddress.toLowerCase().indexOf("verizon.") > 0) {
						  		fireEvent("Download", "Map - Yahoo mail try again show");
						  		$scope.yahooMail = true;
						  	}*/
						},1000);
					  	
					  }).error(function(data, status, headers, config) {
						 //console.log('sent fail');
						  throw "Map send failed \n" + data
					  });
				  
			  } else {
				  $("#invalidEmail").css("visibility","visible");
				  fireEvent("Download",$scope.action.toLowerCase() + "_map_" + $scope.abNum + "_invalid_email",$scope.emailAddress);
			  }
		  };
		  
		  $scope.yahooTryAgain = function() {
	        	$scope.yahooMail=false;
	        	$scope.submittedOk=false;
	        	fireEvent("Download", "Map - Yahoo mail try again clicked");
	        }
		  
			 $scope.shareApp= function(hasEmailConsent) {
				 	
		        	$scope.emailAddress = $("#emailAddressSend").val(); //Get the value using jquery to avoid angular autofil issue
					 if (isEmail($scope.emailAddress)) {
						 $scope.downloadPending = false;
						 if ($scope.requireEmailConsent) {
							 var consent = "ok";
							 consent = hasEmailConsent ? "ok_with_consent" : "ok_no_consent";
							 //if consent is required fire OK and also ok_consent/ok_no_consent
							 fireEvent("Download","download_app_" + $scope.abNum + "_" + consent,"map page");
						}
						fireEvent("Download","download_app_" + $scope.abNum + "_ok","map page");
						$("#invalidEmail").css("visibility","hidden");
						$scope.submitted = true;
						$http.post(appRoot + '/itineraries/send-app', {
							  downloadType: "app",
							  emailTo : $scope.emailAddress, 
							  itrId : "",
							  itrName: "",
							  isMeter: 1,
							  itrLegalName: "",
							  cityId : $scope.city.id,
							  itrLink: window.location.href}).
							  success(function(data, status, headers, config) {
								  /*require(["app/core/login"], function(LoginMgr) {
										LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
									});*/
								  emailConsentService.updateUserConsent(hasEmailConsent,$scope.emailAddress);
									$timeout(function() {
									  	$scope.submittedOk = true;
									  	$scope.submitted = false;
									  	/*if (!$scope.loginMgr.isLogin()) {
											$scope.askPasswd = true;
											$scope.submittedOk = false;
										}*/
									}, 2000);
								}).error(function(data, status, headers, config) {
								  //console.log('sent fail');
								  throw "share app failed\n" + data;
							  });

						  
						  //$$scope.modalInstance.close();
					  } else {
						  $("#invalidEmail").css("visibility","visible");
						  fireEvent("Download","download_app_" + $scope.abNum + "_invalid_email","map page");
					  }
		    }
			 
			 $scope.confirm = function(res) {
				  if (res) {
					  $uibModalInstance.close();
				  } else {
					  //fireEvent("Download","download_app_" + $scope.abNum + "_cancel","map page");
					  $uibModalInstance.dismiss();
				  }
			  }
			 
		}]);
	
});	

define('ngApp/website/shared/cityActionLinksController',["ngApp/website/main/main"],
    function() {
		var app = angular.module('visitacity');
	
		app.controller('cityActionLinksController',['$scope', '$q','$routePartams','GetCitiesService', 'GlobalDefs', 'CitySearch', 
		                                            function($scope, $q,$routePartams,GetCitiesService, GlobalDefs, CitySearch) {
			
			$scope.maxDaysLocal = "";
			var w1 = $scope.$watch('maxDays', function(newVal, oldVal) {
				
				if (newVal != oldVal) {
					$scope.maxDaysLocal = newVal;
				}	
	    	}, true);
			
			 $scope.$on("$destroy",function() {
				 w1();
			 });    
			
			$scope.cityLinks = [{
				name: 'things',
					displayName: ' THINGS TO DO',
				url:'/activities/all-activities'
			},{
				name: 'attractions',
				displayName: ' ATTRACTIONS',
				url:'/attraction-by-type/all'
			},{
				name: 'city',
				displayName: ' IN 1 TO ' + $scope.maxDaysLocal,
				url:''
			},{
				name: 'tips',
				displayName: ' TRAVEL TIPS',
				url:'/guides-list/all'
			},{
				name: 'maps',
				displayName: ' MAPS',
				url:'/attractions-map'
			}]
		
		}]);
	
});
define(
    'ngApp/website/shared/cityHeaderController',["ngApp/website/main/main"],
    function() {
		var app = angular.module('visitacity');
	
		app.controller('cityHeaderController',['$scope','$routeParams','$rootScope','$q','$timeout','$location','GetCitiesService', 'GlobalDefs', 'CitySearch','$filter','BreadcrumbsService',
		                                       function($scope,$routeParams,$rootScope,$q,$timeout,$location,GetCitiesService, GlobalDefs, CitySearch,$filter,BreadcrumbsService) {
			var to1 = null;
			var to2 = null;
			$scope.customSelected = null;
			$scope.citiesArr = null;
			$scope.citySearch = CitySearch;
			$scope.breadCrumbs = new Array();
			$scope.imagesCdn = GlobalDefs.getImagesCdn();
			$scope.appRoot = GlobalDefs.getAppRoot();
			$scope.my_plans_color = "#FFFFFF"; //color for my plans
			var callA = GetCitiesService.async();
			$scope.fromUrl = encodeURIComponent($location.url());
			$scope.cityObj = null;
			$scope.placeHolder = "";
	    	//Wait for all calls to finish
	    	$q.all(new Array(callA)).then(
	    			 function(results) {
	    				 $scope.citiesArr = results[0];
	    			 },function(errors) { }
	    	);
	    	
	    	
	    	$scope.changeCity = function(city) {
	    		var selectedCity = null;
	    		$location.search({});
	    		if (city == null) {
	    			
	    			var arr = $scope.citySearch.runFilterCities($scope.selectedCity,$scope.citiesArr);
					if (arr == null) {
						$location.path("/en/" + $scope.cityObj.legalName + "/activities/all-activities");
						//if(!$scope.$$phase) $scope.$apply();
					} else if (arr.length > 0) {
						selectedCity = arr[0].legalName;
					}
	    		} else {
	    			selectedCity = city.legalName;
	    		}
	    		
	    		if (selectedCity) {
	    			//$rootScope.$broadcast("activitiesChangeCity",selectedCity);
	    			//window.location = appRoot + "/en/" + selectedCity + "/activities/all-activities";
	    			$location.path("/en/" + selectedCity + "/activities/all-activities");
	    			//if(!$scope.$$phase) $scope.$apply();
	    		}
				
			}
	    	
	    	$scope.$on('update_breadcrumb', function (event, bc, city, lang) {
	    		$scope.breadCrumbs = BreadcrumbsService.createBreadCrumbs($scope.citiesArr,bc, city, lang);
	    		
	    		to1 = $timeout(function() {
	    			$("#cityHeaderContainer").fadeIn("slow");
	   			}, 500);
	    		
		   });
	    	
	    	var elId = null;
	    	$scope.$on('update_main_header_width', function (event, elem_id) {
	    		to2 = $timeout(function() {
	    			elId = elem_id;
	    			$("#cityHeaderContainer").css("width",$("#" + elem_id).css("width"));
	   			}, 500);
				
		   });
	    	
	    	var cityWatch = $scope.$watch('cityObj', function(newVal, oldVal) {
				if (newVal != oldVal) {
					$scope.placeHolder = $scope.cityObj.name+ ", " + $scope.cityObj.country.name;
				}	
	    	}, true);
	    	
	    	//Fix resolution on windows resize
			$(window).on("resize.doResize", function (){
		        if (elId != null) {
		        	$timeout(function() {
		    			$("#cityHeaderContainer").css("width",$("#" + elId).css("width"));
		   			}, 500);
		        }
		    });
			
			$scope.$on("$destroy",function() {
        		$( window ).off( "resize.doResize" );
        		$( window ).off( "update_breadcrumb" );
        		cityWatch();
        		if (to1) {
    				$timeout.cancel(to1);
    			}
        		if (to2) {
    				$timeout.cancel(to2);
    			}
        	});    
			
			$scope.findLongestWord = function(str) {
				  return str
				    .split(' ')
				    .sort(function(a, b) { return a.length-b.length; }) 
				    .pop().length;
			}
			
			$scope.getFontSize = function(str) {
				var len = "17px";
				if ($scope.findLongestWord(str) >= 13) {
					len = "11px";
				} else if (str.length >= 24 || $scope.findLongestWord(str) >= 12) {
					len = "12px";
				} else if ($scope.findLongestWord(str) >= 11) {
					len = "13px";
				} else if ($scope.findLongestWord(str) >= 9) {
					len = "14px";
				}
				return "{'font-size':'"+len+"'}";
			}
		
		}]);
	
});
define(
    'ngApp/website/shared/footerController',[mainPath],
    function() {
	var app = angular.module('visitacity');

	app.controller('footerController',['$scope','$filter', 'GetCitiesService','$location','Socialshare','$routeParams', function($scope,$filter,GetCitiesService,$location,Socialshare,$routeParams) {
		
		$scope.citiesArrF = null;
		$scope.citiesOnWork = null;
		$scope.appRoot = appRoot;
		$scope.imagesCdn = imagesCdn;
		//$scope.lang = getActiveLang(true);
		$scope.lang = $routeParams.lang;
		$scope.showTrustPilot = false;
		$scope.trCitiesArr = ["/","/en/paris","/en/rome","/en/london","/en/tokyo","en/florence","/en/barcelona","/en/sydney"];
		
		GetCitiesService.async().then(function(data) {
			$scope.citiesArrF = $filter('filter')(data, {status:'production'}, true);
			$scope.citiesArrF = $filter('limitTo')($scope.citiesArrF, 9);
			$scope.citiesOnWork  = $filter('filter')(data, {status:'onwork'}, true);
			$scope.citiesOnWork  = $filter('limitTo')($scope.citiesOnWork , 9);
		});
		
       	for (var i=0;i<$scope.trCitiesArr.length;i++) {
       		if ($scope.trCitiesArr[i] == $location.$$path) {
        		$scope.showTrustPilot = true;
        		break;
       		}
       	}
       
       	$scope.shareEmail = function() {
       	  Socialshare.share({
       	      'provider': 'email',
       	      'attrs': {
       	        'socialshareSubject': "Visit A City",
       	        'socialshareBody': $location.absUrl()
       	      }
       	    });
       	}
       	
       	$scope.sharePinterest = function() {
         	  Socialshare.share({
         	      'provider': 'pinterest',
         	      'attrs': {
         	        'socialshareText': "Visit A City",
         	        'socialsharMedia': $("meta[property='og:image']").attr('content')
         	      }
         	    });
         	}
       	$("meta[property='og:image']").attr('content')
       	

	}]);
});
define(
    'app/itinerary/itinerarySite',["app/core/mapServices"],
    function(MapServices) {
 
        function ItinerarySite(itinerarySite){ 
            for(key in itinerarySite) {
            	var str = "this." + key + "=" + "itinerarySite['" + key + "']"; 
            	eval(str);
            };  
            
            this._clientUniqueId = createGuid();
            try {
            	if (itinerarySite.additionalData != null) {
            		this.additionalData = angular.fromJson(itinerarySite.additionalData);
    			}
            } catch (e) {}
            if (this.id == null) {
            	this.id = Math.floor((Math.random() * 999999999999) + 1);
            }
            return( this );
        }
		
        ItinerarySite.prototype.equals = function(itrSite) {
        	return this._clientUniqueId == itrSite._clientUniqueId;
        }
        
		ItinerarySite.prototype.getName = function() {
			return (this.isAttractionContainer() ? this.site.shortTitle : this.name);					
		};
		
		ItinerarySite.prototype.isPersonalActivity = function() {
			return this.site == null;
		}
		
		ItinerarySite.prototype.isHotel = function() {
			return this.type !=null && this.type == 'hotel';
		}
		
		ItinerarySite.prototype.isVisitRestaurant = function() {
			return this.mainType != null && this.mainType.legalName == "restaurant";
		}
		
		ItinerarySite.prototype.isRestaurant = function() {
			var res = false;
			if (this.mainType != null && this.mainType.legalName == "restaurant") {
				res = true;
			} else if (this.site != null && this.site.mainType != null && this.site.mainType.legalName == "restaurant") {
				res = true;
			}
			return res
		}
		
		ItinerarySite.prototype.isAttractionContainer = function() {
			return this.site != null && !(this.site.mainType != null && this.site.mainType.legalName == "restaurant");	
		};
		
		ItinerarySite.prototype.isCityContainer = function() {
			return this.city != null;	
		};
		
		ItinerarySite.prototype.getType = function() {
			return (this.type != null ? this.type : "attraction");
		};
		
		ItinerarySite.prototype.getLatLng = function() {
			var location = null;
			
			if (this.isAttractionContainer()) {
				// this mistake is by purpose to get over previous mistake of opposite inserting of lng and ltd to sites
				location = MapServices.getLatLng(this.site.latitude, this.site.longitude);			
			}
			else if (this.isRestaurant()) {
				//handle restaurant
				if (this.site != null) {
					location = MapServices.getLatLng(this.site.latitude, this.site.longitude);
				} else {
					location = MapServices.getLatLng(this.latitude, this.longitude);
				}
					
			}
			else {	
				if (this.latitude != null && this.longitude != null) {
					location = MapServices.getLatLng(this.latitude, this.longitude);	
				}							
			}
			
			if (location != null) {
				location.vacdebug = this.noInTrip + "_" + this.getName();	
			}
			
			return location;
		};
		
		ItinerarySite.prototype.getImagePath = function() {
			var src = null;
			if (this.isAttractionContainer()) {
				src = appImagesDynamicFolder + "/" + (this.site.sqrImageOpt != null ? this.site.sqrImageOpt.id : "");
			} else if (this.isCityContainer()) {
				src = appImagesDynamicFolder + "/" + (this.city.sqrImageOpt != null ? this.city.sqrImageOpt.id : "");
			}
			return src;
		}
		
		ItinerarySite.prototype.getItineraryLink = function(itrId, lang) {
			var src = null;
			if (lang == null) {
				lang = "en";
			}
			if (this.subItinerary != null) {
				if (this.subItinerary.isEditable || this.subItinerary.user != null) {
					src = appRoot + "/itineraries-user?id=" + this.subItinerary.id  + "&day=1&parentId=" + itrId;
				} else {
					src = appRoot + "/"+lang+"/" + this.city.legalName + "/itineraries/" + this.subItinerary.legalName + "-day-1?parentId=" + itrId;
				}
				if (this.startHour != null) {
					src += "&startHour=" + this.startHour;
				}
			} else if (this.city != null) {
				src = appRoot + "/"+lang+"/" + this.city.legalName;
			}
			return src;
		}
		
		
		
		ItinerarySite.prototype.getDesignIconCode = function() {
			var code = null;
			
			if (this.isVisitRestaurant()) {
				code = "xE561";
			} else if (this.type == "restaurant") {
				code = "xE561";
			} else if (this.type == "shopping") {
				code = "xE54C";
			} else if (this.type == "hotel") {
				code = "xE53A";
			} else if (this.type == "transit") {
				code = "xE539";
				if (this.additionalData != null && this.additionalData.type != null) {
					if (this.additionalData.type == "Train") {
						code = "xE534";
					} else if (this.additionalData.type == "Bus") {
						code = "xE530";
					} else if (this.additionalData.type == "Taxi") {
						code = "xE559";
					}
				}
			} else if (this.type == "tour") {
				code = "xE557";
			} else if (this.type == "break") {
				code = "xE425";
			}  else {
				code = "xE55F";
			}
			
			return "&#" + code;
		}
		
		ItinerarySite.prototype.getDesignIconClass = function() {
			var code = null;
			
			if (this.isVisitRestaurant()) {
				code = "itinerary_restaurant_glyph";
			} else if (this.type == "restaurant") {
				code = "restaurant_glyph";
			} else if (this.type == "shopping") {
				code = "shopping_glyph";
			} else if (this.type == "hotel") {
				code = "hotel_glyph";
			} else if (this.type == "transit") {
				code = "transit_glyph";
			} else if (this.type == "tour") {
				code = "tour_glyph";
			} else if (this.type == "break") {
				code = "break_glyph";
			} else {
				code = "my_place_glyph";
			}
			
			return code;
		}
		
		ItinerarySite.prototype.getSiteImageUrl = function() {
			var res = null;
			if (this.site != null && this.site.imageOpt != null) {
				res = imagesCdn + "/uploaded-new/" + this.site.imageOpt.id; 
			} else if (this.site != null && this.site.sqrImageOpt != null) {
				res = imagesCdn + "/uploaded-new/" + this.site.sqrImageOpt.id; 
			} else if (this.site != null && this.site.additionalData != null && this.site.additionalData.googleImgUrl != null) {
				res = this.site.additionalData.googleImgUrl;
			} else if (this.googleImgUrl != null) {
				res =  this.googleImgUrl;
			}
			return res;
		}
		
		ItinerarySite.prototype.getSiteImageCredit = function() {
			var res = "";
			if (this.site != null && this.site.imageOpt != null) {
				res = this.site.imageOpt; 
			} else if (this.site != null && this.site.sqrImageOpt != null) {
				res = this.site.sqrImageOpt; 
			} else if (this.site != null && this.site.additionalData != null && this.site.additionalData.googleImgCredit != null) {
				res = this.site.additionalData.googleImgCredit;
			} else if (this.googleImgCredit != null) {
				res =  this.googleImgCredit;
			}
			return res;
		}
		
		
		ItinerarySite.prototype.clone = function() {
    		var newItrSite = $.extend(true, {}, this);
    		return new ItinerarySite(newItrSite);      			
		}
 
        return(ItinerarySite);
    }
);
define(
    'app/itinerary/userItineraryDao',[ "app/core/login",
      "app/itinerary/itinerarySite"],
    function(LoginMgr, ItinerarySite) {
 
        // I return an initialized object.
        function UserItineraryDao() {     
        	this._userItineraries = null;
            return( this ); 
        }        
        
        UserItineraryDao.prototype.clear = function() {
        	this._userItineraries = null;
        };
        
        UserItineraryDao.prototype.deleteItinerary = function(clientUniqueItrId) {
        	var deffered = new $.Deferred();
        	var _self = this;
        	
        	$.ajax({
  			  url: appRoot +  "/ws/deleteUserItinerary",
  			  type: "POST",
  			  data: {
  				  clientUniqueItrId: clientUniqueItrId
  			  },
  			  dataType: "json"
	      	}).then(function (userItineraries) {
	      		_self._userItineraries = userItineraries;
	      		
	      		// trigger event
	      		$( "body" ).trigger( "user_itinerary_post_save", [userItineraries] );
	      		deffered.resolve();
	      	}, 
	      	function(ex) {
  	      		try {
      	      		var idx1 = ex.responseText.indexOf("<pre>");
      	      		var idx2 = ex.responseText.indexOf("</pre>");
      	      		var text = ex.responseText.substring(idx1, idx2);
      	      		text = text.length > 4000 ? text.substring(0, 4000) : text;
      	      		console.log("delete failed",text);
      	      		fireEvent("Error", "delete", null, text, true);
      	      		
  	      		}
  	      		catch(e) {      	      			
  	      		}
	      	});      
        	
        	fireEvent("Itinerary", "deleted");
        	return deffered;
        }
        
        UserItineraryDao.prototype.hideSharedItr = function(id) {
        	var deffered = new $.Deferred();
        	var _self = this;
        	
        	$.ajax({
  			  url: appRoot +  "/ws/hideSharedItinerary",
  			  type: "POST",
  			  data: {
  				  id: id
  			  },
  			  dataType: "json"
	      	}).then(function (userItineraries) {
	      		_self._userItineraries = userItineraries;
	      		
	      		// trigger event
	      		$( "body" ).trigger( "user_itinerary_post_save", [userItineraries] );
	      		deffered.resolve();
	      	}, 
	      	function(ex) {
  	      		try {
      	      		var idx1 = ex.responseText.indexOf("<pre>");
      	      		var idx2 = ex.responseText.indexOf("</pre>");
      	      		var text = ex.responseText.substring(idx1, idx2);
      	      		text = text.length > 4000 ? text.substring(0, 4000) : text;
      	      		console.log("delete failed",text);
      	      		fireEvent("Error", "delete", null, text, true);
  	      		}
  	      		catch(e) {      	      			
  	      		}
	      	});      
        	
        	fireEvent("Itinerary", "deleted");
        	return deffered;
        }
        
        UserItineraryDao.prototype.getItineraryIdByClientId = function(clientId) {
        	var _self = this;
        	var deffered = new $.Deferred();
        	
        	_self.getUserItineraries().done(function(userItineraries) {
	        	for (var i=0;i<userItineraries.length;i++) {
	        		var itr = userItineraries[i];
	        		
	        		if ( itr[0] == clientId) {
	        			deffered.resolve(itr[3]);
	        		}
	        	}	
	        	
	        	deffered.reject();
        	});
        	
        	return deffered;
        }
        
        UserItineraryDao.prototype.save = function(itineraryObj, deffered, lang) {
        	var _self = this;        	

        	LoginMgr.getInstance().ensureLogin().then(function () {         		
            	$.ajax({
        			  url: appRoot +  "/ws/saveUserItinerary",
        			  type: "POST",
        			  data: {
        				  itineraryObj: _self.getMinifiedJson(itineraryObj),
        				  lang: lang
        			  },
        			  contentType: "application/x-www-form-urlencoded;charset=UTF-8",
        			  dataType: "json"
      	      	}).then(function (userItineraries) {
      	      		_self._userItineraries = userItineraries;
      	      		
      	      		// trigger event
      	      		var moreData = {};
      	      		$( "body" ).trigger( "user_itinerary_post_save", [userItineraries, itineraryObj.name, itineraryObj.noOfChanges, moreData] );      	      		
      	      		deffered.resolve();
      	      	}, 
      	      	function(e) {
      	      		try {
          	      		var idx1 = e.responseText.indexOf("<pre>");
          	      		var idx2 = e.responseText.indexOf("</pre>");
          	      		var text = e.responseText.substring(idx1, idx2);
          	      		text = text.length > 4000 ? text.substring(0, 4000) : text;
          	      		console.log("save failed",text);
          	      		fireEvent("Error", "save", null, text, true);
          	      		deffered.reject(text);
      	      		}
      	      		catch(ex) {      	      			
      	      		}
      	      	});       		
        	},
  	      	function(e) {
  	      		console.log("ensure login failed", e);
  	      	});           	
        	return deffered;
        };
        
        UserItineraryDao.prototype.getMinifiedJson = function(itineraryObj) {
        	// deep clone
        	var newItrObj = JSON.parse(JSON.stringify(itineraryObj));
        	newItrObj.lstSitesRouting = null;
        	
        	// minify
        	for (var i=0;i<newItrObj.itinerarySites.length;i++) {
        		var itrSite = newItrObj.itinerarySites[i];
        		if (itrSite.additionalData) {
        			itrSite.additionalData = JSON.stringify(itrSite.additionalData); 
        		}
        		if (itrSite.site != null) {
        			itrSite.site = {id : itrSite.site.id};
        		}
        		
        		delete itrSite.directionsData;
        		delete itrSite.visitHour;
        		delete itrSite.visitHourEnd;
        	}
        	
        	// add my places to itinerary sites
        	newItrObj.itinerarySites = newItrObj.itinerarySites.concat(newItrObj.myPlaces);
        	var str = JSON.stringify(newItrObj);        	
        	delete newItrObj;        	
        	return str;
        }
        
        UserItineraryDao.prototype.getUserItineraries = function() {
        	var _self = this;
        	var deffered = new $.Deferred();
        	
        	if (this._userItineraries != null) {
        		deffered.resolve(this._userItineraries);
        		return deffered;
        	}
        	
        	if (! LoginMgr.getInstance().isLoginAny() ) {
        		deffered.resolve([]);
        		return deffered;
        	}
        	
        	$.ajax({
  			  url: appRoot +  "/ws/getUserItineraries?rnd="+new Date().getTime(),
  			  type: "GET",
  			  dataType: "json",
  			  cache: false
	      	}).then(function (userItineraries) {
	      		_self._userItineraries = userItineraries;
	      		deffered.resolve(_self._userItineraries);
	      		$( "body" ).trigger( "user_itineraries_list_update", []);
	      	}, 
	      	function(e) {
	      		deffered.reject("failed getting user itineraries", e);
	      	});  
        	
        	return deffered;
        }
        
        var instance = new UserItineraryDao();
        
        UserItineraryDao.getInstance = function() {
        	return instance;
        };        
         
        return(UserItineraryDao);
    }
);
define(
    'ngApp/website/shared/headerController',[mainPath,
     "app/core/login",
     "app/itinerary/userItineraryDao"],
    function(main,LoginMgr,UserItineraryDao) {
	var app = angular.module("visitacity");

	/*app.filter('niceUserName', function(){
	   	 function niceUserNameFilter(user) {
	   		 var result = "";
	   		 if (user != null) {
	   			 user.getLoggedInUserObject().then(function(data) {
	   				 var usrObject = data;
			   		 if (usrObject.firstName != null && usrObject.firstName.length > 0) {
			   			 result = usrObject.firstName;
			   		 } else if (usrObject.email != null && usrObject.email.length > 0) {  
			   			 result = usrObject.email;
			   		 }
			   		 return result;
	          	 });
	   		 }
	   	 }
	   	niceUserNameFilter.$stateful = true; //make this stateful so we wait for tranlation to download
        return niceUserNameFilter;
	   });*/
	
	/**
     * Generate qtip context menu for drawer
     */
    app.directive('myThingsQtip', ['$http','$compile','$templateCache','$filter','$q','dataWearhouseService','$timeout',
                                   function($http,$compile,$templateCache,$filter,$q,dataWearhouseService,$timeout) {
        return {
        	restrict: 'A',
            link: function(scope, element, attrs) {
            	  scope.userClickedPaArr = null;
            	  var to1 = null;
            	  var to2 = null;
            	  $( "body" ).on( "paid_activity_redirect.header", function( event) {
          			dataWearhouseService.put("userClickedActivities",null,true); //reset data
          			to1 = $timeout(function() {
          				scope.loadUserClickPa();
          			},5000);
          			
          		});
            	  
            	  scope.$on("$destroy",function() {
          			$("body").off( "paid_activity_redirect.header");
          			$timeout.cancel( to1 );
          			$(element).qtip("destroy",true);
          		 });  
            	  scope.loadUserClickPa = function() {
            		  var curLang = scope.lang != null ? scope.lang : getActiveLang(true);
            		  var langPath = "";
            		  if (curLang != "en") {
            			  langPath = "&lang=" + curLang;
            		  }
            		  var getThings = dataWearhouseService.getData(appRoot + '/api/user/getUserClickedActivities?rnd='+new Date().getTime() + langPath,"userClickedActivities"+langPath);
    	              $q.all(new Array(getThings)).then(function(data) {
    	             		scope.userClickedPaArr = $filter('unique')(data[0].data ,"vendorProductId");
    	          	  });
  	    		  }	
            	  element.on('mouseover', function() {
            		  element.off();
            		  $http.get(appWebRoot + '/directives/activities/my-things-wrapper.html', {cache: $templateCache}).
	      	            success(function(content) {
	      	              var compiledContent = $compile(content)(scope);
	
	      	              $(element).qtip({
	      	                content: compiledContent,
	      	                position: {
	      	                  my: 'top middle',
	      	                  at: 'bottom middle',
	      	                  target: $(element)
	      	                },
	      	                style: {
	      	                	classes: 'my-things-qtip',
	      	                	tip: true
	      	                },
	      	                hide: {
	      	                  fixed : true,
	      	                  delay : 200,
	      	                  event: 'unfocus click'
	      	                }, 
	      	                show : {
	      	                	solo: true,
	      	                	delay : 200,
	      	                	ready: attrs.myThingsOpenStyle.indexOf("mouseover") >= 0, //open only if on mouse over
	      	                	event: attrs.myThingsOpenStyle
	      	                }, 
	      	                events: {
	      	                	show: function(event, api) {
	      	                		fireEvent("General", "my things to do open",attrs.myThingsFrom);
	      	                	},
	      	                	hide: function(event, api) {
	      	                	}
	      	                }
	      	            });
	      	          });
            		  /*to2 = $timeout(function() {
          					$(element).trigger('click');
          				}, 500);*/
            	  });
            	  scope.loadUserClickPa();
    	         
            }
        }
    }]);
	
	
	
	app.controller('headerController',['$scope','$rootScope','$http', '$location','$q','$routeParams','$timeout','MyPlansService','CurrenciesService',
	                                   'GetCitiesService','CitySearch','GlobalDefsNew','LogedInUserService','$filter','dataWearhouseService','BreadcrumbsService',
	                                   function($scope,$rootScope,$http,$location,$q,$routeParams,$timeout,MyPlansService,CurrenciesService,
	                                		   GetCitiesService,CitySearch,GlobalDefsNew,LogedInUserService,$filter,dataWearhouseService,BreadcrumbsService) {
		$scope.loggedInUser = null;
		$scope.niceUser = "";
		$scope.genGuidesArr = null;
		$scope.customSelected = null;
		$scope.citySearch = CitySearch;
		$scope.loginMgr = null;
		$scope.userItineraryDao = null;
		$scope.imagesCdn = imagesCdn;
		$scope.appRoot = appRoot;
		$scope.appRootSecure = $scope.appRoot.replace("http:","https:"); 
		$scope.currencies = CurrenciesService.getCurrencies();
		$scope.citiesArr = new Array();
		$scope.customSelected = null;
		$scope.breadCrumbs = new Array();
		$scope.langArr = new Array();
		$scope.showLang = false;
		$scope.swithLangPhrase = null;
		$scope.userClickedPaArr = null;
		//loadUserClickPa();
		$scope.lang = $routeParams.lang != null ? $routeParams.lang : getActiveLang(true);
		//$scope.lang = $routeParams.lang;
		var routeLang = $routeParams.lang;
		if ($location.url().indexOf("/activities/") >=0) {
			$scope.showLang = true;
		}
		$scope.loc = encodeURIComponent($location.url());
		if ($scope.loc.indexOf("map") >= 0) {
			$scope.my_plans_color = "#FFFFFF"; //color for my plans
		}
		
		$scope.units = new Array(
					{name:"mi",displayName:"Miles"},
					{name:"KM",displayName:"KM"});	
					
		$scope.activeUnit = getLocalDistanceUnit() == "mi" ? "Miles" : getLocalDistanceUnit();
		
		
		$scope.activeCurrency = "USD ($)"; //Default currency
		//if (window.localStorage['currencyText'] != null) {
		if (wrapGetLocalStorage('currencyText') != null) {
			//$scope.activeCurrency = window.localStorage['currencyText'];
			$scope.activeCurrency = wrapGetLocalStorage('currencyText');
		}
		
		/*var callA = $http.get(appRoot + '/jsonws/general-guides/all').success(function(data) {
			$scope.genGuidesArr = data;
    	});*/
		var headerElId = null;
		$scope.$on('update_main_header_width', function (event, elem_id) {
			headerElId = elem_id;
			$("#headerContainer").css("width",$("#" + elem_id).css("width"));
	   });
		
		//Fix resolution on windows resize
		$(window).on("resize.doResize", function (){
	        if (headerElId != null) {
	        	$("#headerContainer").css("width",$("#" + headerElId).css("width"));
	        }
	    });
		
		fireUniqueUserTypeEvent();
		
		var callA = $http.get('/jsonws/991/lang-for-home');
		var callB = GetCitiesService.async();
		
		
    	//Wait for all calls to finish
    	$q.all(new Array(callA,callB)).then(
    			 function(results) {
    				 $scope.genGuidesArr = GlobalDefsNew.getGlobal("generalGuides");
    				 $scope.citiesArr = results[1];
    				 $scope.langArr = results[0].data.langJson;
    				 if ($location.url().indexOf("/activities/") < 0) {
    					 $scope.langArr = $filter('filter')($scope.langArr,{isActiveFull:true},true);
    					 $scope.showLang = $scope.langArr.length > 1;
    				}
    				 if ($location.url().indexOf("/activity-") > 0) {
    					 $scope.showLang = false;
    				 }
    				 //var lngCookie = getActiveLang() != null ? getActiveLang() : "en";
    				 var lngCookie = $scope.lang != null ? $scope.lang : getActiveLang(true);
    				 var activeCountry = readCookie('activeCountry');
    				 if (lngCookie != null && lngCookie != "en") {
    					 $scope.swithLangPhrase = "In English";
    					 $scope.swithLangPhraseLink = "en";
    				 }
    				 if (lngCookie != null) {
    					 for (var i=0;i<$scope.langArr.length;i++) {
    						 if (lngCookie == $scope.langArr[i].shortName) {
    							 $scope.activeLang = $scope.langArr[i].displayName;
    						 } else if (activeCountry != null && activeCountry.length > 0 && 
    								 $scope.langArr[i].availableIn != null && $scope.langArr[i].availableIn.indexOf(activeCountry) >=0) {
    							 $scope.swithLangPhrase = $scope.langArr[i].inLagPhrase;
    							 $scope.swithLangPhraseLink = $scope.langArr[i].shortName;
    						 }
    					 }
    					 if ($scope.activeLang == null) {
    						 $scope.activeLang = "English";
    						 $scope.swithLangPhrase = null;
    						 disableLang = true;
    					 }
    				 }
    			 },function(errors) { }
    	);
    	
    	fireCountryEvent();
    	
    	/*function loadUserClickPa() {
    		var getThings = dataWearhouseService.getData(appRoot + '/api/user/getUserClickedActivities?rnd='+new Date().getTime(),"userClickedActivities");
        	$q.all(new Array(getThings)).then(function(data) {
       			$scope.userClickedPaArr = $filter('unique')(data[0].data ,"vendorProductId");
    	   	});
    	}*/
    	
    	function fireUniqueUserTypeEvent() {
    		var redirectCookie = readCookie("pa_redirect");
    		var userTypeCookie = readCookie("pa_redirect_type");
    		if (userTypeCookie == null) {
    			redirectCookie = redirectCookie != null ? redirectCookie : "vba";
    			fireEvent("activity user type",redirectCookie);
    			createCookie('pa_redirect_type', "1", 365);
    		}
    		
    	}
    	
    	
    	
		require(["app/core/login","app/itinerary/userItineraryDao"], function(LoginMgr,UserItineraryDao) { 
			$scope.loginMgr = LoginMgr;
			if (LoginMgr.getInstance().isLogin()) {
        		$scope.loggedInUser = LoginMgr.getInstance();
        		if ($scope.loggedInUser != null) {
        			$scope.loggedInUser.getLoggedInUserObject().then(function(data) {
   	   				 var usrObject = data;
   			   		 if (usrObject.firstName != null && usrObject.firstName.length > 0) {
   			   			 $scope.niceUser = usrObject.firstName;
   			   		 } else if (usrObject.email != null && usrObject.email.length > 0) {  
   			   			 $scope.niceUser = usrObject.email;
   			   		 }
   	          	 });
        		}
        		
        		LogedInUserService.setUserEmail($scope.loggedInUser);
			} else {
				//console.log('Not logged in');
			}//getLoggedInUserObject
			
			$scope.userItineraryDao = UserItineraryDao;
			UserItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
				MyPlansService.setMyPlans(userItineraries);
				$scope.$apply();
			});
			
			//load FB SDK
			LoginMgr.getInstance().addFacebookScript();
		});
		
		$( "body" ).on( "login_done", function( event) {
			//$scope.loggedInUser = $scope.loginMgr.getInstance().getUserDisplayName();
			$scope.loggedInUser = LoginMgr.getInstance();
    		if ($scope.loggedInUser != null) {
    			$scope.loggedInUser.getLoggedInUserObject().then(function(data) {
    				var usrObject = data;
			   		if (usrObject.firstName != null && usrObject.firstName.length > 0) {
			   			$scope.niceUser = usrObject.firstName;
			   		} else if (usrObject.email != null && usrObject.email.length > 0) {  
			   			$scope.niceUser = usrObject.email;
			   		}
    			});
    		}
			$scope.userItineraryDao.getInstance().clear();
			$scope.userItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
				MyPlansService.setMyPlans(userItineraries);
				$scope.$apply();
			});
			
        });  
		
		$( "body" ).on( "logout_done", function( event) {
    		window.location.reload();
    	});     
		
		$scope.changeUnit = function(name) {
			createCookie("is_metric", name == "KM" ? true : false);
			createCookie("us_timeformat", name == "KM" ? false : true);
			createCookie("units_changed", true);
			fireEventDef("General","ChangeUnits", name == "KM" ? "metric" : "non-metric");
			$timeout(function() {
				window.location.reload();
			},0);
		}
		
		//Change the user language
		$scope.changeLang = function(name) {
			fireEventDef("General","ChangeLanguage", name);
			createCookie("activeLang",name,365);
			var url = window.location.href;
			url = url.replace("/" + routeLang + "/", "/"+ name +"/");
			$timeout(function() {
				window.location.href = url;
			},0);
			
			
		}
	
		 
		/*$scope.doOpenLogin = function() {
			require(["app/dialogs/loginDialog"],
				    function(LoginDialog) {
						LoginDialog.getInstance().open();
				    }
			);
			
		}*/
		
		$scope.doLogout = function() {
			$scope.loginMgr.getInstance().logout();
		}
		
		$scope.currencyChanged = function(currencyAbb, currencyText ) {
			fireEventDef("General", "currency changed",currencyText);
			wrapSetLocalStorage('currencyAbb',currencyAbb);
    		wrapSetLocalStorage('currencyText',currencyText);
			createCookie("currencyAbb", currencyAbb);
			window.location.reload();
		}
		
		$scope.$on('update_breadcrumb', function (event, bc, city, lang) {
    		$scope.breadCrumbs = BreadcrumbsService.createBreadCrumbs($scope.citiesArr,bc, city, lang);
	   });
		
		 $scope.$on("$destroy",function() {
   			$( window ).off( "update_breadcrumb" );
   			$( window ).off( "update_main_header_width" );
   			$( window ).off( "update_breadcrumb" );
   			$( "body" ).off( "login_done");
   			$( "body" ).off( "logout_done");
   		 });    
		
		function fireCountryEvent() {
			if (readCookie("activeCountryReported") == null) {
				createCookie("activeCountryReported", "true");
				fireEvent("General","ActiveCountry", readCookie("activeCountry"));
			}
		}
		
		$scope.getCurrentLocation = function() {
			return encodeURIComponent($location.url());
		}
		
	}]);
});
define(
    'ngApp/website/shared/myPlansController',["ngApp/website/main/main"],
    function() {
		var app = angular.module("visitacity");
	
		app.controller('myPlansController', ['$scope', 'MyPlansService', 'GlobalDefs', function($scope, MyPlansService, GlobalDefs) {
			$scope.userItinArr = new Array();
			$scope.userRoItinArr = new Array();
			$scope.appRoot = GlobalDefs.getAppRoot();
			
			 var w1 = $scope.$watch(MyPlansService.getMyPlans, function(newVal, oldVal) {
				 if (newVal) {
					 $scope.userItinArr = newVal;
				 }
			  });
			
			 var w2 = $scope.$watch(MyPlansService.getMyRoPlans, function(newVal, oldVal) {
				 if (newVal) {
					 $scope.userRoItinArr = newVal;
				 }
			 });
			 
			 $scope.$on("$destroy",function() {
					w1();
					w2();
			 });    
		}]);
});
define(
    'ngApp/website/shared/general_pages/generalPagesController',[mainPath],
    function() {
		var app = angular.module('visitacity');
	
		app.directive('faqHelp', function() {
    	    return {
    	        restrict: 'AEC',
    	        templateUrl: appWebRoot + '/shared/general_pages/faq_contact.html',
    	        scope: {appRoot: '='}
    	    }
    	});
		
		app.controller('generalPagesController',['$scope','$location','GlobalDefs','$rootScope','$timeout','$http','$routeParams','$q','$location','$window', 
		                                         function($scope, $location, GlobalDefs, $rootScope,$timeout,$http,$routeParams,$q,$location,$window) {
			var to1,to2,to3,to4 = null;
			$scope.aboutCitiesArr = null;
			$scope.breadCrumbs = new Array();
			$scope.imagesCdn = GlobalDefs.getImagesCdn();
			$scope.appRoot = GlobalDefs.getAppRoot();
			$scope.curLevel = 0;
			$scope.cityName = $routeParams.city;
			$scope.isSupport = $routeParams.support != null;
			$scope.fromUrl = $routeParams.from != null ? $scope.appRoot + decodeURIComponent($routeParams.from) : null;
			if ($location.hash() != null && $location.hash().length > 0) {
				try {
					to1 = $timeout(function() {
						 $("#" + $location.hash()).addClass("collapse in")
						 $('html, body').animate({
						        scrollTop: $("#" + $location.hash()).offset().top -100
						   }, 500);
		              }, 100);
					
				} catch (e){}
			}
			
			$scope.unsubscribeDef = [
			                         {
			                        	 name: "Daily",
			                        	 description: "Stay updated with information on local events and special offers for your destinations",
			                        	 level: 0
			                         },{
			                        	 name: "Weekly",
			                        	 description: "Get weekly deals summary for your destination along with useful travel tips",
			                        	 level: 1
			                         },{
			                        	 name: "Monthly",
			                        	 description: "Don't miss out on special offers and tips for what could be your next destination",
			                        	 level: 2
			                         },{
			                        	 name: "Never",
			                        	 description: "Tired of hearing from us? Simply unsubscribe below",
			                        	 level: 3
			                         }];
			
			var pageName = "";
			if ($location.url().indexOf("about") >= 0) {
				pageName = "About Us";
			} else if ($location.url().indexOf("privacy") >=0) {
				pageName = "Privacy Statement";
			}  else if ($location.url().indexOf("copyright") >=0) {
				pageName = "Copyright Information";
			}  else if ($location.url().indexOf("contact") >=0) {
				pageName = "Contact Us";
			}  else if ($location.url().indexOf("faq") >=0) {
				pageName = "Frequently Asked Questions";
			}  else if ($location.url().indexOf("guarantee") >=0) {
				pageName = "Low Price Guarantee";
			}  else if ($location.url().indexOf("emailunsubscribe") >=0) {
				pageName = "Unsubscribe";
				var url = appRoot + '/api/getUnsubscribeLevel';
				if ($routeParams.tuid) {
					url += "?tuid=" + $routeParams.tuid
				} else if ($routeParams.email) {
					url += "?email=" + $routeParams.email
				}
				$http.get(url).success(function(data) {
					$scope.curLevel = data;
					if ($scope.curLevel > 3) {
						//handle anything over 3 as 3
						$scope.curLevel = 3;
					}
		    	});
			} else if ($location.url().indexOf("feedback") >=0) {
				pageName = "Feedback";
			} else if ($location.url().indexOf("terms") >=0) {
				pageName = "Terms & Conditions";
			}

	    	var bc = [{
						name: pageName
					}]
			
	    	$window.document.title = pageName + " | Visit A City";
	    	to2 = $timeout(function() {
	    		 $rootScope.$broadcast("update_breadcrumb",bc);
	    		 $rootScope.$broadcast("update_main_header_width","aboutPages");
              }, 2000);
	    	
	    	
	    	$scope.doUnsubscribe = function(unsubscribeObj) {
	    		$scope.curLevel = unsubscribeObj.level;
				 fireEvent("unsubscribe",unsubscribeObj.name,null,null,true);
	    		  $http.post(appRoot + '/emailunsubscribeDo', {
					  email : $routeParams.email,
					  tuid: $routeParams.tuid,
					  level	: unsubscribeObj.level
					  }).
					  success(function(data, status, headers, config) {
						
						 $scope.unsubscribeDone = true;
						  }).
					  error(function(data, status, headers, config) {
						  $scope.unsubscribeDone = true;
				});
	    	}
	    	
	    	$scope.contactUs = function() {
	        	$scope.emailAddress = $("#emailAddressSend").val(); //Get the value using jquery to avoid angular autofil issue
				 if (isEmail($scope.emailAddress)) {
					 if ($scope.subject == null || $scope.subject.length == 0) {
						 $scope.invalidSubject = true;
						 return;
					 }
					 if ($scope.shareMessage == null || $scope.shareMessage.length == 0) {
						 $scope.invalidMsg = true;
						 return;
					 }
					 $scope.invalidSubject = false;
					 $scope.invalidMsg = false;
					 $scope.invalidEmail = false;
					  $scope.submitted = true;
					  var msg = $scope.shareMessage;
					  msg = msg.replace(/(\r\n|\n|\r)/g,"<br />");
					  if ($scope.isSupport) {
						  msg += "<br/></br>Product: " +  $("#productName").val(); 
					  }
					  
					  $http.post(appRoot + '/ws/shareItinerary', {
						  subject : $scope.subject,
						  body: msg,
						  //to: $scope.isSupport ? "support@visitacity.com" : "team@visitacity.com",
						  to: "team@visitacity.com",
						  fromName: $scope.emailAddress,
						  itineraryId: ""}).
						  success(function(data, status, headers, config) {
							 /* require(["app/core/login"], function(LoginMgr) {
									LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
								})*/
								
							  	to3 = $timeout(function() {
								  	$scope.submittedOk = true;
								  	$scope.submitted = false;
								}, 2000);
							  }).
						  error(function(data, status, headers, config) {
							  console.log('sent fail');  
						    
						  });
				  
				  } else {
					  $scope.invalidEmail = true;
				  }
	        }
	    	
	    	$scope.shareFeedback = function() {
				 if ($scope.shareMessage == null || $scope.shareMessage.length == 0) {
					 $scope.invalidMsg = true;
					 return;
				 }
				 $scope.invalidMsg = false;
				 $scope.submitted = true;
				 var msg = $scope.shareMessage;
				 if ($scope.userName) {
					 msg += "\n\nName: " + $scope.userName; 
				 }
				 if ($scope.userCountry) {
					 msg += "\n\nCountry: " + $scope.userCountry; 
				 }
				 msg = msg.replace(/(\r\n|\n|\r)/g,"<br />");
				 $http.post(appRoot + '/ws/shareItinerary', {
					  subject : "Feedback",
					  body: msg,
					  to: "team@visitacity.com",
					  fromName: $routeParams.email,
					  itineraryId: ""}).
					  success(function(data, status, headers, config) {
							
						  to4 = $timeout(function() {
							  	$scope.submittedOk = true;
							  	$scope.submitted = false;
							}, 2000);
						  }).
					  error(function(data, status, headers, config) {
						  console.log('sent fail');  
					    
					  });
	        }
	    	
	    	$scope.setHash = function(hash) {
	    		$location.hash(hash);
	    	}
	    	
	    	$scope.$on("$destroy",function() {
           		if (to1) {
    				$timeout.cancel(to1);
    			}
        		if (to2) {
    				$timeout.cancel(to2);
    			}
        		if (to3) {
    				$timeout.cancel(to3);
    			}
        		if (to4) {
    				$timeout.cancel(to4);
    			}
        	});    
		
		
		}]);
});
	

    	

define(
    'ngApp/website/shared/modals/wrongInfoController',["ngApp/website/main/main"],
    function() {
		var app = angular.module('visitacity');
	
		app.controller('wrongInfoController',['$scope','$uibModal','$http','inscope', function($scope,$uibModal,$http,inscope) {
			//$scope = inscope;
			$scope.title = inscope.title;
			
			//user email passed in the content var
			
			$scope.loggedInUser = inscope.loggedInUser;
			$scope.freeText = false;
			$scope.submitted = false;
			$scope.submittedOk = false;
			$scope.msgPre = "";
			$scope.reportEmail = inscope.loggedInUser;
			
			$scope.close = function () {
				inscope.modalInstance.dismiss('cancel');
			};
			
			
			$scope.send = function(msg) {
				$scope.submitted = true;
				if (!msg) {
					msg = $('textarea#feedbackTa').val();
				}
				if ($scope.reportEmail.length == 0 || !isEmail($scope.reportEmail)) {
					$scope.reportEmail = "team@visitacity.com";
				}
				msg = $scope.msgPre + "\n" + msg;
				$http.post(appRoot + '/jsp/contactus.jsp', {
					txtSubject : "Problem with info: " + $scope.title,
					txtDesc: msg,
					txtEmail: $scope.reportEmail
				}).
				  success(function(data, status, headers, config) {
					  	$scope.submittedOk = true;
					  	$scope.submitted = false;
				  }).
				  error(function(data, status, headers, config) {
					  console.log('sent fail');  
				  });
			}
		
		}]);
	
});
define(
    'ngApp/website/shared/modals/downloadModalController',["ngApp/website/main/main"],
    function() {
		var app = angular.module('visitacity');
	
		app.controller('downloadModalController',['$scope','$uibModal','$http','$timeout','inscope','GlobalDefs','emailConsentService', function($scope,$uibModal,$http,$timeout,inscope,GlobalDefs,emailConsentService) {
			
			$scope.imagesCdn = GlobalDefs.getImagesCdn();
			$scope.appRoot = GlobalDefs.getAppRoot();
			$scope.title = inscope.title;
			$scope.inscope = inscope;
			emailConsentService.consentRequired().then(function(data) {
				$scope.requireEmailConsent = data;
			});
			$scope.modalInstance = inscope.modalInstance;
			var lang = getActiveLang(true);
			
			require(["app/core/login"], function(LoginMgr) {
				$scope.curUsr = LoginMgr.getInstance().getLoggedInUserObject();
				$scope.emailAddress = $scope.curUsr.email;
			});
			
			
			if (inscope.loggedInUser == null || inscope.loggedInUser.length == 0) {
				inscope.loggedInUser = "team@visitacity.com";
			}
			$scope.freeText = false;
			$scope.submitted = false;
			$scope.submittedOk = false;
			$scope.msgPre = "";
			$scope.downloadPending = true;
			$scope.close = function () {
				//if (inscope.event.category) {
				//	fireEvent(inscope.event.category,inscope.event.nameOk,inscope.event.label);
				//}
				//inscope.modalInstance.dismiss('cancel');
				inscope.modalInstance.dismiss('cancel');
			};
			
			$scope.cancel = function () {
				if (inscope.event.category && $scope.downloadPending) {
					fireEvent(inscope.event.category,inscope.event.nameCancel,inscope.event.label);
				}
				inscope.modalInstance.dismiss('cancel');
			};
			
			$scope.confirm = function(res) {
				if (res) {
					//inscope.modalInstance.dismiss('cancel');
				} else {
					/*if (inscope.event.category) {
						fireEvent(inscope.event.category,inscope.event.nameCancel,inscope.event.label);
					}*/
					inscope.modalInstance.dismiss('cancel');
				  }
			}
			
			$scope.sendAttractionsPdf = function(hasEmailConsent) {
				$scope.emailAddress = $("#downloadMapEmail").val(); //Get the value using jquery to avoid angular autofil issue
				if (isEmail($scope.emailAddress)) {
					$scope.downloadPending = false;
					$scope.submitted = true;
					if ($scope.requireEmailConsent) {
						 var consent = "ok";
						 consent = hasEmailConsent ? "ok_with_consent" : "ok_no_consent";
						 var nameOk = inscope.event.nameOk.replace("ok",consent);
						 //if consent is required fire OK and also ok_consent/ok_no_consent
						 fireEvent(inscope.event.category,nameOk,inscope.event.label);
					}
					fireEvent(inscope.event.category,inscope.event.nameOk,inscope.event.label);
					var attrId = $scope.inscope.attraction != null ? $scope.inscope.attraction.id : null;
					var siteType = $scope.inscope.selectedCategory != null ? $scope.inscope.selectedCategory.legalName : null;
					$http.post(appRoot + '/attractions/send', {
						  emailTo : $scope.emailAddress, 
						  cityId : $scope.inscope.cityObj.id,
						  attractionId : attrId,
						  lang: lang != "en" ? lang : null,
						  siteType : siteType}).
						  success(function(data, status, headers, config) {
							  emailConsentService.updateUserConsent(hasEmailConsent,$scope.emailAddress);
						  /*require(["app/core/login"], function(LoginMgr) {
								LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
							})*/
							$timeout(function() {
								$scope.submittedOk = true;
							  	$scope.submitted = false;
							},1000);
						  	
						  }).
						  error(function(data, status, headers, config) {
							 //console.log('sent fail');
							  throw "download attractions pdf failed \n" + data
						  });
					  
				  } else {
					  $("#invalidEmail").css("visibility","visible");
					  var name = inscope.event.nameOk.replace("ok","_invalid_email")
					  fireEvent(inscope.event.category,name,$scope.emailAddress);
				  }
			}
			
			
			 $scope.shareApp= function(hasEmailConsent) {
		        	$scope.emailAddress = $("#emailAddressSend").val(); //Get the value using jquery to avoid angular autofil issue
					 if (isEmail($scope.emailAddress)) {
						 $scope.downloadPending = false;
						 if ($scope.requireEmailConsent) {
							 var consent = "ok";
							 consent = hasEmailConsent ? "ok_with_consent" : "ok_no_consent";
							 var nameOk = inscope.event.nameOk.replace("ok",consent);
							 //if consent is required fire OK and also ok_consent/ok_no_consent
							 fireEvent(inscope.event.category,inscope.event.nameOk,inscope.event.label);
						}
						 fireEvent(inscope.event.category,nameOk,inscope.event.label);
						 $("#invalidEmail").css("visibility","hidden");
						  $scope.submitted = true;
						  $http.post(appRoot + '/itineraries/send-app', {
							  downloadType: "app",
							  emailTo : $scope.emailAddress, 
							  itrId : "",
							  itrName: "",
							  isMeter: 1,
							  itrLegalName: "",
							  cityId : $scope.inscope.cityObj.id,
							  itrLink: window.location.href}).
							  success(function(data, status, headers, config) {
								  emailConsentService.updateUserConsent(hasEmailConsent,$scope.emailAddress);
								  /*require(["app/core/login"], function(LoginMgr) {
										LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
									});*/
									$timeout(function() {
									  	$scope.submittedOk = true;
									  	$scope.submitted = false;
									  	/*if (!$scope.loginMgr.isLogin()) {
											$scope.askPasswd = true;
											$scope.submittedOk = false;
										}*/
									}, 2000);
							  }).error(function(data, status, headers, config) {
								  //console.log('sent fail');
								  throw "download app failed \n" + data;
							  });

						  
						  //$$scope.modalInstance.close();
					  } else {
						  $("#invalidEmail").css("visibility","visible");
						  var name = inscope.event.nameOk.replace("ok","_invalid_email")
						  fireEvent(inscope.event.category,name,$scope.emailAddress);
					  }
		        }
			 
			 
			 $scope.modalInstance.result.then(function (result) {
					/*if ($scope.downloadPending) {
				    	/var type = $scope.action.length > 0 ? "map" : "app";
				    	fireEvent("Download","download_"+type+"_" + $scope.abNum + "_cancel","map page");
				    }*/
				 	if ($scope.downloadPending) {
				 		$scope.cancel();
				 	}
			    }, function () {
			    	$scope.cancel();
			});
		
		}]);
	
});
define(
    'app/itinerary/itineraryDataMgr',["moment.min",
     "app/itinerary/itinerarySite",
     "app/itinerary/userItineraryDao",
     "app/core/mapServices",
     "app/core/defferedQueue"
    ],
    function(momentJs, ItinerarySite, UserItineraryDao, MapServices, DefferedQueue) {
 
        function ItineraryDataMgr(itineraryObj){
        	this._itineraryObj = null;
        	this._routingDataMap = {};
        	this.concatToRoutingMap(itineraryObj.lstSitesRouting)
        	//this._maxWalkTimeMins = longDistanceMethod == "drive" ? 10 : 30;
        	this._maxWalkTimeMins = itineraryObj.maxWalkTime;
        	this._avoidRoundingHours = false;
        	this._debug = "";
        	this._estimatedRouting = false;
        	this._totalDistancePerDay = null;        
        	this._replaceClientItrId = false;
        	this._createNewName = true;
        	this._changedStartDate = false;
        	this._firstValidation = true;
        	this.setItineraryObj(itineraryObj);
        	this._timeFormat = getTimeFormat();
            return( this );
        }
        
        ItineraryDataMgr.prototype.setItineraryObj = function(itineraryObj, isSimple) {
        	this._itineraryObj = itineraryObj;
        	
        	if (isSimple) {
        		//only set itinerary obj (regional)
        		return;
        	}
        	// distinguish itinerary sites from my places
        	var tmpItrSites = [];
        	this._itineraryObj.myPlaces = [];
        	
        	for (var i=0;i<this._itineraryObj.itinerarySites.length;i++) {
        		var itrSite = new ItinerarySite(this._itineraryObj.itinerarySites[i]);
        		
        		if (itrSite.noInTrip != null) {
        			tmpItrSites.push(itrSite);
        		}
        		else {
        			this._itineraryObj.myPlaces.push(itrSite);
        		}
        	}
        	
        	this._itineraryObj.itinerarySites = tmpItrSites;
        };
        
        ItineraryDataMgr.prototype.getItineraryObj = function() {
        	return this._itineraryObj;
        };
        
        ItineraryDataMgr.prototype.getStartDate = function() {
        	return this._itineraryObj.startDate != null ? new Date(fromUtcOffset(this._itineraryObj.startDate)) : null;
        }
        
        ItineraryDataMgr.prototype.setStartDate = function(dateObj) {
        	this._changedStartDate = true;
        	this._itineraryObj.startDate = toUtcOffset(dateObj);
        	
        }
        
        ItineraryDataMgr.prototype.setReplaceClientItrId = function() {
        	this._replaceClientItrId = true;
        };
        
        ItineraryDataMgr.prototype.setAvoidCreatingNewName = function() {
        	this._createNewName = false;
        };
        
        ItineraryDataMgr.prototype.save = function(newName, retryCounter, lang) {        	
        	var _self = this;     
        	var deffered = new $.Deferred();
        	
        	// set name
        	if (newName != null) {
        		_self._itineraryObj.name = newName;	
        	}  
        	
        	// in case itinerary is shared we need null the clientUniqueItrId
        	if (this._replaceClientItrId) {
        		_self._itineraryObj.clientUniqueItrId = null;
        		this._replaceClientItrId = false;
        	}
        	
        	// is new?
        	//_self.validateOpeningHours();
        	if (_self._itineraryObj.clientUniqueItrId == null) {
        		_self.getDefaultNewName().done(function(newName) {
            		// set unique id and name
            		_self._itineraryObj.clientUniqueItrId = createGuid();
            		_self._itineraryObj.name = newName;
            		_self._itineraryObj.noOfChanges = 1;
            		_self._itineraryObj.baseItineraryId = (_self._itineraryObj.baseItineraryId != null ? _self._itineraryObj.baseItineraryId : _self._itineraryObj.id);
            		UserItineraryDao.getInstance().save(_self._itineraryObj, deffered, lang);        			
        		});
        	}	
        	else {
        		_self._itineraryObj.noOfChanges++;
        		UserItineraryDao.getInstance().save(_self._itineraryObj, deffered, lang).then(function(res) {
        			}, 
          	      	function(e) {
        				console.log('itinerary save failed, retry');
        				if (retryCounter == null) {
        					retryCounter = 1;
        				}
        				var waitTime = 1000*retryCounter
        				if (retryCounter <= 3) {
        					setTimeout(function(){ 
        						retryCounter++
        						_self.save(null, retryCounter); 
        					}, waitTime);
        				} else {
        					//$( "body" ).trigger( "user_itinerary_post_save_failed", [e] );
        				}
        				
        			});
        		
        	}
        	
        	return deffered;
        }
        
        ItineraryDataMgr.prototype.getDefaultNewName = function() {
        	var _self = this;
        	var deffered = new $.Deferred();
        	
        	if (! this._createNewName) {
        		deffered.resolve(_self._itineraryObj.name);
        		return deffered;
        	}
        	
    		UserItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
    			var prefix = _self._itineraryObj.name.indexOf("My") != 0 ? "My " : "";
    			var newName = prefix + _self._itineraryObj.name;
    			
    			for (var i=0;i<100;i++) {        				
    				newName = prefix + _self._itineraryObj.name;
    				newName += (i > 0) ? " (" + i + ")" : "";
    				
    				// check current user itineraries
    				var found = false;
    				for (var j=0;j<userItineraries.length;j++) {
    					if (userItineraries[j][1] == newName) {
    						found = true;
    						break;
    					}
    				}
    				
    				if (! found ) {
    					break;
    				}
    			}
    			
    			// have name? 
    			deffered.resolve(newName);
    		});        	
        	
        	return deffered;
        }
        
        ItineraryDataMgr.prototype.isUserItinerary = function() {
        	return (this._itineraryObj.clientUniqueItrId != null);
        };
        
        ItineraryDataMgr.prototype.process = function() {
        	var modifiedItrSites = new Array();
        	
        	for (var i=1;i<=this._itineraryObj.noOfDays;i++) {
        		modifiedItrSites = modifiedItrSites.concat(this.processDay(i));
        	}
        	
        	this._itineraryObj.itinerarySites = modifiedItrSites;
        	
        	return modifiedItrSites;
        };        
        
        ItineraryDataMgr.prototype.processDay = function(day, dayStartHour, disableOpenHoursValidation, defaultToWalking) {
    		var modifiedItrSites = new Array();
    		var isFirst = true;
    		var visitHour = moment("2012 12 01 00 ", "YYYY MM DD HH");
    		var itrSites = this.getItrSitesForDay(day);
    		
    		this._totalDistancePerDay = 0;
    		this._totalDistancePerDayDebug = "";
    		
    		// and do the calculation
    		this.setStartHour(visitHour, itrSites, day, dayStartHour);
    		isFirst = true;    		
      		
    		// process the day
    		var prevItrSite = null;
    		for (var i=0;i<itrSites.length;i++) {    			
    			var curItrSite = itrSites[i];
    			this._debug +=curItrSite.getName();
    			
    			if (! isFirst) {
    				// get minutesDistancePrev
    				var directionsData = this.getDirectionsData(prevItrSite, curItrSite);
    				if (directionsData.text || directionsData.walking == null) {
    					var _self = this;
    					this.ensureRoutingDataForDay(curItrSite.dayInTrip).then(function() {
							_self.processDay(day);
						},
						function(e) {

						});	
						return;
    				}
    				var curSiteTransitType = curItrSite.transitType;
    				if (curSiteTransitType == null || curSiteTransitType.length == 0) {
    					if (directionsData.walking.durationSeconds/60 > this._maxWalkTimeMins) {
    						curSiteTransitType = this._itineraryObj.defaultTransit;
    					} else {
    						curSiteTransitType = "walking";
    					}
    				}
    				
    				
    				// set data on itr site
    				curItrSite.directionsData = directionsData;
    				curItrSite.minutesWalkingPrev = Math.round(directionsData.walking.durationSeconds/60);
    				curItrSite.metersWalkingPrev = directionsData.walking.distanceMeters;
    				
    				curItrSite.minutesTransitPublicPrev = Math.round(directionsData.transit.durationSeconds/60);
    				curItrSite.metersTransitPrev = directionsData.transit.distanceMeters;
    				curItrSite.hasTransit = directionsData.transit.hasTransit;
    				
    				curItrSite.minutesTransitCarPrev = 	Math.round(directionsData.driving.durationSeconds/60);
    				curItrSite.metersTransitCarPrev = directionsData.driving.distanceMeters;
    				curItrSite.hasTransitCar = directionsData.driving.hasTransit;
    				
    				curItrSite.curSiteTransitType = curSiteTransitType;
    				if (curSiteTransitType == "walking") {
    					curItrSite.minutesDistancePrev = directionsData.walking.durationSeconds/60;
    					curItrSite.metersDistancePrev = directionsData.walking.distanceMeters;
    				} else if (curSiteTransitType == "transit") {
    					if (curItrSite.hasTransit) {
    						curItrSite.minutesDistancePrev = directionsData.transit.durationSeconds/60;
        					curItrSite.metersDistancePrev = directionsData.transit.distanceMeters;
    					} else if (curItrSite.hasTransitCar) {
    						curItrSite.minutesDistancePrev = directionsData.driving.durationSeconds/60;
        					curItrSite.metersDistancePrev = directionsData.driving.distanceMeters;
        					curItrSite.curSiteTransitType = "driving";
    					} else {
    						curItrSite.minutesDistancePrev = directionsData.walking.durationSeconds/60;
        					curItrSite.metersDistancePrev = directionsData.walking.distanceMeters;
        					curItrSite.curSiteTransitType = "walking";
    					}
    				} else if (curSiteTransitType == "driving") {
    					if (curItrSite.hasTransitCar) {
    						curItrSite.minutesDistancePrev = directionsData.driving.durationSeconds/60;
        					curItrSite.metersDistancePrev = directionsData.driving.distanceMeters;
    					} else if (curItrSite.hasTransit) {
    						curItrSite.minutesDistancePrev = directionsData.transit.durationSeconds/60;
        					curItrSite.metersDistancePrev = directionsData.transit.distanceMeters;
        					curItrSite.curSiteTransitType = "transit";
    					} else {
    						curItrSite.minutesDistancePrev = directionsData.walking.durationSeconds/60;
        					curItrSite.metersDistancePrev = directionsData.walking.distanceMeters;
        					curItrSite.curSiteTransitType = "walking";
    					}
    				}
    				
    				if (defaultToWalking) {
    					//Only used for best fit. In best fit case, use the same measure for all sites otherwise we are comparing apples to oranges
    					curItrSite.minutesDistancePrev = directionsData.walking.durationSeconds/60;
    					curItrSite.metersDistancePrev = directionsData.walking.distanceMeters;
    				}
    				
    				// add time
    				visitHour.add("m", curItrSite.minutesDistancePrev);
    				
    				this._debug += " - " + curItrSite.minutesDistancePrev;
    				    				
    				if (! this._avoidRoundingHours) {
    					visitHour = this.getRoundedHour(visitHour);	
    				}
    				
    				// add distance
    				this._totalDistancePerDay += curItrSite.metersDistancePrev;
    				this._totalDistancePerDayDebug += prevItrSite.getName() + "-" + curItrSite.getName() + ": " + curItrSite.metersDistancePrev + ", "; 
    			} else if (this.isContainsHotel() && itrSites.length > 2 && curItrSite.hourText == null) {
    				// handle hotel, first attraciton start hour should be consistent
    				var firstAfterHotelSite = itrSites[1];
    				var directionsData = this.getDirectionsData(curItrSite, firstAfterHotelSite);
    				visitHour.add("m", -1 * (directionsData.timeToArrival));
    			}
    			
    			
    			this._debug += ", ";
    			
    			curItrSite.visitHour = this.getRoundedHour(visitHour.clone());
    			curItrSite.hourText = curItrSite.visitHour.format("HH:mm");
    			    			
    			curItrSite.visitHourText = curItrSite.visitHour.format("HH:mm");
    			curItrSite.visitHourEnd = visitHour.clone().add("m", curItrSite.visitTimeMinutes);
    			modifiedItrSites.push(curItrSite);    		
    			
    			isFirst = false;
    			visitHour.add("m", curItrSite.visitTimeMinutes);
    			curItrSite.dayInTrip = day;
    			prevItrSite = curItrSite;
    		}	
    		
   		
    		//this._allowValidateHours = disableOpenHoursValidation ? false : true;
    		//this.validateOpeningHours();
    		//this._allowValidateHours = false;
    		
    		return modifiedItrSites;        	
        };
        
        ItineraryDataMgr.prototype.getDayHotelSetIdx = function(curDay) {
        	var idx = 0;
        	
        	for (var i=0;i<this._itineraryObj.itinerarySites.length;i++) {
        		if (this._itineraryObj.itinerarySites[i].dayInTrip >= curDay) {
        			return i;
        		}
        		
        		idx++;
        	}
        	
        	return idx;
        };
        
    	ItineraryDataMgr.prototype.getDirectionsData = function(originItrSite, destItrSite) {
    		var dualRoutingElement = null;
    		
    		// check itrSite object 
    		//if (originItrSite.site != null && destItrSite.site != null) {
    		if (originItrSite.isAttractionContainer() && destItrSite.isAttractionContainer()) {
    			dualRoutingElement =  this.getSystemRoutingData(originItrSite.site.id, destItrSite.site.id);
    			if (!dualRoutingElement.transit) {
    				dualRoutingElement.transit = {
    					durationSeconds : (destItrSite.minutesTransitPublicPrev != null ? (destItrSite.minutesTransitPublicPrev * 60) : (MapServices.transitEstimate(destItrSite.metersDistancePrev))),
    					distanceMeters :destItrSite.metersDistancePrev,    		
    					hasTransit: true
        			}
        		}
    			if (!dualRoutingElement.driving) {
    				dualRoutingElement.driving = {
    						durationSeconds : (destItrSite.minutesTransitCarPrev != null ? (destItrSite.minutesTransitCarPrev * 60) : (MapServices.drivingEstimate(destItrSite.metersDistancePrev))),
    						distanceMeters :destItrSite.metersDistancePrev,
    						hasTransit: true
        			}
        		}
    			if (!dualRoutingElement.walking) {
    				dualRoutingElement.walking = {
    						durationSeconds : (destItrSite.minutesWalkingPrev * 60),
    						distanceMeters : destItrSite.metersDistancePrev
        			}
        		}
    			if (destItrSite.minutesTransitPublicPrev != null) {
    				//if we have our own transit from Google it is more accurate
    				dualRoutingElement.transit.durationSeconds = destItrSite.minutesTransitPublicPrev*60;
    			}
    		}    		
    		else if (destItrSite.minutesWalkingPrev != null) {
    			//
    			dualRoutingElement = {
    					walking : {
    						durationSeconds : (destItrSite.minutesWalkingPrev * 60),
    						distanceMeters : destItrSite.metersDistancePrev
    					},
    					transit: {
    						durationSeconds : (destItrSite.minutesTransitPublicPrev != null ? (destItrSite.minutesTransitPublicPrev * 60) : (MapServices.transitEstimate(destItrSite.metersDistancePrev))),
    						distanceMeters :destItrSite.metersDistancePrev,    		
    						hasTransit: true
    					},driving: {
    						durationSeconds : (destItrSite.minutesTransitCarPrev != null ? (destItrSite.minutesTransitCarPrev * 60) : (MapServices.drivingEstimate(destItrSite.metersDistancePrev))),
    						distanceMeters :destItrSite.metersDistancePrev,
    						hasTransit: true
    					}    	 			
    			};			
    		}
    		
    		return this.getDirectionsDataForRoutingObj(dualRoutingElement, originItrSite, destItrSite); 		
    	};
        
        ItineraryDataMgr.prototype.getSystemRoutingData = function(originSiteId, destSiteId) {
    		var objRes = new Object();
    		objRes.walking = this._routingDataMap[this.getRoutingMapKey(originSiteId, destSiteId, 'walking')];
    		objRes.transit = this._routingDataMap[this.getRoutingMapKey(originSiteId, destSiteId, 'transit_public')];
    		objRes.driving = this._routingDataMap[this.getRoutingMapKey(originSiteId, destSiteId, 'transit_car')];
    		
    		return objRes;
    	};	
        
    	ItineraryDataMgr.prototype.getDirectionsDataForRoutingObj = function(curRoutingElem, originItrSite, destItrSite) {
    		if (curRoutingElem != null) {
    			return curRoutingElem;
    		}
    		var res = {};
    		var walkTime = curRoutingElem != null && curRoutingElem.walking != null ? curRoutingElem.walking.durationSeconds : null;
    		var transitTime = curRoutingElem != null && curRoutingElem.transit != null ? curRoutingElem.transit.durationSeconds : null;
    		var driveTime = curRoutingElem != null && curRoutingElem.driving != null ? curRoutingElem.driving.durationSeconds : null;
    		var distance = curRoutingElem != null && curRoutingElem.walking != null ?  curRoutingElem.walking.distanceMeters : null;
    		//var transitWord = (typeof(longDistanceMethod) == "string" && longDistanceMethod) == "drive" ? "car" : "transit";
    		var transitWord =  this._itineraryObj.defaultTransit == "driving" ? "car" : "transit";;
    		res.distanceMeters = distance;
    		
    		// fallback in case we have no routing data
    		if (distance == null || distance == 0 || walkTime == null || walkTime == 0) {
    			var mapServices = new MapServices();
    			distance = mapServices.calcDistanceBetween(originItrSite.getLatLng().lat(), originItrSite.getLatLng().lng(), 
    					destItrSite.getLatLng().lat(), destItrSite.getLatLng().lng());
    			
    			walkTime = parseInt(distance / 1.3);
    		}
    		
    		// create the routing
    		if (walkTime != null) {
    			walkTime = Math.round(parseInt(walkTime) / 60);
    			var routeTime = "";
    			
    			res.timeToArrival = walkTime;
    			
    			if (walkTime > this._maxWalkTimeMins) {
    				if (transitTime != null) {
    					transitTime = Math.round(parseInt(transitTime) / 60);
    					routeTime = ", " + transitTime + " min by " + transitWord;
    					res.type = "transit";
    					res.timeToArrival = transitTime;
    				}	
    				else {
    					res.type = "transit";

    					if (typeof(longDistanceMethod) == "string" && longDistanceMethod == "drive") {
        					// 1 minutes per KM
    						transitTime = Math.round((parseInt(distance) / 800));
    					}
    					else {
        					// estimate transit duration. 15 minutes overhead and 1 minutes per KM
    						transitTime = Math.round((parseInt(distance) / 1000)) + 15;	
    					}
    					
    					
    					routeTime = ", " + transitTime + " min by " + transitWord;
    					res.timeToArrival = transitTime;
    				}
    			}
    			else {
    				routeTime = ", " + walkTime + " min by walking";	
    				res.type = "walking";
    			}			

    			
    			if (distance != null) {
    				distance = getLocalDistanceText(distance);
    			}
    			
    			res.text = distance + routeTime;			
    		}
    		else {
    			res = null;
    		}			
    		
    		return res;			
    	};
    	
        ItineraryDataMgr.prototype.getRoundedHour = function(visitHour) {
    		var m = visitHour.minutes();
    		var i = m % 5;
    		m = i > 2  ?  (m + 5 - i) : (m -i ) ;
    		
    		if (m < 60) {
    			visitHour.minutes(m);	
    		}
    		else {
    			visitHour.add("h", 1);
    			visitHour.minutes(0);
    		}		

    		return visitHour;
    	};
    	
    	ItineraryDataMgr.prototype.setStartHour = function(visitHour, itrSites, curDay, dayStartHour) {
    		if (dayStartHour != null) {
    			visitHour.hours(dayStartHour.hours());
    			visitHour.minutes(dayStartHour.minutes());
    			return;
    		}
    		
    		// empty day
    		if (itrSites == null || itrSites.length == 0 || this.getItrSitesCountForDay(curDay) == 0 ) {
    			visitHour.add("h", 9);
    			return;
    		}  
    		
    		var curItrSite =  itrSites[0];
    		
    		// hotel without departure time- take time from next site
    		if (itrSites[0].getType() == "hotel"  && (itrSites[0].hourText == null || itrSites[0].hourText.length == 0) ) {
    			curItrSite = itrSites[1];
    		}
    		
    		if ( curItrSite == null || curItrSite.hourText == null) {
    			visitHour.add("h", 9);
    			return;    			
    		}
    		
       		var ar = curItrSite.hourText.split(":");
    		if (ar.length == 2) {
        		visitHour.add("h", ar[0]);
        		visitHour.add("m", ar[1]);    			
    		}
    		else {
    			visitHour.add("h", 9);
    		}
    	};
    	
        ItineraryDataMgr.prototype.loadRoutingDataForDay = function(curDay) {
        	var _self = this;
        	var deffered =  new $.Deferred();
        	var itrSites = this.getItrSitesForDay(curDay);
        	var ids = "";
        	var foundMissing = false;
        	
        	// see if we are missing any routing
    		for (var i=0;i<itrSites.length;i++) {    			
    			var curItrSite = itrSites[i];
    			
    			if (curItrSite.site != null) {
    				for (var j=0;j<itrSites.length;j++) {
    					var curDestItrSite = itrSites[j];
    					
    					if (curDestItrSite.site != null) {
    						if (curItrSite.site.id == curDestItrSite.site.id) {
    							continue;
    						}
    						
    						var res = this._routingDataMap[this.getRoutingMapKey(curItrSite.site.id, curDestItrSite.site.id, "walking")];
    						if (res == null) {
    							foundMissing = true;
    						}
    					}
    				}
    				
    				if (ids.length > 0) {
    					ids += ",";	
    				}
    			
    				ids += curItrSite.site.id;     				
    			}   	
    		}
    		
    		if (! foundMissing) {
    			// if we dont need any further data
    			deffered.resolve();
    			return;
    		}
    		
    		this.getSitesDistanceMatrix(ids).done(function(routingData) {
  	      		_self.concatToRoutingMap(routingData);
  	      		deffered.resolve();
  	      	});  	
        	
        	return deffered;
        };    
        
        ItineraryDataMgr.prototype.createRoutingDataMap = function(routingArr) {
        	var routingMap = {};
        	
        	for (var i=0;i<routingArr.length;i++) {
        		var cur = routingArr[i];        		
        		var key = cur.originSiteId+ "_" + cur.destinationSiteId + "_" + cur.type;
        		routingMap[key] = cur;
        	}
        	
        	return routingMap;
        };
        
        ItineraryDataMgr.prototype.concatToRoutingMap = function(routingArr) {
        	if (routingArr != null) {
            	for (var i=0;i<routingArr.length;i++) {
            		var cur = routingArr[i];        		
            		var key =  this.getRoutingMapKey(cur.originSiteId, cur.destinationSiteId, cur.type);
            		this._routingDataMap[key] = cur;
            	}        		
        	}        	
        	//console.log("routingDataMap length=" + Object.keys(this._routingDataMap).length);
        }
        
        ItineraryDataMgr.prototype.getRoutingMapKey = function(originId, destId, type) {
        	return originId+ "_" +destId + "_" +type;
        }   	
        
    	ItineraryDataMgr.prototype.isAttractionInItinerary = function(attractionId) {
       		var itrSites = this._itineraryObj.itinerarySites;
    		for (var i=0;i<itrSites.length;i++) { 
    			if (itrSites[i].site != null && itrSites[i].site.id == attractionId) {
    				return true;
    			}
    		}
    		
    		return false;
        };
        
        ItineraryDataMgr.prototype.getItrSiteIndexByNo = function(noInTrip) {
        	for (var i=0;i<this._itineraryObj.itinerarySites.length;i++) {
        		if (this._itineraryObj.itinerarySites[i].noInTrip == noInTrip) {
        			return i;
        		}
        	}
        	
        	return -1;
        };          
        
      ItineraryDataMgr.prototype.getItrSiteByNo = function(noInTrip) {
    	var idx = this.getItrSiteIndexByNo(noInTrip);        	
    	return (idx > -1 ? this._itineraryObj.itinerarySites[idx] : null);
      };            
        
      ItineraryDataMgr.prototype.getItrSiteByAttractionId = function(attractionId) {
        	for (var i=0;i<this._itineraryObj.itinerarySites.length;i++) {
        		if (this._itineraryObj.itinerarySites[i].site != null && this._itineraryObj.itinerarySites[i].site.id == attractionId) {
        			return this._itineraryObj.itinerarySites[i];
        		}
        	}
        	
        	return null;
        };  
        
        ItineraryDataMgr.prototype.suggestAddAttraction = function(itrSite, site, changeFromDay) {        	        	
        	var deffered = new $.Deferred();
        	var _self = this;        	
        	var newItrSite = null;
        	
        	if (itrSite != null) {
        		// clone
        		newItrSite = itrSite.clone();
        		newItrSite.dayInTrip = 1;
        	}
        	else {
        		newItrSite = { 
            			visitTimeMinutes : 0,
            			dayInTrip: 1,
            			site : site,
            			noInTrip: 1000
            	};
        		newItrSite = new ItinerarySite(newItrSite);
        	}
        	
        	// first, get current day end hour  and current total distance      	
        	var arCurrentEndHour = [];
        	var arCurrentTotalDistance = [];
        	if (_self._itineraryObj.noOfDays == 0) {
        		_self._itineraryObj.noOfDays = 1;
        	}
        	for (var i=1;i<=_self._itineraryObj.noOfDays;i++) {
        		var itrSites = _self.processDay(i, null, true);
        		if (itrSites.length > 0) {
            		arCurrentEndHour[i] =  itrSites[itrSites.length -1].visitHour.add('minutes', itrSites[itrSites.length -1].visitTimeMinutes);
            		arCurrentTotalDistance[i] = _self._totalDistancePerDay;        			
        		}
        		else {
        			// empty day
       				arCurrentEndHour[i] = moment("2012 12 01 00 ", "YYYY MM DD HH");
        			arCurrentTotalDistance[i] = 0;
        		}
        	}
        	
        	// load attraction data if required
        	var routingDataReq = null;
        	var avgTimeReq = null;
        	
        	if (newItrSite.site != null) {
        		routingDataReq = this.loadRoutingDataForAttraction(newItrSite.site.id);
        		var avgTimeInSite = newItrSite.site.averageVisitDuration;
        		
        		// if we dont have user data get default for system itineraries
        		if (avgTimeInSite != null && avgTimeInSite > 0) {
        			avgTimeReq = new $.Deferred();
        			avgTimeReq.resolve([avgTimeInSite]);
        		}
        		else {
        			avgTimeReq = this.getAttractionAvgVisitDuration(newItrSite.site.id);
        		}
        	}
        	else {
        		routingDataReq = new $.Deferred();
        		avgTimeReq = new $.Deferred();
        		routingDataReq.resolve([[]]);
        		avgTimeReq.resolve(0);
        	}   	

        	$.when(routingDataReq, avgTimeReq).then(function(siteRoutingData, avgDurationVisitTimeRes) {
        		avgDurationVisitTime = avgDurationVisitTimeRes[0];
        		_self.concatToRoutingMap(siteRoutingData[0]);
        		var completeRoutingData = _self._routingDataMap;
            	var arParams = [];
        		var elementIdx = 0;
            	
            	for (var dayidx=1;dayidx<=_self._itineraryObj.noOfDays;dayidx++) {
            		var dayItrSites = _self.getItrSitesForDay(dayidx);            		

            		// should we ignore this day?
            		//if ((changeFromDay != null && dayidx == changeFromDay) ) {
            		//	elementIdx += (dayItrSites.length);
            		//	continue;
            		//}            		            		
            		
            		// iterate over day itr sites and create options. enter loop even on empty array to add to empty days
            		for (var i=0;i<=dayItrSites.length;i++) {
            			// ignore first hotel occurence
            			if (i == 0 && i < dayItrSites.length && dayItrSites[i].getType() == "hotel") {
            				elementIdx++;
            				continue;
            			}
            			
                		newItrSite = newItrSite.clone();
                		newItrSite.dayInTrip = dayidx;
                		
            			arParams.push({
        					idx : elementIdx,
        					newItrSite : newItrSite,
        					completeRoutingData : completeRoutingData,
        					removeItrSiteWithNo : (changeFromDay != null ? itrSite.noInTrip: null)
            			}); 
            			
            			// increase index only if its not last iteration in which we are adding option for after the ending element
            			if (i < dayItrSites.length) {
            				elementIdx++;	

                			// if we have hotel, avoid the last iteration which will add option for after the ending hotel element
            				if (i > 0 && dayItrSites[i].getType() == "hotel") {
            					break;
            				}
            			}            			
            		}
            	}
            	
            	// need to execute checking in defferedQueue since each method might have a sync calls
            	var defferdQueue= new DefferedQueue(_self, "getModifiedDayInfo", arParams);
            	
            	defferdQueue.execute().then(function(bestOptionForDay) { 
                	// find best option for each day
               	
                	// add distance diff
                	for (var i=0;i<bestOptionForDay.length;i++) {
                		var a = bestOptionForDay[i];
            			var dayEnd = a.newItrSites[a.newItrSites.length -1].visitHour.add('minutes', a.newItrSites[a.newItrSites.length -1].visitTimeMinutes);
            			var prevDayEnd = arCurrentEndHour[a.day];
            			a.distanceDiff = dayEnd.diff(prevDayEnd, 'minutes');     
            			a.distanceDiffMeters = a.newItineraryDataMgr._totalDistancePerDay - arCurrentTotalDistance[a.day];
            			
            			// get over some distance calculation issues (with personal activities - estimations not good enough)
            			a.distanceDiffMeters = a.distanceDiffMeters > 0 ? a.distanceDiffMeters : 300;
                	}
                	
                	// get best option for each day
                	var bestOptionsForAllDays = [];
                	
                	for (var curday=1;curday<=_self._itineraryObj.noOfDays;curday++) {
                		var dayBestOptions = bestOptionForDay.filter(function(a) {
                			return a.day == curday;
                		});
                		
                		dayBestOptions.sort(_self.compareOptions);
                		
                		if (dayBestOptions.length > 0) {
                			bestOptionsForAllDays.push(dayBestOptions[0]);	
                		}                		
                	}
                	
                	// sort days options
                	bestOptionsForAllDays.sort(_self.compareOptions);
                	bestOptionForDay = bestOptionsForAllDays;
                	
                	// add average visit duration
            		var mod = avgDurationVisitTime % 15;
            		avgDurationVisitTime += mod < 8 ? (-mod) : (15-mod);
            		
                	for (var i=0;i<bestOptionForDay.length;i++) {
                		if (bestOptionForDay[i] != null) {
                    		bestOptionForDay[i].newItrSite.visitTimeMinutes = 
                    			bestOptionForDay[i].newItrSite.visitTimeMinutes == 0 ? avgDurationVisitTime : bestOptionForDay[i].newItrSite.visitTimeMinutes;
                    		bestOptionForDay[i].newItineraryDataMgr._maxWalkTimeMins = _self._maxWalkTimeMins;
                    		bestOptionForDay[i].newItineraryDataMgr._avoidRoundingHours = false;
                    		bestOptionForDay[i].newItrSites = bestOptionForDay[i].newItineraryDataMgr.processDay(bestOptionForDay[i].day, null, true);            			
                		}
                	}
                	
                	deffered.resolve(bestOptionForDay);
            	},
            	function() {
            		deffered.reject("failed getting data from getModifiedDayInfo");
            	});
            	 

        	});      	
        	
        	return deffered;
        };     
        
        ItineraryDataMgr.prototype.compareOptions = function(a, b) {
        	var graceEndDayMins = 45;
        	var graceEndDaySmallMins = 10;
        	var graceDistanceMins = 0; 
        	
    		var endDayMinutesDiff = a.endHour.diff(b.endHour, 'minutes');
    		
    		// check day end time, if it's distinct take decision now
    		if (Math.abs(endDayMinutesDiff) > graceEndDayMins) {
    			return (endDayMinutesDiff < 0 ? -1 : 1);
    		}      		
    		
    		// check distance
    		var distanceDiffComp = a.distanceDiff - b.distanceDiff;
    		if (Math.abs(distanceDiffComp) > graceDistanceMins) {
    			return (distanceDiffComp < 0 ? -1 : 1);
    		}	
    		
    		// check day end time again with smaller grace 
       		if (Math.abs(endDayMinutesDiff) > graceEndDaySmallMins) {
       			return (endDayMinutesDiff < 0 ? -1 : 1);
    		}            		
		
       		// finally decide by distance from last site
    		return (a.newItrSite.minutesDistancePrev > b.newItrSite.minutesDistancePrev) ? 1 : -1;
        }
        
        ItineraryDataMgr.prototype.getModifiedDayInfo = function(objParams, deffered) {
        	var _self = this;
        	var idx = objParams.idx;
        	var newItrSite = objParams.newItrSite;
        	var completeRoutingData = objParams.completeRoutingData;
        	var removeItrSiteWithNo = objParams.removeItrSiteWithNo;        	
        	
    		//clone
    		var newItineraryObj = $.extend(true, {}, _self._itineraryObj);
    		
    		// get current start hour
    		var dayItrSites = this.getItrSitesForDay(newItrSite.dayInTrip);
    		var dayStartHour = dayItrSites.length > 0 ? dayItrSites[0].visitHour : null;
    		
    		if (dayStartHour == null) {
    			var dayItrSitesTmp = this.getItrSitesForDay(newItrSite.dayInTrip-1);
        		dayStartHour = dayItrSitesTmp.length > 0 ? dayItrSitesTmp[0].visitHour : null;
    		}
    		
    		// add new site
    		newItineraryObj.itinerarySites.splice(idx, 0, newItrSite);
    		
    		// remove site
    		if (removeItrSiteWithNo != null) {
    			var removeIdx = removeItrSiteWithNo -1;    			

    			if (idx <= removeIdx) {
        			// adding the new site increased the index of the site is added prior to where is was removed
    				removeIdx++;    				
    			}
    			else {
        			// removing the new site decreased the current idx
    				idx--;
    			}
    			
    			newItineraryObj.itinerarySites.splice(removeIdx, 1);
    		}    		
    		
    		// create new itineraryDataMgr
    		var newItineraryDataMgr = new ItineraryDataMgr(newItineraryObj);    	
    		newItineraryDataMgr.setNoInTrip(true);
    		newItineraryDataMgr._estimatedRouting = true;
    		newItineraryDataMgr._routingDataMap = completeRoutingData;
    		
    		newItineraryDataMgr.ensureRoutingDataForDay(newItrSite.dayInTrip).then(function() {
   			
	    		newItineraryDataMgr._maxWalkTimeMins = _self._maxWalkTimeMins;
	    		newItineraryDataMgr._avoidRoundingHours = true;	    		 		
	    		newItrSites = newItineraryDataMgr.processDay(newItrSite.dayInTrip, dayStartHour, true, true);  
	    		newItrSite = newItineraryDataMgr.getItrSiteByNo(idx + 1);
	    		
	    		//create some defaults which can easily be used in the UI
	    		for (var i=1;i<newItrSites.length;i++) {
	    			var curItrSite = newItrSites[i];
	    			if (curItrSite.directionsData.walking.durationSeconds/60 > newItineraryDataMgr._maxWalkTimeMins) {
	    				if (newItineraryDataMgr._itineraryObj.defaultTransit == "transit") {
	    					curItrSite.newDurationMin = Math.round(curItrSite.directionsData.transit.durationSeconds/60);
	    					curItrSite.newTransitType = "tranist";
	    				} else {
	    					curItrSite.newDurationMin = Math.round(curItrSite.directionsData.driving.durationSeconds/60);
	    					curItrSite.newTransitType = "driving";
	    				}
	    			} else {
	    				curItrSite.newDurationMin = Math.round(curItrSite.directionsData.walking.durationSeconds/60);
	    				curItrSite.newTransitType = "walking";
	    			}
	    		}

	    		var res = {
	    				idx: idx,
	    				newItineraryObj: newItineraryObj,
	    				day: newItrSite.dayInTrip,
	    				endHour: newItrSites[newItrSites.length - 1].visitHour,
	    				newItrSite: newItrSite,
	    				newItrSites: newItrSites,
	    				newItineraryDataMgr: newItineraryDataMgr,
	    				debug: newItineraryDataMgr._debug
	    		};    		

    			deffered.resolve(res);
    		}, 
    		function(e) {
    			console.log("failed in ensureRoutingDataForDay");
    			deffered.reject("failed in ensureRoutingDataForDay");
    		});
    		
    		return deffered;
        };
    	
        ItineraryDataMgr.prototype.saveNewItrSites = function(newItrSites) {
        	this._itineraryObj.itinerarySites = newItrSites;
        	return this.save();
        };   
        
        ItineraryDataMgr.prototype.removeSite = function(itrSite, supressSave) {
        	var _self = this;
        	var deffered = new $.Deferred();
        	
        	// nothing? return
        	if (itrSite == null) {
        		deffered.resolve();
        		return deffered;
        	}
        	
        	// from my places
        	if (itrSite.noInTrip == null) {
            	for (var i=0;i<_self._itineraryObj.myPlaces.length;i++) {
            		if (_self._itineraryObj.myPlaces[i].equals(itrSite) ) {
            			_self._itineraryObj.myPlaces.splice(i, 1);
            			break;
            		}
            	}        	
            	
        		if (! supressSave) {
        			_self.save();	
        		}
        		
            	deffered.resolve();
            	return deffered;
        	}
        	
        	// from itinerary sites
        	var idx = this.getItrSiteIndexByNo(itrSite.noInTrip);
        	if (idx > -1) {
        		this._itineraryObj.itinerarySites.splice(idx, 1);	
        	}
        	this.setNoInTrip();
        	
        	// ensure routing and save  
        	this.ensureRoutingDataForDay(itrSite.dayInTrip).then(function() {        		
        		
        		if (! supressSave) {
        			_self.save();	
        		}
        		
        		deffered.resolve();
        	},
        	function() {
        		deffered.reject();
        	});        		
        	
        	return deffered;
        };
        
        ItineraryDataMgr.prototype.adjustDuration = function(itrSite, durationMinutes) {
        	itrSite.visitTimeMinutes = durationMinutes;
        	this.save();
        };
        
        ItineraryDataMgr.prototype.moveItrSite = function(curNoInTrip, delta, supressSave, setDay) {
        	var deffered = new $.Deferred();
        	var _self = this;
        	curNoInTrip = parseInt(curNoInTrip);
        	
        	var curItrSite = this.getItrSiteByNo(curNoInTrip);
        	if (setDay != null) {
        		curItrSite.dayInTrip = setDay;
        	}        	
        	
        	//reset
        	curItrSite.transitType = null;
        	curItrSite.curSiteTransitType = null;
        	curItrSite.routeDetails = null;
       	
        	var firstDayItrSiteNo = this.getNoForFirstItrSiteOfDay(curItrSite.dayInTrip);
        	var firstDayItrSite = this.getItrSiteByNo(firstDayItrSiteNo);
        	var dayStartHour = firstDayItrSite.hourText;
        	
        	delta = parseInt(delta);
        	this._itineraryObj.itinerarySites.move((curNoInTrip - 1), (curNoInTrip + delta - 1));
        	this.setNoInTrip(true);
        	
        	// did we replace the first site of the day? if so we need to change the start hour
        	if (firstDayItrSite.noInTrip != firstDayItrSiteNo) {
            	firstDayItrSite = this.getItrSiteByNo(firstDayItrSiteNo);  
            	firstDayItrSite.hourText = dayStartHour;
        	}
        	
        	this.ensureRoutingDataForDay(curItrSite.dayInTrip).then(function() {
        		if (! supressSave) {
        			_self.save().then(function() {
        				deffered.resolve();
        			});
        		} else {
        			deffered.resolve();
        		}	
        	},
        	function(e) {
        		
        	});
        	return deffered;
        };
        
        ItineraryDataMgr.prototype.setNoInTrip = function(doSkipDays) {
        	if (!doSkipDays) {
        		this._itineraryObj.itinerarySites.sort(function(a, b) {
        			if (a.dayInTrip == -1) {
        				return 1;
        			}
        			if (b.dayInTrip == -1) {
        				return -1;
        			}
            		if (a.dayInTrip != b.dayInTrip) {
            			return a.dayInTrip - b.dayInTrip;
            		}
            		
            		return a.noInTrip - b.noInTrip;
            	});
        	}
        	
           	for (var i=0;i<this._itineraryObj.itinerarySites.length;i++) {
        		this._itineraryObj.itinerarySites[i].noInTrip = (i+1);
        	}
        };
        
        ItineraryDataMgr.prototype.getPersonalActivities = function() {
        	var arRes = [];
        	var _self = this;
        	
        	for (var i=0;i<_self._itineraryObj.itinerarySites.length;i++) {
        		var curItrSite = _self._itineraryObj.itinerarySites[i];
        		
        		if ((curItrSite.isPersonalActivity() || curItrSite.isRestaurant()) && curItrSite.getType() != "hotel") {
        			arRes.push(curItrSite);
        		}
        	}
        	
        	arRes = arRes.concat(_self._itineraryObj.myPlaces);
        	
        	return arRes;
        };
        
        ItineraryDataMgr.prototype.ensureRoutingDataForDay = function(curDay) {
        	var deffered = new $.Deferred();
         	var itrSites = this.getItrSitesForDay(curDay);
        	var arPoints = [];
        	var foundPersonalActivity = false;
        	
        	// do we even need to check
        	if (itrSites.length < 2) {
        		deffered.resolve();
        		return deffered;
        	}        	
       	
        	// check
        	for (var i=0;i<itrSites.length;i++) {
        		// clear
        		itrSites[i].metersDistancePrev = null;
        		itrSites[i].minutesWalkingPrev = null;
        		itrSites[i].metersWalkingPrev = null;
				itrSites[i].minutesTransitPublicPrev = null;
        		itrSites[i].metersTransitPrev = null;
        		itrSites[i].minutesTransitCarPrev = null;
				itrSites[i].metersTransitCarPrev = null;
        		
        		// add data
        		arPoints.push(itrSites[i].getLatLng());
        		
        		if (itrSites[i].isPersonalActivity() || itrSites[i].isRestaurant()) {
        			foundPersonalActivity = true;
        		}
        	}
        	
        	var mapServicesWalkingDeffered = new $.Deferred();
        	var mapServicesDrivingDeffered = new $.Deferred();
        	var mapServicesTransitDeffered = new $.Deferred();
        	var routingDataDeffered = this.loadRoutingDataForDay(curDay);
        	
        	// get data from map services if personal activity if found
        	if (foundPersonalActivity) {
            	var mapServicesWalking = new MapServices("walking");
            	var mapServicesDriving = new MapServices("driving");
            	var mapServicesTransit = new MapServices("transit");
            	
            	//if (this._estimatedRouting) {
            		mapServicesWalkingDeffered = mapServicesWalking.getEstimatedBasicRouteData(arPoints,"walking");
            		mapServicesDrivingDeffered = mapServicesDriving.getEstimatedBasicRouteData(arPoints,"driving");
            		mapServicesTransitDeffered = mapServicesTransit.getEstimatedBasicRouteData(arPoints,"transit");
            	//}
            	//else {
            		//mapServicesWalkingDeffered = mapServicesWalking.getBasicRouteData(arPoints,"walking");
            		//mapServicesDrivingDeffered = mapServicesDriving.getEstimatedBasicRouteData(arPoints,"driving");
            		//mapServicesTransitDeffered = mapServicesTransit.getEstimatedBasicRouteData(arPoints,"transit");
            	//} 
        	}
        	else {
        		mapServicesWalkingDeffered.resolve();
        		mapServicesDrivingDeffered.resolve();
        		mapServicesTransitDeffered.resolve();
        	}        	
        	
        	// wait on both
        	$.when(mapServicesWalkingDeffered,mapServicesDrivingDeffered,mapServicesTransitDeffered,routingDataDeffered).then(function(mapServicesWalkingData,mapServicesDrivingData,mapServicesTransitData) {
        		
        		var routeArr = mapServicesWalkingData;
           		// process mapServices walking data
        		if (routeArr != null) {
            		for (var j=0;j<routeArr.length;j++) {
            			var itrSite = itrSites[j+1]; 
            			itrSite.metersDistancePrev = routeArr[j].distanceMeters;
            			itrSite.metersWalkingPrev = routeArr[j].distanceMeters;
            			itrSite.minutesWalkingPrev = parseInt(routeArr[j].durationSeconds / 60);
            		}        			
        		}
        		
        		routeArr = mapServicesDrivingData;
           		// process mapServices driving data
        		if (routeArr != null) {
            		for (var j=0;j<routeArr.length;j++) {
            			var itrSite = itrSites[j+1]; 
            			itrSite.metersTransitCarPrev = routeArr[j].distanceMeters;
            			itrSite.minutesTransitCarPrev = parseInt(routeArr[j].durationSeconds / 60);
            		}        			
        		}
        		
        		routeArr = mapServicesTransitData;
           		// process mapServices transit data
        		if (routeArr != null) {
            		for (var j=0;j<routeArr.length;j++) {
            			var itrSite = itrSites[j+1]; 
            			itrSite.metersTransitPrev = routeArr[j].distanceMeters;
            			itrSite.minutesTransitPublicPrev = parseInt(routeArr[j].durationSeconds / 60);
            		}        			
        		}
        		deffered.resolve();
        	}, 
        	function(e) {
        		console.log("failed in ensureRoutingDataForDay when", e);
        	});       	
        	
        	return deffered;
        };
        
        ItineraryDataMgr.prototype.ensureRoutingForSite = function(site) {
        	var _self = this;
        	var prevSite = null;
     		for (var i=0;i<_self.curItinerarySites.length;i++) {
     			if (site == _self.curItinerarySites[i]) {
     				break;
     			}
     			var prevSite = _self.curItinerarySites[i];
     		}
        }
        
       
        
        
        ItineraryDataMgr.prototype.addPersonalActivity = function(newItrSite, oldItrSite) {
        	var deffered = new $.Deferred();
        	var _self = this;
        	
        	// remove old itr site from itinerary list
        	this.removeSite(oldItrSite, true).then(function() {
            	// if old itr site was removed and it is before the newItrSite we need to decrease the noInTrip 
            	if (oldItrSite != null && newItrSite != null && oldItrSite.noInTrip != null && oldItrSite.noInTrip < newItrSite.noInTrip) {
            		newItrSite.noInTrip--;
            	}
            	
            	// add itrSite
            	if (newItrSite != null) {
                	newItrSite = new ItinerarySite(newItrSite);
                	
                	if (newItrSite.noInTrip != null) {
                    	_self._itineraryObj.itinerarySites.splice((newItrSite.noInTrip - 1), 0, newItrSite);
                    	_self.setNoInTrip();                		
                	}
                	else {
                		_self._itineraryObj.myPlaces.push(newItrSite);
                	}
            	}
            	
            	return _self.ensureRoutingDataForDay(newItrSite.dayInTrip);
        	}).then(function() {
        		return _self.save();        		       		
        	}).then(function () {
        		deffered.resolve();
        	},
        	function(e) {
        		
        	});
        	
        	return deffered;
        };
        
        ItineraryDataMgr.prototype.removeHotel = function() {
        	var _self = this;
        	
           	for (var i=this._itineraryObj.itinerarySites.length-1;i>=0;i--) {
        		var itrSite = this._itineraryObj.itinerarySites[i];
        		if (itrSite.getType() == "hotel") {
        			_self._itineraryObj.itinerarySites.splice(i, 1);
        		}
           	}
           	
           	this.save();
        }
        
        ItineraryDataMgr.prototype.addHotel = function(hotelObj, supressSave,toNewDay) {
        	var _self = this;
        	var deffered = new $.Deferred();
        	var originAr = [ MapServices.getLatLng(hotelObj.latitude, hotelObj.longitude) ];
        	var destinationAr = [];
        	
        	//if hotel exists
        	if (this.isContainsHotel() && !toNewDay) {
        		for (var i=this._itineraryObj.itinerarySites.length-1;i>=0;i--) {
            		var itrSite = this._itineraryObj.itinerarySites[i];
            		if (itrSite.getType() == "hotel") {
            			//replace exxisiting hotel
            			var firstItrSite = new ItinerarySite();
                		firstItrSite.name = hotelObj.name;
                		firstItrSite.address = hotelObj.address;
                		firstItrSite.longitude = hotelObj.longitude;
                		firstItrSite.latitude = hotelObj.latitude;
                		firstItrSite.noInTrip = itrSite.noInTrip;
                		firstItrSite.dayInTrip = itrSite.dayInTrip;
                		firstItrSite.type = "hotel";
                		firstItrSite.googleImgUrl = hotelObj.googleImgUrl;
                		firstItrSite.googleImgCredit = hotelObj.googleImgCredit;
                		firstItrSite.visitTimeMinutes = 0;
                		firstItrSite.additionalData = hotelObj.additionalData;
                		this._itineraryObj.itinerarySites[i] = firstItrSite;
            			
            			itrSites = this.getItrSitesForDay(itrSite.dayInTrip);
                		if (itrSites.length > 0) {
            				var secondItrSite = itrSites[1];
            				destinationAr.push(secondItrSite.getLatLng());
            				
            				var beforeLastItrSite = itrSites[itrSites.length - 2];
            				destinationAr.push(beforeLastItrSite.getLatLng());        			
                		}
            		}
            	}     
        	} else {
        		//this.removeHotel();
        		this.setNoInTrip();
            	// add hotels
        		var i=1;
        		if (toNewDay) {
        			i = this._itineraryObj.noOfDays;
        		}
            	for (var i;i<=this._itineraryObj.noOfDays;i++) {
            		var itrSites = this.getItrSitesForDay(i);
            		
            		// first and last elements are the hotel
            		var firstItrSite = new ItinerarySite();
            		firstItrSite.name = hotelObj.name;
            		firstItrSite.address = hotelObj.address;
            		firstItrSite.longitude = hotelObj.longitude;
            		firstItrSite.latitude = hotelObj.latitude;
            		firstItrSite.noInTrip = this.getNoForFirstItrSiteOfDay(i);
            		firstItrSite.dayInTrip = i;
            		firstItrSite.type = "hotel";
            		firstItrSite.googleImgUrl = hotelObj.googleImgUrl;
            		firstItrSite.googleImgCredit = hotelObj.googleImgCredit;
            		firstItrSite.additionalData = hotelObj.additionalData;
            		firstItrSite.visitTimeMinutes = 0;
            		
            		// set defaults (mainly for empty day)
            		firstItrSite.minutesTransitPrev = null;
            		firstItrSite.metersDistancePrev = 0;
            		firstItrSite.minutesWalkingPrev = 0;        
            		
            		_self._itineraryObj.itinerarySites.splice((firstItrSite.noInTrip - 1), 0, firstItrSite);
            		this.setNoInTrip();
            		
        			var lasttItrSite = new ItinerarySite();
        			lasttItrSite.name = hotelObj.name;
        			lasttItrSite.address = hotelObj.address;
        			lasttItrSite.longitude = hotelObj.longitude;
        			lasttItrSite.latitude = hotelObj.latitude;  
        			lasttItrSite.noInTrip = this.getNoForLastItrSiteOfDay(i) + 1;
        			lasttItrSite.dayInTrip = i;
        			lasttItrSite.type = "hotel";
        			lasttItrSite.googleImgUrl = hotelObj.googleImgUrl;
        			lasttItrSite.googleImgCredit = hotelObj.googleImgCredit;
        			lasttItrSite.additionalData = hotelObj.additionalData;
        			lasttItrSite.visitTimeMinutes = 0;
        			
            		// set defaults (mainly for empty day)
        			lasttItrSite.minutesTransitPrev = null;
        			lasttItrSite.metersDistancePrev = 0;
        			lasttItrSite.minutesWalkingPrev = 0;    	
            		
            		_self._itineraryObj.itinerarySites.splice((lasttItrSite.noInTrip - 1), 0, lasttItrSite);
            		this.setNoInTrip();

            		// get destinations data
            		itrSites = this.getItrSitesForDay(i);
            		if (itrSites.length > 0) {
        				var secondItrSite = itrSites[1];
        				destinationAr.push(secondItrSite.getLatLng());
        				
        				var beforeLastItrSite = itrSites[itrSites.length - 2];
        				destinationAr.push(beforeLastItrSite.getLatLng());        			
            		}
            	}
        	}
        	
        	

         	
        	// get matrix data and put it in place

        	//distance matrix accepts max number of 25 points per request.
        	//split the calls to chunks of 25 if needed
        	var arrays = [], size = 25;
        	while (destinationAr.length > 0) {
        	    arrays.push(destinationAr.splice(0, size));
        	}
        	
        	this.wrapGetDistanceMatrix(arrays,originAr,supressSave).then(function(distanceElems) {
        		
        		var i=1;
        		if (toNewDay) {
        			i = _self._itineraryObj.noOfDays;
        		}
            	for (var i;i<=_self._itineraryObj.noOfDays;i++) {
	        		try {
	            		var itrSites = _self.getItrSitesForDay(i);
	            		
	            		if (_self.getItrSitesCountForDay(i)  > 0) {
	                		var secondItrSite = itrSites[1];
	                		var lastItrSite = itrSites[itrSites.length - 1];
	                		
	                		// defaults           		
	                		secondItrSite.metersDistancePrev = 0;
	                		secondItrSite.minutesWalkingPrev = 0;
	                		
	                		lastItrSite.metersDistancePrev = 0;
	                		lastItrSite.minutesWalkingPrev = 0;                     		
	                		
	                		var idx = (i-1) * 2;            		
	                		secondItrSite.minutesTransitPrev = null;            		
	                		secondItrSite.metersDistancePrev = distanceElems[idx].duration.value;
	                		secondItrSite.minutesWalkingPrev = parseInt(distanceElems[idx].duration.value / 60);
	                		secondItrSite.minutesTransitPublicPrev = parseInt(MapServices.transitEstimate(distanceElems[idx].duration.value)/60);
	                		secondItrSite.metersTransitPrev = distanceElems[idx].duration.value;
	                		secondItrSite.minutesTransitCarPrev =  parseInt(MapServices.drivingEstimate(distanceElems[idx].duration.value)/60);
	                		secondItrSite.metersTransitCarPrev = distanceElems[idx].duration.value;
	                		
	                		var idx = ((i-1) * 2) + 1;
	                		lastItrSite.minutesTransitPrev = null;
	                		lastItrSite.metersDistancePrev = distanceElems[idx].duration.value;
	                		lastItrSite.minutesWalkingPrev = parseInt(distanceElems[idx].duration.value / 60);    
	                		lastItrSite.minutesTransitPublicPrev = parseInt(MapServices.transitEstimate(distanceElems[idx].duration.value)/60);
	                		lastItrSite.metersTransitPrev = distanceElems[idx].duration.value;;
	                		lastItrSite.minutesTransitCarPrev =  parseInt(MapServices.drivingEstimate(distanceElems[idx].duration.value)/60);
	                		lastItrSite.metersTransitCarPrev = distanceElems[idx].duration.value;
	            		}            			
	        		}
	        		
	        		/*
	        		 * 
	        		 * Code to use default transit for calculation instead of use walking and then estimate transit/driving
	        		 * 
	        		 * if (_self.getItrSitesCountForDay(i)  > 0) {
                		var secondItrSite = itrSites[1];
                		var lastItrSite = itrSites[itrSites.length - 1];
                		
                		// defaults           		
                		secondItrSite.metersDistancePrev = 0;
                		secondItrSite.minutesWalkingPrev = 0;
                		
                		lastItrSite.metersDistancePrev = 0;
                		lastItrSite.minutesWalkingPrev = 0;                     		
                		
                		var idx = (i-1) * 2;            		
                		secondItrSite.minutesTransitPrev = null;            		
                		secondItrSite.metersDistancePrev = distanceElems[idx].duration.value;
                		secondItrSite.minutesWalkingPrev = parseInt((distanceElems[idx].duration.value / 1.28)/60)
                		//secondItrSite.minutesWalkingPrev = parseInt(distanceElems[idx].duration.value / 60);
                		
                		if (_self._itineraryObj.defaultTransit == "transit") {
                			secondItrSite.minutesTransitPublicPrev = parseInt(distanceElems[idx].duration.value / 60);
                		} else {
                			secondItrSite.minutesTransitPublicPrev = parseInt(MapServices.transitEstimate(distanceElems[idx].duration.value)/60);
                		}
                		secondItrSite.metersTransitPrev = distanceElems[idx].duration.value;
                		
                		if (_self._itineraryObj.defaultTransit == "driving") {
                			secondItrSite.minutesTransitCarPrev = parseInt(distanceElems[idx].duration.value / 60);
                		} else {
                			secondItrSite.minutesTransitCarPrev =  parseInt(MapServices.drivingEstimate(distanceElems[idx].duration.value)/60);
                		}
                		
                		secondItrSite.metersTransitCarPrev = distanceElems[idx].duration.value;
                		
                		var idx = ((i-1) * 2) + 1;
                		lastItrSite.minutesTransitPrev = null;
                		
                		lastItrSite.metersDistancePrev = distanceElems[idx].duration.value;
                		lastItrSite.minutesWalkingPrev = parseInt((distanceElems[idx].duration.value / 1.28)/60)
                		//lastItrSite.minutesWalkingPrev = parseInt(distanceElems[idx].duration.value / 60);    
                		
                		if (_self._itineraryObj.defaultTransit == "transit") {
                			lastItrSite.minutesTransitPublicPrev = parseInt(distanceElems[idx].duration.value / 60);
                		} else {
                			lastItrSite.minutesTransitPublicPrev = parseInt(MapServices.transitEstimate(distanceElems[idx].duration.value)/60);
                		}
                		lastItrSite.metersTransitPrev = distanceElems[idx].duration.value;;
                		
                		if (_self._itineraryObj.defaultTransit == "driving") {
                			lastItrSite.minutesTransitCarPrev = parseInt(distanceElems[idx].duration.value / 60);
                		} else {
                			lastItrSite.minutesTransitCarPrev =  parseInt(MapServices.drivingEstimate(distanceElems[idx].duration.value)/60);
                		}
                		lastItrSite.metersTransitCarPrev = distanceElems[idx].duration.value;;
            		}            			*/
	        		catch(e) {
	        			// handle failures
	        			console.log("Error add hotel getDistanceMatrix", e);
	        			fireLocalEvent("Error", "add hotel getDistanceMatrix", null, e.message, true);
	        		}
	        		deffered.resolve();
	        	}
	        }, function() {
	        	deffered.reject("error in calculating mapServices.getDistanceMatrix");
	        });
            	
        		
        	
        	return deffered;
        };
        
        /**
         * Get the response from Google distanceMetrix
         * In case there is more than one chunk of points (up to 25 each) wait for all responses
         * @param arrays
         * @param originAr
         * @param supressSave
         * @returns {$.Deferred}
         */
        ItineraryDataMgr.prototype.wrapGetDistanceMatrix = function(arrays,originAr,supressSave) {
        	var _self = this;
        	var deffered = new $.Deferred();
        	var mapServices = new MapServices();
        	var distanceElems = new Array();
        	var resCounter = 0;
        	var callArr = new Array();
        	var results = [];
        	var deferred;
        	var deferreds = [];
        	
        	for (var i=0;i<arrays.length;i++) {
        		//callArr.push(mapServices.getDistanceMatrix(originAr, arrays[i]));
        		deferred = mapServices.getDistanceMatrix(originAr, arrays[i])/*.then(function(response) {
        		    results.push(response)
        		},
	        	function() {
	        		deffered.reject("error in calculating mapServices.getDistanceMatrix");
	        	});*/
        		deferreds.push(deferred);
        	}
        	$.when.apply($,deferreds).then(
    				function(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10) {
    					//preserve the order of results
    					if (arg1 != null) {
    						distanceElems = distanceElems.concat(arg1.rows[0].elements);
    					}
    					if (arg2 != null) {
    						distanceElems = distanceElems.concat(arg2.rows[0].elements);
    					}
    					if (arg3 != null) {
    						distanceElems = distanceElems.concat(arg3.rows[0].elements);
    					}
    					if (arg4 != null) {
    						distanceElems = distanceElems.concat(arg4.rows[0].elements);
    					}
    					if (arg5 != null) {
    						distanceElems = distanceElems.concat(arg5.rows[0].elements);
    					}
    					if (arg6 != null) {
    						distanceElems = distanceElems.concat(arg6.rows[0].elements);
    					}
    					if (arg7 != null) {
    						distanceElems = distanceElems.concat(arg7.rows[0].elements);
    					}
    					if (arg8 != null) {
    						distanceElems = distanceElems.concat(arg8.rows[0].elements);
    					}
    					if (arg9 != null) {
    						distanceElems = distanceElems.concat(arg9.rows[0].elements);
    					}
    					if (arg10 != null) {
    						distanceElems = distanceElems.concat(arg10.rows[0].elements);
    					}
    					//for (var l=0;l<results.length;l++) {
    					//	distanceElems = distanceElems.concat(results[l].rows[0].elements);
    					//}
    					if (! supressSave) {
    	            		_self.save();	
    	            	}
    					deffered.resolve(distanceElems);
    				},
      	          function(errors) {
    					Raven.captureException(errors);
    					console.log(errors);
    					deffered.reject("error in calculating mapServices.getDistanceMatrix");
    				}
    		)
        	return deffered;
        	
        }
        
        ItineraryDataMgr.prototype.isContainsHotel = function() {
        	for (i=0;i<this._itineraryObj.itinerarySites.length;i++) {
        		if (this._itineraryObj.itinerarySites[i].type != null && this._itineraryObj.itinerarySites[i].type == "hotel") {
        			return true;
        		}
        	}
        	return false;
        	//return (this._itineraryObj.itinerarySites.length > 0 && this._itineraryObj.itinerarySites[0].getType() == "hotel");
        };
        
        ItineraryDataMgr.prototype.getHotelItrSite = function() {
        	for (i=0;i<this._itineraryObj.itinerarySites.length;i++) {
        		if (this._itineraryObj.itinerarySites[i].type != null && this._itineraryObj.itinerarySites[i].type == "hotel") {
        			return this._itineraryObj.itinerarySites[i];
        		}
        	}
        	return null
        }
        
        ItineraryDataMgr.prototype.addDay = function() {
        	var _self = this;
        	var deffered = new $.Deferred();
        	
        	// increase the amount of days
        	this.getItineraryObj().noOfDays++;
        	
        	// add hotel if there is hotel
        	var defferedHotel = null;
        	if (this.isContainsHotel()) {
        		 //var hotelItrSite = this.getItrSitesForDay(1)[0];
        		var hotelItrSite = this.getHotelItrSite();
        		 var hotelObj = {
        				 name: hotelItrSite.getName(),
        				 address: hotelItrSite.address,
        				 longitude: hotelItrSite.getLatLng().lng(),
        				 latitude: hotelItrSite.getLatLng().lat()
        		 };
        		 
        		 defferedHotel = this.addHotel(hotelObj, true,true);
        	}
        	else {
        		defferedHotel = new $.Deferred().resolve();
        	}
        	
        	// save
        	defferedHotel.done(function() {
        		return _self.save();
        	}).done(function() {
        		deffered.resolve();
        	});        	

        	return deffered;
        };
        
        ItineraryDataMgr.prototype.removeDay = function(dayToRemove) {
        	var itrSites = this._itineraryObj.itinerarySites; 
    		
    		for (var i=itrSites.length-1;i>=0;i--) {    			
    			var curItrSite = itrSites[i];
    			
    			// remove
    			if (curItrSite.dayInTrip == dayToRemove){
    				itrSites.splice(i ,1);
    			}    		
    			
    			// decrease day in trip value
    			if (curItrSite.dayInTrip > dayToRemove) {
    				curItrSite.dayInTrip--;
    			}
    		}
    		
    		this._itineraryObj.noOfDays--;
    		this.setNoInTrip();
    		return this.save();
        }
        
        ItineraryDataMgr.prototype.reorderDays = function(arrDaysOrder) {
        	var newItrSites = [];
        	arrDaysOrder.push(-1); 
        	for (var i=0;i<arrDaysOrder.length;i++) {
        		var dayItrSites = this.getItrSitesForDay(arrDaysOrder[i]);
        		
        		for (var j=0;j<dayItrSites.length;j++) {
        			var newItrSite = dayItrSites[j].clone(); 
        			if (arrDaysOrder[i] != -1) {
        				newItrSite.dayInTrip = (i+1);
        			}
        			
        			newItrSites.push(newItrSite);
        		}
        	}
        	
        	//handle items without day
        	
        	this.getItineraryObj().itinerarySites = newItrSites;
        	this.setNoInTrip();
        	return this.save();
        }
        
        ItineraryDataMgr.prototype.addNotes = function(itrSite) {
        	this.save();
        };
        
        // return count without hotels
        ItineraryDataMgr.prototype.getItrSitesCountForDay = function(curDay) {
        	var itrSites = this.getItrSitesForDay(curDay);
        	var count = itrSites.length;
        	
        	if (this.isContainsHotel()) {
        		var countHoutel = 0;
        		for (var i=0;i<itrSites.length;i++) {
	        		if (itrSites[i].getType() == "hotel") {
	        			countHoutel++;
	        		}
        		}
        		count = count - countHoutel;
        	}
        	
        	return count;
        };
        
        ItineraryDataMgr.prototype.getItrSitesForDay = function(day) {
        	var arrItrSites = [];
        	var itrSites = this._itineraryObj.itinerarySites; 
        		
    		for (var i=0;i<itrSites.length;i++) {    			
    			var curItrSite = itrSites[i];
    			
    			if (curItrSite.dayInTrip == day){
    				arrItrSites.push(curItrSite);
    			}
    		}	        	
        	
        	return arrItrSites;
        }; 
        
        ItineraryDataMgr.prototype.getNoForFirstItrSiteOfDay = function(curDay) {
        	var itrSites = this.getItrSitesForDay(curDay);
        	
        	// day with some itr sites
        	if (itrSites.length > 0) {
        		return itrSites[0].noInTrip;
        	}
        	
        	// empty day
        	if (curDay > 1) {
        		itrSites = this.getItrSitesForDay(curDay -1);
        		return itrSites[itrSites.length -1].noInTrip + 1;
        	}
        	else {
        		return 1;
        	}
        }
        
        ItineraryDataMgr.prototype.getNoForLastItrSiteOfDay = function(curDay) {
        	var itrSites = this.getItrSitesForDay(curDay);
        	
        	// day with some itr sites
        	if (itrSites.length > 0) {
        		return itrSites[itrSites.length -1].noInTrip;
        	}
        	
        	// empty day
        	if (curDay > 1) {
        		itrSites = this.getItrSitesForDay(curDay -1);
        		return itrSites[itrSites.length -1].noInTrip + 1;
        	}
        	else {
        		return 1;
        	}
        }
        
        ItineraryDataMgr.prototype.setStartHourForAllDays = function(hourText,dayInTrip) {
        	for (var i=0;i<=this.getItineraryObj().noOfDays;i++) {
        		if (dayInTrip != null && dayInTrip != (i+1)) {
        			continue;
        		}
        		var itrSites = this.getItrSitesForDay((i+1));
        		
        		if (itrSites != null && itrSites.length > 0) {
        			itrSites[0].hourText = hourText;
        		}
        		this.processDay(i+1);
        	}
        	
        	
        	return this.save();
        }
        
        ItineraryDataMgr.prototype.fixDaysOrder = function() {
        	this.getItineraryObj().itinerarySites.sort(function(a, b) {
        		if (a.dayInTrip == -1) {
    				return 1;
    			}
    			if (b.dayInTrip == -1) {
    				return -1;
    			}
        		if (a.dayInTrip != b.dayInTrip) {
        			return a.dayInTrip - b.dayInTrip;
        		}
        		
        		return a.noInTrip - b.noInTrip;
        	});
        	
        	this.setNoInTrip();
        }
        
        //////////////////////////////////////////////////////////////////////
        // get data from server
        ItineraryDataMgr.prototype.getSitesDistanceMatrix = function(ids) {
        	return $.ajax({
  			  url: appRoot +  "/ws/getSitesDistanceMatrix",
			  type: "GET",
			  data: {
				  ids: ids
			  },
			  dataType: "json",
			  cache: false
	      	});
        }        
        
        ItineraryDataMgr.prototype.getAttractionAvgVisitDuration = function(attractionId) {
        	return $.ajax({
  			  url: appRoot +  "/ws/getAttractionAvgVisitDuration",
  			  type: "GET",
  			  data: {
  				  siteId: attractionId
  			  },
  			  dataType: "json",
  			  cache: false
	      	});	          	
        };  
        
        ItineraryDataMgr.prototype.loadRoutingDataForAttraction= function(attractionId) {
        	return $.ajax({
    			  url: appRoot +  "/ws/getSiteToAllDistanceMatrix",
    			  type: "GET",
    			  data: {
    				  siteId: attractionId
    			  },
    			  dataType: "json",
    			  cache: false
  	      	});	      	
        };
        
        ItineraryDataMgr.prototype.validateOpeningHours = function(tmpDate) {
        	var _self = this;
			if (this._itineraryObj.startDate || tmpDate) {
				this._itineraryObj.hasOpeningErrors = 0;
				for (var i=1;i<=_self._itineraryObj.noOfDays;i++) {
                	var daySites = _self.getItrSitesForDay(i);
					var startDate = tmpDate != null ? tmpDate : new Date(moment.utc(this._itineraryObj.startDate).format('LLL'));
					startDate.setDate(startDate.getDate() + (i-1)); 
					for (var j=0;j<daySites.length;j++) {
						var curSite = daySites[j];
						//curSite.openHoursError = null;
						if (curSite.site && curSite.site.tempClosed != null ) {
							var shortMsg =curSite.site.shortTitle + " is temporarily closed";
							_self.setSiteErrorMsg(curSite,shortMsg,shortMsg);
						} else if (curSite.site && curSite.site.openHoursList != null && curSite.site.openHoursList.length > 0) {
							var openHoursForDateArr = getOpenHoursForDay(startDate.getDay(),curSite.site.openHoursList);
							if (openHoursForDateArr.length > 0) {
								var siteOk = false;
								var shortMsg = "";
								var longMsg = "";
								var openHoursMultiStr = "";
								var siteVisitStart = new Date(curSite.visitHour);
								siteVisitStart = setToDate(siteVisitStart,startDate,false);
								
								var siteVisitEnd = new Date(curSite.visitHourEnd);
								siteVisitEnd = setToDate(siteVisitEnd,startDate,true);
								for (var k=0;k<openHoursForDateArr.length;k++) {
									var openHoursForDate = openHoursForDateArr[k]
									var openTime = new Date(openHoursForDate.startTime); 
									openTime = setToDate(openTime,startDate,false);
									var closeTime = new Date(openHoursForDate.endTime); 
									closeTime = setToDate(closeTime,startDate, true);
									if (closeTime.getHours() == 0) {
										closeTime.setDate(closeTime.getDate() + 1);
									}
									if (openHoursMultiStr.length > 0) {
										openHoursMultiStr += ", ";
									}
									openHoursMultiStr += getShortTime(openTime) + " - " + getShortTime(closeTime);
									if (siteVisitStart >= openTime && siteVisitEnd <= closeTime) {
										siteOk = true;
									} else {
										if (siteVisitStart < openTime) {
											shortMsg = curSite.site.shortTitle + " opens at " + getShortTime(openTime);
											longMsg = curSite.site.shortTitle + " (" + getShortTime(siteVisitStart) + " - " + getShortTime(siteVisitEnd) + ") opens on " + getNiceDayOfWeek(siteVisitEnd) + " at " + getShortTime(openTime);
										} else if (siteVisitEnd > closeTime) {
											shortMsg = curSite.site.shortTitle + " closes at " + getShortTime(closeTime);
											longMsg = curSite.site.shortTitle + " (" + getShortTime(siteVisitStart) + " - " + getShortTime(siteVisitEnd) + ") closes on " + getNiceDayOfWeek(siteVisitEnd) + " at " + getShortTime(closeTime);
										}
									} 
								}
								if (!siteOk) {
									if (openHoursForDateArr.length > 1) { 
										shortMsg = curSite.site.shortTitle + " is open " + openHoursMultiStr;
										longMsg = curSite.site.shortTitle + " (" +  getShortTime(siteVisitStart) + " - " + getShortTime(siteVisitEnd) + ") is open " + openHoursMultiStr;
									}
									_self.setSiteErrorMsg(curSite,shortMsg,longMsg);
								} else {
									curSite.openHoursError = null;
									curSite.newOpenHoursError = null;
								}
							} else {
								var shortMsg =curSite.site.shortTitle + " is closed on " + getNiceDayOfWeek(startDate);
								_self.setSiteErrorMsg(curSite,shortMsg,shortMsg);
							}
						} else {
							curSite.openHoursError = null;
							curSite.newOpenHoursError = null;
						}
					}
				}
				if (this._itineraryObj.hasOpeningErrors > 0) {
					$( "body" ).trigger( "handleOpeningHoursTip", [] );
					var newErrorsArr = new Array();
					for (var i=0;i<this._itineraryObj.itinerarySites.length;i++) {
						var curSite = this._itineraryObj.itinerarySites[i];
						if (curSite.newOpenHoursError && curSite.openHoursError != null) {
							newErrorsArr.push(curSite);
						}
						
					}
					if (newErrorsArr.length > 0 &&!_self._firstValidation) {
						//show only if there are new errors and not when the page loads
						$("body").trigger( "showOpeningErrors", [] );
					}
				} else if (this._changedStartDate) {
					$("body").trigger( "showOpeningErrors", [null,true] );
				}
				this._changedStartDate = false;
			}
			_self._firstValidation = false;
		}
        
        function getShortTime(d) {
        	var hr = d.getHours();
        	var min = d.getMinutes();
        	if (min < 10) {
        	    min = "0" + min;
        	}
        	var ampm = hr < 12 ? " AM" : " PM";
        	return hr + ":" + min + ampm
        }
        
        function getNiceDayOfWeek(d) {
        	var days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        	return days[d.getDay()];
        }
		
        ItineraryDataMgr.prototype.setSiteErrorMsg = function(curSite, shortMsg, longMsg) {
			curSite.newOpenHoursError = curSite.openHoursError != null ? false : true;
			curSite.openHoursError = new Object();
			curSite.openHoursError.shortMsg = shortMsg;
			curSite.openHoursError.longMsg = longMsg;
			this._itineraryObj.hasOpeningErrors++;
		}
		
		function setToDate(d,toDate,isEndTime) {
			d.setDate(toDate.getDate());
			d.setMonth(toDate.getMonth());
			d.setFullYear(toDate.getFullYear());
			if (isEndTime && d.getHours() >=0 && d.getHours() <= 6) {
				//add day for 00 t0 06 AM (only for close time)
				d.setDate(d.getDate()+1);
			}
			return d;
		}
		
		function getOpenHoursForDay(dayNo,openHoursArr) {
			var res = new Array();
			for (var i=0;i<openHoursArr.length;i++) {
				if (openHoursArr[i].day == dayNo) {
					res.push(openHoursArr[i]);
				}
			}
			return res;
		}
 
        return(ItineraryDataMgr);
    }    

);

define('ngApp/website/itinerary-by-day/itinByDayController',["ngApp/website/main/main"],
    function() {
	var app = angular.module('visitacity');

	app.controller('itinByDayController',['$scope','$rootScope','$http', '$q', '$filter', '$routeParams','$window',
	                                      'GlobalDefs', 'MyPlansService', 'activitiesService','GeneralModalService',
	                                      '$uibModal', '$timeout','blockUI','$location','GetCitiesService','hotelService','emailConsentService',
	                                      function($scope,$rootScope,$http, $q, $filter, $routeParams,$window,
	                                    		  GlobalDefs, MyPlansService, activitiesService,GeneralModalService,
	                                    		  $uibModal,$timeout,blockUI,$location,GetCitiesService,hotelService,emailConsentService) {
		blockUI.start("Loading...");
		emailConsentService.consentRequired().then(function(data) {
			$scope.requireEmailConsent = data;
		});
		
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.hide_my_plans = "none";
		$scope.cityLegal = $routeParams.city;
		$scope.cityObj = null;
		$scope.itinArr = null;
		$scope.maxDays = null;
		$scope.minDays = null;
		$scope.noOfDays = null;
		$scope.citiesArr = new Array();
		$scope.itineraryDays = null;
		$scope.itinDays = new Array();
		$scope.selectedDays = null;
		$scope.topPa = null;
		$scope.loggedInUser = "";
		$scope.userItinArr = null;
		$scope.mps = MyPlansService;
		$scope.lang = $routeParams.lang;
		require(["app/core/login"], function(LoginMgr) {
			//$scope.curUsr = LoginMgr.getInstance().getLoggedInUserObject();
			LoginMgr.getInstance().getLoggedInUserObject().then(function(data){
				$scope.curUsr = data;
			});
		});
		
		
		var numbers = ["","One","Two","Three","Four","Five","Six","Seven","Eight","Nine",
		               "Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen","Twenty",
		               "Twenty One","Twenty Two","Twenty Three","Twenty Four","Twenty Five"];
		var ajaxLoadTiming = new TrackTiming("PageCoreLoadNew", "ajax_data_time"); 
		var callLink = '/jsonws/' + $scope.cityLegal + '/itinerary-by-day/' + $routeParams.days;
		if ($routeParams.lang != "en") {
			callLink += "/" + $routeParams.lang;
		}
		var callA = $http.get(callLink);
		var callB = $http.get(appRoot + '/api/my-plans');
		var callC = GetCitiesService.async();
		var callD = activitiesService.init($scope.cityLegal);
		$q.all(new Array(callA, callB,callC,callD)).then(
   			 function(results) {
   				ajaxLoadTiming.send();
   				$scope.itineraryDays = results[0].data.itineraryDays;
   				$scope.citiesArr = results[2];
   				//var curCity = $filter('filter')($scope.citiesArr, {id:results[0].data.city.id}, true)[0];
   				$scope.cityObj = hotelService.isShowHotel(results[0].data.city,"itinerary days");
   				$scope.maxDays = results[0].data.cityMaxItrDays;
   				$scope.minDays = results[0].data.cityMinItrDays != null ? results[0].data.cityMinItrDays : 1;
   				$scope.itinArr = results[0].data.lstItineraries;
   				$scope.countryItinArr = results[0].data.lstCountryItineraries;
   				if ($scope.countryItinArr != null && $scope.countryItinArr.length > 0) {
   					$scope.itinArr = $scope.itinArr.concat($scope.countryItinArr);
   				}
   				$scope.noOfDays = results[0].data.noOfDays;
   				$scope.userItinArr = results[1].data.lstItineraries;
   				
   				$scope.processItins($scope.itinArr);
   				
   				//$scope.topPa = $filter('limitTo')(results[0].data.topPa, 4);
   				$scope.topPa = $filter('limitTo')(activitiesService.getAllPromotedActivities(), 4);
   				
   				for (var i=$scope.minDays;i<=$scope.maxDays;i++) {
   					if (i==1) {
   						$scope.itinDays.push($filter('translateFilter')("**city** in","**city**",$scope.cityObj.name) + " " + $filter('translateFilter')(numbers[i]) + " " + $filter('translateFilter')("Day"));
   					} else {
   						$scope.itinDays.push($filter('translateFilter')("**city** in","**city**",$scope.cityObj.name) + " " + $filter('translateFilter')(numbers[i]) + " " + $filter('translateFilter')("Days"));
   					}
   				}
   				
/*   				for (var i=$scope.minDays;i<=$scope.maxDays;i++) {
   					if (i==1) {
   						$scope.itinDays.push($scope.cityObj.name + ' in ' + numbers[i] + ' Day');
   					} else {
   						$scope.itinDays.push($scope.cityObj.name + ' in ' + numbers[i] + ' Days');
   					}
   					
   				}*/
   				
   				$scope.selectedDays = $scope.itinDays[$scope.noOfDays-$scope.minDays];
  				//var daysTxt = $scope.noOfDays > 1 ? " Days" : " Day";
  				var daysTxt =  $scope.noOfDays > 1 ? " " + $filter('translateFilter')("Days") : " " + $filter('translateFilter')("Day");
  				var bc = new Array();
  				bc.push({name: $scope.noOfDays + daysTxt + " Guides"});
   				$rootScope.$broadcast("update_main_header_width","itineraryByDayContainer");
   				$rootScope.$broadcast("update_breadcrumb",bc, $scope.cityObj, $routeParams.lang);
   				$window.document.title = $scope.cityObj.name + " in " + $scope.noOfDays + " " + daysTxt + " - " + $scope.itinArr.length + " suggested itinerareries";
   				require(
    	    	    ["app/extensions/core/currency"],
    	    	    function(CurrencyMgr) {
    	    	    	var currencyMgr = new CurrencyMgr();
    	    	    	for (var i=0;i<$scope.topPa.length;i++) {
    	    	    		currencyMgr.fixCurrencyElement(document.getElementById("pa_" + $scope.topPa[i].id));
       					 	if ($scope.topPa[i].priceBeforeDiscount != null) {
       					 		currencyMgr.fixCurrencyElement(document.getElementById("pabefore_" + $scope.topPa[i].id));
       					 	}
       				 	}
    	    	    });
   				
   				individualPageLoadTiming.send();
   				blockUI.reset();
   			 }, function(errors) {
   			 
   			 }
		);
		
		$scope.processItins = function(itinArr) {
			for (var i=0;i<itinArr.length;i++) {
				var curItin = itinArr[i];
				if (curItin == null) {
					continue;
				}
				var itinCity = $scope.cityObj;
				if ($scope.cityObj.cityType == 'country' || $scope.cityObj.cityType == 'region' && $scope.cityObj.id != curItin.cityId) {
					itinCity = $filter('filter')($scope.citiesArr, {id:curItin.cityId}, true)[0];
				}
				curItin.city = itinCity;
				curItin.itrPath = itinCity.cityType == 'country' || itinCity.cityType == 'region' ? "-r" : "";
			}
		}
		
		
		$scope.saveItin = function(itin) {
			var saved = $filter('filter')($scope.userItinArr, {baseItineraryId: itin.id}, true);
			
			var title= "Save Itinerary"
			var content = "";
			var btn1Txt = "Open My Plans";
			var btn2Txt = "Close";
			var btn1Url = $scope.appRoot + "/my-plans"
			var btn2Url = "close";
			itin.description = itin.descriptionNoHtml;
			if (saved.length >0) {
				content =  itin.name + " is already part of your plans and is accessible from the My Plans menu on the top right side of your screen.";
			} else {
				content = itin.name + " has been saved to My Plans";
				var itinClone = angular.copy(itin);
				require(["app/itinerary/itineraryDataMgr"],
		                function(ItineraryDataMgr) {
							var itinMgr = new ItineraryDataMgr(itinClone);
							$q.all(new Array(itinMgr.save())).then(function(res) {
								//Add to my plans
								$scope.userItinArr.push(itinClone);
								require(["app/core/login","app/itinerary/userItineraryDao"], function(LoginMgr,UserItineraryDao) {
									UserItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
										MyPlansService.setMyPlans(userItineraries);
										$scope.$apply();
									});
								})
				        	},
				        	function(e) {
				        		
				        	});
		                }
			    	);
				 
			}
			/*$scope.title = "Save Itinerary";
			$scope.content = content;
			GeneralModalService.generalModal(null,"itinByDayController",$scope);
			//$scope.generalModal("itinerary-by-day","save-itinerary",title,content,btn1Txt,btn2Txt,btn1Url,btn2Url);
*/			return;
			
		}
		
		
		$scope.goToItin = function() {
			var numOfDays = $scope.itinDays.indexOf($scope.selectedDays) + $scope.minDays;
			var url = "/"+ $routeParams.lang + "/" + $scope.cityObj.legalName + "/itinerary-by-day/" + numOfDays;
			$location.path(url);
			if(!$scope.$$phase) $scope.$apply();
		}
		
		/*$scope.changeLocation = function(url, evt) {
			if (evt) {
				fireEvent('itinerary-by-day',evt,'');
				$timeout(function() {
					$location.path(url);
	   			},500);
				
			} else {
				$location.path(url);
			}
			
		}*/
		
		var w1 = $scope.$watch('mps.getMyPlans()', function(newVal, oldVal) {
			if (newVal != oldVal && newVal.length > 0 && $scope.itinArr != null) {
				var itin = $filter('filter')($scope.itinArr, {id: newVal[0][2]}, true)[0];
				$scope.userItinArr.push(itin);
			}
		  });
		
		 $scope.$on("$destroy",function() {
			 w1();
		 });    
		
		//Show/hide print/download dialog
	    $scope.toggleModal = function(action, guide){
	    	$scope.abNum = $scope.requireEmailConsent ? "100" : "1";
			fireEvent("Download","download_itinerary_" + $scope.abNum + "_open","itinerary-by-day page");
	    	guide.description = guide.descriptionNoHtml;
	    	var guideClone = angular.copy(guide);
	    	var di = $uibModal.open({
	    		 templateUrl: 'ngApp/website/itinerary/modals/download-guide.html',
			      controller: 'GuideModalInstanceController',
			      windowClass : 'itinerary-download-black',
			      resolve: {
			          guide: function () {
			            return guideClone;
			          },
			          action: function () {
			        	  return action
			          },
			          user: function() {
			        	  return $scope.curUsr.email 
			          },
			          page: function() {
			        	  return "itinerary-by-day page" 
			          }
			          
			       }
			});
	    };
	    
	    //General Modal
	   /* $scope.generalModal = function(page,action,title,content,btn1Txt,btn2Txt,btn1Url,btn2Url){
	    	fireEvent(page,action,'');
	    	var di = $uibModal.open({
			      templateUrl: 'ngApp/website/shared/general-modal.html',
			      controller: 'generalModalController',
			      resolve: {
			    	  page: function () {
			            return page;
			          },
			          action: function () {
			            return action;
			          },
			    	  title: function () {
			            return title;
			          },
			          content: function () {
			        	  return content;
			          },
			          btn1Txt: function() {
			        	  return btn1Txt;
			          },
			          btn2Txt: function() {
			        	  return btn2Txt;
			          },
			          btn1Url: function() {
			        	  return btn1Url;
			          },
			          btn2Url: function() {
			        	  return btn2Url;
			          }
			          
			       }
			});
	    };*/
		
	}]);
	
	angular.module('visitacity').controller('generalModalController', ['$scope', '$http', '$uibModalInstance', 'page', 'action', 'title', 'content', 'btn1Txt','btn2Txt','btn1Url','btn2Url',
	                      function ($scope, $http, $uibModalInstance, page, action, title, content, btn1Txt, btn2Txt, btn1Url, btn2Url) {

		  $scope.title = title;
		  $scope.content = content;
		  $scope.btn1Txt = btn1Txt;
		  $scope.btn2Txt = btn2Txt;
		  $scope.btn1Url = btn1Url;
		  $scope.btn2Url = btn2Url;
		  
		 
		  $scope.btn1Action = function () {
			  fireEvent(page,action+"-"+btn1Txt,'');
			  if ($scope.btn1Url != null && $scope.btn1Url.length > 0) {
				  window.location = $scope.btn1Url;
			  }
		  };

		  $scope.btn2Action = function () {
			  fireEvent(page,action+"-"+btn2Txt,'');
			  if ($scope.btn2Url == "close") {
				  $uibModalInstance.dismiss('cancel');
			  }
		  };
	}]);
	
});	

define(
    'app/core/dialogBase',["jquery.qtip.min"],
    function( qTip ) {
 
        function DialogBase(dialogName, templateFile) {
        	this._dialogName = dialogName;
        	this._templateFile = templateFile;
        	this._templateHtml = null;
        	this._template = null;
        	this._divId = null;
        	this._dlg = null;
        	this._dlgObj = null;
        	this._done = false;
        	this._doneExtra = null;
        	this._openTime = null;
        	this._logCloseDone = false;
        	
        	this._templateLoadDeffered = new $.Deferred();
        	if (this._templateFile != null) {
        		this.loadTemplate();	
        	}
        	else {
        		this._templateLoadDeffered.resolve();
        	}
        	
        	this.init();
        	
            return( this );
        }
        
        DialogBase.prototype.loadTemplate = function() {
        	var _self = this;
 
        	if (dialogBaseTemplateCache[_self._templateFile] != null) {
        		_self._template = dialogBaseTemplateCache[_self._templateFile];
        		_self._templateLoadDeffered.resolve();
        		return;
        	}
        	
        	$.ajax({
    			  url: appTemplatesFolder + this._templateFile,
    			  type: "GET",
    			  cache: !$.browser.msie
  	      	}).then(function(templateHtml) {
  	      		_self._template = Handlebars.compile(templateHtml);		
  	      		dialogBaseTemplateCache[_self._templateFile] = _self._template;
  	      		_self._templateLoadDeffered.resolve();
  	      	},
  	      	function(e) {
  	      		_self._templateLoadDeffered.reject();
  	      	});	
        }
        
        DialogBase.prototype.init = function() {
        	var _self = this;        	
        	this._divId ="divDialogContainer_" + this.getNewUnique();     
         	
        	this._dlgObj = $("<div/>").qtip({
                content: {
                    text: "<div/>",
                    title: {
                    	button: "Close"
                    }
                },
                position: {
                    my: 'center', at: 'center',
                    target: $(window),
                    adjust: {
                        scroll: false,
                        y: this.getOption("position_adjust_y", 0)
                    }                    
                },
        	    style: {
        	        classes: 'qtip-bootstrap',
        	        tip: {
        	            corner: true
        	        }
        	    },                
                show: {
                    ready: false,
                    modal: {
                        on: true,
                        blur: false
                    }
                },
                hide: false,
                events: {
                    render: function(event, api) {
                        $('button', api.elements.content).click(function(e) {
                            api.hide(e);
                        });
                    },
                    hide: function(event, api) {
                    	if (! _self.canCloseDialog() ) {
                    		event.preventDefault();
                    		return;
                    	}
                    	_self.onCloseBase();
                    }
                }  
        	});       
        	
        	this._dlg = $("#" + this._divId);
        };
        
        // to be overriden by dialogs that want to prevent dialog closing in some events
        DialogBase.prototype.canCloseDialog = function() {
        	return true;
        }
        
        DialogBase.prototype.getOption = function(name, defaultVal) {
        	var val = defaultVal;
        	var cmd = "val=this._options." + name + ";";
        	
        	try {
        		eval(cmd);
        	}
        	catch(e) {
        		// nothing 
        	}
        	
        	return val;
        }
        
        DialogBase.prototype.getIsDone = function() {
        	return this._done;
        };        
        
        DialogBase.prototype.setDone = function(doneExtra, logClose) {
        	this._done = true;
        	this._doneExtra = doneExtra;
        	
        	if (logClose) {
        		this.logClose();
        	}
        }
        
        DialogBase.prototype.setDialogName = function(name) {
        	this._dialogName = name;
        }        
        
        DialogBase.prototype.onCloseBase = function() {        	
        	// events
        	this.logClose();
        	
        	// custom handlers
        	if (this.onCloseDialog != undefined) {
        		this.onCloseDialog();
        	}      
        };
        
        DialogBase.prototype.logClose = function() {
        	if  (this._logCloseDone) {
        		return;
        	}
        	
        	var totalSecOnPage = parseInt((new Date().valueOf() - this._openTime) / 1000);        	
        	console.log("Dialog close: " + this._dialogName +  ". Done=" + this._done + (this._doneExtra != null ? (". " + this._doneExtra) : "") + ". totalTime=" + totalSecOnPage );  
        	fireEvent("Dialog", this._dialogName + "-" + (this._done ? "ok" : "cancel"), this._doneExtra, totalSecOnPage);
        	this._logCloseDone = true;
        }
        
        DialogBase.prototype.getTitle = function() {
        	return "";
        };
        
        DialogBase.prototype.setTitle = function(title) {
        	this._dlgObj.qtip('api').set({ 'content.title': "<b style='font-size:13px'>" + title + "</b>"});
        };
        
        DialogBase.prototype.reposition = function() {
        	this._dlgObj.qtip('api').reposition();
        };        
        
        DialogBase.prototype.setContent = function(html) {
        	html = "<div id='" + this._divId  + "' class='dialog-text'>" + html + "</div>";
        	this._dlgObj.qtip('api').set({ 'content.text': html});
        	this._dlg = $("#" + this._divId);
        	this._dlg.find("button").button();

        };
        
        DialogBase.prototype.openDialogPrivate = function() {
        	var _self =  this;
        	
        	if (this._dlg != null && ! this._dlg.is(':visible')) {
        		this._done = false;
        		this._openTime = new Date().valueOf();
        		this._logCloseDone = false;
        		
        		// destroy previous to get over bug in which opacity is lost
        		this._dlg.remove();
        		this._dlgObj.qtip('api').destroy();
        		this.init();
        		
        		// event
            	fireEvent("Dialog", this._dialogName + "-" + "open", null, null); 
            	console.log("Dialog open: " + this._dialogName);        		
        	}      	
        }
        
        DialogBase.prototype.openDialog = function() {
        	var _self =  this;
        	_self.openDialogPrivate();
        	
        	this._templateLoadDeffered.done(function() {
        		_self._dlgObj.qtip('api').show();	
        	});
        };
        
        DialogBase.prototype.openDialogDefferd = function() {
        	this.setContent(this.getWaitingHtml());
        	this.openDialogPrivate();
        	this._dlgObj.qtip('api').show();	
        	return this._templateLoadDeffered;
        }
        
        DialogBase.prototype.getWaitingHtml = function() {
			var html = "";
			
			html += "<div id='divLoginWaiting' style='width:300px;height:200px'>";
			html += "		<center style='margin-top:60px'>";			
			html += "			<div><img src='" + appImagesFolder + "/loading_quick.gif\'></img></div>";
			html += "		</center>	";		
			html += "</div>";
			
			return html;			
		};
       
        DialogBase.prototype.closeDialog = function(setDone) {
        	setDone = (setDone != null) ? setDone : this._done;
        	this._done = setDone;
        	this._dlgObj.qtip('api').hide();
        }
        
        DialogBase.prototype.destroy = function() {
        	this._dlgObj.qtip('api').destroy();
        }
        
        DialogBase.prototype.getNewUnique = function() {
        	var idx = (dialogUnqiueId++);        	
        	return idx;
        }
        
        var dialogUnqiueId = 0;
        var dialogBaseTemplateCache = {};
 
        return(DialogBase);
    }
);
define(
    'app/dialogs/forgotPasswordDialog',["app/core/dialogBase"],
    function(DialogBase) {
 
        function ForgotPasswordDialog() {
        	DialogBase.call(this, "forgot_password");
            return( this );
        }
        
        ForgotPasswordDialog.prototype = Object.create( DialogBase.prototype );

		ForgotPasswordDialog.prototype.getHtml = function() {
			var html="";

			html += "<div id='divRegisterDialog' style='width:400px; '>";
			html += "		<div id='divRegister' style='margin-top:5px;width:400px;'>				";
			html += "			<div style='margin-top:10px'>";
			html += "				Email you registered with:";
			html += "				&nbsp;";
			html += "				<span id='spanEmailAddrErr' style='font-size:12px;color:red;font-style:italic;  ;display: none'>* Not a valid Email address:</span>";
			html += "			</div>";
			html += "			<div style='border: 0px solid black;margin-top:10px'>";
			html += "				<input type='text' id='txtEmail' style='height:20px;width:390px;padding-left:6px' autocomplete='on' />";
			html += "			</div>	";
			html += "			<div align='right' style='margin-top:15px'>";
			html += "				<button id='btnok'>Send Password</button>";
			html += "			</div>											";
			html += "		</div>	";
			
			html += "		<div id='divSend' style='width:400px;margin-top:25px;display:none'>";
			html += "					<center>";
			html += "						<div>Sending your password</div>";
			html += "						<div style='margin-top:5px'><img src='" + appImagesFolder + "/loading_quick.gif'></img></div>";
			html += "					</center>					";
			html += "		</div>";

			html += "		<div id='divDone' style='width:400px;float:left;margin-top:20px;display:none;position: relative'>";
			html += "			<div>"; 
			html += "				<span>Password was sent to your email</span>";
			html += "			</div>";

			html += "			<div style='width:450px;margin-top:25px;float:right'>";
			
			html += "				<div style='float:right;'>";
			html += "					<button id='btnClose'>Close</button>";			
			html += "				</div>";						
			html += "		</div>"	;			
			
			
			html += "</div>";
			
			return html;
		};
		
		ForgotPasswordDialog.prototype.register = function() {
			this._dlg.find("#spanEmailAddrErr").hide();
			this._dlg.find("#spanDateErr").hide();
			
			if (! isEmail(this._dlg.find("#txtEmail").val() )) {
				this._dlg.find("#spanEmailAddrErr").show();
				return false;
			}			
			
			// send
			$.ajax({
				  url: appRoot + "/ws/login/forgotpassword",
				  type: "POST",
				  data: {
					  email: this._dlg.find("#txtEmail").val()
				  }
			});
			
			return true;
		}
		
		ForgotPasswordDialog.prototype.open = function() {
			var _self = this;
			
			this.openDialog();
			this.setTitle("Forgot Password");
			this.setContent(this.getHtml());
			
			// events
			this._dlg.find("#btnok").click(function() {
				if (_self.register()) {
					_self.setDone();
					
					// do the show
					_self._dlg.find("#divRegister").hide();
					_self._dlg.find("#divSend").show();
					
					// min time to wait
					minTimeDeffered = $.Deferred();
					window.setTimeout(function() {
						minTimeDeffered.resolve();
					}, 2000);

	        		minTimeDeffered.done(function() {
						_self._dlg.find("#divSend").hide();
						_self._dlg.find("#divDone").show();		        			
	        		});	
				}				
			});
			
			this._dlg.find("#btnClose").click(function() {
				_self.closeDialog();
			});
	
		};
		
        var instance = new ForgotPasswordDialog();        
        
        ForgotPasswordDialog.getInstance = function() {
        	return instance;
        };
	
 
        return(ForgotPasswordDialog);
    }
);
define(
    'app/dialogs/loginDialog',["app/core/dialogBase",
     "app/core/login"],
    function(DialogBase, LoginMgr) {
 
        function LoginDialog(){ 
        	DialogBase.call(this, "login");   
        	
        	this._dataDeffered = new $.Deferred();
        	this._minWaitDefferd = new $.Deferred();
        	this._isReigsterState = false;
        	
        	this.initData();
            return( this );
        }
        
        LoginDialog.prototype = Object.create( DialogBase.prototype );
		
		LoginDialog.prototype.initData = function() {
			var _self = this;
			
			LoginMgr.getInstance().loadAccountIds().then(function() {
				var googleAccountId = LoginMgr.getInstance().getGoogleAccountId();
				_self._googleAccountId = googleAccountId;
				return LoginMgr.getInstance().prepareLoginPublishers();			
			}).then(function() {
				_self._dataDeffered.resolve();
			}	
			, function (e) {
				_self._dataDeffered.reject(e);
        	});		
		};
		
		LoginDialog.prototype.doSignUp = function() {
			var _self = this;
			var email = this._dlg.find("#txtEmail").val();
			var password = this._dlg.find("#txtPassword").val();
			
			// validation
			if (! isEmail(email) ) {
				_self.showError("Please enter a valid email.");
				fireEvent("Dialog", "login-signup invalid email");
				return;
			}	
			
			if (! password.match(/^([a-zA-Z0-9]{6,})$/)) {
					fireEvent("Dialog", "login-signup invalid password");
				_self.showError("Password should contain at least 6 characters or numbers.");
				return;
			}
			
			// signup
			LoginMgr.getInstance().signup(email, password).then(function(loginResult) {
				if (loginResult.errorId > 0) {
					if (loginResult.errorId == LOGIN_ERROR_USER_EMAIL_EXISTS) {
						fireEvent("Dialog", "login-signup user email exists");
						_self.showError("The email address provided is already associated with a Visit A City account.");	
					}
					else {
						fireEvent("Error", "login-signup-exception", null, loginResult.errorMessage);
					}
				}
				else  {
					_self.loginDone("signup");	
				}				
			}, function(e) {
				fireEvent("Error", "login-signup unknown error");
			});			
		};
		
		LoginDialog.prototype.doLogin= function() {
			var _self = this;
			var email = this._dlg.find("#txtEmail").val();
			var password = this._dlg.find("#txtPassword").val();
			
			// validation
			if (! isEmail(email) ) {
				fireEvent("Dialog", "login-signin invalid email");
				_self.showError("Please enter valid email");
				return;
			}	
			
			if (password.length == 0) {
				fireEvent("Dialog", "login-signin invalid password");
				_self.showError("Please enter password");
				return;
			}
			
			// login
			LoginMgr.getInstance().login(email, password).then(function(loginResult) {
				if (loginResult.errorId > 0) {
					if (loginResult.errorId == LOGIN_ERROR_USER_NOT_FOUND) {
						fireEvent("Dialog", "login-signin invalid user");
						_self.showError("Wrong email/password combination.<br/>Not Registered? click <a href='javascript:;' id='hrefErrorRegister'>here</a> to register");
						_self._dlg.find("#hrefErrorRegister").click(function() {
							_self.toSignup();
						});
					}
					else {
						fireEvent("Error", "login-signin-exception", null, loginResult.errorMessage);
					}
				}
				else  {
					_self.loginDone("signin");	
				}				
			}
			, function(e) {
				fireEvent("Error", "login-signin unknown error");
			});			
		};
		
		LoginDialog.prototype.showError = function(text) {
			this._dlg.find("#divLoginErrors").html(text);
			this._dlg.find("#divLoginErrors").show();
		};
		
		LoginDialog.prototype.getHtml = function() {
			var 	html = "";
			html += this.getGoogleButtonStyle();
			
			html += "<div id='divLoginData' style='width:300px;height:100%;padding: 0px 10px 0px 10px'>";			
			
			html += "	<div style='width:280px;font-weight:bold'>";
			html += "		Sign in is free and is required in order to access your itinerary from anywhere";
			html += "	</div>";			
			
			// sign in with
			html += "	<div style='width:300px;position:relative;margin-top:20px'>";
			
			html += "		<div style='border-top:2px solid #eaeaea'></div>";
			
			
			html += "		<div style='width:280px;position:relative;top:-11px;text-align:center;'>";
			html += "			<span style='display:inline-block;background-color:white;font-size:11px;font-weight:bold;color:#bbb;padding: 0px 15px 0px 15px'>SIGN IN WITH</span>";
			html += "		</div>";
			
			html += "	</div>";
			
			// buttons
			html += "	<div style='width:300px;position:relative;margin-top:5px'>";
			html += "		<img id='imgFacebook' src='" + appImagesFolder + "/facebook_login_300_46.png' style='cursor:pointer'>";				
			html += "	</div>";
			
			html += "	<div style='width:300px;position:relative;margin-top:10px'>";
			html += "		<div id='customGoogleBtn' class='customGPlusSignIn'>";
			html += "			<span class='icon'></span>";
			html += "			<span class='buttonText'>Google</span>";
			html += "		</div>";			
			html += "	</div>";	
			
			// or
			html += "	<div style='width:300px;position:relative;margin-top:20px'>";
			
			html += "		<div style='border-top:2px solid #eaeaea'></div>";
			
			html += "		<div style='width:280px;position:relative;top:-11px;text-align:center;'>";
			html += "			<span style='display:inline-block;background-color:white;font-size:11px;font-weight:bold;color:#bbb;padding: 0px 15px 0px 15px'>OR</span>";
			html += "		</div>";
			
			html += "	</div>";
			
			// error
			html += "	<div id='divLoginErrors' style='width:280px;position:relative;margin-top:0px;background-color:#FFDFDF;padding:10px 10px 10px 10px;" +
					"font-size:12px;font-weight:normal;display:none;margin-bottom:10px'>";
			html += "	</div>";				
			
			// email
			html += "	<div style='relative;margin-top:0px;font-size:12px;font-weight:normal'>Email:</div>";
			html += "	<div style='width:300px;position:relative;margin-top:3px'>";
			html += "		<input id='txtEmail' type='text' style='width:285px;height:25px;padding-left:10px'>";
			html += "	</div>";
			
			// password
			html += "	<div style='margin-top:10px;font-size:12px;font-weight:normal'>Password:</div>";
			html += "	<div style='width:300px;position:relative;margin-top:3px'>";
			html += "		<input id='txtPassword' type='password' style='width:285px;height:25px;padding-left:10px'>";
			html += "	</div>";
			
			// send me updates
//			html += "	<div style='width:300px;position:relative;margin-top:5px;display:none' showonsignup>";
//			html += "		<input type=\"checkbox\" id=\"chkEmail\" checked/>";
//			html += "		<span style='font-size:12px;font-weight:normal'>Send me updates with new tips, attractions and activities.</span>";
//			html += "	</div>";			
			
			// forgot password
			html += "	<div style='margin-top:5px;font-size:12px;font-weight:normal' hideonsignup>";
			html += "		<a href='javascript:;' id='hrefForgotPwd'>Forgot your password?</a>";
			html += "	</div>";
			
			// border
			html += "	<div style='width:300px;margin-top:10px;border-bottom:1px solid rgb(128,128,128)' hideonsignup></div>";
			
			// no account and sign in
			html += "	<div style='margin-top:15px;margin-bottom:10px' hideonsignup>";
			html += "		<span style='font-size:12px;font-weight:normal;position:relative' hideonsignup>No account? </span>";
			html += "		<a id='hrefToSignUp' href='javascript:;'  style='font-size:12px;font-weight:bold' hideonsignup>Register</a>";
			html += "		<span class='dialogBlueButton' id='hrefSignin' style='position:relative;left:80px'>Sign in</span>";			
			html += "	</div>";		
			
			
			html += "	<div id='divSignupAction' style='margin-top:15px;height:30px;margin-bottom:10px;display:none;position:relative' showonsignup>";
			html += "		<span class='dialogBlueButton' id='hrefSignupdo' style='position:absolute;right:5px'>Register</span>";			
			html += "	</div>";			
				
			
			html += "</div>";
			
			return html;
		}
		
		LoginDialog.prototype.getGoogleButtonStyle = function() {
			var html="";
			
			html += "  <style type='text/css'>";
			html += "    #customGoogleBtn {";
			html += "      display: inline-block;";
			html += "      background: #dd4b39;";
			html += "      color: white;";
			html += "      width: 300px;";
			html += "      height: 40px;";			
			html += "      border-radius: 5px;";
			html += "      white-space: nowrap;";
			html += "      cursor: pointer;";			
			html += "    }";
			html += "    #customGoogleBtn:hover {";
			html += "      background: #e74b37;";
			html += "      cursor: hand;";
			html += "    }";
			html += "    span.label {";
			html += "      font-weight: bold;";
			html += "    }";
			html += "    span.icon {";
			html += "      background: url('https://google-developers.appspot.com/+/images/branding/btn_red_32.png') transparent 5px 50% no-repeat;";
			html += "      display: inline-block;";
			html += "      vertical-align: middle;";
			html += "      width: 35px;";
			html += "      height: 35px;";
			html += "      border-right: #bb3f30 1px solid;";
			html += "    }";
			html += "    span.buttonText {";
			html += "      display: inline-block;";
			html += "      vertical-align: middle;";
			html += "      padding-top: 5px;";			
			html += "      padding-left: 45px;";
			html += "      font-size: 14px;";
			html += "      font-weight: bold;";
			html += "      /* Use the Roboto font that is loaded in the <head> */";
			html += "      font-family: 'Roboto',arial,sans-serif;";
			html += "    }";
			html += "  </style>";
			
			return html;
		}
		
		LoginDialog.prototype.getOpeningHtml = function() {
			var html = "";
			
			html += "<div id='divLoginWaiting' style='width:300px;height:400px'>";
			html += "		<center style='margin-top:60px'>";			
			html += "			<div><img src='" + appImagesFolder + "/loading_quick.gif\'></img></div>";
			html += "		</center>	";		
			html += "</div>";
			
			return html;			
		};
		
		LoginDialog.prototype.toSignup = function() {			
			this.setTitle("Register");
	
			this._dlg.find("[hideonsignup]").hide();
			this._dlg.find("[showonsignup]").show();
			this._dlg.find("#divLoginErrors").hide();
			this._dlg.find("#txtName").focus();
			this._isReigsterState = true;
			
			this.reposition();
		};
		
		LoginDialog.prototype.open = function(isSignUp, title) {
			var _self = this;
			
			if (_self._minWaitDefferd.state() != "resolved") {
				window.setTimeout(function() {
					_self._minWaitDefferd.resolve();
				}, 1000);				
			}
			
			this.openDialog();
			
			if (title != null) {
				this.setTitle( title );
			}
			else {
				   if (isSignUp) {
					   this.setTitle( "Register" );
				   }
				   else {
					   this.setTitle( "Sign in" );
				   }				
			}	
			
			this.setContent(this.getOpeningHtml());	
			
			$.when(this._dataDeffered, this._minWaitDefferd).then(function(a1, a2) {
			   _self.showLoginForm(isSignUp);
			},
			function(e) {
				fireEvent("Error", "login loading account data", e);
				_self.showLoginForm(isSignUp);
			});
		};
		
		LoginDialog.prototype.showLoginForm = function(isSignUp) {
			var _self = this;
			
			_self.setContent(_self.getHtml());
			
			try {
				   gapi.signin.render('customGoogleBtn', {
					      'callback': 'googleSigninCallback',
					      'clientid': _self._googleAccountId,
					      'cookiepolicy': 'single_host_origin',
					      'requestvisibleactions': 'http://schemas.google.com/AddActivity',
					      'scope': 'https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/userinfo.email'
				   });					
			}
			catch (e) {
				// nothing
			}
			   
		   if (isSignUp) {
			   _self.toSignup();
		   }
		   
		   // events
		   _self._dlg.find("#imgFacebook").hover(
					function () {
						$(this).attr("src", appImagesFolder + "/facebook_login_300_46.png");	
					},
					function () {
						$(this).attr("src", appImagesFolder + "/facebook_login_300_46_pressed.png");
					}
			);	
		   
		   _self._dlg.find("#imgFacebook").click(function() {
				LoginMgr.getInstance().facebookLogin().then(function() {
					_self.loginDone("facebook");
				},
				function() {
					fireEvent("Error", "login facebook");
				})
			});
			
		   _self._dlg.find("#customGoogleBtn").click(function() {
				LoginMgr.getInstance().getGoogleLoginDeffered().then(function() {
					_self.loginDone("google");
				},
				function() {
					fireEvent("Error", "login google");
				})
			});		
			
		   _self._dlg.find("#hrefSignin").click(function() {
			   _self.doLogin();
			});
		   
		   _self._dlg.find("#hrefToSignUp").click(function() {
			   fireEvent("Dialog", "login-to signup");
			   _self.toSignup();
			});			
		   
		   _self._dlg.find("#hrefSignupdo").click(function() {
			   _self.doSignUp();
			});			
		   
		   _self._dlg.find("#hrefForgotPwd").click(function() {					   
    			require(["app/dialogs/forgotPasswordDialog"],
    				    function(ForgotPasswordDialog) {
    						ForgotPasswordDialog.getInstance().open();
    				    }
    			); 					   
    			
    			_self.closeDialog();
			});					
		}
		
		LoginDialog.prototype.loginDone= function(method) {
			this.setDone(method);
			$( "body" ).trigger( "login_done", [] );
			this.closeDialog();
		};

        var instance = new LoginDialog();
    	var LOGIN_ERROR_USER_EMAIL_EXISTS = 10;
    	var LOGIN_ERROR_USER_NOT_FOUND = 11;
        
        LoginDialog.getInstance = function() {
        	return instance;
        };		
 
        return(LoginDialog);
    }
);
define('ngApp/website/my-plans-page/myPlansPageController',["ngApp/website/main/main",
        "app/itinerary/userItineraryDao"],
    function(main,UserItineraryDao) {
	var app = angular.module('visitacity');

	
	app.filter('tripDates', ['$filter', function($filter){
	   	 return function(itin) {
	   		var res = "";
	   		if (itin.startDate) {
	   			var startDate = new Date(itin.startDate);
	   			var endDate = new Date(startDate);
	   			endDate.setDate(endDate.getDate() + (itin.noOfDays-1));
	   			res = $filter('date')(startDate, "longDate") + " - " + $filter('date')(endDate, "longDate");
	   		}
	   		return res;
	   	 }
	   }]);
	
	app.controller('myPlansPageController',['$scope','$rootScope','$http', '$q', '$filter', '$routeParams','GlobalDefs', 'GetCitiesService', 'MyPlansService',
	                                        '$uibModal','$window','blockUI','$routeParams','emailConsentService',
	                                        function($scope,$rootScope,$http, $q, $filter, $routeParams, GlobalDefs, GetCitiesService, MyPlansService, 
	                                        		$uibModal, $window,blockUI,$routeParams,emailConsentService) {
		
		emailConsentService.consentRequired().then(function(data) {
			$scope.requireEmailConsent = data;
		});
		blockUI.start("Loading Plans...");
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.hide_my_plans = "none";
		$scope.itinArr = null;
		$scope.itinRoArr = null;
		$scope.topPa = null;
		$scope.citiesArr = null;
		$scope.loggedInUser = "";
		$scope.lang = getActiveLang(true);
		var userSelectedPath = "";
		if ($scope.lang != "en") {
			userSelectedPath = "?lang=" + $scope.lang;
		}
		
		require(["app/core/login"], function(LoginMgr) {
			$scope.loginMgr = LoginMgr;
			if (LoginMgr.getInstance().isLogin()) {
				$scope.loginMgr = $scope.loginMgr.getInstance();
				if ($scope.loginMgr != null) {
	    			$scope.loginMgr.getLoggedInUserObject().then(function(data) {
	   				 $scope.loggedInUser = data != null && data.email != null ? data.email : null;
	          	 });
	    		}
			} else {
				console.log('Not logged in');
			}
		});
		
		var numbers = ["One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten"];
		
		var ajaxLoadTiming = new TrackTiming("PageCoreLoadNew", "ajax_data_time"); 
		var callA = $http.get(appRoot + '/api/my-plans?rnd='+new Date().getTime());
		var callB = $http.get(appRoot + '/api/user/getUserSelectedActivities' + userSelectedPath);
		var callC = GetCitiesService.async();
		$q.all(new Array(callA,callB,callC)).then(
   			 function(results) {
   				ajaxLoadTiming.send();
   				$scope.itinArr = $filter('filter')(results[0].data.lstItineraries,function(value, index){ return value.parentItineraryId == null });
   				$scope.itinRoArr = $filter('filter')(results[0].data.lstRoItineraries,function(value, index){ return value.parentItineraryId == null });
   				$scope.topPa = $filter('limitTo')(results[1].data.lstPaidActivity, 4);
   				$scope.citiesArr = results[2];
   				
   				
   				
   				for (var i=0;i<$scope.topPa.length;i++) {
					 updateCityLegal($scope.topPa[i])
				 }
   				
   				var bc = new Array();
  				bc.push({name: "My Plans"});
   				$rootScope.$broadcast("update_breadcrumb",bc, null, null);
   				$rootScope.$broadcast("update_main_header_width","myPlansContainer");
  				
   				$window.document.title = "My Plans | Visit A City";
   				
   				require(
    	    	    ["app/extensions/core/currency"],
    	    	    function(CurrencyMgr) {
    	    	    	var currencyMgr = new CurrencyMgr();
    	    	    	for (var i=0;i<$scope.topPa.length;i++) {
    	    	    		currencyMgr.fixCurrencyElement(document.getElementById("pa_" + $scope.topPa[i].id));
       					 	if ($scope.topPa[i].priceBeforeDiscount != null) {
       					 	currencyMgr.fixCurrencyElement(document.getElementById("pabefore_" + $scope.topPa[i].id));
       					 	}
       					 
       				 	}
    	    	    });
   				individualPageLoadTiming.send();
   				blockUI.reset();
   			 }, function(errors) {
   			 
   			 }
   	);
		
		function updateCityLegal(pa) {
    		for (var i=0;i<$scope.citiesArr.length;i++) {
    			if (pa.cityId == $scope.citiesArr[i].id) {
    				pa.cityLegalName = $scope.citiesArr[i].legalName;
    				pa.cityName = $scope.citiesArr[i].name;
    				break;
    			}
    		}
    	}
		
		
		$scope.doOpenLogin = function() {
			require(["app/dialogs/loginDialog"],
				    function(LoginDialog) {
						LoginDialog.getInstance().open();
				    }
			);
			
		}
		
		$( "body" ).on( "login_done", function( event) {
			$window.location.reload();
		});
		
		
		$scope.goToItin = function() {
			var numOfDays = $scope.itinDays.indexOf($scope.selectedDays) + 1;
			var url = "/"+ $routeParams.lang +"/" + $scope.cityObj.legalName + "/itinerary-by-day/" + numOfDays;
			//window.location = url;
			$location.path(url);
			if(!$scope.$$phase) $scope.$apply();
		}
		
		/*$scope.changeLocation = function(url) {
			//window.location = url;
			$location.path(url);
		}*/
		
		$scope.hideRoItinerary = function(itin) {
			fireEvent("my-plans",'hide-itinerary-ok','');
			UserItineraryDao.getInstance().hideSharedItr(itin.id);
			$( "#itin_" + itin.id).animate({
			    height: "0px",
			    display: "none",
			    marginBottom: "0px"
			  }, 800, function() {
				  var index = $scope.itinRoArr.indexOf(itin);
				  $scope.itinRoArr.splice(index, 1);
				  require(["app/itinerary/userItineraryDao"], function(UserItineraryDao) {
						UserItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
							$scope.userItinArr = userItineraries;
							MyPlansService.setMyPlans(userItineraries);
							$scope.$apply();
						});
					})
	  
			  });
		}
		
		$scope.deleteItinerary = function(itin) {
			fireEvent("my-plans",'delete-itinerary-ok','');
			UserItineraryDao.getInstance().deleteItinerary(itin.clientUniqueItrId);
			$( "#itin_" + itin.id).animate({
			    height: "0px",
			    display: "none",
			    marginBottom: "0px"
			  }, 800, function() {
				  var index = $scope.itinArr.indexOf(itin);
				  $scope.itinArr.splice(index, 1);
				  require(["app/itinerary/userItineraryDao"], function(UserItineraryDao) {
						UserItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
							$scope.userItinArr = userItineraries;
							MyPlansService.setMyPlans(userItineraries);
							$scope.$apply();
						});
					})
			  });
			      
		}
		
		$scope.shareEmail = function(itin) {
			
			var di = $uibModal.open({
					templateUrl: appWebRoot + '/itinerary/modals/share-guide.html',
			      controller: 'GuideModalInstanceController',
			      resolve: {
			          guide: function () {
			            return itin;
			          },
			          action: function () {
			        	  return ""
			          },
			          user: function() {
			        	  return $scope.loggedInUser 
			          },
			          page: function() {
			        	  return "my-plans" 
			          }
			          
			       }
			});
		}
		
		
		
		//Show/hide print/download dialog
	    $scope.toggleModal = function(action, guide){
	    	$scope.abNum = $scope.requireEmailConsent ? "100" : "1";
			fireEvent("Download","download_itinerary_" + $scope.abNum + "_open","my-plans page");
	    	var di = $uibModal.open({
	    		templateUrl: 'ngApp/website/itinerary/modals/download-guide.html',
			      controller: 'GuideModalInstanceController',
			      windowClass : 'itinerary-download-black',
			      resolve: {
			          guide: function () {
			            return guide;
			          },
			          action: function () {
			        	  return action
			          },
			          user: function() {
			        	  return $scope.loggedInUser 
			          },
			          page: function() {
			        	  return "my-plans page" 
			          }
			          
			       }
			});
	    };
		
	}]);
	
	angular.module('visitacity').controller('GuideModalInstanceController', ['$scope','$http','$uibModalInstance','$timeout','guide','action','user','page','$q','MyPlansService','emailConsentService', 
	                                                                         function ($scope, $http, $uibModalInstance,$timeout,guide, action, user, page, $q,MyPlansService,emailConsentService) {

		  $scope.guide = guide;
		  $scope.action = action;
		  $scope.emailAddress = user;
		  $scope.downloadPending = true;
		  var lang = getActiveLang(true);
		  emailConsentService.consentRequired().then(function(data) {
				$scope.requireEmailConsent = data;
				$scope.abNum = $scope.requireEmailConsent ? "100" : "1";
			});
		  
		  $scope.shareMessage = "\n" + $scope.guide.name + "\n\n" + appRoot + "/itineraries-user?id=" + $scope.guide.clientUniqueItrId + "&day=1";
		 
		  $scope.downloadItineraryCancel = function () {
		    $uibModalInstance.dismiss('cancel');
		    fireEvent(page,$scope.action+'-itinerary-cancel','');
		  };
		  
		  $scope.doSend = function(itrId, itrName, itrLegal,hasEmailConsent) {
			  $timeout(function() {
				  	$scope.submittedOk = true;
				  	$scope.submitted = false;
				}, 2000);
			  if ($scope.requireEmailConsent) {
				  var consent = hasEmailConsent ? "ok_with_consent" : "ok_no_consent";
				  //if consent is required fire OK and also ok_consent/ok_no_consent
				  fireEvent("Download","download_itinerary_" + $scope.abNum + "_" + consent,page);
			  }
			  fireEvent("Download","download_itinerary_" + $scope.abNum + "_ok",page);
			  $http.post(appRoot + '/itineraries/send', {
				  emailTo : $scope.emailAddress, 
				  itrId : itrId,
				  itrName: itrName,
				  isMeter: 1,
				  lang: lang != "en" ? lang : null,
				  itrLegalName: itrLegal,
				  itrLink: window.location.href
			  });
			  emailConsentService.updateUserConsent(hasEmailConsent,$scope.emailAddress);
			 /* require(["app/core/login"], function(LoginMgr) {
					LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
			  })*/
			  require(["app/core/login","app/itinerary/userItineraryDao"], function(LoginMgr,UserItineraryDao) {
				  	UserItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
				  		 MyPlansService.setMyPlans(userItineraries);
						 $scope.$apply();
				  	});
			  })
			  //$uibModalInstance.close();
		  }
		  
		  $scope.downloadGuide = function (hasEmailConsent) {
			  if (isEmail($scope.emailAddress)) {
				  $scope.downloadPending = false;
				  $scope.submitted = true;
				  if ($scope.guide.baseItineraryId != null) {
					  $scope.doSend($scope.guide.id,$scope.guide.name,$scope.guide.legalName,hasEmailConsent);
				  } else {
					  //First save itinerary
					  require(["app/itinerary/itineraryDataMgr"],
			                function(ItineraryDataMgr) {
								var itinMgr = new ItineraryDataMgr($scope.guide);
					
								$q.all(new Array(itinMgr.save())).then(function(res) {
									 require(["app/core/login","app/itinerary/userItineraryDao"], function(LoginMgr,UserItineraryDao) {
										  	UserItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
										  		$scope.doSend(userItineraries[0][3],userItineraries[0][1],userItineraries[0][1].replace(/ /g, '-'),hasEmailConsent);
										  	});
									  })
									
					        	},
					        	function(e) {
					        		
					        	});
			                }
					    );
				  	}
				 
			  } else {
				  $("#invalidEmail").css("visibility","visible");
				  fireEvent("Download",$scope.action+'_itinerary_invalid_email',page);
			  }
		  };
		  
		  $scope.shareEmail = function() {
	        	$scope.emailAddress = $("#emailAddressSend").val(); //Get the value using jquery to avoid angular autofil issue
				 if (isEmail($scope.emailAddress)) {
					  $scope.submitted = true;
					  var msg = $scope.shareMessage;
					  msg = msg.replace(/(\r\n|\n|\r)/g,"<br />");
					  $http.post(appRoot + '/ws/shareItinerary', {
						  subject : $scope.guide.name,
						  body: msg,
						  to: $scope.emailAddress,
						  fromName: ""}).
						  success(function(data, status, headers, config) {
							  require(["app/core/login"], function(LoginMgr) {
									LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
								})
								
								$timeout(function() {
								  	$scope.submittedOk = true;
								  	$scope.submitted = false;
								}, 2000);
							  }).
						  error(function(data, status, headers, config) {
							  console.log('sent fail');  
						    
						  });
				  
				  } else {
					  $("#invalidEmail").css("visibility","visible");
					  console.log("Please enter a valid email address");
				  }
	        }
		  
			 $scope.shareApp= function(subject) {
		        	$scope.emailAddress = $("#emailAddressSend").val(); //Get the value using jquery to avoid angular autofil issue
					 if (isEmail($scope.emailAddress)) {
						 $scope.downloadPending = false;
						 $("#invalidEmail").css("visibility","hidden");
						  $scope.submitted = true;
						  $http.post(appRoot + '/itineraries/send', {
							  downloadType: "app",
							  emailTo : $scope.emailAddress, 
							  itrId : $scope.itinerary.id,
							  itrName: $scope.itinerary.name,
							  isMeter: 1,
							  itrLegalName: $scope.itinerary.legalName,
							  itrLink: window.location.href}).
							  success(function(data, status, headers, config) {
								  require(["app/core/login"], function(LoginMgr) {
										LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
									});
									
									$timeout(function() {
									  	$scope.submittedOk = true;
									  	$scope.submitted = false;
									  	if (!$scope.loginMgr.isLogin()) {
											$scope.askPasswd = true;
											$scope.submittedOk = false;
										}
									}, 2000);
								  }).
							  error(function(data, status, headers, config) {
								  console.log('sent fail');  
							    
							  });

						  
						  //$$scope.modalInstance.close();
					  } else {
						  $("#invalidEmail").css("visibility","visible");
						  fireEvent("Download",'download_app_invalid_email',page);
					  }
		        }
		  
		  $scope.confirm = function(res) {
			  if (res) {
				  $uibModalInstance.close();
			  } else {
				  $uibModalInstance.dismiss();
			  }
		  }
		  
		  $scope.doDownloadComplete = function() {
			  $uibModalInstance.dismiss();
		  }
		  
		  $scope.modalInstance = $uibModalInstance;
		  $scope.modalInstance.result.then(function (result) {
				if ($scope.downloadPending) {
			    	var type = $scope.action.length > 0 ? "itinerary" : "app";
			    	fireEvent("Download","download_"+type+"_" + $scope.abNum + "_cancel",page);
			    }
			
		    }, function () {
		    	if ($scope.downloadPending) {
			    	var type = $scope.action.length > 0 ? "itinerary" : "app";
			    	fireEvent("Download","download_"+type+"_" + $scope.abNum + "_cancel",page);
			    }
		});
	}]);
	
});	

define('ngApp/website/directives/activities/paidActivitiesController',["ngApp/website/main/main",
        "app/itinerary/userItineraryDao",
        "app/extensions/core/paidActivityRedirect"],
    function(main,UserItineraryDao,PaidActivityRedirect) {
	var app = angular.module('visitacity');

	app.controller('paidActivitiesController',['$scope', '$http', '$q', '$filter', '$routeParams','GlobalDefs', 'GetCitiesService', 'MyPlansService','$window',  
	                                        function($scope, $http, $q, $filter, $routeParams, GlobalDefs, GetCitiesService, MyPlansService,$window) {
		$scope.paRedirect = null;

		
		/*require(["app/extensions/core/paidActivityRedirect"],
                function(PaidActivityRedirect) {
		 					$scope.paRedirect = PaidActivityRedirect;                                         
                         }
	    		);     */    
		
		$scope.redirectPa = function(paData) {
			PaidActivityRedirect.redirect(paData.vendor, paData.title, paData.link, null);
		}
		
	
		
		
	}]);
	
	
	
});	

define(
    'ngApp/website/login/loginController',["ngApp/website/main/main",
     "app/core/login"],
    function(main,LoginMgr) {
	var app = angular.module("visitacity");
	
	app.controller('loginController',['$scope', '$http', '$routeParams', '$location', '$q', 'GlobalDefs', '$timeout','emailConsentService',
	                                  function($scope,$http,$routeParams,$location,$q,GlobalDefs,$timeout,emailConsentService) {
		
		$scope.modalNumber = null;
		$scope.requireSingnupConcent = true;
		emailConsentService.consentRequired().then(function(data) {
			$scope.requireEmailConsent = data;
			$scope.modalNumber = emailConsentService._modalNumber;
		});
		$scope.requireEmail = false;
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.appRootSecure = $scope.appRoot.replace("http:","https:"); 
		$scope.email = "";
		$scope.password = "";
		$scope.firstName = "";
		$scope.lastName = "";
		$scope.loginRuinning = false;
		$scope.emailNotFound = false;
		$scope.emailNotFoundMsg = null;
		$scope.badEmailAddress = false;
		$scope.badPassword = false;
		$scope.badForgotEmailAddress = false;
		$scope.showForgotEmail = false;
		$scope.forgortPasswordSent = false;
		$scope.getttingPassword = false;
		$scope.forgotPasswordForm = false;
		$scope.alreadyRegistered = false;
		$scope.faceGoogleLogin = false;
		$scope.forgotPasswordEmail = "";
		$scope.passwordSentMsg = "";
		$scope.googleAccountId;
		$scope.fromUrl = $routeParams.from != null ? encodeURIComponent($routeParams.from) : "/";
		if ($scope.fromUrl.indexOf("login") > 0 || $scope.fromUrl.indexOf("signup") > 0) {
			//Don't redirect back to login/signup pages
			$scope.fromUrl = "/";
		}
		
		$timeout(function() {
			$("#terms").attr("href",$scope.appRoot + "/copyright");
			$("#privacy").attr("privacy",$scope.appRoot + "/copyright");
		},1500);
		
			
			
		$scope.loggedInUser = null;
		
		
		 $http.get(appRoot + '/ws/login/getcurrentuser').then(
	   			 function(results) {
	   				$scope.loggedInUser = results.data;
	   			 }
		);
		
		 function attachGoogleSignin(element) {
			    //console.log(element.id);
			    auth2.attachClickHandler(element, {},
			        function(googleUser) {
			    		LoginMgr.getInstance().googleLoginDone(googleUser)
			        }, function(error) {
			          //alert(JSON.stringify(error, undefined, 2));
			        	Raven.captureException("google login failed")
			        });
			  }
		 
		 
		 LoginMgr.getInstance().loadAccountIds().then(function() {
			 
			var googleAccountId = LoginMgr.getInstance().getGoogleAccountId();
			$scope.googleAccountId = googleAccountId;
			$q.all(LoginMgr.getInstance().prepareLoginPublishers()).then(
	    			 function(results) {
	    				 gapi.load('auth2', function(){
	    				      // Retrieve the singleton for the GoogleAuth library and set up the client.
	    				      auth2 = gapi.auth2.init({
	    				        client_id: $scope.googleAccountId,
	    				        cookiepolicy: 'single_host_origin'
	    				      });
	    				      attachGoogleSignin(document.getElementById('customGoogleBtn'));
	    				 });
	    				/* gapi.signin.render('customGoogleBtn', {
	    				      'callback': 'googleSigninCallback',
	    				      'clientid': $scope.googleAccountId,
	    				      'cookiepolicy': 'single_host_origin',
	    				      'requestvisibleactions': 'http://schemas.google.com/AddActivity',
	    				      'scope': 'https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/userinfo.email'
	    			   });*/
	    			 },
	    	          function(errors) {
	    				 console.log(errors)
    		          }
	    	);
			return ;			
		}).then(function() {
			//console.log('done');
			//_self._dataDeffered.resolve();
		}	
		, function (e) {
			//_self._dataDeffered.reject(e);
    	});
		
		
		$.when(LoginMgr.getInstance()._defferedFacebookLoad, LoginMgr.getInstance()._defferedGoogleLoad).done(function () {
			//defferedPublishersLoad.resolve();
			//_self._publishersPrepared = true;
			$timeout(function() {
				LoginMgr.getInstance().facebookLogin(true).then(function() {
					//run this onload to prevent popup blocker on fb login
				});
			},1000);
		});   	
		
		var LOGIN_ERROR_USER_EMAIL_EXISTS = 10;
    	var LOGIN_ERROR_USER_NOT_FOUND = 11;

    	$scope.emailBlurred = function (isValid, isForget) {
    		if (isForget) {
    			$scope.badForgotEmailAddress = !isValid;
    		} else {
    			$scope.badEmailAddress = !isValid;
    		}
    	};
    	
    	$scope.sendPassword = function() {
    		if (!$scope.forgotPasswordForm.$valid || !$scope.forgotPasswordForm.$dirty) {
    			fireEvent("login", "forgot-password bad email");
    			$scope.badForgotEmailAddress = true;
    			return;
    		}
    		$scope.getttingPassword = true;
    		$http.post(appRoot + "/ws/login/forgotpassword", {email: $scope.forgotPasswordEmail}).
			  success(function(data, status, headers, config) {
				  $scope.getttingPassword = false;
				  $scope.forgortPasswordSent = true;
				  if (data.errorId > 0) {
						if (data.errorId== LOGIN_ERROR_USER_NOT_FOUND) {
							$scope.passwordSentMsg = "We could not find a password for " + $scope.forgotPasswordEmail + ".";
							$scope.passwordSentMsg += " Click Join below to register.";
							fireEvent("login", "forgot-password user not found" );
						}
				  } else {
					  $scope.passwordSentMsg = "Your password was sent to " + $scope.forgotPasswordEmail;
					  fireEvent("login", "forgot-password ok");
				  }
			  }).error(function(data, status, headers, config) {
				  $scope.getttingPassword = false;
				  fireEvent("Error", "forgot-password-exception", null, "");
			  });
    		
    	}
    	
		$scope.doLogin = function() {
			$scope.emailNotFound = false;
			$scope.emailNotFoundMsg = null;
			if (!$scope.loginForm.$valid) {
				if (!$scope.loginForm.email.$valid) {
					$scope.loginForm.email.$dirty = true;
				}
				if (!$scope.loginForm.password.$valid) {
					$scope.loginForm.password.$dirty = true;
				}
				fireEvent("login", "signin invalid email");
				return;
			}
			$scope.loginRuinning = true;
			LoginMgr.getInstance().login($scope.email, $scope.password).then(function(loginResult) {
				if (loginResult.errorId > 0) {
					if (loginResult.errorId == LOGIN_ERROR_USER_NOT_FOUND) {
						fireEvent("login", "signin invalid user");
						if (loginResult.errorMessage != null) {
							$scope.emailNotFoundMsg = loginResult.errorMessage;
						} else {
							$scope.emailNotFound = true;
						}
						
						$scope.loginRuinning = false;
						$scope.$apply();
					}
					else {
						fireEvent("Error", "login-signin-exception", null, loginResult.errorMessage);
						$scope.loginRuinning = false;
					}
				}
				else  {
					$scope.redirectBack("login ok");
					
				}				
			}
			, function(e) {
				$scope.loginRuinning = false;
				fireEvent("Error", "login-signin unknown error");
			});			
		}
		
		$scope.doSignup = function() {
			if (!$scope.loginForm.$valid) {
				if (!$scope.loginForm.email.$valid) {
					$scope.loginForm.email.$dirty = true;
				}
				if (!$scope.loginForm.password.$valid) {
					$scope.loginForm.password.$dirty = true;
				}
				fireEvent("login", "signup invalid email");
				return;
			}
			if (! $scope.password.match(/^([a-zA-Z0-9]{6,})$/)) {
				fireEvent("login", "signup invalid password");
				$scope.badPassword = true;
				return;
			}
			$scope.loginRuinning = true;
			$scope.badPassword = false;
			LoginMgr.getInstance().signup($scope.email, $scope.password, $scope.firstName, $scope.lastName).then(function(loginResult) {
				if (loginResult.errorId > 0) {
					if (loginResult.errorId == LOGIN_ERROR_USER_EMAIL_EXISTS) {
						fireEvent("login", "signup user email exists");
						$scope.alreadyRegistered = true;	
					}
					else {
						fireEvent("Error", "login-signup-exception", null, loginResult.errorMessage);
					}
					$scope.loginRuinning = false;
				} else  {
					if ($scope.requireEmailConsent) {
						$scope.unsubscribe(4);
						$scope.requireSingnupConcent = true;
						$scope.consentRedirect();
						return;
					}
					$scope.redirectBack("signup ok");
					
						
				}
				$scope.loginRuinning = false;
				$scope.$apply();
			}, function(e) {
				$scope.loginRuinning = false;
				fireEvent("Error", "login-signup unknown error");
			});	
		}
		
		$scope.doEditProfile = function() {
			$scope.saveOk = false;
			$scope.password = $("#password").val();
			if (!$scope.loginForm.$valid) {
				if (!$scope.loginForm.password.$valid) {
					$scope.loginForm.password.$dirty = true;
				}
				//fireEvent("login", "signup invalid email");
				return;
			}
			if (! $scope.password.match(/^([a-zA-Z0-9]{6,})$/)) {
				//fireEvent("login", "signup invalid password");
				$scope.badPassword = true;
				return;
			}
			$scope.loginRuinning = true;
			$scope.badPassword = false;
			LoginMgr.getInstance().editProfile($scope.loggedInUser.password,
												$scope.loggedInUser.firstName, 
												$scope.loggedInUser.lastName, 
												$scope.loggedInUser.age, 
												$scope.loggedInUser.gender).then(function(loginResult) {
				$scope.loginRuinning = false;
				$scope.saveOk = true;
							
				$scope.$apply();
			}, function(e) {
				$scope.loginRuinning = false;
				fireEvent("Error", "login-signup unknown error");
			});	
		}
		
		
		
		$scope.loginFacebook = function(src) {
			$scope.faceGoogleLogin = true;
			if ($scope.faceGoogleLogin) {
				LoginMgr.getInstance().facebookLogin().then(function() {
					if ($scope.requireEmailConsent && src == "signup") {
						$scope.unsubscribe(4);
						$scope.requireSingnupConcent = true;
						$scope.consentRedirect();
						return;
					}
					$scope.redirectBack(src + "-facebook ok");
				},
				function() {
					fireEvent("Error", "login facebook");
					$scope.faceGoogleLogin = false;
				})
			}
		}
		
		$scope.loginGoogle = function(src) {
			$scope.faceGoogleLogin = true;
			if ($scope.faceGoogleLogin) {
				LoginMgr.getInstance().getGoogleLoginDeffered().then(function() {
					if ($scope.requireEmailConsent && src == "signup") {
						$scope.unsubscribe(4);
						$scope.requireSingnupConcent = true;
						$scope.consentRedirect();
						return;
					}
											
					$scope.redirectBack(src + "-google ok");
				},
				function() {
					fireEvent("Error", "login google");
					$scope.faceGoogleLogin = false;
				})
			}
		}
		
		$scope.unsubscribe = function(level) {
			if (level ==0) {
				LoginMgr.getInstance().getLoggedInUserObject().then(function(data) {
					fireLocalEvent("Login", "consent", "yes", data.email, true, false);
				});
				
			}
			$http.post(appRoot + '/emailunsubscribeDo', {
				tuid: LoginMgr.getInstance().getLoggedInUserId(),
				level	: level
			}).success(function(data, status, headers, config) {
			}).error(function(data, status, headers, config) {
				throw "failed to unsubscribe " + data
			});
		}
		
		$scope.consentRedirect = function() {
			$timeout(function() {
				$location.path("/signup-consent").search({'from':decodeURIComponent($scope.fromUrl)});
			},2000);
		}
		
		$scope.redirectBack = function(msg) {
			fireEvent("login", msg);
			$timeout(function() {
				var url = $scope.appRoot + decodeURIComponent($scope.fromUrl);
				window.location = url;
			},500);
		}
		
		$scope.fireConsentEvent = function(consent) {
			fireEvent("Subscribe banner","signup_consent_" + consent);
		}
		
	}]);
});

define('ngApp/website/activities/activitiesController',[mainPath,
        "app/extensions/core/paidActivityRedirect",
        "app/extensions/core/currency"],
    function(main,PaidActivityRedirect,CurrencyMgr) {
	var app = angular.module('visitacity');
	
	app.directive('activitiesSort', function() {
		  return {
		        restrict: 'AEC',
		        templateUrl: appWebRoot + '/directives/activities/activities-sort.html'
		  }
	});
	
	
	app.controller('activitiesController',['$scope','$rootScope','$http','$q','$filter','$routeParams','$timeout','$location','$window','GlobalDefs','CityService',
	                                       '$rootScope','dataWearhouseService','activitiesService','GetCitiesService','CitySearch','$debounce','blockUI','anchorSmoothScroll',
	                                       'attractionsService','lastModService','$uibModal','itineraryRegionalService','paidActivityRedirectService','visitDebugSvc','exprService',
	                                       function($scope,$rootScope,$http, $q,$filter,$routeParams,$timeout,$location,$window,GlobalDefs,CityService,
	                                    		   $rootScope,dataWearhouseService,activitiesService,GetCitiesService,CitySearch,$debounce,blockUI,anchorSmoothScroll,
	                                    		   attractionsService,lastModService,$uibModal,itineraryRegionalService,paidActivityRedirectService,visitDebugSvc,exprService) {
		
		/*$scope.catLegal = null;
		if ($scope.catLegal != null) {
			$routeParams.categoty = $scope.catLegal; 
		}*/
		$scope.my_plans_color = "#FFFFFF"; //color for my plans
		var currencyMgr = new CurrencyMgr();
		if ($location.url().indexOf("/activities/") >=0 && $location.url().indexOf("#") > 0) {
			//Replace # with ? to support addWords urls
			//relevant for activities page only, not for itinerary
			var hashes = window.location.href.slice(window.location.href.indexOf('#') + 1).split('&');
            for(var i = 0; i < hashes.length; i++) {
               hash = hashes[i].split('=');
               if (hash.length == 2) {
                       var k = hash[0];
                       var v = decodeURI(hash[1]);
                       $routeParams[k] = v;
               }
            }
            $scope.isBack = false;
			var url = $location.url().replace("#","?");
			$location.url(url);
		} else {
			$scope.doCenter = true;
			$scope.isBack = true;
		}
		
		//$scope.scrollMindTabs = true;
		
		//$scope.activeTabName = "activities"
		//if ($scope.tabName) {
		//	$scope.activeTabName = $scope.tabName;
		//}
		$scope.citySearch = CitySearch;
		$scope.citiesArr = new Array();
		$scope.selectedCity;
		$scope.selectedCityCountrySearch;
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.hide_my_plans = "none";
		$scope.cityService = CityService;
		var cityLegal = $routeParams.city;
		$scope.cityObj = null;
		$scope.catArr = new Array();
		$scope.paArr = new Array();
		$scope.paArrSec = new Array();
		$scope.isPilot = false;
		$scope.paArrOrig = new Array();
		$scope.staffRecommended = new Array();
		$scope.selectedCategory = null;
		$scope.selectedParentCategory = null;
		$scope.selectedChildCategory = null;
		$scope.subCats = new Array();
		$scope.countryCities = new Array();
		$scope.topSearchVal = null;
		$scope.fromUrl = encodeURIComponent($location.url());
		$scope.lang = $routeParams.lang;
		
		$scope.showLangFilter = false;
		
		if ($routeParams.lang != null) {
			//don't create lang cookie from itinerary page
			createCookie("activeLang",$scope.lang,365);
		}
		
		$scope.longLang = false;
		//var langCookie = readCookie('activeLang');
		if ($scope.lang == "de" || $scope.lang == "fr" || $scope.lang == "es") {
			$scope.longLang = true;
		}
		$scope.firstFeature = null;
		$scope.featuresLimit = 13;
		$scope.popularLimit = 7;
		$scope.featuresArr = new Array();
		var filterFeaturesInitActive = false;
		if ($routeParams.features != null) {
			filterFeaturesInitActive = true;
		} 
		
		$scope.filtersActive = false;
		$scope.allActivitiesCat = null;
		$scope.featuresBack = true;
		//price slider event
		$scope.slider = {
			    options: {
			        stop: function (event, ui) {
			        	fireEvent("Activities", "price filter",$scope.filterPrice);
			        	if ($scope.displayPrice < $scope.maxPrice) {
			        		$scope.filterPrice = $scope.displayPrice;
			        		if ($scope.itineraryActivities) {
			        			$location.search('maxPrice', $scope.filterPrice).replace();
			        		} else {
			        			$location.search('maxPrice', $scope.filterPrice);
			        		}
			        		$scope.isBack = false;
			        	} else {
			        		$scope.filterPrice = null;
			        		if ($scope.itineraryActivities) {
			        			$location.search('maxPrice', null).replace();
			        		} else {
			        			$location.search('maxPrice', null);
			        		}
			        	}
			        	$scope.handleScroll().then(function(){
			        		//$timeout(function() {
								$scope.searchRunning = true;
						    	activityBlock.start();
			        		$('html, body').animate({
			    				scrollTop: $("#activityBlock").offset().top - 50
			    			}, 0);
		        			if ($scope.searchTxt != "") {
					    		$timeout(function() {
					    			$scope.doSearchTxt($scope.searchTxt,true,false);
								},400);
							} else {
								$timeout(function() {
									$scope.runCatFilter(true);
								},400);
								
							}
							//},200);
			        	});
						
			        }
			    }
		}
		
		$scope.reverse=true;
		$scope.orderField = "reviewersNum";
		if ($routeParams.activitiesSortBy != null && $routeParams.activitiesSortBy.length > 0) {
			$scope.orderField = $routeParams.activitiesSortBy;
			if ($scope.orderField == "priceFloat" || $scope.orderField == "title") {
				$scope.reverse=false;
			}
			if ($scope.orderField.split(",").length>0) {
				//handle sort by multiple fields
				var arr = $scope.orderField.split(",")
				$scope.orderField = new Array();
				for (var i=0;i<arr.length;i++) {
					$scope.orderField.push(arr[i]);
				}
			}
		}
		
		$scope.eventFromCat = "Activities";
		$scope.isRegionalItinerary = false;
		if ($location.url().indexOf("/itineraries") >=0) {
			$scope.itineraryActivities = true;
			$scope.eventFromCat = "Itinerary-2.0";
			if ($location.url().indexOf("/itineraries-user-r") >=0 || $location.url().indexOf("/itineraries-r") >=0) {
				$scope.isRegionalItinerary = true;
			}
		}
		
		$scope.catFiltersArr = new Array();
		$scope.searchTxt = "";
		$scope.searchTxtOld = "";
		
		$scope.searchRunning = Object.keys($location.search()).length == 0 && !$scope.itineraryActivities;
		$scope.loadMoreRunning = false;
		$scope.colClass = "";
		$scope.startLimit = 30;
		$scope.filterRes = new Array();
		$scope.moreActivities = new Array();
		$scope.maxPrice = null;
		$scope.minPrice = null;
		$scope.avgPrice = null;
		$scope.filterPrice = null;
		$scope.displayPrice = null;
		var filterPriceInitActive = false;
		var sendTxtSearchEvent = true;
		if ($routeParams.maxPrice != null) {
			try {
				$scope.filterPrice = parseInt($routeParams.maxPrice);
				filterPriceInitActive = true;
			} catch (e){
				//prevent illegal price
			}
		}
		
		$scope.langFilterOn = false;
		if ($routeParams.nativeLang != null) {
			if ($scope.lang == "en") {
				//reset this filter in English
				$location.search("nativeLang",null);
			} else {
				$scope.langFilterOn = $routeParams.nativeLang;
			}
			
		}
		
		$scope.currencySymbol = currencyMgr.getCurrencySymbol();
		$scope.minRating = $routeParams.minRating != null ? $routeParams.minRating : 0;
	
		$scope.noResults = false;
		$scope.catHover;
		$scope.doneLoading = false;
		var START_LIMIT_ADD = 15;
		var activityBlock = blockUI.instances.get('activityBlock');
		$scope.ieVersion = ieVersion;
		$scope.lang = $routeParams.lang;
		var enableActivitiesSort = false; 
		
		var w1 = $scope.$watch('cityService.getCurCity()', function(newVal, oldVal) {
			if ((newVal != null || $routeParams.city != null)&& $scope.paArr.length == 0) {
				if ($routeParams.city != null) {
					cityLegal = $routeParams.city;
				} else if (newVal != null) {
					cityLegal = newVal.legalName;
				}
				if ($routeParams.categoty == null) {
					$routeParams.categoty = "all-activities";
				}
				prepareLastMod();
				w1();
			}	
    	});
		
		
		function prepareLastMod() {
			lastModService.setLastMod(cityLegal).then(
		   			 function(results) {
		   				$scope.loadData(false);
		   			 }, function(errors) {
		   			 
		   			 }
		   	);
		}
		
		$scope.changeCountryCity = function(legalName) {
			$scope.searchRunning = true;
			$( ".block-ui-message").each(function() {
				$(this).css("visibility","");
			});
			//blockUI.start("Loading...");
			if (legalName == null) {
    			var arr = $scope.citySearch.runFilterCities($scope.selectedCity,$scope.countryCities);
				if (arr == null) {
					legalName = $scope.countryCities[0].legalName
				} else if (arr.length > 0) {
					legalName = arr[0].legalName;
				}
    		}
			cityLegal = legalName;
			$scope.loadData(true);
		}
		
		
		$scope.loadData = function(doReset) { 
			var ajaxLoadTiming = new TrackTiming("PageCoreLoadNew", "ajax_data_time"); 
			var sbnSecInit = $routeParams.sbn_sec != null && $routeParams.sbn_sec.length > 0 ? true : false;
			var callB = activitiesService.init(cityLegal,doReset,sbnSecInit);
			var callA = GetCitiesService.async();
			var callC = attractionsService.init(cityLegal,true);
			//var exprCall = exprService.getExprPromise();
			$q.all(new Array(callA,callB,callC)).then(
		   			 function(results) {
		   				ajaxLoadTiming.send();
		   				/*if ($location.url().indexOf("/activities/") >=0) {
		   				 *EXPERIMENT COLSED ON 3/3/2019
		   					if (!isTablet()) {
		   						var inExperiment = exprService.isInExperiment("activities-stuck-bar",25);
		   						if (inExperiment) {
		   							angular.element($window).on("scroll", handleStuckScroll);
		   							exprService.fireExperimentEvent("activities-stuck-bar","stuck");
		   						} else {
		   							exprService.fireExperimentEvent("activities-stuck-bar","no-stuck");
		   						}
		   						
		   					}
		   					
		   				}*/
		   				
		   				//enableActivitiesSort = visitDebugSvc.getValue(globExprVars["activities-sort-2"] == "sort",true);
		   				//exprService.fireExperimentEvent("activities-sort",globExprVars["activities-sort-2"]);
		   				$scope.paArr = activitiesService.allActivities;
		   				
		   				$scope.showLangFilter = ($filter('filter')($scope.paArr, {isInLang: true}, true)).length > 0;
		   				if (activitiesService.lstPaidActivitySec != null) {
		   					$scope.paArrSec = activitiesService.lstPaidActivitySec;
		   					$scope.isPilot = true;
		   				}
		   				if (activitiesService.mostCommonKeyword != null) {
		   					$scope.firstFeature = activitiesService.mostCommonKeyword.toLowerCase();
		   					$scope.firstFeature = $scope.firstFeature.length > 8 ? $scope.firstFeature + ", tour, etc." :  $scope.firstFeature + ", tour, small group, etc.";
		   					
		   				}
		   				$scope.attractionsArr = attractionsService.allAttractionsData.lstSites;
		   				$scope.catArr = activitiesService.cityPaidActivityCategories;
		   				$scope.cityObj = $filter('filter')(results[0], {legalName: cityLegal},true)[0];
		   				$scope.citiesArr = results[0];
		   				if ($scope.cityObj == null) {
		   					//needed for cities created by the automation before cities for home is saved
		   					$scope.cityObj = new Object();
		   					$scope.cityObj.name = $routeParams.city; 
		   					$scope.cityObj.legalName = $routeParams.city;
		   				}
		   				if ($scope.cityObj.cityType == "country" && $scope.countryCities.length == 0) {
		   					//handle country - list city names
		   					$scope.countryCities =  $filter('filter')($scope.citiesArr, function(value, index){ if (value.status == 'production' && value.country.id == $scope.cityObj.country.id && value.id != $scope.cityObj.id) { return true;}});
		   					if ($scope.itineraryActivities) {
		   						var w3 = $scope.$watch(function(){
		   							return itineraryRegionalService.itinerary;
		   						}, function(newVal, oldVal){
	   								var baseNumOfUserPlans = 999999999;
	   								//Fix the sort by adding a numbers so the items in the itinerary will appear first
	   								for (var i=0;i<newVal.itinerarySites.length;i++) {
	   									var curCity = newVal.itinerarySites[i];
	   									if (curCity.city) {
	   										var cur = $filter('filter')($scope.countryCities, {id : curCity.city.id}, true);
	   										if (cur.length > 0) {
	   											cur[0].numOfUserPlans = cur[0].numOfUserPlans + baseNumOfUserPlans;
	   											baseNumOfUserPlans -= 1;
	   										}
	   									}
	   								}
	   								$scope.countryCities = $filter('orderBy')($scope.countryCities, "numOfUserPlans",true); //sort
	   								$scope.countryCities.unshift($scope.cityObj);
	   								if ($routeParams.activitiesSearchByName == null) {
	   									//only use the first city in country if not coming from ad. otherwise stay in the country
	   									$scope.changeCountryCity($scope.countryCities[1].legalName);
	   									return;
	   								}
		   					    });
		   					} else {
		   						$scope.countryCities = $filter('orderBy')($scope.countryCities, "numOfUserPlans",true); //sort
		   						$scope.countryCities.unshift($scope.cityObj);
		   						if ($routeParams.activitiesSearchByName == null) {
		   							$scope.changeCountryCity($scope.countryCities[1].legalName)
		   							return;
		   						}
		   						
		   					}
		   					
		   				} else if ($scope.countryCities.length > 0) {
		   					//handle selected city in country
		   					var country = $filter('filter')($scope.countryCities, {isSelected: true}, true);
		   					if (country.length > 0) {
		   						country[0].isSelected = false;
		   					}
		   					$scope.cityObj.isSelected = true;
		   				}
		   				//Rename top and all to add city name
		   				var cat = $filter('filter')($scope.catArr, {legalName: 'all-activities'}, true)[0];
		   				cat.name2 = $filter('translateFilter')("All **city** Activities","**city**",$scope.cityObj.name);
		   				if ($scope.cityObj.destinationOverrideId != null && $scope.cityObj.region != null) {
		   					cat.name2 = $filter('translateFilter')("All **city** & **region** Activities","**city**",$scope.cityObj.name,"**region**",$scope.cityObj.region);
		   				}
		   				$scope.allActivitiesCat = cat;
		   				
		   				
		   				cat = $filter('filter')($scope.catArr, {legalName: 'top-activities'}, true)[0];
		   				cat.name2 = $filter('translateFilter')("Top **city** Activities","**city**",$scope.cityObj.name);
		   				if ($scope.cityObj.destinationOverrideId != null && $scope.cityObj.region != null) {
		   					cat.name2 = $filter('translateFilter')("Top **city** & **region** Activities","**city**",$scope.cityObj.name,"**region**",$scope.cityObj.region);
		   				}
		   				
		   				
		   				$scope.parCats = $filter('filter')($scope.catArr,  function(value, index){ return value.vendorSubCatId==null});
		   				//Check if we have staff recommended
		   				$scope.staffRecommended =  $filter('filter')($scope.paArr,function(value, index){ return value.recommendation != null && value.recommendation.length > 0});
		   				
		   				if ($scope.staffRecommended.length) {
		   					$scope.recommendedCatObj = angular.copy($scope.parCats[0]);
		   					$scope.recommendedCatObj.name = "Staff Recommended";
		   					$scope.recommendedCatObj.legalName = "staff-recommended";
		   					$scope.recommendedCatObj.id = -1;
		   					$scope.recommendedCatObj.externalImageUrl = getStaffRecommendedImage($scope.staffRecommended,$scope.parCats,10);
	   						//Add to all categories
		   					var limit = $scope.parCats > 10 ? 10 : $scope.parCats.length;
		   					//$scope.catArr.splice(limit,0,$scope.recommendedCatObj);
		   				}
						
		   				$scope.fixResolutions();
		   				
		   				//Fix resolution on windows resize
		   				$(window).on("resize.doResize", function (){
		   			        $scope.$apply(function(){
		   			        	$scope.fixResolutions();
		   			        });
		   			    });
	
		   			    $scope.$on("$destroy",function (){
		   			         $(window).off("resize.doResize"); //remove the handler added earlier
		   			         //angular.element($window).off("scroll", handleStuckScroll);
		   			         if (w3 != null) {
		   			        	w3();
		   			         }
		   			         
		   			    });
   				
		   				//Fix sort - convert price to float and add average rating 0 when null
		   				angular.forEach($scope.paArr, function (pa) {
		   					pa.descriptionNoHtmlFull =  pa.descriptionNoHtml;
		   					pa.descriptionNoHtml = $filter('cut')(pa.descriptionNoHtml,true,180);
		   					pa.currencyPrice = currencyMgr.getAmount(pa.price,"USD",0)
		   					pa.priceFloat = parseFloat(pa.price);
		   				    pa.averageRating = pa.averageRating != null ? pa.averageRating : 0;
		   				    pa.relatedPaidActivityList = $filter('unique')(pa.relatedPaidActivityList,"relatedActivityId");
		   				 	
		   				    
		   				  });
		   				
		   				angular.forEach($scope.paArrSec, function (pa) {
		   					pa.descriptionNoHtmlFull =  pa.descriptionNoHtml;
		   					pa.descriptionNoHtml = $filter('cut')(pa.descriptionNoHtml,true,180);
		   					pa.currencyPrice = currencyMgr.getAmount(pa.price,"USD",0)
		   				    pa.priceFloat = parseFloat(pa.price);
		   				    pa.averageRating = pa.averageRating != null ? pa.averageRating : 0;
		   				});
		   				
		   				//Save original paArr when filtering
		   				$scope.paArrOrig  = JSON.parse(JSON.stringify($scope.paArr));
		   				$scope.paArrSecOrig  = JSON.parse(JSON.stringify($scope.paArrSec));
		   				
		   				prepareAttractionCats();

		   				if(!$scope.selectedCategory && globPaPageHint.cat != null) {
		   					//In case no category was defined or category does not exist - check also global hint object
		   					$scope.selectedCategory = $filter('filter')($scope.catArr, {legalName: globPaPageHint.cat}, true)[0];
		   				}
		   				
		   				if ($routeParams.activitiesCategoryId != null && globPaPageHint.cat == null) {
		   					//Get category from route param id
		   					$scope.selectedCategory = $filter('filter')($scope.catArr, {id: parseInt($routeParams.activitiesCategoryId)}, true)[0];
		   				}
		   				
		   				if(!$scope.selectedCategory && globPaPageHint.cat == null) {
		   					//In case no category was defined or category does not exist
		   					$scope.selectedCategory = $filter('filter')($scope.catArr, {legalName: $routeParams.categoty}, true)[0];
		   				}
		   				
		   				if ($scope.selectedCategory == null) {
		   					//default to all activities if no category is found.
	   						$scope.selectedCategory = $filter('filter')($scope.catArr, {legalName: "all-activities"}, true)[0];
	   					}
		   				
		   				if ($routeParams.activitiesSearchByName != null && $routeParams.activitiesSearchByName.length > 0) {	   					
		   					sendTxtSearchEvent = false;
		   					$scope.searchTxt = $routeParams.activitiesSearchByName;
		   				}
		   				
		   				if ($scope.featuresArr.length == 0) {
							 $scope.updateFeaturesArr();
						}
		   				$scope.updatePriceFilter();
		   				
		   				$scope.selectedParentCategory = $scope.selectedCategory;
		   				$scope.runTxtSearch(true,true);
		   				
		   				var cityUrl = $scope.appRoot + "/"+ $routeParams.lang +"/" + $scope.cityObj.legalName;
		   				if ($scope.cityObj.status != "production") {
		   					cityUrl = null;
		   				}
		   				
		   				$scope.placeHolder = $scope.cityObj.name+ ", " + $scope.cityObj.country.name;
		   				if ($location.url().indexOf("/activities/") >=0) {
		   					//var bc = new Array();
		   					//$rootScope.$broadcast("update_breadcrumb",bc, $scope.cityObj);
		   					$window.document.title = $scope.cityObj.name + " Activities - " + $scope.paArrOrig.length + " Suggested Activities | Visit A City";
		   					to1 = $timeout(function() {
		   		    			$("#cityHeaderContainer").fadeIn("slow");
		   		   			}, 500);
		   				}
		   				
		   				if ($scope.tmpArgs != null) {
		   					var cat = $filter('filter')($scope.catArr, {legalName: $scope.tmpArgs}, true)[0];
		   					$scope.selectParentCat(cat);
		   				}
		   				$scope.getSubCategories();
		   				$scope.doneLoading = true;
		   				individualPageLoadTiming.send();
		   				//disable block ui message on this page
		   				$( ".block-ui-message").each(function() {
		   					$(this).css("visibility","hidden");
		   				});
		   				// we need to reset globPaPageHint so when navigating back to the page from within the system it will not take effect
		   				$timeout(function() {
		   					globPaPageHint = {};
		   				}, 3000);
		   				
		   				//blockUI.reset();
		   			 }, function(errors) {
		   			 
		   			 }
		   	);
		}
		
		$scope.scrolledVer = false;
		function handleStuckScroll() {
			var scrollTop = $(window).scrollTop();
			if (!$scope.scrolledVer && scrollTop > 350 ) {
				$scope.scrolledVer = true;
				$("#activitiesStuckBar").animate({
	    			height: "55px"
	    		},500)
        		
        	} else if ($scope.scrolledVer && scrollTop < 310) {
        		$scope.scrolledVer = false;
        		$("#activitiesStuckBar").animate({
        			height: "0px"
        		},500)
        	}
			
			
		}
		
		
		
		$scope.searchCities = new Array();
		$scope.searchPa = new Array();
		$scope.activityPageSearch = function(val) {
			$scope.topSearchVal = val;
			$scope.searchCities = $scope.citySearch.runFilterCities(val,$scope.citiesArr,'Activities',true,'Change city')
			$scope.searchPa = new Array();
			var citiesArray = new Array();
			var obj = new Object();
			obj.type = "title";
			obj.name = "Popular Destinations";
			citiesArray.push(obj);
			obj = new Object();
			obj.type = "title";
			obj.name = "Tours & Activities in " + $scope.cityObj.name;
			$scope.searchPa.push(obj);
			for (var i=0;i<$scope.searchCities.length;i++) {
				if ($scope.searchCities[0].noResults) {
					break;
				}
				var title = $scope.searchCities[i].name;
				var re = new RegExp(val,"gi");
				title = title.replace(re, "<b style='text-transform: capitalize;'>"+val+"</b>");
				//$scope.allAttractions[i].searchDisplay = "<b>"+$scope.allAttractions[i].title + "</b>";
				$scope.searchCities[i].searchDisplay = title + ", " + $scope.searchCities[i].country.name;
				if ($scope.searchCities[i].imageOpt != null) {
					$scope.searchCities[i].imgUrl = $scope.imagesCdn+"/uploaded-new/"+$scope.searchCities[i].imageOpt.id;
				}
				$scope.searchCities[i].rating = null;
				citiesArray.push($scope.searchCities[i]);
			}
			for (var i=0;i<$scope.paArrOrig.length;i++) {
				if ($scope.paArrOrig[i].title != null && $scope.paArrOrig[i].title.toLowerCase().indexOf(val.toLowerCase()) >= 0) {
					var title = $scope.paArrOrig[i].title;
					var re = new RegExp(val,"gi");
					title = title.replace(re, "<b style='text-transform: capitalize;'>"+val+"</b>");
					//$scope.allAttractions[i].searchDisplay = "<b>"+$scope.allAttractions[i].title + "</b>";
					$scope.paArrOrig[i].searchDisplay = $filter('cut')(title,true,100);
					$scope.paArrOrig[i].priceDisplay = $scope.currencySymbol + currencyMgr.getAmount($scope.paArrOrig[i].price,"USD",0);
					$scope.paArrOrig[i].imgUrl = $filter('vacinternal')($scope.paArrOrig[i].externalImageUrl);
					$scope.paArrOrig[i].rating = $scope.paArrOrig[i].averageRating;
					$scope.searchPa.push($scope.paArrOrig[i]);
				}
			}
			//Limit each to 10 but only if both have data, otherwise limit to 10
			var limitTo = 6;
			if ($scope.searchPa.length > 1 && citiesArray.length > 1) {
				limitTo = 6;
			}
			
			var addMore = false;
			if ($scope.searchPa.length > limitTo) {
				addMore = true;
				
			}
			$scope.searchPa = $filter('limitTo')($scope.searchPa, limitTo);
			citiesArray = $filter('limitTo')(citiesArray, limitTo);
			
			if (addMore) {
				//Show the more results link
				var obj = new Object();
				obj.type = "more";
				obj.moreval = val;
				obj.name = "See more \"" + val + "\" results >>";
				$scope.searchPa.push(obj);
			}
			
			
			var res = new Array();
			
			if (citiesArray.length > 1) {
				res = res.concat(citiesArray);
			}
			if ($scope.searchPa.length > 1) {
				res = res.concat($scope.searchPa);
			}
			
			if (citiesArray.length == 1 && $scope.searchPa.length == 1) {
				var obj = new Object();
				obj.type = "more";
				obj.moreval = val;
				obj.name = "No Results Found";
				res.push(obj);
			}
			
			return $filter('limitTo')(res, 20);
		}
		
		$scope.headerRunSearch = function(item) {
			if (item == null) {
				var arr = $scope.citySearch.runFilterCities($scope.selectedCity,$scope.citiesArr,'Activities',true,'Change city')
    			if (arr.length > 1) {
    				if ($scope.itineraryActivities) {
    					$scope.changeCountryCity(arr[0].legalName)
    				} else {
    					$scope.changeCity(arr[0]);
    				}
    				
    			}
			} else if (item.type == "title") {
				//support for when clicking enter on the title line (popular destinations/Tours & Activities in...)
				if (item.name == "Popular Destinations") {
					$scope.changeCountryCity($scope.searchCities[0].legalName);
				} else {
					paidActivityRedirectService.doRedirect($scope.searchPa[1].vendor, $scope.searchPa[1].title, $scope.searchPa[1].link, "activities top search",$scope.searchPa[1].vendorProductId, $scope.searchPa[1].id,$scope.searchPa[1].cityId,false,$scope.searchPa[1].price);
				}
				
			} else if ((item.type != null && item.type == "more") || (item.title != null)) {
				//handle paid activity search
				$scope.selectedCity = null;
				$scope.runTxtSearch(true,true,$scope.topSearchVal);
				$('html, body').animate({
					scrollTop: $("#activityBlock").offset().top - 50
				}, 500);
				if (item.title != null) {
					paidActivityRedirectService.doRedirect(item.vendor, item.title, item.link, "activities top search",item.vendorProductId, item.id,item.cityId,false,item.price);
				}
			} else {
				if ($scope.itineraryActivities) {
					$scope.changeCountryCity(item.legalName)
				} else {
					$scope.changeCity(item);
				}
			}
			 $timeout(function() {
				 $("#selectedCityCountrySearch").val("");
				 $("#selectedCityCountrySearch").blur();
			},400);
			
		}
		
		$scope.headerSearchEnter = function() {
			//handle when click on enter - select first city or first PA
			if ($scope.searchCities.length > 0 && !$scope.searchCities[0].noResults) { //first item is no search results so we need at least 2
				//$scope.changeCity($scope.searchCities[0]);
				if ($scope.itineraryActivities) {
					$scope.changeCountryCity($scope.searchCities[0].legalName)
				} else {
					$scope.changeCity($scope.searchCities[0]);
				}
			} else if ($scope.searchPa.length > 0) {
				//$scope.headerRunSearch($scope.searchPa[1]); //first item is the title, get the second which is the first pa
				$scope.runTxtSearch(true,true,$scope.selectedCity);
				$('html, body').animate({
					scrollTop: $("#activityBlock").offset().top - 50
				}, 500);
				fireEvent("Activities", "activities search from header", $scope.selectedCity);
				$scope.selectedCity = null;
			}
		}
		
		function prepareAttractionCats() {
			for (var i=0;i<$scope.attractionsArr.length;i++) {
				var curAttr = $scope.attractionsArr[i];
				var attrTitle = $filter('latinize')(curAttr.shortTitle.toLowerCase());
				var subtitle = curAttr.subTitle != null && curAttr.subTitle.length > 0 ? $filter('latinize')(curAttr.subTitle.toLowerCase()) : null;
				var reviewNum = 0;
				var countTitle = 0;
				var countSubTitle = 0;
				var attrRes = $filter('filter')($scope.paArrOrig, function(value, index){
					var title = $filter('latinize')(value.title.toLowerCase());
					if (title == null || title.length == 0) {
						//handle empty title
						return false;
					}
					var res = false;
					if (title.indexOf(attrTitle) >= 0) {
						res = true;
						if (value.reviewersNum != null && value.reviewersNum > 0) {
							countTitle += value.reviewersNum; 
						}
					} else if (subtitle != null && title.indexOf(subtitle) >= 0) {
						res = true;
						if (value.reviewersNum != null && value.reviewersNum > 0) {
							countSubTitle += value.reviewersNum; 
						}
					}
					if (res && value.reviewersNum != null && value.reviewersNum > 0) {
						reviewNum += value.reviewersNum;
					}
					return res;

				});
				if (countSubTitle > countTitle) {
					curAttr.shortTitle = curAttr.subTitle;
				}
				curAttr.attrLen = reviewNum;
			}
			$scope.attractionsArr = $filter('filter')($scope.attractionsArr, function(value, index){ return value.attrLen >= 10});
			$scope.attractionsArr = $filter('orderBy')($scope.attractionsArr, "attrLen",true);
			if ($scope.attractionsArr.length < $scope.popularLimit) {
				$scope.popularLimit = $scope.attractionsArr.length; 
			}
		}	
				
		/**
		 * Handle Back
		 */
		$scope.$on('$routeUpdate', function(e){
			if ($scope.isBack) {
				//set price
				if ($routeParams.maxPrice == null) {
					$scope.filterPrice = $scope.maxPrice;
					$scope.displayPrice = $scope.maxPrice;
				 } else {
					 $scope.filterPrice = parseInt($routeParams.maxPrice);
					 $scope.displayPrice = $scope.filterPrice;
				 }
				 //set rating
				 $scope.minRating = $routeParams.minRating != null ? $routeParams.minRating : 0;
				 
				 //features
				 createFeaturesArr(ftrArr);
				 
				//categories
				if ($routeParams.activitiesCategoryId != null) {
	   				//Get category from route param id
	   				$scope.selectedCategory = $filter('filter')($scope.catArr, {id: parseInt($routeParams.activitiesCategoryId)}, true)[0];
	   			} else {
	   				$scope.selectedCategory = $scope.allActivitiesCat;
	   			}
				$scope.selectedParentCategory = $scope.selectedCategory;
				$scope.getSubCategories();
				
				//txt search
				if ($routeParams.activitiesSearchByName != null && $routeParams.activitiesSearchByName.length > 0) {
					$scope.searchTxt = $routeParams.activitiesSearchByName;
				} else {
					$scope.searchTxt = "";
				}
								 
				$scope.searchRunning = true;
				activityBlock.start();
				
				 $timeout(function() {
					 $scope.runTxtSearch(true,true);
				},400);
			 }
		});
		
		$scope.getRelatedPa = function(pa,paArrOrig,paArrSec) {
    		var paArr = new Array();
    		pa.showRelated = !pa.showRelated;
    		fireEvent($scope.eventFromCat, "compare", pa.showRelated);
    		if (pa.showRelated) {
    			angular.forEach(pa.relatedPaidActivityList, function (relatedPa) {
    				if (!relatedPa.pa) {
    					var foundPa = $filter('filter')(paArrOrig, {id: relatedPa.relatedActivityId}, true);
    			    	if (foundPa.length > 0) {
    			    		relatedPa.pa = foundPa[0];
    			    	} else {
    			    		//secondary
    			    		foundPa = $filter('filter')(paArrSec, {id: relatedPa.relatedActivityId}, true);
    			    		if (foundPa.length > 0) {
    			    			relatedPa.pa = foundPa[0];
    				    	}
    			    	}
    				}
    			});
    			return pa.relatedPaidActivityList;
    		}
		}
		
		//Create and update the price filter based on the displayed activities
		$scope.updatePriceFilter = function() {
			var paArr = $filter('orderBy')($scope.paArrOrig, "currencyPrice");
			if (paArr.length > 0) {
				$scope.minPrice = paArr[0].currencyPrice + 1;
				//var m = median($scope.filterRes);
				//$scope.maxPrice = paArr[paArr.length-1].currencyPrice + 1;
				$scope.maxPrice = median($scope.paArrOrig) * 2;
				
				$scope.displayPrice = $routeParams.maxPrice != null ? $routeParams.maxPrice : $scope.maxPrice;
				if ($scope.filterPrice > $scope.maxPrice ) {
					$scope.filterPrice = $scope.maxPrice;
				}
				var total = 0;
				/*angular.forEach($scope.filterRes, function (pa) {
					pa.showRelated = false;
					if (pa.currencyPrice) {
						total += pa.currencyPrice;
					}
				});*/

			}
		}
		
		var ftrArr = new Array();
		$scope.updateFeaturesArr = function() {
			angular.forEach($scope.paArrOrig, function (pa) {
				if (pa.features != null && pa.features.length > 0) {
					ftrArr = ftrArr.concat(pa.features.split(","));
				}
			});
			
			createFeaturesArr(ftrArr);
			
			$scope.featuresArr.sort(function(a,b) {
				if (a.isChecked || b.checked) {
					return -1; //add the checked items firs
				} else {
					return b.val - a.val;
				}
			    
			});
		}
		
		function median(values) {
			var tmpArr = new Array().concat(values);
			tmpArr.sort( function(a,b) {return a.currencyPrice - b.currencyPrice;} ); 
			var half = Math.floor(tmpArr.length/2); 
			if (tmpArr.length % 2) { 
				return tmpArr[half].currencyPrice; 
			} else { 
				return (tmpArr[half-1].currencyPrice + tmpArr[half].currencyPrice) / 2.0; 
			} 
		}
		
		$scope.handleFeaturesLimit = function(eventName,limit,type) {
			fireEvent($scope.eventFromCat, eventName);
			if (type == "categories") {
				$scope.featuresLimit = limit;
			} else if (type == "popular") {
				$scope.popularLimit = limit;
			}
			
		}
		
		$scope.clearTxtSearch = function() {
			$scope.isBack = false;
			if ($scope.itineraryActivities) {
				$location.search('activitiesSearchByName', null).replace();
	    		$location.search('activitiesSearchByNameEng', null).replace();
			} else {
				$location.search('activitiesSearchByName', null);
	    		$location.search('activitiesSearchByNameEng', null);
			}
			
    		$scope.searchTxt = "";
		}
		
		$scope.clearFilters = function(from,dontFilter,notFeatures,notCategory) {
			$("#noResultsDiv").css("display","none");
			$("#moreActivitiesDiv").css("display","none");
			$scope.filtersActive = false;
			$scope.filterPrice = null;
			$scope.minRating = 0;
			$scope.displayPrice = $scope.maxPrice;
			$scope.langFilterOn = false;
			if (from != null) {
				fireEvent($scope.eventFromCat, "clear filters", from);
			}
			if (notFeatures == null) {
				if ($scope.itineraryActivities) {
					$location.search("features",null).replace();
				} else {
					$location.search("features",null);
				}
				
				for (var i=0;i<$scope.featuresArr.length;i++) {
					$scope.featuresArr[i].isChecked = false;
				}
			}
			if ($scope.itineraryActivities) {
				$location.search("minRating",null).replace();
				$location.search("maxPrice",null).replace();
				$location.search("activitiesCategoryId",null).replace();
			} else {
				$location.search("minRating",null);
				$location.search("maxPrice",null);
				$location.search("nativeLang",null);
				$location.search("activitiesCategoryId",null);
				$location.search('actid', null);
    			$location.search('sbi', null);
				$location.search('sbn_sup_desc', null);
				$location.search('sbn_sup_desc_sec', null);
				$location.search('rt', null);
				
			}
			
			
			
			//fix the selected category and sub categories
			if (notCategory == null) {
				$scope.selectedCategory = $scope.allActivitiesCat;
				$scope.selectedParentCategory = $scope.selectedCategory;
				$scope.getSubCategories();
			}
			
			if (!dontFilter) {
				$scope.isBack = false;
				$scope.searchRunning = true;
		    	activityBlock.start();
				$scope.searchTxt = "";
				$scope.handleScroll().then(function(){
					$timeout(function() {
						$scope.runCatFilter();
					},400);
				});
				
			}
		}
		
		$scope.changeCity = function(city) {
			if (city == null) {
				var arr = $scope.citySearch.runFilterCities($("#selectedCityCountrySearch").val(),$scope.citiesArr,'Activities',true,'Change city')
    			if (arr.length > 0 && !arr[0].noResults) {
    				city = arr[0];
    			}
    		}
			fireEventDef($scope.eventFromCat, "Change city ok", city.name);
			$location.search({});
			$location.path("/" + $scope.lang + "/" + city.legalName + "/activities/all-activities");
			try {
				if(!$scope.$$phase) $scope.$apply();
			} catch (err) {}
			
		}
		
		$scope.$on('activitiesChangeCity', function (event, cityLegal) {
			var city = $filter('filter')($scope.citiesArr, {legalName: cityLegal}, true)[0];
			$scope.changeCity(city);
		});

		/**
		 * When comming from itinerary tab, change the category based on the selected tab
		 * @param catLegal
		 */
		$scope.changeActivityCat = function(catLegal) {
			if ($scope.catArr.length > 0) {
				var cat = $filter('filter')($scope.catArr, {legalName: catLegal}, true)[0];
				$scope.selectParentCat(cat);
			} else {
				$scope.tmpArgs = catLegal;
			}
		}
		
		
		/*$scope.tmpArgs = null;
		$scope.$on('processAttractions', function (event, args) {
			if ($location.hash() && $location.hash().indexOf("tab") >=0) {
				$scope.activeTab  = $location.hash().split("=")[1];
				if (args == null) {
					args = "all-activities";
				}
				if ($scope.catArr.length > 0) {
					var cat = $filter('filter')($scope.catArr, {legalName: args}, true)[0];
					$scope.selectParentCat(cat);
				} else {
					$scope.tmpArgs = args;
				}
				
				
			}
		});*/
		
		$scope.fixResolutions = function() {
			$scope.parCats = $filter('filter')($scope.catArr,  function(value, index){ return value.vendorSubCatId==null});
			var limit = 10;
			var screenWidth = $window.innerWidth;
			if (screenWidth <= 768) {
				limit = 6;
				$scope.colClass = "col-md-3 col-sm-4";
			} else if (screenWidth < 1200) {
				limit = 8;
				$scope.colClass = "col-sm-4 col-md-3";
			} else {
				if ($scope.parCats.length >= 10) {
					$scope.colClass = "col-lg-5ths col-md-5ths";
	   			} else if ($scope.parCats.length >= 8) {
	   				$scope.colClass = "col-md-3";
	   				limit = 8;
		   		} else if ($scope.parCats.length >= 6) {
	   				$scope.colClass = "col-md-4";
	   				limit = 6;
		   		} else if ($scope.parCats.length >= 5) {
	   				$scope.colClass = "col-lg-5ths";
	   				limit = 5;
		   		} else if ($scope.parCats.length >= 4) {
	   				$scope.colClass = "col-md-3";
	   				limit = 4;
	   			} else if ($scope.parCats.length >= 3) {
	   				$scope.colClass = "col-md-4";
	   				limit = 3;
	   			} else {
	   				$scope.colClass = "col-md-6";
	   				limit = 2;
	   			}
			}
				
			if ($scope.staffRecommended.length) {
				//Add staff recommended at the end
				$scope.parCats.splice(limit-1,1,$scope.recommendedCatObj);
			}
			
			$scope.catFiltersArr = $filter('limitTo')($scope.parCats, limit);	
			
			//fix the height of the filters col
			/*$timeout(function() {
				console.log("H: " + $("#filtersCol").height());
				$("#paContainer").css("min-height",$("#filtersCol").height()+100);
			},400);*/
			
		}
		
		$scope.moreSubcats = false;
		$scope.handleMoreSubCats = function() {
			$scope.moreSubcats = !$scope.moreSubcats;
			
			if ($scope.moreSubcats) {
				$("#subCatsWrapper").css('max-height','200px');
			} else {
				$("#subCatsWrapper").css('max-height','24px');
			}
			
		}
		
		/**
		 * Get sub categories for a parent
		 */
		$scope.getSubCategories = function() {
			$scope.subCats = $filter('filter')($scope.catArr,  function(value, index){
				if ($scope.selectedParentCategory == null) {
					return false;
				} else if (value.vendorCatId == null && value.vendorSubCatId == null) {
					return false;
				} else {
					return value.vendorCatId==$scope.selectedParentCategory.vendorCatId
				}
			});
		}

		//Create the features arr
		function createFeaturesArr(arr) {
			var durationsArr = [$filter('translateFilter')("1 - 2 Hours"),$filter('translateFilter')("2 - 4 Hours"),$filter('translateFilter')("Full Day"),$filter('translateFilter')("Multi Day")]
			var featuresRoute = decodeURI($routeParams.features);
			$scope.featuresArr = new Array();
			for (var i=0;i<arr.length;i++) {
				var curF = arr[i];
				var durationPos = durationsArr.indexOf(curF);
				var isDuratrion = durationPos >=0 ? true : false
				
				var isChecked = false;
				if (featuresRoute!= null && featuresRoute.indexOf(","+curF+",") >=0) {
					isChecked = true;
				}
				var arrSearch = $filter('filter')($scope.featuresArr, {name: curF}, true);
				if (arrSearch.length > 0) {
					arrSearch[0].val += 1;
					arrSearch[0].isChecked = isChecked;
				} else {
					var obj = new Object();
					obj.name = curF;
					obj.val = 1;
					obj.isChecked = isChecked;
					obj.isDuratrion = isDuratrion;
					obj.durationPosition = durationPos;
					$scope.featuresArr.push(obj);
					
				}
			}
		}
		
		function createDurationFeaturesArr(durationsArr) {
			
			for (var i=0;i<durationsArr.length;i++){
				var obj = new Object();
				obj.name = durationsArr[i];
				obj.isChecked = false;
				obj.isDuratrion = true;
				obj.val = 1000-i;
				$scope.featuresArr.push(obj);
			}
			
		}
		
		function getStaffRecommendedImage(staffRecommended,parCats,limit) {
			var img = "";
			if (parCats.length < limit) {
				limit = parCats.length;
			}
			for (var i=0;i<staffRecommended.length;i++) {
				if (staffRecommended[i].price != null) {
					var curImage = staffRecommended[i].externalImageUrl;
					var duplicate = false;
					for (var j=0;j<limit;j++) {
						if (parCats[j].externalImageUrl == curImage) {
							duplicate = true;
							break;
						}
					}
					if (!duplicate) {
						img = curImage;
						break;
					}
				}
			}
			if (img == "") {
				img = staffRecommended[0].externalImageUrl;
			}
			return img;
		}

		/**
		 * Filter by parent category
		 */
		$scope.selectParentCat = function(cat,from) {
			$scope.clearFilters(null,true,null,true);
			$scope.clearTxtSearch();
			$scope.isBack = false;
			$scope.noResults = false;
			$scope.startLimit = 30;
			maxScroll = 0;
			lastFixPos = 0
			prevDiff = 0;
			$scope.searchTxt = "";
			if ($scope.itineraryActivities) {
				$location.search('activitiesSearchByName', null).replace();
				$location.search('activitiesSearchByNameEng', null).replace();
			} else {
				$location.search('activitiesSearchByName', null);
				$location.search('activitiesSearchByNameEng', null);
			}
			
			
			if (cat == null) {
				cat = $scope.selectedParentCategory != null ? $scope.selectedParentCategory  : $scope.allActivitiesCat ;
			} else {
				$scope.selectedParentCategory = cat;
				var doFireEvent = $scope.eventFromCat == "Activities" || from != null;
				if (from == null) {
					from = "Change category image";
				}
				if (doFireEvent) {
					//dont fire when itinerary is changing tabs
					fireEvent($scope.eventFromCat, from, cat.name);
				}
			}
			if ($location.url().indexOf("itinerar") >=0) {
				/*if (from == null) {
					from = "Activities Change category dropdown";
				}
				fireEvent($scope.eventFromCat, from , cat.name);*/
				if (!$("#divTopTabIndicator").isOnScreen()) {
					$("html, body").animate({
						scrollTop:  $("#divTopTabIndicator").offset().top -10
					}, 1000);
				}
			} /*else {
				if (from == null) {
					from = "Change category dropdown";
				}
				fireEvent($scope.eventFromCat, from, cat.name);
			}*/
			if (cat) {
				$scope.getSubCategories();
				//$location.replace();
				$scope.selectedCategory = cat;
				if ($scope.selectedCategory.id != $scope.allActivitiesCat.id) {
					if ($scope.itineraryActivities) {
						$location.search('activitiesCategoryId', cat.id).replace();
					} else {
						$location.search('activitiesCategoryId', cat.id);
					}
					
				} else {
					if ($scope.itineraryActivities) {
						$location.search('activitiesCategoryId', null).replace();
					} else {
						$location.search('activitiesCategoryId', null);
					}
				}
				$scope.processList();
			}
		}
		
		/**
		 * Filter by child category
		 */
		$scope.selectChildCat = function(cat) {
			$scope.isBack = false;
			$scope.noResults = false;
			$scope.clearFilters(null,true,null,true);
			$scope.clearTxtSearch();
			$scope.selectedCategory = cat;
			
			if ($scope.itineraryActivities) {
				$location.search('activitiesCategoryId', cat.id).replace();
			} else {
				$location.search('activitiesCategoryId', cat.id);
			}
			if ($location.url().indexOf("itinerar") >=0) {
				fireEvent("Itinerary-2.0", "Activities Change sub category", cat.name);
			} else {
				fireEvent("Activities", "Change sub category", cat.name);
			}
			
			$scope.processList();
			
		}
		
		/**
		 * Process sort
		 */
		$scope.changeOrder = function(field,isReverse) {
			$scope.isBack = false;
			if ($location.url().indexOf("itinerar") >=0) {
				fireEvent("Itinerary-2.0", "Activities change sort", field);
			} else {
				fireEvent("Activities", "Change sort", field);
			}
			
			$scope.orderField = field;
			$scope.reverse=isReverse;
			
			if ($scope.itineraryActivities) {
				$location.search('activitiesSortBy', field).replace();
			} else {
				$location.search('activitiesSortBy', field);
			}

			if (field.split(",").length>0) {
				//handle sort by multiple fileds
				$scope.orderField = new Array();
				for (var i=0;i<field.split(",").length;i++) {
					$scope.orderField.push(field.split(",")[i]);
				}
			}
			$scope.searchRunning = true;
			activityBlock.start();
			if ($scope.searchTxt != null && $scope.searchTxt.length > 0) {
				$scope.doSearchTxt($scope.searchTxt,false,false);
			} else {
				$scope.filterRes = $filter('orderBy')($scope.filterRes, $scope.orderField,$scope.reverse);
				$timeout(function() {
    				$scope.isBack = true;
    			},500);
    			$scope.searchRunning = false;
    			activityBlock.reset();
			}
			
    		/*$timeout(function() {
    			if ($scope.orderField == "reviewersNum" && $scope.paArrSecOrig != null && $scope.paArrSecOrig.length > 0) {
    				//Remove GYG and then push again according to the correct order
    				$scope.filterRes = $filter('filter')($scope.filterRes, {vendor: 'Viator'}, true);
   					$scope.pushSecActivities();
    			} else {
    				$scope.filterRes = $filter('orderBy')($scope.filterRes, $scope.orderField,$scope.reverse);
    			}
    			$timeout(function() {
    				$scope.isBack = true;
    			},500);
    			$scope.searchRunning = false;
    			activityBlock.reset();
			},400);*/
    		
			
		}
		
	
		$scope.processList = function() {
			if ($scope.searchTxt != "") {
				//When loading with search text do the search
				$scope.searchRunning = true;
		    	activityBlock.start();
	    		$timeout(function() {
	    			$scope.doSearchTxt($scope.searchTxt,false,false);
				},400);
				return;
			} else {
				activityBlock.start("");
				$scope.searchRunning = true;
				$scope.handleScroll().then(function(){
					$timeout(function() {
						$scope.runCatFilter();
					},400);
				});
				
			}	
		}
		
		$scope.runCatFilter = function(skipUpdatePrice) {
			$("#noResultsDiv").css("display","none");
			$("#moreActivitiesDiv").css("display","none");
			
			$scope.moreActivities = new Array();
			$scope.noResults = false;
			if (!$scope.selectedCategory) {
				//ignore if selectedCategory is not available yet
				return;
			}
			if ($scope.selectedCategory.vendorSubCatId == null) {
				$scope.selectedParentCategory = $scope.selectedCategory;
			}
			$scope.filterRes = new Array();
			if ($scope.selectedCategory.id == -1) {
				//Staff recommended
				$scope.filterRes = $scope.staffRecommended;
			} else {
				angular.forEach($scope.paArrOrig, function (pa) {
					pa.showRelated = false;
					angular.forEach(pa.paidActivityCatergoryList, function (paCat) {
						if (paCat.id == $scope.selectedCategory.id) {
							$scope.filterRes.push(pa);
						}
					 });
				});
			}
			
			if (globPaPageHint.ra != null && globPaPageHint.ra.length > 0) {
				//console.log("sorting using globPaPageHint.ra ..");
				var arCopy = $scope.filterRes.clone();
				$scope.filterRes = $scope.filterRes.sort(function(pa1, pa2) {
					var arProm = globPaPageHint.ra.split(",");
					var prom1Idx = arProm.indexOf(pa1.vendorProductId);
					prom1Idx = prom1Idx > -1 ? prom1Idx : 10000;
					var prom2Idx = arProm.indexOf(pa2.vendorProductId);
					prom2Idx = prom2Idx > -1 ? prom2Idx : 10000;
					if (prom1Idx != 10000 || prom2Idx != 10000) {
						return prom1Idx - prom2Idx; 
					}
					
					return arCopy.indexOf(pa1) - arCopy.indexOf(pa2);
				});
			}
			
			//Filter out transfer for top and all (only if there are at least 10 activities in the city
			if (($scope.selectedCategory.legalName == "all-activities" || $scope.selectedCategory.legalName == "top-activities") &&  $scope.paArrOrig.length > 10) {
				$scope.filterRes = $filter('filter')($scope.filterRes,function(value, index){
					var tmpTitle = value.title;
					if (value.engTitle != null && value.engTitle.length > 0) {
						//exclude transfer in lang
						tmpTitle = value.engTitle;
					}
					return tmpTitle.toLowerCase().indexOf("transfer") < 0
				});
			}
			
			//sort
			$scope.filterRes = $filter('orderBy')($scope.filterRes, $scope.orderField,$scope.reverse);
			if ("reviewersNum" == $scope.orderField && enableActivitiesSort) {
				//fix sort for activity clicks
				$scope.filterRes = activitiesService.sortByPopularity($scope.filterRes);
			}
			if ($scope.selectedCategory.legalName == "all-activities") {
				$scope.filtersActive = false;
			} else {
				$scope.filtersActive = true;
			}
			
			/*if (filterPriceInitActive) {
				//if price filter param, update min/max price before filtering
				$scope.updatePriceFilter();
				filterPriceInitActive = false;
				skipUpdatePrice = true;
			}*/
			
			if (filterFeaturesInitActive) {
				//handle first load with features filter active
				filterFeaturesInitActive = false;
				$scope.updateFeaturesArr();
			}
			
			
			$scope.filterRes = $scope.ratingFilter($scope.filterRes);
			$scope.filterRes = $scope.featuresFilters($scope.filterRes);
			$scope.filterRes = $scope.priceFilter($scope.filterRes);
			$scope.filterRes = $scope.langFilter($scope.filterRes);
			
			if ($scope.selectedCategory.id != -1) {
				$scope.pushSecActivities();
			}
			
			/*if (!skipUpdatePrice) {
				 $scope.updatePriceFilter();
			}*/
			//$scope.paArr = $filter('limitTo')($scope.filterRes, $scope.startLimit);
			
			if ($scope.filterRes.length == 0) {
				$("#noResultsDiv").css("display","inline-block");
			}
			$scope.searchRunning = false;
			$("#mainSpinner").css("display","none");
			activityBlock.reset();
			
			$timeout(function() {
				$scope.isBack = true;
			},1000);
			
		}
		
		/**
		 * Push secondary activities to the list
		 */
		$scope.pushSecActivities = function(skipSort) {
			if ($scope.paArrSecOrig != null && $scope.paArrSecOrig.length > 0) {
				if (!skipSort && $scope.orderField == "reviewersNum") {
					$scope.filterRes = $filter('orderBy')($scope.filterRes, $scope.orderField,$scope.reverse);
				}
				var tmpArr = new Array();
				$scope.paArrSec = JSON.parse(JSON.stringify($scope.paArrSecOrig));
				var maxScoreArr = new Array();
				var counter = 0;
				for (var i=0;i<$scope.filterRes.length;i++) {
					counter++;
					if ($scope.filterRes[i].relatedPaidActivityList != null && $scope.filterRes[i].relatedPaidActivityList.length > 0) {
						for (var k=0;k<$scope.filterRes[i].relatedPaidActivityList.length;k++) {
							//Get the related gyg activity
							var findInGygArr = $filter('filter')($scope.paArrSec, {id: $scope.filterRes[i].relatedPaidActivityList[k].relatedActivityId}, true);
							//make sure the activity fits by price, rating and features
							findInGygArr = $scope.priceFilter(findInGygArr);
							findInGygArr = $scope.ratingFilter(findInGygArr);
							findInGygArr = $scope.featuresFilters(findInGygArr);
							if (findInGygArr.length > 0) {
								$scope.filterRes[i].relatedPaidActivityList[k].sourceActivity = $scope.filterRes[i].id;
								$scope.filterRes[i].relatedPaidActivityList[k].gygAct = findInGygArr[0];
								maxScoreArr.push($scope.filterRes[i].relatedPaidActivityList[k]);
								break;
							}
						}
						
						
					} 
					tmpArr.push($scope.filterRes[i]);
					
					if (counter > 2) {
						//try to push as the 4th activity
						if (maxScoreArr.length > 0) {
							maxScoreArr = $filter('orderBy')(maxScoreArr, "score",true);
							var gygActArr = new Array();
							for (var j=0;j<maxScoreArr.length;j++) {
								if (maxScoreArr[j].gygAct != null) {
									tmpArr.push(maxScoreArr[j].gygAct);
									//removed the used activities so they are not added twice
									$scope.removeActivityById($scope.paArrSec,maxScoreArr[j].gygAct.id);
									counter = 0;
									break;
								}
							}
							maxScoreArr = new Array();
						} 
					}
				}
				$scope.filterRes = tmpArr;
				if (!skipSort && $scope.orderField != "reviewersNum") {
					$scope.filterRes = $filter('orderBy')($scope.filterRes, $scope.orderField,$scope.reverse);
				}
			}
			
		}
		
		/*$scope.removeSecActivities = function() {
			for (var i=0;i<$scope.filterRes.length;i++) {
				if ($scope.filterRes[i].vendor != "Viator") {
					$scope.filterRes.splice(i,1);
				}
			}
		}*/
		
		$scope.removeActivityById = function(arr,id) {
			for (var i=0;i<arr.length;i++) {
				if (arr[i].id == id) {
					arr.splice(i,1);
					break;
				}
			}
			
		}
		
		$scope.langFilter = function(arr) {
			if ($scope.langFilterOn) {
				arr = $filter('filter')(arr, {isInLang: true}, true);
			}
			return arr;
		}
		
		$scope.runLangFilter = function() {
			$scope.langFilterOn = !$scope.langFilterOn;
			fireEvent($scope.eventFromCat, "lang filter",$scope.langFilterOn);
			if ($scope.langFilterOn) {
				$location.search('nativeLang', 'true').replace();
			} else {
				$location.search('nativeLang', null).replace();
			}
			$scope.searchRunning = true;
	    	activityBlock.start();
	    	$scope.handleScroll().then(function(){
	    		$timeout(function() {
					if ($scope.searchTxt != "") {
		    			$scope.doSearchTxt($scope.searchTxt,true,false);
					} else {
		    			$scope.runCatFilter();
					}
				},400);
	    	});
		}
		
		 
		/**
		 * set the selected rating and initiate the filter
		 */
		$scope.setRating = function(i) {
			fireEvent($scope.eventFromCat, "rating filter",i.toString());
			if (i == $scope.minRating) {
				$scope.minRating = 0;
			} else {
				$scope.minRating = i;
			}
			$scope.isBack = false;
			if ($scope.itineraryActivities) {
				$location.search('minRating', $scope.minRating).replace();
			} else {
				$location.search('minRating', $scope.minRating);
			}
			
			$scope.searchRunning = true;
	    	activityBlock.start();
	    	$scope.handleScroll().then(function(){
	    		$timeout(function() {
					if ($scope.searchTxt != "") {
		    			$scope.doSearchTxt($scope.searchTxt,true,false);
					} else {
		    			$scope.runCatFilter();
					}
				},400);
	    	});
			
		 };
		 

		 /**
		  * Filter by price if the filter is not set to the max amount
		  */
		 $scope.priceFilter = function(arr) {
			 if ($scope.filterPrice != null) {
				 filterPriceInitActive = true;
				 if ($scope.filterPrice != $scope.maxPrice) {
					 $scope.filtersActive = true;
				 }
				 if ($scope.filterPrice < $scope.maxPrice) {
					 arr = $filter('filter')(arr,function(value, index){
						 return value.currencyPrice < $scope.filterPrice;
				     });
				 }
				
			 } else {
				 filterPriceInitActive = false;
			 }
			 return arr;
		 }
		 
		 /**
		  * Filter by price if the filter is not set to the max amount
		  */
		 $scope.ratingFilter = function(arr) {
			 if ($scope.minRating > 0) {
				 $scope.filtersActive = true;
				 arr = $filter('filter')(arr,function(value, index){
					 return value.averageRating >= $scope.minRating;
			     });
			 }
			 return arr
			
		 }
		
		/* $scope.$on('runFeaturesFilters', function (event, feature) {
			 var featureObj = $filter('filter')($scope.featuresArr, {name: feature}, true)[0];
			 $scope.runFeaturesFilters(featureObj,true);
		 });*/
		
		 /**
		  * Mark a features as checked and run the filters
		  */
		$scope.runFeaturesFilters = function(feature,isRadio) {
			$scope.isBack = false;
			if (!feature.isDuratrion) {
				$scope.clearFilters(null,true,true);
				$scope.clearTxtSearch();
			}
			fireEvent($scope.eventFromCat, "duration filter",feature.name);
			feature.isChecked = !feature.isChecked;
			if (isRadio) {
				//handle as radio buttons, clear all other checked
				for (var i=0;i<$scope.featuresArr.length;i++) {
					if (feature.name != $scope.featuresArr[i].name) {
						$scope.featuresArr[i].isChecked = false;
					}
					
				}
			}

			/*if ($(window).scrollTop() > 500) {
				anchorSmoothScroll.scrollTo("activityBlock",null,-40);
			}*/
			$scope.searchRunning = true;
	    	activityBlock.start();
	    	$scope.handleScroll().then(function(){
	    		$timeout(function() {
					if ($scope.searchTxt != "") {
			    		$scope.doSearchTxt($scope.searchTxt,true,false);
					} else {
						$scope.runCatFilter();
				
					}
				},400);
	    	});
			
		};
		 
		/**
		 * Run the features filter and return the result
		 */
		$scope.featuresFilters = function(arr) {
			var ffArr = $filter('filter')($scope.featuresArr, {isChecked: true}, true);
			if (ffArr.length > 0) {
				$scope.filtersActive = true;
				$scope.featureNames = ","
				for (var i=0;i<ffArr.length;i++) {
					$scope.featureNames += ffArr[i].name + ",";
				}
				arr = $filter('filter')(arr,function(value, index){
					if (value.features == null) {
						return false;
					}
					var arr = value.features.split(",");
					var res = false;
					for (var i=0;i<arr.length;i++) {
						if ($scope.featureNames.indexOf(","+arr[i]+",") >= 0) {
							return true;
						}
						//match day tour along with full day
						if ($scope.featureNames.indexOf(",Full Day,") >= 0 && ",Day Tour,".indexOf(","+arr[i]+",") >= 0) {
							return true;
						}
					}
					return res;
			     });
				if ($scope.itineraryActivities) {
					$location.search('features', $scope.featureNames).replace();
				} else {
					$location.search('features', $scope.featureNames);
				}
			} else {
				if ($scope.itineraryActivities) {
					$location.search('features', null).replace(); //no features selected
				} else {
					$location.search('features', null);
				}
			}
			
			return arr
		 }


		 $scope.runTxtSearch = function(noClearFilters,noClearTxtFilters,txt,from) {
			 $("#noResultsDiv").css("display","none");
			 $("#moreActivitiesDiv").css("display","none");
			 //$scope.searchRunning = true;
			 if (txt != null) {
				 $scope.searchTxt = txt;
			 }
			 $scope.isBack = false;
			 if (!noClearFilters) {
				$scope.clearFilters(null,true);
			}
			if (clearSecondarySearch) {
				if ($scope.itineraryActivities) {
	    			$location.search('sbn_sec', null).replace();
	    			$location.search('actid', null).replace();
	    			$location.search('sbi', null).replace();
					$location.search('sbn_sup_desc', null).replace();
					$location.search('sbn_sup_desc_sec', null).replace();
					$location.search('rt', null).replace();
				} else {
					$location.search('sbn_sec', null);
	    			$location.search('actid', null);
	    			$location.search('sbi', null);
					$location.search('sbn_sup_desc', null);
					$location.search('sbn_sup_desc_sec', null);
					$location.search('rt', null);
				}
    		}
	    	maxScroll = 0;
			lastFixPos = 0;
			prevDiff = 0;
			if ($scope.searchTxt.length > 0) {
	    		if ($location.url().indexOf("itinerar") >=0) {
	    			if (!$("#divTopTabIndicator").isOnScreen()) {
						$("html, body").animate({
							scrollTop:  $("#divTopTabIndicator").offset().top -10
						}, 1000);
					}
	    			if (sendTxtSearchEvent) {
	    				fireEvent("Itinerary-2.0", "Activities search by name", $scope.searchTxt);
	    			}
				} else {
					if (sendTxtSearchEvent) {
						var label = "Search by name";
						if (from != null) {
							label += from;
						}
						fireEvent("Activities", label, $scope.searchTxt);
					}
				}
				sendTxtSearchEvent = true;
		    	activityBlock.start();
		    	$scope.handleScroll().then(function(){
		    		$timeout(function() {
		    			$scope.doSearchTxt($scope.searchTxt,noClearTxtFilters,true);
					},400);
		    	});
	    		
	    		
	    	} else {
		    	activityBlock.start();
		    	if ($scope.itineraryActivities) {
		    		$location.search('activitiesSearchByName', null).replace();
		    		$location.search('activitiesSearchByNameEng', null).replace();
		    	} else {
		    		$location.search('activitiesSearchByName', null);
		    		$location.search('activitiesSearchByNameEng', null);
		    	}
	    		$timeout(function() {
	    			$scope.runCatFilter();
				},400);
	    		
	    	}
			sendTxtSearchEvent = true;
		 }
	    
	    /**
	     * Search for all keywords in the title or description
	     */
	    function isFoundInTitle(searchField,txtSearchArr,doReverse,allowFuzzy) {
			var isFound = true;
			if (doReverse) {
				isFound = false;
			}
			if (searchField == null || searchField.length == 0) {
				//handle empty title/description
				return !isFound; 
			}
			try {
				for (var i=0;i<txtSearchArr.length;i++) {
	    			var searchWord = txtSearchArr[i];
	    			
	    			if ($routeParams.sbn_sec != null && (searchWord == 'ticket' || searchWord == 'tickets')) {
	    				//exclude ticket/s when comming from ads
	    				continue;
	    			}
	    			if (searchWord.length > 0) {
	    				searchWord = searchWord.toLowerCase();
	    				if (searchWord.indexOf("hop") >=0) {
	    					//for hop on tours, match without fuzzy so hop matches hop-on as well
	    					allowFuzzy = false;
	    				}
	    				if (doReverse) {
	    					 if (searchField.indexOf(searchWord) >= 0) {
	    						 isFound = true; 
	    					 }
	    				} else if (!isFoundMatch(searchField,searchWord,allowFuzzy)) {
	    					isFound = false;
	    					break;
	    				}
	    			}
	    			
	    		}
			} catch (err) {
				Raven.captureException(err)
				console.error(err);
				//if there is an error return as not found
				isFound = doReverse ? true : false;
			}
			
			return isFound;
	    }
	    
	    /**
	     * Use the fuzzy search if allowed or indexOf to find if the word is matched within the title/description
	     */
	    function isFoundMatch(searchField,searchWord,allowFuzzy) {
	    	var fuzzy = FuzzySet();
	    	var fuzzyRes = null;
			var isFound = false;
			try {
				if (allowFuzzy) {
					var searchFieldArr = searchField.split(" ");
	    			for (var j=0;j<searchFieldArr.length;j++) {
	    				fuzzy.add(searchFieldArr[j]);
	    			}
		   	    	fuzzyRes = fuzzy.get(searchWord);
		   	    	if (fuzzyRes != null) {
						//fuzzy
				    	for (var j=0;j<fuzzyRes.length;j++) {
			 	   	    	var curRes =  fuzzyRes[j];
			 	   	    	if (curRes.length == 2 && curRes[0] > 0.7) {
			 	   	    		isFound = true;
			 	   	    		break;
			 	   	    	}
				    	}
					}
				} else {
					isFound = searchField.indexOf(searchWord) >= 0;
				}
			} catch (err) {
				Raven.captureException(err);
				console.error(err);
			}
	    	
	    	return isFound;
	    }
	    
	    var clearSecondarySearch = false;
	    $scope.doSearchTxt = function(txtSearch,noCleanFilters,doChangeSort) {
	    	if (doChangeSort) {
	    		$scope.orderField = "reviewersNum";
		    	$scope.reverse = true;
		    	$location.search('activitiesSortBy', null).replace();
	    	}
	    	$scope.selectedParentCategory = $scope.allActivitiesCat;
	    	txtSearch = $filter('latinize')(txtSearch);
	    	$scope.noResults = false;
	    	$scope.startLimit = 30;
	    	$scope.filterRes = new Array();
	    	
	    	$timeout(function() {
	    		txtSearch = txtSearch.replace("+"," ");
	    		var txtSearchArr = txtSearch.split(" ");
	    		
	    		var secTxtSearchArr;
	    		if ($routeParams.sbn_sec) {
	    			var sbnSec = $routeParams.sbn_sec;
	    			sbnSec = sbnSec.replace("+"," ");
	    			secTxtSearchArr = sbnSec.split(" ");
	    		}
	    		var foundInDescArr = new Array();
	    		var foundInSecTitleArr = new Array();
	    		var foundInSecDescArr = new Array();
	    		var foundInVendorIdArr = new Array();
	    		var foundInItemArr = new Array();
	    		var foundInCommaArr = new Array();
	    		
	    		var foundComma = false;
    			var origTxtSearch = null;
    			if ($routeParams.rt != null) {
    				//handle comma strings from remarketing
    				origTxtSearch = txtSearchArr;
    				var replaceArr = new Array();
    				for (var i=0;i<txtSearchArr.length;i++) {
    					if (txtSearchArr[i].indexOf(",") > 0) {
    						foundComma = true;
    						replaceArr = replaceArr.concat(txtSearchArr[i].split(","));
    					} else {
    						replaceArr.push(txtSearchArr[i]);
    					}
    				}
    				txtSearchArr = replaceArr;
    			}
	    		
	    		$scope.filterRes = $filter('filter')($scope.paArrOrig, function(value, index){
	    			var title = $filter('latinize')(value.title.toLowerCase());
	    			var desc = $filter('latinize')(value.descriptionNoHtmlFull.toLowerCase());
	    			
	    			//match by title
	    			
	    			var foundInTitle = isFoundInTitle(title,txtSearchArr, false, true);
	    			
	    			//handle english search
	    			if (!foundInTitle && $routeParams.activitiesSearchByNameEng != null && $routeParams.activitiesSearchByNameEng.length > 0 && value.engTitle != null) {
	    				var engTitle = value.engTitle.toLowerCase();
	    				var engTxt = $routeParams.activitiesSearchByNameEng;
	    				engTxt = engTxt.replace("+"," ");
	    				var engTxtSearch = engTxt.split(" ");
	    				foundInTitle = isFoundInTitle(engTitle,engTxtSearch);
	    			}
	    			
	    			//If not suppresed, match by description
	    			var foundInDesc = false;
	    			if ($routeParams.sbn_sup_desc != 1) {
	    				foundInDesc = isFoundInTitle(desc,txtSearchArr);
	    			}
	    			
	    			var foundInSecTitle = false;
	    			var foundInSecDesc = false;
	    			
	    			if ($routeParams.sbn_sec == "ticket") {
	    				//If sbn sec is ticket add all top activities
	    				for (var i=0;i<value.paidActivityCatergoryList.length;i++) {
	    					if (value.paidActivityCatergoryList[i].legalName == "top-activities") {
	    						foundInSecTitle = true;
	    						break;
	    					}
	    				}
	    			} else if ($routeParams.sbn_sec) {
	    				//if secondary search is applied, match by secondary title
	    				if (value.engTitle != null) {
	    					//in case of forign lang title, use english for secondary search
	    					title = value.engTitle.toLowerCase();
	    				}
		    			foundInSecTitle = isFoundInTitle(title,secTxtSearchArr);
		    			
		    			//If not suppresed, match by secondary description
		    			if ($routeParams.sbn_sup_desc_sec != 1) {
		    				foundInSecDesc = isFoundInTitle(desc,secTxtSearchArr);
		    			}
	    			}
	    			
	    			//search by vendor productId
	    			var foundInAct = false;
	    			if (globPaPageHint.ra != null) {
	    				var arActIds = globPaPageHint.ra.split(",");
	    				foundInAct = arActIds.indexOf(value.vendorProductId) > -1;
	    			}
	    			else {
		    			if ($routeParams.actid != null && value.vendorProductId == $routeParams.actid) {
		    				foundInAct = true;
		    			}	    				
	    			}
	    			
	    			//search in item
	    			var foundInItem = false;
	    			if ($routeParams.sbi) {
	    				//if secondary search is applied, match by secondary title
	    				if (value.engTitle != null) {
	    					//in case of forign lang title, use english for secondary search
	    					title = value.engTitle.toLowerCase();
	    				}
	    				var sbiTxt = $routeParams.sbi;
	    				sbiTxt = sbiTxt.replace("+"," ");
	    				var itemTxtSearchArr = sbiTxt.split(" ");
	    				foundInItem = isFoundInTitle(title,itemTxtSearchArr);
	    			}
	    			
	    			var foundInComma = false;
	    			if ($routeParams.rt != null && foundComma && !foundInTitle) {
	    				for (var i=0;i<origTxtSearch.length;i++) {
	    					if (origTxtSearch[i].indexOf(",") > 0) {
	    						var arr = origTxtSearch[i].split(",")
	    						foundInComma = isFoundInTitle(title,arr,true);
	    					} 
	    				}
	    				
	    			}
	    			
	    			//now add to array according the order of appearance first primary than secondary
	    			if ($routeParams.rt != null && foundInAct) {
	    				//if remarketing and actid, add it first
	    				foundInVendorIdArr.push(value);
	    			} else if (foundInTitle) {
	    				return true;
	    			} else if (foundInComma) {
	    				foundInCommaArr.push(value);
	    			} else if (foundInAct) {
	    				foundInVendorIdArr.push(value);
	    			} else if (foundInItem) {
	    				foundInItemArr.push(value);
	    			} else if (foundInDesc) {
	    				foundInDescArr.push(value);
	    			} else if (foundInSecTitle) {
	    				foundInSecTitleArr.push(value);
	    			} else if (foundInSecDesc) {
	    				foundInSecDescArr.push(value);
	    			}
				});
	    		
	    		
	    		
	    		//handle sort
		    	 //sort title and destination fields according to sort fields
		    	$scope.filterRes = $filter('orderBy')($scope.filterRes, $scope.orderField,$scope.reverse);
		    	foundInDescArr = $filter('orderBy')(foundInDescArr, $scope.orderField,$scope.reverse);
    			if ("reviewersNum" == $scope.orderField && enableActivitiesSort) {
		    		$scope.filterRes = activitiesService.sortByPopularity($scope.filterRes);
		    		foundInDescArr = activitiesService.sortByPopularity(foundInDescArr);
				}
    			
	    		
	    		
	    		if ($routeParams.rt != null) {
    				//if remarketing and actid, add it first
	    			$scope.filterRes = foundInVendorIdArr.concat($scope.filterRes);
	    			$scope.filterRes = $scope.filterRes.concat(foundInCommaArr);
	    		}
	    		
	    		//add the found in description and secondary search arrays to the end
	    		if ($scope.filterRes.length == 0) {
	    			//if there are no results add the search but vendor id
	    			$scope.filterRes = $scope.filterRes.concat(foundInVendorIdArr);
	    			$scope.filterRes = $scope.filterRes.concat(foundInItemArr);
	    		}
	    		
	    		
	    		if ($routeParams.sbn_sec == null) {
	    			$scope.filterRes = $scope.filterRes.concat(foundInDescArr);
	    		}
	    		$scope.filterRes = $scope.filterRes.concat(foundInSecTitleArr);
	    		if ($routeParams.sbn_sec == null) {
	    			$scope.filterRes = $scope.filterRes.concat(foundInSecDescArr);
	    		}
	    		
	    		if ($routeParams.sbn_sec && $scope.filterRes.length == 0) {
	    			//if no match and sbn_sec exists show all results
	    			$scope.filterRes = $scope.paArrOrig;
	    			fireEvent($scope.eventFromCat, "secondary search no results", "search:" + txtSearch + ",secondary:" +$routeParams.sbn_sec);
	    		}
	    		
	    		if ($scope.searchTxt.length > 0 && txtSearch.length > 0) {
	    			if ($scope.itineraryActivities) {
	    				$location.search('activitiesSearchByName', txtSearch).replace();
	    			} else {
	    				$location.search('activitiesSearchByName', txtSearch);
	    			}

		    	}
				if ($scope.filterRes.length == 0 && $scope.paArrOrig.length > 0) {
					//show no results after activities have loaded and no results found
		    		$scope.noResults = true;
		    	}
				
				clearSecondarySearch = true;
				/*if ($scope.maxPrice == null) {
					$scope.updatePriceFilter();
				}*/
				$scope.filterRes = $scope.priceFilter($scope.filterRes);
				$scope.filterRes = $scope.ratingFilter($scope.filterRes);
				$scope.filterRes = $scope.featuresFilters($scope.filterRes);
				$scope.filterRes = $scope.langFilter($scope.filterRes);
				
				
				/*if ($scope.filterPrice >= $scope.maxPrice ) {
					$scope.updatePriceFilter();
				}*/
				
				$scope.pushSecActivities(true);
				if ($routeParams.sbn_sec) {
					$scope.filterRes = $scope.filterRes.concat($scope.getMoreActivities());
				} else {
					$timeout(function() {
						$scope.moreActivities = $scope.getMoreActivities();
						$("#moreActivitiesDiv").css("display","block");
					},500);
					
				}
				

				if (!noCleanFilters) {
					$scope.clearFilters(null,true);
				}
				$scope.filtersActive = true;
				$scope.searchRunning = false;
				if ($scope.filterRes.length == 0) {
					$("#noResultsDiv").css("display","inline-block");
				}
				
				activityBlock.reset();
				$timeout(function() {
					$scope.isBack = true;
				},1000);
			},0);
	    }
	    
	    $scope.getMoreActivities = function() {
	    	arr =  $filter('filter')($scope.paArrOrig,function(value, index){
	    		var inFilterResArr = $filter('filter')($scope.filterRes, {id: value.id}, true);
	    		var tmpTitle = value.title;
	    		if (value.engTitle != null && value.engTitle.length > 0) {
	    			//exclude transfer in lang
	    			tmpTitle = value.engTitle;
				}
	    		return inFilterResArr == 0 && tmpTitle.toLowerCase().indexOf("transfer") < 0;
	    	});
	    	
	    	//handle sort
	    	arr = $filter('orderBy')(arr, $scope.orderField,$scope.reverse);
	    	if ("reviewersNum" == $scope.orderField && enableActivitiesSort) {
	    		arr = activitiesService.sortByPopularity(arr);
			}
	    	
	    	arr = $scope.priceFilter(arr);
	    	arr = $scope.ratingFilter(arr);
	    	arr = $scope.featuresFilters(arr);
	    	arr = $scope.langFilter(arr);
	    	return arr;
	    	
	    }
		
	    $scope.loadMore = function(limit) {
	    	if (($scope.startLimit >= $scope.filterRes.length) ||  $scope.loadMoreRunning) {
				return;
			}
			$scope.loadMoreRunning = true;
			$timeout(function() {
				$scope.startLimit = $scope.startLimit + START_LIMIT_ADD;
				$scope.loadMoreRunning = false;
			},300);
	    }
	    
	    $scope.redirectPa = function(paData) {
	    	var label;
	    	if ($location.url().indexOf("itinerar") >=0) {
				label = "itinerary " + $location.hash();
			} else {
				label = $scope.selectedCategory.name;
			}
	    	PaidActivityRedirect.redirect(paData.vendor, paData.title, paData.link,label);
	    }
	    var deffered = null;
	    $scope.handleScroll = function() {
	    	deffered = new $.Deferred();
	    	/*if (deffered != null && deffered.state() == "peinding") {
	    		console.log(deffered.state());
	    		deffered.reject();
	    	}
	    	deffered = new $.Deferred();
	    	var modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/activities/modals/searching.html',
				backdropClass: "visit-backdrop"
		    });
	    	$timeout(function() {
	    		$(".visit-backdrop").appendTo("#rightSideActivityBlock");
	    		$(".modal-dialog").appendTo("#rightSideActivityBlock");
	    		$(".modal-dialog").css("z-index",999999);
	    		
	    	},0);*/
	    	if ($(window).scrollTop() > $("#activityBlock").offset().top && !$scope.itineraryActivities) {
    			$('html, body').animate({
    				scrollTop: $("#activityBlock").offset().top - 50
    			}, 0, function() {
    				deffered.resolve();
    			});
    		} else {
    			deffered.resolve();
    		}
	    	/*$timeout(function() {
	    		modalInstance.close();
	    		$(".modal-dialog").remove();
    			deffered.resolve();
	    	},1000);*/
	    	return deffered;
	    	
	    }

		
	}]);
	
});	

define('ngApp/website/activity/activityController',[mainPath,
        "app/extensions/core/paidActivityRedirect",
        "app/extensions/core/currency"],
    function(main,PaidActivityRedirect,CurrencyMgr) {
	var app = angular.module('visitacity');
	
		
	app.controller('activityController',['$scope','$window','$rootScope','$http','$q','$filter','$routeParams','$timeout','$location','viatorService','activitiesService','GlobalDefs','GetCitiesService','dateAvailabilityService','visitBackDropService',
	                                     '$uibModal','paidActivityRedirectService','exprService','visitDebugSvc',
	                                       function($scope,$window,$rootScope,$http, $q,$filter,$routeParams,$timeout,$location,viatorService,activitiesService,GlobalDefs,GetCitiesService,dateAvailabilityService,visitBackDropService,
	                                    		   $uibModal,paidActivityRedirectService,exprService,visitDebugSvc) {
		
		
		visitBackDropService.init("Getting Activity Details");
		visitBackDropService.runBackdrop();
		fireEvent("activity-booking-desktop","page load activity details");
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();

		$scope.imageMinHeight = $(window).height() * 0.48 //48%;
		
		$scope.active = 0;
		$scope.checkAvailabilityButton = "Check Availability";
		
		$scope.lang = $routeParams.lang;
		$scope.cityLegal = $routeParams.city;
		$scope.cityObj = null;
		
		//temporary initialize the datepicker
		$scope.dateOptions = {
			//dateDisabled:  false,
			startingDay: 1,
			minDate: null,
			maxDate: null
		};
		
		$scope.dateAvailabilityService = dateAvailabilityService;
		
		$scope.availabilityError = false;
		$scope.availabilityErrorContent = ""; 
		
		$scope.minDate = null;
		$scope.maxDate = null;
		
		$scope.product = null;
		$scope.catArr = new Array();
		$scope.productReviews = new Array();
		$scope.topProductReviews = new Array();
		$scope.visitPa = null;
		$scope.datesAvailability = new Array();
		
		$scope.carPhotos = new Array();
		$scope.selectedImage = null;
		$scope.selectedImage2 = null;
		$scope.selectedPhotoIndex = 0;
		$scope.selectedPhoto2Index = 1;
		$scope.limitReviews = 3;
		$scope.showTopDeparturePoint = true;
		$scope.instantConfirmation = false;
		$scope.titleTop = true;
		$scope.dualPhotoMode = false;
		var enableHighlights = false;
		$scope.accordionView = false;
		
		var callA = activitiesService.init($routeParams.city);
		var callB = viatorService.getProductData($routeParams.vendorId);
		var callC = viatorService.getProductAvailability($routeParams.vendorId);
		var callD = GetCitiesService.async();
		var callE = exprService.getExprPromise();
		
		$q.all(new Array(callC)).then(
				 function(results) {
					 //datepicker
					 if (results[0].data.success && results[0].data.data != null && Object.keys(results[0].data.data).length > 0) {
						 var datesAvailability = results[0].data.data;
						 dateAvailabilityService.init(datesAvailability,$scope);
						 $scope.dateOptions = dateAvailabilityService.getDateOptions();
						/* try {
							for (var key in datesAvailability) {
								var firstDate = new Date(key + "-" +  datesAvailability[key][0]).setHours(0,0,0,0);
								var today = new Date().setHours(0,0,0,0);;
								var timeDiff = Math.abs(firstDate - today);   
							    var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24)); 
							    fireEvent("activity-booking-desktop","first availability",$routeParams.vendorId,diffDays);
								break;
							}
						 } catch (err) {}*/
					 } else {
						 showAvailabilityError("tour dates not available",results[0].data.errorMessage)
					 }
					 
				 },
				 function(e) {
					 fireEvent("activity-booking-desktop-error","failed to load viator api".e.data != null ? e.data : "");
	    });
		
		$q.all(new Array(callA,callB,callD,callE)).then(
				 function(results) {
					 
					 //###########################START EXPERIMENTS#########################################//
					 
					 //title position
					 $scope.titleBottom =  visitDebugSvc.getValue(globExprVars["activity-title-position"] != null && globExprVars["activity-title-position"] == 'bottom',false,true);
					 exprService.fireExperimentEvent("activity-title-position",globExprVars["activity-title-position"]);

					 // 1 or 2 images
					 $scope.dualPhotoMode = visitDebugSvc.getValue(globExprVars["activity-top-image"] != null && globExprVars["activity-top-image"] == 'two',false,true);
					 exprService.fireExperimentEvent("activity-top-image",globExprVars["activity-top-image"]);
					 
					 // highlights vs short description
					 enableHighlights = visitDebugSvc.getValue(globExprVars["activity-highlights"] != null && globExprVars["activity-highlights"] == 'highlights',"short-description",true);
					 exprService.fireExperimentEvent("activity-highlights",globExprVars["activity-highlights"]);
					 
					 //accordion view
					 $scope.accordionView = visitDebugSvc.getValue(globExprVars["activity-accordion-view"] != null && globExprVars["activity-accordion-view"] == 'on',false,true);
					 exprService.fireExperimentEvent("activity-accordion-view",globExprVars["activity-accordion-view"]);
					 
					//sticky scroll 
					 var stickyScroll = visitDebugSvc.getValue(globExprVars["sticky-scroll"] != null && globExprVars["sticky-scroll"] == 'on',"off",true);
					 exprService.fireExperimentEvent("sticky-scroll",globExprVars["sticky-scroll"]);
					 if (stickyScroll) {
						angular.element($window).bind("scroll", function() {
							handleStickyScroll();
						});
					 }
					
					 
					 //###########################END EXPERIMENTS#########################################//
					 
					 $scope.visitPa = $filter('filter')(activitiesService.allActivities, {vendorProductId: $routeParams.vendorId},true)[0];
					 $scope.catArr = $filter('filter')(activitiesService.cityPaidActivityCategories,  function(value, index){ return value.vendorSubCatId==null});
					 $scope.cityObj = $filter('filter')(results[2], {legalName: $scope.cityLegal},true)[0];
					 if ($scope.visitPa != null) {
						 $scope.visitPa.relatedPaidActivityList = $filter('unique')($scope.visitPa.relatedPaidActivityList,"relatedActivityId");
						//populate related pa:
						 for (var i = $scope.visitPa.relatedPaidActivityList.length - 1; i >= 0; i--) {
							 var relatedPa = $scope.visitPa.relatedPaidActivityList[i];
						 //angular.forEach($scope.visitPa.relatedPaidActivityList, function (relatedPa) {
		    					var foundPa = $filter('filter')(activitiesService.allActivities, {id: relatedPa.relatedActivityId}, true);
			    			    if (foundPa.length > 0) {
			    			    	$scope.visitPa.relatedPaidActivityList[i] = foundPa[0];
			    				} else {
			    					$scope.visitPa.relatedPaidActivityList.splice(i, 1);
			    				}
						 }
						 if ($scope.visitPa.relatedPaidActivityList.length == 0) {
							 angular.forEach(activitiesService.allActivities, function (relatedPa) {
				    			    if ($scope.visitPa.relatedPaidActivityList.length < 3 && relatedPa.vendorProductId != $routeParams.vendorId) {
				    			    	$scope.visitPa.relatedPaidActivityList.push(relatedPa);
				    				}
							 });
						 }
					 }
					 if (results[1].data.success) {
						 $scope.product = results[1].data.data;
						 
						 if ($scope.product.highlights != null && enableHighlights) {
							 $scope.visitPa.highlightsArr = $scope.product.highlights.split(":::");
						 } else if ($scope.product.highlights == null && enableHighlights) {
							 //experiment on but no highlights
							 exprService.fireExperimentEvent("activity-highlights","highlights but no highlights exist");
						 }
						 
						 if ($scope.product.bookingEngineId != null && ($scope.product.bookingEngineId == "FreesaleBE" || $scope.product.bookingEngineId == "UnconditionalBE")) {
							 $scope.instantConfirmation = true;
						 }
						 
						 initAgeBands();
						 
						 $scope.productReviews = $scope.product.reviews
						 $scope.productReviews = $filter('filter')($scope.product.reviews,  function(value, index){ return value.rating>1});
						 $scope.topProductReviews = $filter('filter')($scope.product.reviews,  function(value, index){ return value.rating>4});
						 
						 if ($scope.product.mapURL != null) {
							 $scope.product.mapURL = $scope.product.mapURL.replace("http:","https:");
						 }
		
						 //initialize photo carousel
						 
						 $scope.carPhotos.push({photoHiResURL:$scope.product.thumbnailHiResURL});
						 if ($scope.product.userPhotos != null && $scope.product.userPhotos.length > 0) {
							 $scope.carPhotos = $scope.carPhotos.concat($scope.product.userPhotos);
						 }
						 
						 //handle https for user photos
						 angular.forEach($scope.carPhotos , function (carPhoto) {
							 if (carPhoto != null && carPhoto.photoHiResURL != null && carPhoto.photoHiResURL.indexOf("https") < 0) {
								 carPhoto.photoHiResURL = carPhoto.photoHiResURL.replace("http","https");
								 //pre load images for performance
								 $timeout(function() {
										new Image().src = carPhoto.photoHiResURL;
								},0);
							 }
							   
						 });
						 
						 $scope.selectedImage = $scope.carPhotos[$scope.selectedPhotoIndex].photoHiResURL;
						 if ($scope.dualPhotoMode && $scope.carPhotos.length > 1) {
							 $scope.selectedImage2 = $scope.carPhotos[$scope.selectedPhoto2Index].photoHiResURL;
						 } else if  ($scope.dualPhotoMode && $scope.carPhotos.length == 1) {
							 //in case we only have one photo
							 $scope.dualPhotoMode = false;
							 exprService.fireExperimentEvent("activity-top-image","two but single photo only");
						 }
						 
						 
					 } else {
						 paidActivityRedirectService.doRedirect($scope.visitPa.vendor,$scope.visitPa.title,$scope.visitPa.link,null,$scope.visitPa.vendorProductId,null,null,true,$scope.visitPa.price);
						 fireEvent("activity-booking-desktop-error","tour not available",results[1].data.errorMessage.length > 0 ? results[1].data.errorMessage[0] : "");
						 //showAvailabilityError("tour not available",results[1].data.errorMessage);
					 }
					
					 
					 
					visitBackDropService.clearBackdrop();
					$timeout(function() {
						//set the height of the bottom section per the left column
						$("#bottomTabs").css("min-height",$("#leftCol").height() + "px");
					},1000);
					
					$timeout(function() {
						$rootScope.$broadcast("update_breadcrumb",null);
						$rootScope.$broadcast("update_main_header_width","activityContainer");
					},500);
					
					$timeout(function() {
						//handle cases where the right top details are long (could be long text or br/>
						if ($("#topRightCol").height() > $("#topLeftCol").height()) {
							$scope.showTopDeparturePoint = false;
						}
					},500);
					
					
				 },
				 function(e) {
					 visitBackDropService.clearBackdrop();
					 fireEvent("activity-booking-desktop-error","failed to load viator api", e != null && e.data != null ? e.data : "");
					 $scope.modalInstance = $uibModal.open({
							templateUrl: appWebRoot + '/activity/modals/viator_error.html',
					        scope: $scope
				    });
	        	
	    });
		
		$scope.$on('$destroy', function(){
			window.angular.element($window).off('scroll');
		});
		
		function handleStickyScroll() {
			var indicator = $("#activityDateBottomIndicator");
			var dateSelector = $("#activityDateTop");
			
			var scrollTop = $(window).scrollTop();
	    	var curElementTop = indicator.offset().top;
	    	//console.log(scrollTop + "::" + curElementTop);
	    	if (scrollTop > curElementTop-120) {
	    		dateSelector
    			.css("position", "fixed")
    			.css("top", "0px")
    			.css("left", "50%")
    			.css("right", "0px")
    			.css("transform","translateX(-50%)")
    			.css("width",$("#activityContainer").width())
    			.css("z-index", "999")
    			.css("margin-top", "0px");
        	} else if (scrollTop < (curElementTop-120)) {
        		//console.log('un-fix');
        		dateSelector
    			.css("position", "relative")
    			.css("top", "")
        		.css("left", "")
        		.css("transform", "")
        		.css("margin-top", "15px");
        	}
	    	
		}
		
		/**
		 * Set the count for the adult age band as 1
		 */
		function initAgeBands() {
			var doInit = true;
			for (var i=0;i<$scope.product.ageBands.length;i++) {
				if ($scope.product.ageBands[i].count > 0) {
					doInit = false;
					break;
				}
			}
			if (doInit) {
				var adultAb = $filter('filter')($scope.product.ageBands, {bandId: 1},true)[0];
				if (adultAb.count == null || adultAb.count == 0) {
					adultAb.count = 1;
				}
			}
			
			
		}
		
		$scope.setMaxAvailabilityError = function(status) {
			$scope.availabilityError = status;
		}
		
		function showAvailabilityError(eventLbl,errorMsgArr) {
			
			$scope.modalInstance = $uibModal.open({
					templateUrl: appWebRoot + '/activity/modals/product_na.html',
			        scope: $scope
		    });
			
			fireEvent("activity-booking-desktop-error",eventLbl,errorMsgArr != null && errorMsgArr.length > 0 ? errorMsgArr[0] : "");
			$scope.modalInstance.result.then(function (result) {
				
			}, function () {
			});
		}
		
		
		/**
		 * Get the price matrix if the month changes so we have it cached
		 */
		/*var forceClose = false;
		$scope.$watch('dateAvailabilityService.selectedDate', function(newVal, oldVal) {
			if (newVal != oldVal) {
				if (oldVal == null || newVal.getFullYear() != oldVal.getFullYear() || newVal.getMonth() != oldVal.getMonth()) {
					var selectedDate = dateAvailabilityService.getSelectedDate();
					viatorService.getPricingMatrix($routeParams.vendorId,selectedDate.getFullYear(),selectedDate.getMonth()+1);
				}
			}
			if (newVal != oldVal && oldVal != null) {
				forceClose = true;
			}
			$timeout(function() {
				dateAvailabilityService.datePopupTop.opened = false;
				dateAvailabilityService.datePopupCa.opened = false;
				dateAvailabilityService.datePopupCb.opened = false;
	    		dateAvailabilityService.datePopupMoreInfo.opened = false;
	    		dateAvailabilityService.datePopupActivityOptions.opened = false;
	    		dateAvailabilityService.datePopupReviewsTop.opened = false;
	    		dateAvailabilityService.datePopupBottom.opened = false;
			},800);
			
    	});*/
		
		/*$scope.$watch('dateAvailabilityService.datePopupTop.opened', function(newVal, oldVal) {
			if (forceClose) {
				$timeout(function() {
					dateAvailabilityService.datePopupTop.opened = false;
		    		forceClose = false;
				},200);
			}
		});
		
		$scope.$watch('dateAvailabilityService.datePopupCa.opened', function(newVal, oldVal) {
			if (forceClose) {
				$timeout(function() {
					dateAvailabilityService.datePopupCa.opened = false;
		    		forceClose = false;
				},200);
			}
		});
		
		$scope.$watch('dateAvailabilityService.datePopupCb.opened', function(newVal, oldVal) {
			if (forceClose) {
				$timeout(function() {
					dateAvailabilityService.datePopupCb.opened = false;
		    		forceClose = false;
				},200);
			}
		});
		
		$scope.$watch('dateAvailabilityService.datePopupMoreInfo.opened', function(newVal, oldVal) {
			if (forceClose) {
				$timeout(function() {
					dateAvailabilityService.datePopupMoreInfo.opened = false;
		    		forceClose = false;
				},200);
			}
		});
		
		$scope.$watch('dateAvailabilityService.datePopupActivityOptions.opened', function(newVal, oldVal) {
			if (forceClose) {
				$timeout(function() {
					dateAvailabilityService.datePopupActivityOptions.opened = false;
		    		forceClose = false;
				},200);
			}
		});
		
		$scope.$watch('dateAvailabilityService.datePopupReviewsTop.opened', function(newVal, oldVal) {
			if (forceClose) {
				$timeout(function() {
					dateAvailabilityService.datePopupReviewsTop.opened = false;
		    		forceClose = false;
				},200);
			}
		});
		
		$scope.$watch('dateAvailabilityService.datePopupBottom.opened', function(newVal, oldVal) {
			if (forceClose) {
				$timeout(function() {
					dateAvailabilityService.datePopupBottom.opened = false;
		    		forceClose = false;
				},200);
			}
		});
		*/
		$scope.resetAvailabilityError = function() {
			$scope.availabilityError = false;
		}
		
	    /*$scope.openDate = function(from) {
	    	if (from == "top") {
	    		$scope.datePopupTop.opened = true;
	    	} else {
	    		$scope.datePopupBottom.opened = true;
	    	}
		    
		};*/
		
		
		$scope.checkAvailabilityBtn = function() {
			$("html, body").animate({
				scrollTop:  $("body").offset().top
			}, 500);
			dateAvailabilityService.openDate("top");
		}
		
		/*$scope.caruselChangePhoto = function(idx) {
			fireEvent("activity-booking-desktop","carusel picture click");
			$scope.selectedPhotoIndex = idx;
			if ($("#user-photo-" + idx).offset().top - $("#carImagesWrapper").offset().top > 190) {
				$("#carImagesWrapper").animate({
					scrollTop:  $("#carImagesWrapper").scrollTop() + $("#user-photo-" + idx).offset().top - $("#carImagesWrapper").offset().top 
				}, 500);
			}
			
		}*/
		
		$scope.showReviews = function() {
			fireEvent("activity-booking-desktop","see all reviews");
			$scope.active = 2;
			$("html, body").animate({
				scrollTop:  $("#bottomTabs").offset().top -10
			}, 500);
		}
		
		$scope.carouselNext = function(num) {
			if (num == -1) {
				fireEvent("activity-booking-desktop","carusel up");
			} else {
				fireEvent("activity-booking-desktop","carusel down");
			}
			
			moveIndex(num);
			
			$timeout(function(){
				 $scope.selectedImage = $scope.carPhotos[$scope.selectedPhotoIndex].photoHiResURL
				 $scope.selectedImage2 = $scope.carPhotos[$scope.selectedPhoto2Index].photoHiResURL;
			},0);
		}
		
		function moveIndex(num) {
			if ($scope.selectedPhotoIndex == 0 && num == -1) {
				$scope.selectedPhotoIndex = $scope.carPhotos.length-1;
			} else if ($scope.selectedPhotoIndex == 1 && num == -2) {
				$scope.selectedPhotoIndex = $scope.carPhotos.length-1;
			} else if ($scope.selectedPhotoIndex == 0 && num == -2) {
				$scope.selectedPhotoIndex = $scope.carPhotos.length-2;
			} else if (($scope.selectedPhotoIndex == $scope.carPhotos.length-1) && num == 1) {
				$scope.selectedPhotoIndex = 0;
			} else if (($scope.selectedPhotoIndex == $scope.carPhotos.length-2) && num == 2) {
				$scope.selectedPhotoIndex = 0;
			} else if (($scope.selectedPhotoIndex == $scope.carPhotos.length-1) && num == 2) {
				$scope.selectedPhotoIndex = 1;
			} else {
				$scope.selectedPhotoIndex += num;
			}

			if ($scope.dualPhotoMode) {
				if (num > 0) {
					//going up, add one
					if ($scope.selectedPhotoIndex == $scope.carPhotos.length-1) {
						$scope.selectedPhoto2Index = 0;
					} else {
						$scope.selectedPhoto2Index = $scope.selectedPhotoIndex + 1;
					}
				} else {
					//going down
					if ($scope.selectedPhotoIndex == 0) {
						$scope.selectedPhoto2Index = $scope.carPhotos.length-1;
					} else {
						$scope.selectedPhoto2Index = $scope.selectedPhotoIndex - 1;
					}
				}
			}
		}
		
		$scope.dismiss = function() {
			$scope.modalInstance.dismiss();
			$location.path('/en/'+$scope.cityObj.legalName+'/activities/all-activities').replace();
		}
		
		$scope.showMore = false;
		$scope.showMoreTxt = "Read More";
		$scope.readMore = function() {
			var maxHeight = $scope.showMore ? "190px" : "8000px"
			$("#prodDescription").css('max-height',maxHeight);
			$timeout(function() {
				$scope.showMore = !$scope.showMore;
				$scope.showMoreTxt = $scope.showMore ? "Read Less" : "Read More"
			},200);
			
		}
		
		/*$scope.$on('$routeChangeSuccess', function (event, current, prev) {
			if (prev != null) {
				$window._gaq.push(['_trackPageview', $location.path()]);
				logPageLoaded();
			}
		});*/
		
		
	}]);
	
});	

define('ngApp/website/activity/activityOptionsController',[mainPath,
        "app/extensions/core/paidActivityRedirect",
        "app/extensions/core/currency"],
    function(main,PaidActivityRedirect,CurrencyMgr) {
	var app = angular.module('visitacity');
	
		
	app.controller('activityOptionsController',['$scope','$window','$rootScope','$http','$q','$filter','$routeParams','$timeout','$location','viatorService','activitiesService',
	                                            'GlobalDefsNew','GetCitiesService','$interval','$uibModal','dateAvailabilityService','visitBackDropService','$debounce',
	                                            'GlobalDefs','dataWearhouseService','activityOrderService','anchorSmoothScroll','exprService',
	                                       function($scope,$window,$rootScope,$http, $q,$filter,$routeParams,$timeout,$location,viatorService,activitiesService,
	                                    		   GlobalDefsNew,GetCitiesService,$interval,$uibModal,dateAvailabilityService,visitBackDropService,$debounce,
	                                    		   GlobalDefs,dataWearhouseService,activityOrderService,anchorSmoothScroll,exprService) {
		
		$scope.activityOrderService = activityOrderService;
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.cityLegal = $routeParams.city;
		$scope.showProduct = true;
		$scope.curGrade = null;
		$scope.userCountText = null;
		$scope.showOptions = false;
		//$scope.checkAvailabilityButton = "Update >>";
		$scope.dateAvailabilityService = dateAvailabilityService;
		$scope.backdropTarget = "firstSpinner";
		var paramsObj = null;
		//visitBackDropService.init("Getting Activity Options");
		//visitBackDropService.runBackdrop();
		
		$scope.init = function (jsonObj,allowForceClose,isActive) {
			if (isActive) {
				$scope.showFirstSpinner = $scope.backdropTarget == "firstSpinner";
				visitBackDropService.init("",false,$scope.backdropTarget);
				visitBackDropService.runBackdrop();
				$scope.backdropTarget = "optionsRightCol";
			}
			
			paramsObj = jsonObj;//angular.fromJson($routeParams.data);
			$scope.selectedDate = moment(paramsObj.selectedDate,'YYYY-MM-DD',true).toDate();
			
			var wearhouseRsults = dataWearhouseService.get("viatorProductResults"+$routeParams.vendorId+paramsObj.selectedDate);
			
			if (wearhouseRsults == null) {
				var callA = GetCitiesService.async();
				var callB = viatorService.getProductData($routeParams.vendorId);
				var callC = viatorService.getPricingMatrix($routeParams.vendorId,$scope.selectedDate.getFullYear(),$scope.selectedDate.getMonth()+1);
				var callD = viatorService.getProductAvailability($routeParams.vendorId);
				var callE = activitiesService.init($routeParams.city);
				var callF = exprService.getExprPromise();
				
				$q.all(new Array(callA,callB,callC,callD,callE,callF)).then(
						 function(results) {
							 if (isActive) {
								 $scope.processOptions(results,jsonObj,allowForceClose);
							 }
							 dataWearhouseService.newData("viatorProductResults"+$routeParams.vendorId+paramsObj.selectedDate,results,null);
						 },
						 function(e) {
							 fireEvent("activity-booking-desktop-error","failed to load viator api", e != null && e.data != null ? e.data : "");
							 $scope.modalInstance = $uibModal.open({
									templateUrl: appWebRoot + '/activity/modals/viator_error.html',
							        scope: $scope
						    });
			    });
			} else if (isActive) {
				$scope.processOptions(wearhouseRsults.deferred,jsonObj,allowForceClose);
			}
			
		}
		
		$scope.processOptions = function(results,jsonObj,allowForceClose) {
			$scope.showFirstSpinner = false;
			$scope.visitPa = $filter('filter')(activitiesService.allActivities, {vendorProductId: $routeParams.vendorId},true)[0];
			 $scope.product = results[1].data.data;
			 normalizeGrades();
			 $scope.cityObj = $filter('filter')(results[0], {legalName: $scope.cityLegal},true)[0];
			 //$scope.priceMatrix = results[2];
			 activityOrderService.init(results[2].data,$scope.product,$scope.selectedDate,paramsObj);
			 $scope.tourNotAvailableForDate = activityOrderService.getTourNotAvailable();
			//datepicker
			 var datesAvailability = results[3].data.data;
			 dateAvailabilityService.init(datesAvailability,$scope);
			 $scope.dateOptions = dateAvailabilityService.getDateOptions();
			 dateAvailabilityService.setSelectedDate($scope.selectedDate);
			 
			 $scope.product = activityOrderService.doCalculations();
			 //$scope.product = activityOrderService.getProduct();
			 
			 if ($scope.product.hotelPickup) {
				 viatorService.getProductHotels($routeParams.vendorId);
			 }
			 
			
			 if (!$scope.tourNotAvailableForDate.forDate && !$scope.tourNotAvailableForDate.forCount   && $scope.product.tourGrades.length == 1) {
				 //if only one grade go directly to product page
				 visitBackDropService.clearBackdrop();
				 $scope.bookNow($scope.product.tourGrades[0],false,"from details");
				 return;
			 } else {
				 //visitBackDropService.clearBackdrop();
				 fireEvent("activity-booking-desktop","page load activity options");
				 $scope.showOptions = true;
			 }

			 //put the updated product in the wearhouse (contains the price breakdown).
			 dataWearhouseService.put("viatorProductData"+$routeParams.vendorId,results[1],true);
			 $scope.updateOptions(jsonObj,allowForceClose);
		}
		
		
		//Remove N/A or other cahrs
		function normalizeGrades() {
			for (var i=0;i<$scope.product.tourGrades.length;i++) {
				if ($scope.product.tourGrades[i].gradeTitle == "N/A") {
					$scope.product.tourGrades[i].gradeTitle = "";
				} 
				if ($scope.product.tourGrades[i].gradeDescription == "N/A") {
					$scope.product.tourGrades[i].gradeDescription = "";
				}
				if ($scope.product.tourGrades[i].gradeTitle.length == 0) {
					$scope.product.tourGrades[i].gradeTitle = $scope.product.title;
				}
			}
		}
		
		$scope.setMaxAvailabilityError = function(status) {
			$scope.availabilityError = status;
		}
		
		/**
		 * 
		 */
		$scope.setSelectedDate = function(date,from) {
			paramsObj.selectedDate = date;
			dateAvailabilityService.setSelectedDate(moment(date,'YYYY-MM-DD',true).toDate());
			$scope.updateOptions(paramsObj,false);
			fireEvent("activity-booking-desktop","next availability",from);
		}
		
		/**
		 * Update the options without reloading
		 */
		$scope.updateOptions = function(jsonObj,allowForceClose) {
			
			var curSelectedDateStr = $filter('date')(activityOrderService.getSelectedDate(), "yyyy-MM-dd");
			if (jsonObj.selectedDate != curSelectedDateStr && allowForceClose) {
				forceClose = true;
			}
			
			
			//Clear all the previously calculated pricing data
			activityOrderService.clearPricing();
			activityOrderService.setTourNotAvailable({forDate:false,forCount:false,firstDate:null});
			
			//Update the search param if the user refreshes
			//$location.search('data', angular.toJson(jsonObj)).replace();
			activityOrderService.setParamsObj(jsonObj);
			activityOrderService.setSelectedDate(moment(jsonObj.selectedDate,'YYYY-MM-DD',true).toDate());
			$scope.selectedDate = activityOrderService.getSelectedDate();
				
				
			//paramsObj = jsonObj;
			//$scope.selectedDate = new Date(jsonObj.selectedDate);
			
			//See if we have data for this date
			var res = activityOrderService.getCurrentGrdades();
			if (res != null) {
				$scope.product = activityOrderService.doCalculations();
				 //update user count dropdown since angular sucks, need to do this with jQuery
				 $timeout(function(){
					 for (var i=0;i<$scope.product.ageBands.length;i++) {
						 $("#ageband_drop_" + $scope.product.ageBands[i].bandId).val($scope.product.ageBands[i].count);
					 }
				 },100);
				$timeout(function(){
					 visitBackDropService.clearBackdrop();
				},800);
			} else {
				var call = viatorService.getPricingMatrix($routeParams.vendorId,$scope.selectedDate.getFullYear(),$scope.selectedDate.getMonth()+1);
				$q.all(new Array(call)).then(
						 function(results) {
							 //$scope.priceMatrix = results[0];
							 activityOrderService.setPriceMatrix(results[0].data);
							 $scope.product = activityOrderService.doCalculations();
							 //update user count dropdown since angular sucks, need to do this with jQuery
							 $timeout(function(){
								 for (var i=0;i<$scope.product.ageBands.length;i++) {
									 $("#ageband_drop_" + $scope.product.ageBands[i].bandId).val($scope.product.ageBands[i].count);
								 }
							 },100);
							 visitBackDropService.clearBackdrop();
						 },
						 function(e) {
			        	
			    });
			}
		}
		
		var forceClose = false;
		/**
		 * IE - close date picker after selection
		 */
		$scope.$watch('dateAvailabilityService.datePopupTop.opened', function(newVal, oldVal) {
			if (forceClose) {
				$timeout(function() {
					dateAvailabilityService.datePopupTop.opened = false;
		    		forceClose = false;
				},200);
			}
		});
		
		$scope.$watch('activityOrderService.getTourNotAvailable()', function(newVal, oldVal) {
			if (newVal != oldVal) {
				$scope.tourNotAvailableForDate = activityOrderService.getTourNotAvailable();
			}
    	},true);
		


		
		/**
		 * Handle the booking
		 */
		$scope.bookNow = function(selectedGrade,showError,eventFrom) {
			if ($scope.availabilityError) {
				return false;
			}
			$scope.showProduct = false;
			visitBackDropService.init();
			visitBackDropService.runBackdrop("Confirming Availability",false);
			
			
			if (showError) {
				fireEvent("activity-booking-desktop","book now options");
			}
			
			//scroll to the top to see the loading message
			$("html, body").animate({
				scrollTop:  0
			}, 500);
			
			//var wait4SecsMin = $debounce(null, 4000, false);
			var itemObj = getItems(selectedGrade);
			var callA = viatorService.calculatePricing(itemObj, null, "USD");
			
			$q.all(new Array(callA)).then(
					 function(results) {
						fireEvent("activity-booking-desktop","page load activity booking - " + eventFrom);
						GlobalDefsNew.setGlobal("bookingPricing",results[0]);
						$timeout(function() {
							$location.path('/en/'+$scope.cityLegal+'/activity-details/order-traveler-details/'+$routeParams.visitId+'/' + $routeParams.vendorId).search({data: angular.toJson(itemObj)});
						},200);
					 },
					 function(e) {
						 $scope.showProduct = true;
						 visitBackDropService.clearBackdrop();
						 //console.log("An error occured " + e);
						 $scope.error = e.viatorError;
						 fireEvent("activity-booking-desktop-error","confirm availability",$scope.error);
						 anchorSmoothScroll.scrollTo("activityDateTop",null,0); //scroll to error message
						 if (showError) {
							 $scope.modalInstance = $uibModal.open({
								templateUrl: appWebRoot + '/activity/modals/sold_out_error.html',
						        scope: $scope
						    });
							
							$scope.modalInstance.result.then(function (result) {
								
							}, function () {
							});
						 } else {
							 $rootScope.$broadcast("viator_error",$scope.error);
						 }
						 
						 
		    });
		}
		
		
		
		/**
		 * Get the item required for calculatePricing call
		 */
		function getItems(grade) {
        	var items = [];
        	var item = {
                specialReservation: false,
                travelDate: $filter('date')(activityOrderService.getSelectedDate(), "yyyy-MM-dd"),
                productCode: $scope.product.code,
                tourGradeCode: grade.gradeCode,
                travellers: []
        	}
        	
        	for (var i=0;i<$scope.product.ageBands.length;i++) {
        		var curAgeBandElem = $scope.product.ageBands[i];
        		for (var j=1;j<=curAgeBandElem.count;j++) {
            		var traveller = {
            			bandId: curAgeBandElem.bandId	
            		}
            		item.travellers.push(traveller);
        		}  
        	}
        	
        	
        	items.push(item);
        	return items;
        }
		
		$scope.dismiss = function() {
			$scope.modalInstance.dismiss();
		}
		
		$scope.showRequiredTravelers = function(grade,from) {
			fireEvent("activity-booking-desktop","show price breakdown",from);
			$scope.selectedGrade = grade;
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/activity/modals/required_travelers_options.html',
		        scope: $scope
		    });
			
			$scope.modalInstance.result.then(function (result) {
				
			}, function () {
			});
		}
		
		
		/*$scope.$on('$routeChangeSuccess', function (event, current, prev) {
			if (prev != null) {
				$window._gaq.push(['_trackPageview', $location.path()]);
			}
		});*/

	}]);
	
});	

define('ngApp/website/activity/activityOrderBillingDetailsController',[mainPath,
        "app/extensions/core/paidActivityRedirect",
        "app/extensions/core/currency"],
    function(main,PaidActivityRedirect,CurrencyMgr) {
	var app = angular.module('visitacity');
	
		
	app.controller('activityOrderBillingDetailsController',['$scope','$window','$rootScope','$http','$q','$filter','$routeParams','$timeout','$location','viatorService','activitiesService',
	                                            'GlobalDefsNew','GlobalDefs','GetCitiesService','$interval','visitBackDropService','activityOrderService','$window','$uibModal',
	                                       function($scope,$window,$rootScope,$http, $q,$filter,$routeParams,$timeout,$location,viatorService,activitiesService,
	                                    		   GlobalDefsNew,GlobalDefs,GetCitiesService,$interval,visitBackDropService,activityOrderService,$window,$uibModal) {
		
		visitBackDropService.init("Confirming Availability");
		visitBackDropService.runBackdrop();
		fireEvent("activity-booking-desktop","page load activity booking - all");
		
		$scope.cityLegal = $routeParams.city;
		$scope.showProduct = true;
		var callsArr = new Array();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.ccPayDetail = {
				firstName: '',
				lastName: '',
				ccnumber: '',
				ccadditionalDigits: '',
				ccaddressCountryId: null,
				selectedMonth: 'Select Month',
				selectedYear: 'Select Year',
				ccaddress1: '',
				ccaddressCity: '',
				ccaddressZip: ''
		}
		$scope.bookingDetails = GlobalDefsNew.getGlobal("bookingPricing");
		var itemObj = angular.fromJson($routeParams.data);
		var selectedDate = moment(itemObj[0].travelDate,'YYYY-MM-DD',true).toDate();
		$scope.hotelTypeRadio = {
				name: "selectFromList" 
		}
		
		var showDontLeave = true;
		
		$scope.validationActive = false;
		$scope.travelersArray = new Array();
		$scope.userCountText = null;
		$scope.specialRequirements = null;
		$scope.pickupPoint = null;
		$scope.countryMap = new Array();
		$scope.hotelsArr = new Array();
		$scope.curTourGrade = null;
		$scope.errorsArr = new Array();
		populateYears(); //for credit card
		$scope.expiryMonthInvalid = false;
		$scope.expiryYearInvalid = false;
		
		callsArr.push(GetCitiesService.async());
		callsArr.push(viatorService.getProductData($routeParams.vendorId));
		callsArr.push(viatorService.getCountryMap());
		callsArr.push(activitiesService.init($routeParams.city));
		callsArr.push(viatorService.getPricingMatrix($routeParams.vendorId,selectedDate.getFullYear(),selectedDate.getMonth()+1));
		if ($scope.bookingDetails == null) {
			//get the pricing matrix from the server if needed
			callsArr.push(viatorService.calculatePricing(itemObj, null, "USD"));
		}
		
		$q.all(callsArr).then(
				 function(results) {
					 $scope.visitPa = $filter('filter')(activitiesService.allActivities, {vendorProductId: $routeParams.vendorId},true)[0];
					 $scope.product = results[1].data.data;
					 $scope.cityObj = $filter('filter')(results[0], {legalName: $scope.cityLegal},true)[0];
					 
					 //handle some countries to be on to of list
					 $scope.countryMap = [];
					 var allCountries = results[2];
					 var arrFirstCountries = ["AU", "CA", "SG", "GB", "US"];
	
					for (var key in allCountries) {
					var country = allCountries[key];
						$scope.countryMap.push(country);
					}
					
					//add separator
					$scope.countryMap.push({countryId:"--",
											countryName:"-------------------------------------"})
						
					// sort
					$scope.countryMap.sort(function(a, b) {
							if (arrFirstCountries.indexOf(a.countryId) > -1 && arrFirstCountries.indexOf(b.countryId) == -1) {
								return -1;
							}
							
							if (arrFirstCountries.indexOf(a.countryId) == -1 && arrFirstCountries.indexOf(b.countryId) > -1) {
								return 1;
							}			
							
							if (arrFirstCountries.indexOf(a.countryId) > -1 && arrFirstCountries.indexOf(b.countryId) > -1) {
								return arrFirstCountries.indexOf(a.countryId) - arrFirstCountries.indexOf(b.countryId);
							}
							
							return a.countryName.localeCompare(b.countryName);
							
					});
					
					if ($scope.bookingDetails == null) {
						 $scope.bookingDetails = results[5];
					 } 
					 if ($scope.product.tourGrades.length == 1) {
						 $scope.curTourGrade = $scope.product.tourGrades[0];
					 } else {
						 $scope.curTourGrade = $filter('filter')($scope.product.tourGrades, {gradeCode: $scope.bookingDetails.itinerary.itemSummaries[0].tourGradeCode},true)[0];
					 }
					 var paramsObj = {ageBands:$scope.bookingDetails.itinerary.itemSummaries[0].travellerAgeBands};
					 activityOrderService.init(results[4].data,$scope.product,selectedDate,paramsObj);
					 $scope.product = activityOrderService.doCalculations();
					 
					 populateAgeBands();
					 if ($scope.product.hotelPickup) {
						 var hotelsCall = viatorService.getProductHotels($routeParams.vendorId);
						 $q.all(new Array(hotelsCall)).then(
								 function(hotelsRes) {
									 $scope.hotelsArr = $filter('filter')(hotelsRes[0].data.data,  function(value, index){ 
											return value.id != "local" && value.id != "notBooked" && value.id != "notListed";
										});
								 },
								 function(e) {
									 console.log(e);
									 fireEvent("activity-booking-desktop-error","failed to load hotels api", e != null && e.data != null ? e.data : "");
								 }
						);
					 }
					 
					 $scope.cancelDate = moment($scope.bookingDetails.itinerary.itemSummaries[0].travelDate,'YYYY-MM-DD',true).toDate();
					 var numOfCancelDays = 1;
					 if ($scope.product.termsAndConditions.indexOf('7 day') > 0) {
						 numOfCancelDays = 7;
					 }
					 $scope.cancelDate.setDate($scope.cancelDate.getDate()-numOfCancelDays);
					 if ($scope.cancelDate < new Date()) {
						 //console.log('Remove cancel date');
						 $scope.cancelDate = null;
					 }
					 $timeout(function() {
						 $rootScope.$broadcast("update_breadcrumb",null);
						 $rootScope.$broadcast("update_main_header_width","activityContainerBooking");
					},500);
					 
					addEvent(document, "mouseout", showCompleteBookingMsg);
					visitBackDropService.clearBackdrop();
					
				 },
				 function(e) {
					 visitBackDropService.clearBackdrop();
					 fireEvent("activity-booking-desktop-error","failed to load viator api", e != null && e.data != null ? e.data : "");
					 $scope.modalInstance = $uibModal.open({
							templateUrl: appWebRoot + '/activity/modals/viator_error.html',
					        scope: $scope
				    });
				 }
		);
		
		$scope.dismiss = function() {
			$scope.modalInstance.dismiss();
		}
		
		function showCompleteBookingMsg(e) {
			if ($location.path().indexOf("order-traveler-details") > 0) {
				
			
			    e = e ? e : window.event;
			    
			    var aa = document.activeElement;
			    //if (aa != null && aa.tagName != null && aa.tagName.toLowerCase() == "select") {
			    if (aa == null || (aa.tagName != null && aa.tagName.toLowerCase() != "body")) {
			    	//on some browsers the select options causes this event to fire
			    	//also auto-complete on chrome causes this to fire 
			    	return;
			    }
			    var from = e.relatedTarget || e.toElement;
			    if (showDontLeave && (!from || from.nodeName == "HTML")) {
					$scope.modalInstance = $uibModal.open({
						templateUrl: appWebRoot + '/activity/modals/complete-booking.html',
					    scope: $scope
				    });
					showDontLeave = false;
					removeEvent(document, "mouseout", showCompleteBookingMsg);
					var missingFileds = "";
					isFormValid(false);
					for (var i=0;i<$scope.errorsArr.length;i++) {
						missingFileds += $scope.errorsArr[i].name + ",";
					}
					$scope.errorsArr = new Array();
					fireEvent("activity-booking-desktop","show user escape message",missingFileds);
			    } 
			}
		}
		
		
		/**
		 * Create an array of years for the credit card
		 */
		function populateYears() {
			var today = new Date();
			$scope.yearArr = new Array();
			for (var i=0;i<12;i++) {
				$scope.yearArr.push($filter('date')(today, 'yyyy'));
				today.setFullYear(today.getFullYear() + 1); 
			}
			
		}
		
		
		
		function populateAgeBands() {
			var idx = 1;
			for (var i=0;i<$scope.bookingDetails.itinerary.itemSummaries[0].travellerAgeBands.length;i++) {
				var curBand = $scope.bookingDetails.itinerary.itemSummaries[0].travellerAgeBands[i];
				if ($scope.userCountText == null) {
					$scope.userCountText = "For "; 
				} else {
					$scope.userCountText += ", ";
				}
				$scope.userCountText += curBand.count;
				$scope.userCountText += " ";
				$scope.userCountText += curBand.count > 1 ? curBand.pluralDescription : curBand.description
				for (var j=0;j<curBand.count;j++) {
					var newTravelerObj  = {
							bandId: curBand.ageBandId,
							firstname: "",
							surname: "",
							innerIdx: idx,
							description: curBand.description
						}
					$scope.travelersArray.push(newTravelerObj);
					idx++;
				}			
			}
		}
		
		$scope.bookNow = function() {
			$scope.errorsArr = new Array();
			$scope.validationActive = true;
			isFormValid(true);
			if ($scope.errorsArr.length == 0) {
				
				$scope.showProduct = false;
				//scroll to the top to see the loading message
				$("html, body").animate({
					scrollTop:  0
				}, 500);
				visitBackDropService.init("Your Order is Beeing Processed");
				visitBackDropService.runBackdrop();
				var orderObj = {
	           		booker: getLeadTraveler(),
	            	ccPayDetail: getFormattedCcPayDetails(),
	          		   items: [{
	            		specialReservation: false,
	            	    hotelId: getHotelId(),
	            	    pickupPoint: $scope.pickupPoint,  
	            	    travelDate: $scope.bookingDetails.itinerary.itemSummaries[0].travelDate,
	            	    productCode: $scope.product.code,
	            	    tourGradeCode: $scope.curTourGrade.gradeCode,
	            	    languageOptionCode: "en/SERVICE_GUIDE",
	            	    bookingQuestionAnswers: getFormattedQuestionAnswers(),
	            	    specialRequirements: $scope.specialRequirements,
	            	    travellers: getFormattedTravellers()
	            	}],
	            	demo: false
	            }
				var callA = viatorService.book(orderObj, $scope.cityObj.id);
				$q.all(new Array(callA)).then(
						 function(results) {
							fireEvent("activity-booking-desktop","Book now success");
							var orderStatus = results[0];
							GlobalDefsNew.setGlobal("bookingResult"+orderStatus.id,orderStatus);
							if ($scope.ccPayDetail.ccnumber != "4242424242424242") {
								fireAnalyticsTransaction(orderStatus);
							}
							
							//$location.search("data",null);//reset the data in the url
							$timeout(function() {
								$location.path('/en/'+$scope.cityObj.legalName+'/activity-details/order-summary/'+$routeParams.visitId+'/' + $routeParams.vendorId + "/" + orderStatus.id).search("data",null);
							},500);
						 },
						 function(e) {
							fireEvent("activity-booking-desktop-error","Book now Viator error",e.viatorError.errorReference + ": " + e.viatorError.errorMessage);
							//console.log("error:" + e.viatorError.errorReference + ": " + e.viatorError.errorMessage);
							$scope.showProduct = true;
							visitBackDropService.clearBackdrop();
							$scope.errorsArr.push({'name':e.viatorError.errorMessage});
							$("html, body").animate({
									scrollTop:  0
							}, 200);
							//console.log(e.viatorError);
						 }
				);
			} else {
				$("html, body").animate({
					scrollTop:  0
				}, 200,function(){
					$('input').blur();
				});
			}
		}
		
		function fireAnalyticsTransaction(orderStatus) {
			ga('require', 'ecommerce');
			ga('ecommerce:addTransaction', {
				  'id': orderStatus.itineraryId,
				  'affiliation': 'Visit A City',
				  'revenue':  orderStatus.grossBooking
				});
			ga('ecommerce:addItem', {
				  'id':  orderStatus.itineraryId, 
				  'sku': orderStatus.productCode,
				  'name':   orderStatus.productTitle, 
				  'category': $scope.cityObj.name, 
				  'price': (orderStatus.grossBooking/orderStatus.grossPax), 
				  'quantity': orderStatus.grossPax
				});
			ga('ecommerce:send');
			
			fbq('track', 'Purchase', {
				'value': orderStatus.grossBooking,
				'currency':'USD'
			});
		}
		
		function isFormValid(doFireEvt) {
			var missingFields = "";
			$scope.expiryMonthInvalid = false;
			$scope.expiryYearInvalid = false;
			if ($scope.detailsForm.$error.required != null) {
				for (var i=0;i<$scope.detailsForm.$error.required.length;i++){
					var curField = $scope.detailsForm.$error.required[i];
					var fieldNiceName = $('[name="'+curField.$name+'"]').attr("niceName");
					$scope.errorsArr.push({'name':fieldNiceName});
					missingFields += fieldNiceName + ","
				}
			}
			
			if ($scope.detailsForm.$error.email != null) {
				for (var i=0;i<$scope.detailsForm.$error.email.length;i++){
					var curField = $scope.detailsForm.$error.email[i];
					var fieldNiceName = $('[name="'+curField.$name+'"]').attr("niceName");
					$scope.errorsArr.push({'name':fieldNiceName});
					missingFields += fieldNiceName + ","
				}
			}
			if ($scope.selectedCountry == null || $scope.selectedCountry.countryId == "--") {
				$scope.errorsArr.push({'name':'Country'});
				missingFields += "Country,"
			}
			if ($scope.ccPayDetail.selectedYear == "Select Year") {
				$scope.errorsArr.push({'name':'Credit Card Expiry Year'});
				missingFields += "Credit Card Expiry Year,"
				$scope.expiryYearInvalid = true;
			}
			if ($scope.ccPayDetail.selectedMonth == "Select Month") {
				$scope.errorsArr.push({'name':'Credit Card Expiry Month'});
				missingFields += "Credit Card Expiry Month,"
				$scope.expiryMonthInvalid = true;
			}
			if (missingFields.length > 0 && doFireEvt) {
				fireEvent("activity-booking-desktop","Book now missing info",missingFields);
			}
			
			if (!valid_credit_card($scope.ccPayDetail.ccnumber)) {
				$scope.errorsArr.push({'name':'Credit card number is invalid'});
				missingFields += "Credit Card Number,"
			}
			
			if (/[^0-9-\s]+/.test($scope.ccPayDetail.ccadditionalDigits)) {
				$scope.errorsArr.push({'name':'Card Security Number should contain only digits'});
				missingFields += "Card Security Number"
			}
			
			//$scope.ccPayDetail.ccadditionalDigits = $scope.ccPayDetail.ccadditionalDigits.replace(/ /g,'');
			/*var ccadditionalIsNum = /^\d+$/.test($scope.ccPayDetail.ccadditionalDigits);
			if (!ccadditionalIsNum) {
				$scope.errorsArr.push({'name':'Card Security Number should contain only digits'});
				missingFields += "Card Security Number"
			}*/
	
		}
		
		// takes the form field value and returns true on valid number
		function valid_credit_card(value) {
		  // accept only digits, dashes or spaces
			if (/[^0-9-\s]+/.test(value)) return false;

			// The Luhn Algorithm. It's so pretty.
			var nCheck = 0, nDigit = 0, bEven = false;
			value = value.replace(/\D/g, "");

			for (var n = value.length - 1; n >= 0; n--) {
				var cDigit = value.charAt(n),
					  nDigit = parseInt(cDigit, 10);

				if (bEven) {
					if ((nDigit *= 2) > 9) nDigit -= 9;
				}

				nCheck += nDigit;
				bEven = !bEven;
			}

			return (nCheck % 10) == 0;
		}
		
		function getIsDemo() {
        	return $scope.ccPayDetail.ccnumber == "4242424242424242";
        }
		
		function getFormattedCcPayDetails() {
         	var curCcPayDetail = angular.copy($scope.ccPayDetail);
         	curCcPayDetail.ccexpire = curCcPayDetail.selectedMonth + "/" + curCcPayDetail.selectedYear;
         	curCcPayDetail.ccname = curCcPayDetail.firstName + " " + curCcPayDetail.lastName; 
         	curCcPayDetail.ccaddressCountryId = $scope.selectedCountry.countryId;
         	curCcPayDetail.requireAddressFields = false;
         	delete curCcPayDetail.selectedMonth;
         	delete curCcPayDetail.selectedYear;
         	delete curCcPayDetail.firstName;
         	delete curCcPayDetail.lastName;
         	return curCcPayDetail;
         }
		 
		 function getFormattedTravellers(){
         	var allowedFields = ["bandId", "firstname", "surname"];
        	var travelersArray = angular.copy($scope.travelersArray);
        	
        	for (var i=0;i<travelersArray.length;i++) {
        		var cur = travelersArray[i];
        		
        		for (key in cur) {
        			if (allowedFields.indexOf(key) == -1) {
        				delete cur[key];
        			}	
        		}
        		
        		cur.leadTraveller = (i == 0);
        	}
        	
        	return travelersArray;
        }
		 
		
		function getLeadTraveler() {
			var leadTraveler = $scope.travelersArray[0];
        	var booker = {
    	        email: leadTraveler.email,
    	        homePhone: leadTraveler.areaCode + leadTraveler.number,
    	        firstname: leadTraveler.firstname,
    	        surname: leadTraveler.surname            			
        	}
        	
        	return booker;
        }
		
		function getHotelId() {
			var result = null;
			if ($scope.product.hotelPickup && $scope.hotelsArr.length > 0) {
				if ($scope.hotelTypeRadio.name == "selectFromList") {
					result = $scope.selectedHotel.id;
				} else if ($scope.hotelTypeRadio.name == "notListed") {
					result = "notListed";
				} else if ($scope.hotelTypeRadio.name == "liveLocally") {
					result = "local";
				} else if ($scope.hotelTypeRadio.name == "notBooked") {
					result = "notBooked";
				}
			}
			return result;
		}
		
		$scope.filterHotels = function(input) {
			var arr = $scope.hotelsArr;
			if (input != null) {
				arr = $filter('filter')($scope.hotelsArr,  function(value, index){
					var name = value.name.toLowerCase();
					return name.indexOf(input.toLowerCase()) >=0 && parseInt(value.id) > 0;
				});
			}
			return arr;
		}
		
		function getFormattedQuestionAnswers() {
        	var result = null;
        	
        	if ($scope.product.bookingQuestions != null && $scope.product.bookingQuestions.length > 0) {
        		var arr = [];
            	for (var i=0;i<$scope.product.bookingQuestions.length;i++) {
            		var curQuestion = $scope.product.bookingQuestions[i];
            		
            		var question = {
            			questionId : curQuestion.questionId,
            			answer: curQuestion.answer
            		}
            		
            		arr.push(question);
            	}
            	result = arr;
        	}
        	
        	return result;
        }
		
		$scope.filterGrade = function(grade){
			if ($scope.bookingDetails.itinerary.itemSummaries[0].tourGradeCode == null) {
				return true;
			} else if ($scope.bookingDetails.itinerary.itemSummaries[0].tourGradeCode == grade.gradeCode) {
				return true;
			}
			return false;
		}
		
		/**
		 * Handle Back
		 */
		$scope.$on('$routeChangeStart', function (event, next, current) {
			//if there is only one tour grade, skip the options page
			if (next.$$route.templateUrl.indexOf("activity_options") > 0 && event.currentScope.product.tourGrades.length == 1) {
				$location.search('data', null)
				$location.path('/en/'+$scope.cityObj.legalName+'/activity-details/activity/'+$routeParams.visitId+'/' + $routeParams.vendorId).replace();
			}
	    });
		
		/*$scope.$on('$routeChangeSuccess', function (event, current, prev) {
			if (prev != null) {
				$window._gaq.push(['_trackPageview', $location.path()]);
			}
		});*/

		$scope.getIsFieldError = function(name,isMatchFirst) {
			if ($scope.detailsForm.$error != null && $scope.detailsForm.$error.required != null) {
				for (var i=0;i<$scope.detailsForm.$error.required.length;i++){
					var curField = $scope.detailsForm.$error.required[i];
					if (curField.$name == name) {
						return true;
					}
				}
			}
			
			return false;
		}
		
	}]);
	
});	

define('ngApp/website/activity/activityOrderSummaryController',[mainPath,
        "app/extensions/core/paidActivityRedirect",
        "app/extensions/core/currency"],
    function(main,PaidActivityRedirect,CurrencyMgr) {
	var app = angular.module('visitacity');
	
		
	app.controller('activityOrderSummaryController',['$scope','$window','$rootScope','$http','$q','$filter','$routeParams','$timeout','$location','viatorService','activitiesService',
	                                            'GlobalDefsNew','GlobalDefs','GetCitiesService','$window','visitBackDropService','activityOrderService','$uibModal','emailConsentService',
	                                       function($scope,$window,$rootScope,$http, $q,$filter,$routeParams,$timeout,$location,viatorService,activitiesService,
	                                    		   GlobalDefsNew,GlobalDefs,GetCitiesService,$window,visitBackDropService,activityOrderService,$uibModal,emailConsentService) {
		
		fireEvent("activity-booking-desktop","page load activity summary")
		$scope.appRoot = GlobalDefs.getAppRoot();
		var callsArr = new Array();
		$scope.bookingSummary = GlobalDefsNew.getGlobal("bookingResult"+$routeParams.bookingId);
		$scope.cityLegal = $routeParams.city;
		
		$scope.validationActive = false;
		$scope.travelersArray = new Array();
		$scope.userCountText = null;
		$scope.specialRequirements = "";
		$scope.countryMap = new Array();
		$scope.allActivities = new Array();
		
		emailConsentService.consentRequired().then(function(data) {
			$scope.requireEmailConsent = data;
		});
		
		callsArr.push(GetCitiesService.async());
		callsArr.push(viatorService.getProductData($routeParams.vendorId));
		callsArr.push(activitiesService.init($routeParams.city));
		if ($scope.bookingSummary == null) {
			callsArr.push($http.get(appRoot + '/api/booking/getViatorBooking/' + $routeParams.bookingId));	
		}
		$q.all(callsArr).then(
				 function(results) {
					 $scope.product = results[1].data.data;
					 $scope.allActivities = activitiesService.allActivities;
					 $scope.cityObj = $filter('filter')(results[0], {legalName: $scope.cityLegal},true)[0];
					 if ($scope.bookingSummary == null) {
						 $scope.bookingSummary = results[3].data;
					 }
					 //$scope.bookingSummary.bookingOrder = angular.fromJson($scope.bookingSummary.bookingOrder);
					 $scope.bookingSummary.bookingResult = angular.fromJson($scope.bookingSummary.bookingResult);
					 $scope.bookingSummary = $scope.bookingSummary.bookingResult.data;
					 
					 //add user email
					 emailConsentService.updateUserConsent(!$scope.requireEmailConsent,$scope.bookingSummary.bookerEmail);
					 
					 //get the price breakdown
					 var paramsObj = {ageBands:$scope.bookingSummary.itemSummaries[0].travellerAgeBands};
					 var selectedDate = moment($scope.bookingSummary.itemSummaries[0].travelDate,'YYYY-MM-DD',true).toDate();
					 var priceMatrixCall = viatorService.getPricingMatrix($routeParams.vendorId,selectedDate.getFullYear(),selectedDate.getMonth()+1);
					 $q.all(new Array(priceMatrixCall)).then(
							 function(priceMatrixResult) {
								 
								 activityOrderService.init(priceMatrixResult[0].data,$scope.product,selectedDate,paramsObj);
								 $scope.product = activityOrderService.doCalculations();
							 },
							 function(e) {
								 console.log(e);
							 }
					 );
					 
					 $timeout(function() {
						 $rootScope.$broadcast("update_breadcrumb",null);
						 $rootScope.$broadcast("update_main_header_width","activityContainer");
 		   			}, 500);
					
					 visitBackDropService.clearBackdrop();
				 },
				 function(e) {
					 visitBackDropService.clearBackdrop();
					 fireEvent("activity-booking-desktop-error","failed to load viator api", e != null && e.data != null ? e.data : "");
					 $scope.modalInstance = $uibModal.open({
							templateUrl: appWebRoot + '/activity/modals/viator_error.html',
					        scope: $scope
				    });
				 }
		);
		
		
		$scope.openVoucher = function() {
			window.open($scope.bookingSummary.itemSummaries[0].voucherURL, "voucher info", "height=650,width=800");
			fireEvent("activity-booking-desktop","print voucher");
		}
		
		$scope.filterGrade = function(grade){
			if ($scope.bookingSummary.itemSummaries[0].tourGradeCode == null) {
				return true;
			} else if ($scope.bookingSummary.itemSummaries[0].tourGradeCode == grade.gradeCode) {
				return true;
			}
			return false;
		}
		/*
		$scope.$on('$routeChangeSuccess', function (event, current, prev) {
			if (prev != null) {
				$window._gaq.push(['_trackPageview', $location.path()]);
			}
		});*/
		
		
	}]);
	
});	

define('ngApp/website/activity/activityDateSelectorController',[mainPath,
        "app/extensions/core/paidActivityRedirect",
        "app/extensions/core/currency"],
    function(main,PaidActivityRedirect,CurrencyMgr) {
	var app = angular.module('visitacity');
	
		
	app.controller('activityDateSelectorController',['$scope','$location','$filter','$routeParams','$timeout','dateAvailabilityService','anchorSmoothScroll','visitBackDropService','exprService','visitDebugSvc',
	                                                 '$window',
	                                       function($scope,$location,$filter,$routeParams,$timeout,dateAvailabilityService,anchorSmoothScroll,visitBackDropService,exprService,visitDebugSvc,
	                                    		   $window) {
		
		$scope.MAX_TRAVELERS = 9;
		$scope.totalNumOfTravelers = 1;
		
		$scope.$on("$destroy",function (){
			travelerSelectisOpenWatch();//clear watch
			totalNumOfTravelersWatch();
			
	    });
		
		$scope.dateSelectorClass = "product-date-selector-original";
		var stickyScroll = false;
		exprService.getExprPromise().then(function() {
			exprService.fireExperimentEvent("date-selector-style",globExprVars["date-selector-style"]);
			$scope.dateSelectorClass = visitDebugSvc.getValue(globExprVars["date-selector-style"] != null && globExprVars["date-selector-style"] == 'product-date-selector-new',false,true) ? "product-date-selector-new" : "product-date-selector-original";
			stickyScroll = visitDebugSvc.getValue(globExprVars["sticky-scroll"] != null && globExprVars["sticky-scroll"] == 'on',"off",true);
		})
		
		$scope.$on('viator_error', function (event, error) {
			$scope.availabilityError = true;
			$scope.availabilityErrorContent = error;
			visitBackDropService.clearBackdrop();
		});
		
		
		/**
		 * Update availability when num of travelers changes
		 */
		var numOfTravelers;
		var travelerSelectisOpenWatch = $scope.$watch('travelerSelectisOpen', function() {
            if ($scope.travelerSelectisOpen) {
            	fireEvent("activity-booking-desktop","num of travelers open");
            	numOfTravelers = $scope.totalNumOfTravelers;
            } else if ($scope.travelerSelectisOpen == false) {
            	if (numOfTravelers != $scope.totalNumOfTravelers) {
            		fireEvent("activity-booking-desktop","num of travelers changed");
            		$scope.updateAvailabilityCheck();
            	}
            }
            dateAvailabilityService.totalNumOfTravelers = $scope.totalNumOfTravelers;
        });
		
		var totalNumOfTravelersWatch = $scope.$watch('dateAvailabilityService.totalNumOfTravelers', function(newVal,oldVal) {
            if (newVal != oldVal) {
            	$scope.totalNumOfTravelers = dateAvailabilityService.totalNumOfTravelers;
            }
        });
		
		//when product loads, update the number of travelers once
		var productWatch = $scope.$watch('product', function() {
           if ($scope.product != null) {
        	   $scope.updateTotalNumOfTravelers();
        	   if ($scope.product.maxTravellerCount != null && $scope.product.maxTravellerCount > 0) {
        		   $scope.MAX_TRAVELERS = $scope.product.maxTravellerCount;
        	   }
        	   
        	   $scope.checkAvailability(dateAvailabilityService.getSelectedDate(),"page load",false);
        	   productWatch(); //un watch
           }
        });
		
		$scope.closeTravelersBox = function() {
			//console.log("$scope.travelerSelectisOpen:" + $scope.travelerSelectisOpen);
			$scope.travelerSelectisOpen = false;
			//console.log("$scope.travelerSelectisOpen:" + $scope.travelerSelectisOpen);
		}
    	
    	$scope.updateAvailabilityCheck = function(type) {
    		//if ($scope.checkAvailabilityButton != 'Check Availability') {
    		//if ($scope.checkAvailabilityClicked) {
    			$scope.checkAvailability(dateAvailabilityService.getSelectedDate(),"update date",$scope.checkAvailabilityClicked);
    			fireEvent("activity-booking-desktop","update availability",type);
    		//}
		}
    	
    	$scope.removeTraveler = function(index) {
    		if ($scope.product.ageBands[index].count > 0) {
    			$scope.product.ageBands[index].count -= 1;
    			$scope.updateTotalNumOfTravelers();
    		}
    	}
    	
    	$scope.addTraveler = function(index) {
    		if ($scope.totalNumOfTravelers < $scope.MAX_TRAVELERS) {
    			$scope.product.ageBands[index].count += 1;
    			$scope.updateTotalNumOfTravelers();
    		}
    	}
    	
    	$scope.updateTotalNumOfTravelers = function() {
    		if ($scope.product != null && $scope.product.ageBands != null) {
    			$scope.totalNumOfTravelers = 0;
        		for (var i=0;i<$scope.product.ageBands.length;i++) {
        			$scope.totalNumOfTravelers += parseInt($scope.product.ageBands[i].count);
        		}
    		}
    	}
    	
    	$scope.checkAvailability = function(selectedDate,from,active) {
    		if (active) {
    			if (stickyScroll) {
    				window.angular.element($window).off('scroll'); //stop the sticky scroll
        			$("#activityDateTop")
        			.css("position", "relative")
        			.css("top", "")
            		.css("left", "")
            		.css("transform", "")
            		.css("margin-top", "15px");
        			anchorSmoothScroll.scrollTo("activityDateTop",null,0);
    			}
    			fireEvent("activity-booking-desktop","check availability click");
    		}
    		
    		if (from=="bottom more info") {
				anchorSmoothScroll.scrollTo("activityDateTop",null,0);
				//$("#caoverview_top").trigger("click");
				$timeout(function(){
					angular.element('#caoverview_top').triggerHandler('click');
				});
				
				return;
			}
    		
    		$scope.availabilityError = false;
    		if (active) {
	    		$scope.checkAvailabilityClicked = true;
				var totalCount = 0;
				$scope.setMaxAvailabilityError($scope.availabilityError);
				var selectedAgeBandArr = new Array();
				var missingAdults = true;
				/*if ($scope.product.ageBands[0].count == 0) {
					$scope.availabilityError = true;
					$scope.availabilityErrorContent = "At least one Adult needs to be selected for this tour.";
					fireEvent("activity-booking-desktop-error","0 adults selected",from);
				} else {*/
				for (var i=0;i<$scope.product.ageBands.length;i++) {
					totalCount += parseInt($scope.product.ageBands[i].count);
					if ($scope.product.ageBands[i].count != 0) {
						if ($scope.product.ageBands[i].adult || $scope.product.ageBands[i].treatAsAdult) {
							missingAdults = false;
						}
						var bandObj = new Object();
						bandObj.count = $scope.product.ageBands[i].count;
						bandObj.bandId = $scope.product.ageBands[i].bandId;
						selectedAgeBandArr.push(bandObj);
					}
				}
				if (missingAdults) {
					$scope.availabilityError = true;
					$scope.availabilityErrorContent = "At least one Adult needs to be selected for this tour.";
					fireEvent("activity-booking-desktop-error","0 adults selected",from);
				} else if (totalCount > $scope.MAX_TRAVELERS) {
					$scope.availabilityError = true;
					$scope.availabilityErrorContent = "The total number of travelers cannot exceed 9"; 
					fireEvent("activity-booking-desktop-error","exceed max travelers",from);
					$scope.setMaxAvailabilityError($scope.availabilityError);
				}
    		}
			
			if (!$scope.availabilityError) {
				var jsonObj = new Object();
				jsonObj.ageBands = selectedAgeBandArr;
				jsonObj.selectedDate = $filter('date')(selectedDate, "yyyy-MM-dd");
				$scope.init(jsonObj,true,active);
			} 
		}
    	
		}]);
	
});	

define('ngApp/website/attractions/attractionsController',["ngApp/website/main/main",
        "app/core/mapServices"],
    function(main,MapServices) {
	var app = angular.module('visitacity');
	
	
	app.filter('attractionUsagePercent', function(){
	   	 return function(usedBy,total) {
	   		
	   		var res = null;
	   		if (usedBy != null && total != null && total > 0) {
	   			
	   			res = Math.ceil(usedBy/total * 100) + "%";
	   		}
	   			
	   		return res;
	   	 }
	}); 

	
	
	app.filter('myLimit', function(){
	   	 return function(paArr, limit, index, passLocation) {
	   		if (paArr.length <= 3) {
	   			//handle empty array
	   			return new Array();
	   		}
	   		if (passLocation && passLocation < index) {
	   			index -=6; //if the pass was added, we need to start after 6
	   		} else {
	   			index -=3; //since the first index is after 3 attractions, start pa from 0;
	   		}
	   		
	   		//In case we don't have enough paid activities, start from the top
	   		while ((index+limit) >= paArr.length) {
	   			index = index-paArr.length;
	   			if (index < 0) {
	   				index = 0;
	   			}
	   		}
	   		var res = new Array();
	   		for (var i=index;i<index+limit;i++) {
	   			res.push(paArr[i]);
	   		}
	   		return res;
	   	 }
	}); 

	
	
	app.controller('attractionsController',['$scope','$rootScope','$http','$q','$filter','$routeParams','$timeout','$location','$window','itineraryService',
	                                        'CitySearch', 'GlobalDefs', 'GetCitiesService', 'MyPlansService','scrollKeeper','GeneralModalService','whatsNearByService',
	                                        'activitiesService','CityService','blockUI','dataWearhouseService','GlobalDefsNew','redirectPaScv','itinerarySitesService',
	                                        'attractionsService','lastModService','emailConsentService',
	                                       function($scope,$rootScope,$http, $q,$filter,$routeParams,$timeout,$location,$window,itineraryService,
	                                    		   CitySearch, GlobalDefs, GetCitiesService, MyPlansService,scrollKeeper,GeneralModalService,whatsNearByService,
	                                    		   activitiesService,CityService,blockUI,dataWearhouseService,GlobalDefsNew,redirectPaScv,itinerarySitesService,
	                                    		   attractionsService,lastModService,emailConsentService) {
		
		
		emailConsentService.consentRequired().then(function(data) {
			$scope.requireEmailConsent = data;
		});
		var to1,to2,to3,to4,to5,to6,to7,to8,to9,to10;
		$scope.retainedScroll = scrollKeeper.getScroll($location.path());
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.redirectPaSvc = redirectPaScv;
		$scope.hide_my_plans = "none";
		$scope.ieVersion = ieVersion;
		$scope.cityService = CityService;
		$scope.showNearBy = false;
		var cityLegal = "";
		if ($routeParams.city) {
			cityLegal = $routeParams.city;
		}
		$scope.cityObj = null;
		//$scope.maxDays = null;
		$scope.siteTypeArr = new Array();
		$scope.attractionsPaArr = new Array();
		$scope.attractionsArr = new Array();
		$scope.attractionsArrOrig = new Array();
		$scope.selectedCategory = null;
		$scope.noResults = false;
		$scope.orderField = ["noPerUsers"];
		$scope.sitesNearby = new Array();
		$scope.searchTxt = null;
		if ($routeParams.attractionSearchByName != null && $routeParams.attractionSearchByName.length > 0) {
			$scope.searchTxt = $routeParams.attractionSearchByName;
		}
		$scope.searchRunning = true;
		$scope.loadMoreRunning = false;
		$scope.filterRes = new Array();
		$scope.catHover;
		$scope.doneLoadingAttractions = false;
		$scope.limitNum = null;
		//$scope.startLimit = isTablet() ? 15 : 30;
		$scope.startLimit = 15;
		//$scope.prevSearch = null;
		$scope.itineraryPage = false;
		//pass
		$scope.isPassActive = null;
		$scope.passAddPost1 = null;
		$scope.passAddPost2 = null;
		$scope.passAddPost3 = null;
		$scope.passAddPost4 = null;
		$scope.passAddPre = null;
		$scope.passPrice = null;
		$scope.passName = null;
		$scope.passLocation == null;
		$scope.lang = $routeParams.lang;
		if ($routeParams.lang != null) {
			createCookie("activeLang",$scope.lang,365);
		} else {
			$scope.lang = getActiveLang(true);
		}
		
		
		//var START_LIMIT_ADD = isTablet() ? 15 : 30;
		var START_LIMIT_ADD = 15;
		if (ieVersion != null) {
			START_LIMIT_ADD = 5;
			$scope.startLimit = 10;
		}
		
		$scope.selectedAttractionNearby = null;
		
		if ($location.url().indexOf("itinerar") >=0) {
			//$scope.showOnlyMissingAttractions = true;
			$scope.orderField = ["isInItinerary","noPerUsers"];
			$scope.itineraryPage = true;
		}
		
		
		var scrollTopLocation = null;
		if ($routeParams.st != null) {
			scrollTopLocation = $routeParams.st;
			$location.search('st',  null);
		}
		if ($routeParams.lim != null) {
			$scope.startLimit  = $routeParams.lim;
			$location.search('lim',  null);
		}
		
		$scope.newgen = $location.url().indexOf("itinerar") >= 0;

		var allowLinkChange = false;
		var cityWatch = $scope.$watch('cityService.getCurCity()', function(newVal, oldVal) {
			if ((newVal != null || $routeParams.city != null) && $scope.attractionsArr.length == 0) {
				if ($routeParams.city != null) {
					cityLegal = $routeParams.city;
				} else if (newVal != null) {
					cityLegal = CityService.getCurCity().legalName;
				}
				if ($routeParams.type == null) {
					$routeParams.type = "all";
				}
				cityWatch(); //cancel this watch
				prepareLastMod();
				
			}	
    	});
		
		function prepareLastMod() {
			lastModService.setLastMod(cityLegal).then(
		   			 function(results) {
		   				loadAttractionsData();
		   			 }, function(errors) {
		   			 
		   			 }
		   	);
		}

		function loadAttractionsData() {
			var ajaxLoadTiming = new TrackTiming("PageCoreLoadNew", "ajax_data_time"); 	
			var callA = attractionsService.init(cityLegal);
			var callB = activitiesService.init(cityLegal);
			$q.all(new Array(callA,callB)).then(
		   			 function(results) {
		   				ajaxLoadTiming.send();
		   				$scope.cityObj = attractionsService.allAttractionsData.city;
		   				if ($scope.cityObj.destinationOverrideId == null) {
		   					$scope.cityObj.region = null;
		   				}
		   				//$scope.maxDays = results[0].data.cityMaxItrDays;
		   				$scope.attractionsArr = attractionsService.allAttractionsData.lstSites;
		   				if ($location.url().indexOf("attraction-by-type") >=0) {
		   					//set site list for single attractions
		   					itinerarySitesService.setSites($scope.attractionsArr);
		   				}
			    		
		   				CityService.setCurCity($scope.cityObj); 
		   				//Filter out site types with no sites
		   				$scope.siteTypeArr = $filter('filter')(attractionsService.allAttractionsData.lstSiteTypes,function(value, index){ 
		   					var found = false;
		   					angular.forEach($scope.attractionsArr, function (attr) {
		   						for (var i=0;i<attr.siteTypeList.length;i++) {
		   							if (attr.siteTypeList[i].id == value.id) {
		   								found = true;
		   								break;
		   							}
		   						}
		   						
		   					});
		   					return found;
		   				});
		   				
		   				if ($routeParams.attractionsCategory != null) {
		   					$scope.selectedCategory = $filter('filter')($scope.siteTypeArr, {legalName: $routeParams.attractionsCategory}, true)[0];
		   				} else {
		   					$scope.selectedCategory = $filter('filter')($scope.siteTypeArr, {legalName: $routeParams.type,hasMenuItem: true}, true)[0];
		   				}
		   				
		   				if ($scope.selectedCategory == null) {
		   					$scope.selectedCategory = $filter('filter')($scope.siteTypeArr, {hasMenuItem: true}, true)[0];
		   				}
		   				
		   				$scope.isPassActive = attractionsService.allAttractionsData.isPassActive;
		   				$scope.passAddPost1 = attractionsService.allAttractionsData.passAddPost1;
		   				$scope.passAddPost2 = attractionsService.allAttractionsData.passAddPost2;
		   				$scope.passAddPost3 = attractionsService.allAttractionsData.passAddPost3;
		   				$scope.passAddPost4 = attractionsService.allAttractionsData.passAddPost4;
		   				$scope.passAddPre = attractionsService.allAttractionsData.passAddPre;
		   				$scope.passPriceVal = attractionsService.allAttractionsData.passPrice;
		   				$scope.passName = attractionsService.allAttractionsData.passName;;
		   				
		   				if ($scope.lang != "en") {
		   					$scope.isPassActive = "0";
		   				}
		   				
		   				//Add the address, phone etc to the object
		   				angular.forEach($scope.attractionsArr, function (attraction) {
		   					if (itineraryService.getItineraryDataMgr()) {
		   						attraction.isInItinerary = itineraryService.getItineraryDataMgr().isAttractionInItinerary(attraction.id);
		   					}
		   					
		   					attraction.address = $filter('getSiteInfo')(attraction.contactInformation,"Address");
							attraction.phoneNum = $filter('getSiteInfo')(attraction.contactInformation,"Phone Number"); 
							attraction.admission = $filter('getSiteInfo')(attraction.contactInformation,"Admission");
							attraction.openingHours = $filter('getSiteInfo')(attraction.contactInformation,"Opening Hours");
							if ((attraction.openingHours == null || attraction.openingHours.length <=0) && attraction.openingHoursText != null && attraction.openingHoursText.length > 0) {
								attraction.openingHours = attraction.openingHoursText;
							}
							
							if (attraction.mainPaidActivity != null && $scope.lang == "en") {
								attraction.topAd = attraction.mainPaidActivity;
							} else {
								var topAdArr = activitiesService.getAttractionAdForText(attraction);
								attraction.topAd = topAdArr[0]; 
							}
							if ($scope.lang != "en") {
			   					//don't show text ads in other languages
			   					attraction.topAd = null;
			   				}
							
							attraction.userItinerariesCountStr = $filter('number')(attraction.userItinerariesCount,0);

		   				});
		   				$scope.attractionsArrOrig  = JSON.parse(JSON.stringify($scope.attractionsArr));
		   				//$scope.attractionsPaArr = $filter('orderBy')(results[0].data.lstPaidActivity, 'reviewersNum', true);
		   				$scope.attractionsPaArr = activitiesService.allActivities;
	   				
		   				
		   				if ($scope.isPassActive == "1") {
		   					
		   					$scope.passPrice = attractionsService.allAttractionsData.paPass;

		   					//pass should appear first or second
		   					$scope.passLocation = Math.round(Math.random()) * 3 + 3;
		   				}
		   				
		   				//exclude transfer and pass activities (only if there are enough activities)
		   				if ($scope.attractionsPaArr.length > 20) {
		   					$scope.attractionsPaArr = $filter('filter')($scope.attractionsPaArr,function(value, index){ return value.title.toLowerCase().indexOf("transfer") < 0});	
		   				}
		   				$scope.attractionsPaArr = $filter('filter')($scope.attractionsPaArr,function(value, index){ return value.vendorProductId != '2036PARIS'
		   																													&& value.vendorProductId != '3138LONDON'
		   																													&& value.vendorProductId != '2464AMSCARD'
		   																													&& value.vendorProductId != '2512BCARD'
		   																													&& value.vendorProductId != '6040ROMCARD'
		   																													&& value.vendorProductId != '2640SFO_TR'
		   																													&& value.vendorProductId != '3787PP'
		   																													&& value.vendorProductId != '2032DUB_PASS'});
		   						//, {vendorProductId: '!2036PARIS',vendorProductId: '!KKKKKK'}, true);
		   				
		   				//Sort the Paid activities by groups of 3
		   				var sortedArr = new Array();
		   				for (var i=0;i<$scope.attractionsPaArr.length+3;i+=3) {
		   					var tmpArr = new Array($scope.attractionsPaArr[i],$scope.attractionsPaArr[(i+1)],$scope.attractionsPaArr[(i+2)]);
		   					sortedArr = sortedArr.concat(random_array(tmpArr));
		   				}
		   				$scope.attractionsPaArr = $filter('filter')(sortedArr,function(value, index){
		   													return value != null
		   												});
		   				
	
		   				//Fix Category nice names
		   				if ($scope.siteTypeArr != null && $scope.siteTypeArr.length > 2) {
		   					var cat = $filter('filter')($scope.siteTypeArr, {legalName: 'all-attractions'}, true)[0];
			   				cat.name2 = $filter('translateFilter')("All **city** Attractions","**city**",$scope.cityObj.name);
			   				cat = $filter('filter')($scope.siteTypeArr, {legalName: 'top-attractions'}, true)[0];
			   				if (cat != null) {
			   					cat.name2 = $filter('translateFilter')("Top **city** Attractions","**city**",$scope.cityObj.name);
			   				}
			   				
			   				cat = $filter('filter')($scope.siteTypeArr, {legalName: 'free-attractions'}, true);
			   				if (cat.length > 0) {
			   					cat[0].name2 = $filter('translateFilter')("Free **city** Attractions","**city**",$scope.cityObj.name);
			   				}
		   				}
		   				
		   				
		   				$scope.transitMethod = attractionsService.allAttractionsData.long_distance_method == null ? "walking" : attractionsService.allAttractionsData.long_distance_method;
		   				GlobalDefsNew.setGlobal("longDistanceMethod",$scope.transitMethod);
		   				
		   				if ($location.url().indexOf("attraction-by-type") >=0) {
		   					var bc = new Array();
		   	  				bc.push({name: $scope.selectedCategory.name});
		   	   				$rootScope.$broadcast("update_breadcrumb",bc, attractionsService.allAttractionsData.city, $routeParams.lang);

		   	   				$window.document.title = "Things To Do in  " + $scope.cityObj.name + " - " + $scope.attractionsArrOrig.length  + " Attractions | Visit A City";
		   				}
	
		   				$scope.fixResolutions();
		   				
		   				$scope.doneLoadingAttractions = true;
		   				
		   				//Fix resolution on windows resize
		   				$(window).on("resize.doResize", function (){
		   			        $scope.$apply(function(){
		   			        	$scope.fixResolutions();
		   			        });
		   			    });
		   			    //Force scroll so it won't appear and disappear when categories are changed
		   			    document.body.style.overflow = 'scroll';
		   				
		   			    if (scrollTopLocation && ($scope.ieVersion == null || $scope.startLimit > 15)) {
		   			    	//$scope.startLimit = 1500;
			   			     to1 = $timeout(function() {
			   			    	$window.scrollTo(0, scrollTopLocation);
			   			    	if (scrollTopLocation == $(window).scrollTop()) {
			   			    		scrollTopLocation = null;
			   			    	}
		                     }, 1500);
		   			 	}
		   			    langAlignments();
		   			    individualPageLoadTiming.send();
		   			    if (GlobalDefsNew.getGlobal("tmpNearBy") != null) {
		   			    	//if we need to run what's nearby
		   			    	to2 = $timeout(function() {
		   			    		$scope.showNearBy = true;
		   			    		//showOnlyMissingAttractionsWatch();
			   					selectedCategoryWatch();
			   					blockUI.start("Searching for nearby attractions...");
			   			    	whatsNearBy(GlobalDefsNew.getGlobal("tmpNearBy"));
							},200);
		   			    	
		   			    }
		   			 $rootScope.$broadcast("attractions_controller_loaded");
	   			    
	   			 }, function(errors) {
	   			 
	   			 }
		   	);
		
		}
		
		function langAlignments() {
			if ($scope.lang == "fr" || $scope.lang == "es") {
				$("#downloadActionButtons").css('font-size','12px');
			}
			
		}
		
		
		
		$scope.changeTab = function() {
			GlobalDefsNew.setGlobal("tmpNearBy", null);
			$rootScope.$broadcast("itinerary_change_tab","itinerary");
		}
		
		/**
		 * When attraction is added or removed to itinerary we need to refresh the list
		 * to show/hide whatever is already in the itinerary
		 */
		$scope.$on('refreshItineraryAttractions', function (event, attraction, isInItinerary) {
			if ($scope.filterRes == null) {
				//not ready
				return;
			}
			var findId = attraction.id;
			if (attraction.site != null) {
				findId = attraction.site.id;
			}
			var attr = $filter('filter')($scope.filterRes,{id:findId},true)[0];
			attr.isInItinerary = isInItinerary;
		});
		
		
		$scope.$watch(function(){
			return itineraryService.newAddedAttraction;
		}, function(newVal, oldVal){
			if (newVal != oldVal && newVal != null) {
				var attraction = itineraryService.getNewAddedAttraction();
				var findId = attraction.id;
				if (attraction.site != null) {
					findId = attraction.site.id;
				}
				var attr = $filter('filter')($scope.filterRes,{id:findId},true)[0];
				attr.isInItinerary = attraction.isInItinerary;
			}
	    });
		
		var showOnlyMissingAttractionsWatch = $scope.$watch('showOnlyMissingAttractions', function(newVal, oldVal) {
			if (newVal != oldVal) {
				$scope.searchRunning = true;
				$timeout(function() {
					$scope.runCatFilter();
				},100);
			}
	    });
		
		//Random array
		function random_array(raw_array ) {
		    var i, j, tmp

		    for ( i = raw_array.length - 1; i > 0; i-- ) { // swap elements in array randomly using Fisher-Yates (aka Knuth) Shuffle
		        j = Math.floor( Math.random() * (i + 1) );
		        tmp = raw_array[i];
		        raw_array[i] = raw_array[j];
		        raw_array[j] = tmp;
		    }
		    return raw_array;
		}
		
		
		//Fix the resolution to show number of columns and categories based on available in city
		$scope.fixResolutions = function() {
			
			var numOfCats = $filter('filter')($scope.siteTypeArr, {hasMenuItem: true}, true).length;
			var limit = 8;
			var screenWidth = $window.innerWidth;
			if (screenWidth <= 770) {
				if (numOfCats >=6) {
					limit = 6;
					$scope.colClass = "col-sm-4";
				} else if (numOfCats >=4) {
					limit = 4;
					$scope.colClass = "col-sm-6";
				} else {
					limit = 3;
					$scope.colClass = "col-sm-4";
				}
			} else {
				if (numOfCats >= 8) {
					$scope.colClass = "col-md-3";
	   			} else if (numOfCats  >= 6) {
	   				$scope.colClass = "col-md-4";
	   				limit = 6;
		   		} else if (numOfCats >= 4) {
	   				$scope.colClass = "col-md-3";
	   				limit = 4;
	   			} else {
	   				$scope.colClass = "col-md-4";
	   				limit = 3;
	   			}
			}
			$scope.limitNum = limit;
			//$scope.siteTypeArr = $filter('limitTo')($scope.siteTypeArr, limit);
		}
		
		/**
		 * Custom order by:
		 * Return All first, Top second and then sort by name
		 */
		$scope.myOrderBy = function(attr) {
			if (attr.legalName == "all-attractions") {
				return -2;
			} else if (attr.legalName == "top-attractions") {
				return -1;
			}
			return attr.name;
		}
		
		$scope.selectCat = function(cat) {
			$scope.searchTxt = "";
			$scope.startLimit = 15;
			maxScroll = 0;
			lastFixPos = 0
			prevDiff = 0;
			$scope.noResults = false;
			$scope.selectedCategory = cat;
			fireEvent("Attractions", "Change sub category", cat.name + " (" + $scope.cityObj.name + ")" );
		}
		
		var selectedCategoryWatch = $scope.$watch('selectedCategory', function(newVal, oldVal) {
			if ($scope.searchTxt != null && $scope.searchTxt != "") {
				//When loading with search text do the search
				$scope.doSearchTxt($scope.searchTxt);
				return;
			}
			if (newVal != oldVal) {
				if (allowLinkChange) {
					//Don't change the url when the page loads
					$location.search('attractionsCategory', $scope.selectedCategory.legalName);	
					$location.replace();
				}
				if ($location.url().indexOf("itinerar") >=0) {
					if (!$("#divTopTabIndicator").isOnScreen()) {
						$("html, body").animate({
							scrollTop:  $("#divTopTabIndicator").offset().top -10
						}, 1000);
					}
					if (oldVal != null) {
						//don't fire when changing the tab
						fireEvent("Itinerary-2.0", "Attractions change category", newVal.name + " (" + $scope.cityObj.name + ")" );
					}
					
				}
				
				allowLinkChange = true;
				$scope.searchRunning = true;
				
				to4 = $timeout(function() {
					$scope.runCatFilter(newVal);
				},300);
			}	
    	});
		
		 var txtSearchWatch = $scope.$watch('searchTxt', function (txtSearch) {
			$scope.noResults = false;
			if (txtSearch == null) {
				return;
			}
			maxScroll = 0;
			lastFixPos = 0;
			prevDiff = 0;
		    if (txtSearch != null && txtSearch.length > 0) {
		    	$location.search('attractionsCategory', null);	
		    	if ($location.url().indexOf("itinerar") >=0) {
		    		if (!$("#divTopTabIndicator").isOnScreen()) {
						$("html, body").animate({
							scrollTop:  $("#divTopTabIndicator").offset().top -10
						}, 1000);
					}
					fireEvent("Itinerary-2.0", "Attractions Search by name", txtSearch);
				} else {
					fireEvent("Attractions", "Search by name", txtSearch);
				}
		    	
		    	$scope.searchRunning = true;
				to5 = $timeout(function() {
					$scope.selectedCategory = $filter('filter')($scope.siteTypeArr, {hasMenuItem: true}, true)[0];
					$scope.doSearchTxt(txtSearch);
				},500);
		    } else {
		    	if (txtSearch != null) {
		    		$scope.searchRunning = true;
		    	}
		    	$location.search('attractionSearchByName', null);
		    	to6 = $timeout(function() {
		    		
		    		$scope.runCatFilter();
				},500);
		    	
		    }
		 })
		
		 $scope.navigateTo = function(url) {
			 $location.search('st',  $(window).scrollTop());
			 $location.search('lim',  $scope.startLimit);
			 //window.location = url;
			 $location.path(url);
			 if(!$scope.$$phase) $scope.$apply();
			 
		 }
		 
		$scope.$on('nearBySitesAttractionsController', function (event, args) {
			//showOnlyMissingAttractionsWatch();
			selectedCategoryWatch();
			blockUI.start("Searching for nearby attractions...");
			//anchorSmoothScroll.scrollTo("tabsMain");
			if ($scope.attractionsArr.length ==0) {
				//in case attractions are not loaded yet, save the args and run when controller is ready
				GlobalDefsNew.setGlobal("tmpNearBy",args);
			} else {
				//save the nearby site in case we go to a different page and come back
				GlobalDefsNew.setGlobal("tmpNearBy",args);
				whatsNearBy(args);
			}
			 
	   });
			
			
		function whatsNearBy(args) {
			to7 = $timeout(function() {
				$scope.showNearBy = true;
				var newarbyList = new Array();
				var argsObj = angular.fromJson(args);
				var siteId = argsObj.id;
				if (argsObj.site) {
					siteId = argsObj.site.id;
				}
				$scope.selectedAttractionNearby = $filter('filter')($scope.attractionsArr,{id:siteId},true)[0];
				var callA = whatsNearByService.getData($scope.selectedAttractionNearby.id);
				$q.all(new Array(callA)).then(
  						function(results) {
  							for (var i=0;i<results[0].length;i++) {
	   							var curSite = $filter('filter')($scope.attractionsArr, {id: results[0][i].destinationSiteId}, true)[0];
	   							if (curSite != null) {
	   								curSite.walkingTime = results[0][i].walkingTime;
		   							curSite.transitTime = results[0][i].transitTime;
		   							curSite.distanceMeters = results[0][i].distanceMeters;
		   							newarbyList.push(curSite);
	   							}
	   							
	   						}
  							
  							blockUI.reset();
  							$scope.searchRunning = false;
  							
  							var transitSort = "walkingTime";
  							if ($scope.transitMethod == "drive") {
  								transitSort = "transitTime";
  							}
  							
  							$scope.orderField =  ['isInItinerary',transitSort];
  							$scope.filterRes = $filter('orderBy')(newarbyList,$scope.orderField);
  							$scope.sitesNearby = $scope.filterRes;
  				    		//$scope.$apply();
  				    		
  				    		$scope.attractionsArrOrig  = JSON.parse(JSON.stringify(newarbyList));
  				    		//register watch
  				    		selectedCategoryWatch = $scope.$watch('selectedCategory', function(newVal, oldVal) {
  				    			if ($scope.searchTxt != null && $scope.searchTxt != "") {
  				    				//When loading with search text do the search
  				    				$scope.doSearchTxt($scope.searchTxt);
  				    				return;
  				    			}
  				    			if (newVal != oldVal) {
  				    				if (allowLinkChange) {
  				    					//Don't change the url when the page loads
  				    					$location.search('attractionsCategory', $scope.selectedCategory.legalName);
  				    					$location.replace();
  				    				}
  				    				allowLinkChange = true;
  				    				$scope.searchRunning = true;
  				    				
  				    				to8 = $timeout(function() {
  				    					$scope.runCatFilter(newVal);
  				    				},300);
  				    			}	
  				        	});
  						}
  				);
				
				/*return;
				//$scope.showOnlyMissingAttractions = false;
				var googleTransitMode = null;
				if (transitMethod == "drive") {
					googleTransitMode = google.maps.TravelMode.DRIVING; 
				}
				var mapSvc = new MapServices(googleTransitMode);
				var argsObj = angular.fromJson(args);
				var siteId = argsObj.id;
				if (argsObj.site) {
					siteId = argsObj.site.id;
				}
				$scope.selectedAttractionNearby = $filter('filter')($scope.attractionsArr,{id:siteId},true)[0];
				
				var siteLat = $scope.selectedAttractionNearby.latitude;
		    	var siteLng = $scope.selectedAttractionNearby.longitude;
		    	$scope.filterRes = new Array();
		    	var newarbyList;
		    	if ($scope.showOnlyMissingAttractions) {
			    	angular.forEach($scope.attractionsArr, function (attr) {
						var doAdd = true;
						if (attr.isInItinerary != null && attr.isInItinerary && $scope.showOnlyMissingAttractions) {
							doAdd = false;
						}
						if (doAdd) {
							$scope.filterRes.push(attr);
						}
				
					});
			    	//newarbyList = angular.copy($scope.filterRes);
			    	newarbyList  = JSON.parse(JSON.stringify($scope.filterRes));
		    	} else {
		    		//newarbyList = angular.copy($scope.attractionsArr);
		    		newarbyList  = JSON.parse(JSON.stringify($scope.attractionsArr));
		    	}
		    	newarbyList  = JSON.parse(JSON.stringify($scope.attractionsArr));
		    	newarbyList = $filter('filter')(newarbyList, function(value, index){
					if (value.id !=  $scope.selectedAttractionNearby.id) {
						return true;
					}
				});
		    	
		    	newarbyList.sort(function(a, b) {
		    		var diffal = mapSvc.calcDistanceBetween(siteLat, siteLng, a.latitude, a.longitude);
		    		var diffB = mapSvc.calcDistanceBetween(siteLat, siteLng, b.latitude, b.longitude);
		    		
		    		// sort by distance, grace of 200 meters
		    		//if (Math.abs( diffal - diffB) > 200) {
		    			return diffal - diffB;	
		    		//}
		    		
	    		
		    		//return  b.noPerUsers - a.noPerUsers;          		
		    	});
		    	
		    	var distanceArr = new Array();
		    	var max = 25;
		    	if (newarbyList.length < max) {
		    		max = newarbyList.length;
		    	}
		    	for (var i=0;i<max;i++) {
		    		distanceArr.push(new google.maps.LatLng(newarbyList[i].longitude, newarbyList[i].latitude));
		    	}
		    	
		    	//newarbyList = newarbyList.slice(0,25);
		    	
		    	mapSvc.getDistanceMatrix(new Array(new google.maps.LatLng($scope.selectedAttractionNearby.longitude, $scope.selectedAttractionNearby.latitude)), distanceArr).then(function(response) {
		    		for (var i=0;i<newarbyList.length;i++) {
		    			if (response.rows[0].elements[i]) {
		    				//sites comming from Google
		    				newarbyList[i].duration = response.rows[0].elements[i].duration
			    			newarbyList[i].distance = response.rows[0].elements[i].distance
		    			} else {
		    				//estimate on the other sites
		    				var obj = new Object();
		    				obj.value = mapSvc.calcDistanceBetween(siteLat, siteLng, newarbyList[i].latitude, newarbyList[i].longitude);
		    				var distanceVal = getLocalDistanceMeasure(obj.value);
			   	   			str = distanceVal + " " + getLocalDistanceUnit();
		    				obj.text = str.toLowerCase();
		    				newarbyList[i].distance = obj;
		    				obj = new Object();
		    				obj.value = newarbyList[i].distance.value/1.3; //time in seconds
		    				obj.text = obj.value;
		    				newarbyList[i].duration = obj;
		    			}
		    			
		    			
		    			if (transitMethod == "drive") {
		    				var transitTime = Math.round((newarbyList[i].duration.value / 60));
			    			newarbyList[i].duration.transitCarTxt = transitTime + " mins";
		    			} else if (newarbyList[i].duration && newarbyList[i].duration.value > 1800) { 
		    				var transitTime = Math.round((newarbyList[i].duration.value / 1000)) + 15;
			    			newarbyList[i].duration.transitTxt = transitTime + " mins";
		    			}
		    		}
		    		newarbyList.sort(function(a, b) {
		    			if (a.duration && b.duration) {
		    				return  a.duration.value - b.duration.value;
		    			} else {
		    				return 0;
		    			}
			    	});
		    		
		    		
		    		blockUI.reset();
					$scope.searchRunning = false;
					$scope.orderField =  ['isInItinerary','duration.value'];
					$scope.filterRes = $filter('orderBy')(newarbyList,$scope.orderField);
		    		$scope.$apply();
		    		
		    		$scope.attractionsArrOrig  = JSON.parse(JSON.stringify(newarbyList));
		    		//register watch
		    		selectedCategoryWatch = $scope.$watch('selectedCategory', function(newVal, oldVal) {
		    			if ($scope.searchTxt != null && $scope.searchTxt != "") {
		    				//When loading with search text do the search
		    				$scope.doSearchTxt($scope.searchTxt);
		    				return;
		    			}
		    			if (newVal != oldVal) {
		    				if (allowLinkChange) {
		    					//Don't change the url when the page loads
		    					$location.search('attractionsCategory', $scope.selectedCategory.legalName);
		    					$location.replace();
		    				}
		    				allowLinkChange = true;
		    				$scope.searchRunning = true;
		    				
		    				$timeout(function() {
		    					$scope.runCatFilter(newVal);
		    				},300);
		    			}	
		        	});*/
   		
		    	//});
			}, 0);

		}
		 
		$scope.runCatFilter = function() {
			if (!$scope.selectedCategory) {
				//ignore if selectedCategory is not available yet
				return;
			}
			$scope.filterRes = new Array();
			
			angular.forEach($scope.attractionsArrOrig, function (attr) {
				angular.forEach(attr.siteTypeList, function (siteType) {
					var doAdd = true;
					/*if (attr.isInItinerary != null && attr.isInItinerary && $scope.showOnlyMissingAttractions) {
						doAdd = false;
					}*/
					if (siteType.id == $scope.selectedCategory.id) {
						if (doAdd) {
							$scope.filterRes.push(attr);
						}
					}
				 });
			});
			$scope.filterRes = $filter('orderBy')($scope.filterRes, $scope.orderField);
			$scope.searchRunning = false;
		}
		
		//| orderBy:orderField
		 
		 $scope.doSearchTxt = function(txtSearch) {
	    	$scope.noResults = false;
	    	txtSearch = $filter('latinize')(txtSearch);
	    	var fuzzy = FuzzySet();
	    	var fuzzyRes = new Array();
	    	//search by name
	    	$scope.filterRes = $filter('filter')($scope.attractionsArrOrig, function(value, index){
	    		var shortTitle = $filter('latinize')(value.shortTitle.toLowerCase());
	    		var subTitle = null;
	    		if (value.subTitle != null && value.subTitle.length > 0) {
	    			subTitle = $filter('latinize')(value.subTitle.toLowerCase());
	    		}
	    		
				if (shortTitle.indexOf(txtSearch.toLowerCase()) >=0) {
					return true;
				} else if (subTitle != null && subTitle.indexOf(txtSearch.toLowerCase()) >=0) {
					return true;
				} else {
   	   	    		//try fuzzy search
   	   	    		fuzzy.add(shortTitle);
   	   	    		if (subTitle != null) {
   	   	    			fuzzy.add(subTitle);
   	   	    		}
    	   	    	fuzzyRes = fuzzy.get(txtSearch);
				}
			});
	    	
	    	//search by description
	    	$scope.filterRes = $scope.filterRes.concat($filter('filter')($scope.attractionsArrOrig, function(value, index){
	    		var desc = $filter('latinize')(value.descriptionNoHtml.toLowerCase());
				if (desc.indexOf(txtSearch.toLowerCase()) >=0 ) {
					var isInArray = $filter('filter')($scope.filterRes, {id: value.id},true);
					if (isInArray.length ==0) {
						return true;
					}
					
				}
			}));
	    	
	    	//fuzzy
	    	if (fuzzyRes != null) {
		    	for (var j=0;j<fuzzyRes.length;j++) {
	 	   	    	var curRes =  fuzzyRes[j];
	 	   	    	if (curRes.length == 2 && curRes[0] > 0.6) {
	 	   	    		var siteArr = $filter('filter')($scope.attractionsArrOrig, function(value, index){
	 	   	    			if (value.shortTitle.toLowerCase() == curRes[1] || value.subTitle.toLowerCase() == curRes[1]) {
	 	   	    				return true;
	 	   	    			}
	 	   	    		});
	 	   	    		if (siteArr.length == 1) {
	 	   	    			$scope.filterRes.push(siteArr[0]);
	 	   	    		}
	 	   	    	}
	 	   	    }
	    	}
	    	
		    if ($scope.searchTxt.length > 0 && txtSearch.length > 0) {
		    	$location.search('attractionSearchByName', txtSearch);
		    	$location.replace();
		    }
			
			if ($scope.filterRes.length == 0) {
		    	$scope.noResults = true;
		    } 
			$scope.searchRunning = false;
		 }
		 
		 //Reorder
		$scope.changeOrder = function(field) {
			$scope.searchRunning = true;
			if ($location.url().indexOf("itinerar") >=0) {
				fireEvent("Itinerary-2.0", "Attractions Change sort", field[0]);
			} else {
				fireEvent("Attractions", "Change sort", field[0]);
			}
			$scope.startLimit = 15;
			$scope.orderField = field;
			to9 = $timeout(function() {
				$scope.filterRes = $filter('orderBy')($scope.filterRes, $scope.orderField);
				$scope.searchRunning = false;
			},300);
			
		}
		 
		 //When scrolling, load more attractions
		$scope.loadMore = function() {
			if (($scope.startLimit >= $scope.filterRes.length) || $scope.loadMoreRunning) {
				return;
			}
			$scope.loadMoreRunning = true;
			to10 = $timeout(function() {
				//console.log("adding to start limit");
				$scope.startLimit += START_LIMIT_ADD;
				$scope.loadMoreRunning = false;
			},300);
		}
		
		$scope.downloadAttraction = function(type) {
			//fireEvent('Attractions',type + ' attraction open',$scope.selectedCategory.name + " (" + $scope.cityObj.name + ")");
			$scope.abNum = $scope.requireEmailConsent ? "100" : "1";
	    	fireEvent("Download",type + "_attractions_" + $scope.abNum + "_open","attractions page");
			$scope.title = $filter('translateFilter')(type) + " " + $scope.selectedCategory.name + " PDF";
			$scope.event = $filter('eventObject')('Download',type + "_attractions_" + $scope.abNum + "_", "attractions page");
			GeneralModalService.generalModal("ngApp/website/attraction/download-modal.html","downloadModalController",$scope);
		}
		
		$scope.downloadApp = function() {
			//fireEvent('Attractions','download app open',$scope.selectedCategory.name + " (" + $scope.cityObj.name + ")");
			$scope.abNum = $scope.requireEmailConsent ? "100" : "1";
	    	fireEvent("Download","download_app_" + $scope.abNum + "_open","attractions page");
	    	$scope.event = $filter('eventObject')('Download',"download_app_" + $scope.abNum + "_","attractions page");
			GeneralModalService.generalModal("ngApp/website/itinerary/modals/download-app.html","downloadModalController",$scope);
		}
		
		if (!$scope.itineraryPage) {
			window.angular.element($window).off('scroll');
			angular.element($window).on("scroll",handleAttractionScroll);

		}
		
		/**
		 * Handle sticking the site name and navigation on scroll
		 */
		var scrollOn = "";
		function handleAttractionScroll() {
        	var indicator = $("#siteTypeNameIndicator");
        	var acttionsDiv = $("#siteTypeName");
        	
        	
        	
        	var width = $("#attractionsMain").css("width").replace("px","");
	    	var widthInt = parseInt(width);
	    	
	    	var imageWidth = $("#attractionsMain").css("width").replace("px","");
	    	
	    	
	    	var scrollTop = $(window).scrollTop();
	    	var curElementTop = indicator.offset().top; 
	    	if (scrollTop > (curElementTop - 20) ) {
        		acttionsDiv
    			.css("position", "fixed")
    			.css("top", "0px")
    			.css("z-index", "999")
        		.css("width", widthInt-10 + "px")
        		
        	}
        	else {
        		acttionsDiv
    			.css("position", "relative")
    			.css("top", "");
        		
        	}
        	
        }
		
		$scope.$on('$destroy', function(){
			window.angular.element($window).off('scroll',handleAttractionScroll);
			var counter = 0;
			if (to1) {
				$timeout.cancel(to1);
				counter++;
			}
			if (to2) {
				$timeout.cancel(to2);
				counter++;
			}
			if (to3) {
				$timeout.cancel(to3);
				counter++;
			}
			if (to4) {
				$timeout.cancel(to4);
				counter++;
			}
			if (to5) {
				$timeout.cancel(to5);
				counter++;
			}
			if (to6) {
				$timeout.cancel(to6);
				counter++;
			}
			if (to7) {
				$timeout.cancel(to7);
				counter++;
			}
			if (to8) {
				$timeout.cancel(to8);
				counter++;
			}
			if (to9) {
				$timeout.cancel(to9);
				counter++;
			}
			if (to10) {
				$timeout.cancel(to10);
				counter++;
			}
			selectedCategoryWatch();
			$(window).off("resize.doResize"); //remove the handler added earlier
		    txtSearchWatch()
		});
		
	}]);
	
});	
define('ngApp/website/attractions/singleAttractionController',["ngApp/website/main/main"],
    function(main) {
	var app = angular.module('visitacity');
	

	
	app.controller('singleAttractionController', ['$scope','$q','$filter','$location','GlobalDefs','CityService','dataWearhouseService','itineraryService',
	                                              'redirectPaScv','itinerarySitesService','GlobalDefsNew','$timeout','$routeParams','$rootScope','exprService',
	                                              function ($scope,$q,$filter,$location,GlobalDefs,CityService,dataWearhouseService,itineraryService,
	                                            		  redirectPaScv,itinerarySitesService,GlobalDefsNew,$timeout,$routeParams,$rootScope,exprService) {
		
		if ($scope.retainedScroll != null) {
			var to = $timeout(function() {
				$(window).scrollTop($scope.retainedScroll);
				$timeout.cancel(to);
			},500);
		}
		
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.cityService = CityService;
		//$scope.itineraryTab = $scope.itinerarytab;
		$scope.itineraryTab = $location.hash().indexOf("attraction") >= 0 || $location.path() .indexOf("attraction-by-type") >= 0;
		
		$scope.overlayPaidActivityStyle = exprService.isInExperiment("expr-itinerary-overlay-pa-style",50);
		if ($scope.overlayPaidActivityStyle) {
			exprService.fireExperimentEvent("itinerary-overlay-pa-style","itinerary-overlay-pa-style-two-with-photo");
		} else {
			exprService.fireExperimentEvent("itinerary-overlay-pa-style","itinerary-overlay-pa-style-original");
		}
		
		$scope.redirectPaSvc = redirectPaScv;
		$scope.attraction = new Object();
		$scope.curItinerarySites = itinerarySitesService.getSites();
		var tmpArr = dataWearhouseService.get("attractionsData");
		$scope.transitMethod = GlobalDefsNew.getGlobal("longDistanceMethod");
		$scope.transitWord = "walking";
		if ($scope.transitMethod == "drive") {
			$scope.transitWord = $scope.transitMethod;
		}
		$scope.siteIdx = -1;
		$scope.itineraryService = itineraryService;
		$scope.readMoreSamePage = $scope.itineraryService.exprReadMoreSamePage
		
		$scope.attractionsTab = $location.hash().indexOf("tab=attractions") >= 0;
		
		//Itinerary-ng - max attraction image size
		$scope.maxImageHeight = $(window).height() * 0.55;
		if ($scope.maxImageHeight > 550) {
			$scope.maxImageHeight = 550;
		}
		$(window).on("resize.doResize", function (){
			$scope.maxImageHeight = $(window).height() * 0.55;
			if ($scope.maxImageHeight > 550) {
				$scope.maxImageHeight = 550;
			} 
		});

		$scope.lang = $routeParams.lang;
		if ($scope.lang == null) {
			//in the itinerary pagem there is no route param
			$scope.lang = getActiveLang(true);
		}
		
		
		$scope.itrSite = $filter('filter')($scope.curItinerarySites,{id:$scope.siteid},true)[0];
		if (!$scope.itrSite) {
			$scope.itrSite = $filter('filter')($scope.curItinerarySites,function(value, index){ if (value.site && value.site.id == $scope.siteid) {return true} })[0];	
		}
		
		if ($scope.itrSite) {
			//get the index (to display change start time for the first attraction)
			var daySitesArr = $filter('filter')($scope.curItinerarySites,{dayInTrip:$scope.itrSite.dayInTrip},true)
			$scope.siteIdx = daySitesArr.indexOf($scope.itrSite);
		}
		
		
		if ($scope.itrSite && $scope.itrSite.site) {
			//$scope.attraction = $scope.itrSite.site;
				angular.copy($scope.itrSite.site,$scope.attraction);
				//console.log('processed ' + $scope.attraction.shortTitle);
		} else {
			angular.copy($scope.itrSite,$scope.attraction);
		}
		
		if ($scope.attractions) {
			var foundArr = $filter('filter')($scope.attractions,{id:$scope.siteid},true);
			if (foundArr.length > 0) {
				$scope.attraction = foundArr[0];
			}
			//$scope.attraction = $filter('filter')($scope.attractionsArr,{id:$scope.siteid},true)[0];
		}
		
		/**
		 * Handle when site is removed by reset the visit time and hour text
		 */
		/*$scope.$on('refreshItineraryAttractions', function (event, attraction, isInItinerary) {
			if (!isInItinerary) {
				$scope.itrSite = null;
				if (attraction != null && attraction.id != null) {
					var findId = attraction.id;
					if (attraction.site != null) {
						findId = attraction.site.id;
					}
					var attr = $filter('filter')($scope.curItinerarySites,{id:attraction.id},true)[0];
					if (attr) {
						attr.hourText = null;
						attr.visitTimeMinutes = 0;
						attr.notes = "";
					}
				}
			} else {
				if (attraction.site.id == $scope.attraction.id) {
					console.log('found attraction');
					$scope.itrSite = attraction;
				}
				
			}
		});*/
		
		
		if ($scope.attraction)  {
			//Handle the length of the description field
			var descLen = 700; //intinal
			if ($scope.paPass != null && ($scope.attraction.parisPassSave || $scope.attraction.passReducedPrice)) {
				descLen -= 80; //remove some to show "Additional Information"
			}
			if ($location.url().indexOf("itinerar") >=0) {
				descLen -= 50; //remove some for itinerary pages
			}
			if ($scope.attraction.mainPaidActivity == null) {
				descLen -= 80; //if main paid is null pane is shorter
			}
			
			if ($scope.attraction.walkingTime == null) {
				descLen -= 80; //if search nearby
			}
			
			if ($scope.itrSite != null) {
				descLen -= 80; //if showing visit duration
			}

			if ($scope.itrSite != null && $scope.itrSite.openHoursError != null) {
				descLen -= 80; //if showing open hours error
			}
			
			if ($scope.itrSite != null && $scope.itrSite.notes != null) {
				descLen -= 160; //if showing visit duration
			}
			
			if ($scope.attraction.topAd != null) {
				descLen -= 130; //if showing a text ad1
			}
			
			$scope.attraction.descLen = descLen;
		}

		/*$scope.$on('itinerary_sites_changed', function (event, itin,itinSites) {
			$scope.curItinerarySites  = JSON.parse(JSON.stringify(itinSites));
	   });*/
		
		var cityWatch = $scope.$watch('cityService.getCurCity()', function(newVal, oldVal) {
			if (newVal != null && $scope.activitySvc == null) {
				$scope.cityObj = CityService.getCurCity();
				cityWatch();
				
			}	
    	});
		var curItrSitesWatch = null;
		
		if (itineraryService != null && itineraryService.itinerary != null) {
			curItrSitesWatch = $scope.$watch(function(){
				return itineraryService.itinerary.itinerarySites;
			}, function(newVal, oldVal){
				if (newVal != oldVal && newVal != null) {
					$scope.curItinerarySites = newVal;
					//$scope.itrSite = $filter('filter')($scope.curItinerarySites,{id:$scope.siteid},true)[0];
					$scope.itrSite = $filter('filter')($scope.curItinerarySites,function(value, index){ if (value.site && value.site.id == $scope.siteid) {return true} })[0];
				}
		    });
		}
		
		
		var tabWatch = $scope.$watch(function(){
			return itineraryService.selectedTab;
		}, function(newVal, oldVal){
			if (newVal != oldVal) {
				$scope.attractionsTab = itineraryService.selectedTab == "attractions";
			}
	    });
		
		/*var itrSitesWatch = $scope.$watch(function(){
			return itinerarySitesService.getSites;
		}, function(newVal, oldVal){
			//if (newVal != oldVal && newVal != null) {
				$scope.curItinerarySites = itinerarySitesService.getSites();
			//}
	    });*/
		
		 $scope.navigateTo = function(attrId) {
			 $location.search('st',  $(window).scrollTop());
			 $location.search('lim',  $scope.startLimit);
			 //window.location = url;
			 $location.path('/' + $scope.lang + '/' + $scope.cityObj.legalName + '/attractions-map').search({"siteId":attrId});
			 if(!$scope.$$phase) $scope.$apply();
		 }
		 
		 $scope.paLabelSource = "attractions";
		 if ($location.hash() == "tab=attractions") {
			 $scope.paLabelSource = "itinerary attractions tab";
		 } else if ($location.url().indexOf("itinerar") > 0) {
			 $scope.paLabelSource = "itinerary itinerary tab";
		 }

		$scope.showSiteOverlay = function(site) {
    		$rootScope.$broadcast("showSiteOverlay",site);
    	}
		
		/*$scope.updateLocationHash = function(location) {
    		$rootScope.$broadcast("itinerary_change_tab",location);
    	}*/
		
		$scope.wishlistNameClick = function (itrSite,attraction,from) {
			if (itrSite != null) {
				$rootScope.$broadcast("wishlistNameClick",'{"itrSiteId":"'+itrSite.id+'","from":"'+from+'"}');
			} else {
				window.open($scope.appRoot+'/'+$scope.lang+'/'+$scope.cityObj.legalName+'/attractions/'+attraction.legalName);
			}
    		
    	}
		
		$scope.updateWishlist = function (itrSite) {
			itrSite.addWishlistRunning = true;
			var siteId = $scope.itrSite != null ? $scope.itrSite.id : "";
			if ($scope.itrSite != null && $scope.itrSite.dayInTrip == -1) {
				//remove from wishlist
				$scope.itrSite = null;
			} 
			$rootScope.$broadcast("addToWishlist",'{"siteId":'+$scope.attraction.id+',"itrSiteId":"'+siteId+'","from":"attractions tab"}');
			$timeout(function() {
				itrSite.addWishlistRunning = false;
			}, 1200);
		}
		
		$scope.doHaveInformation = function() {
			return $scope.attraction.address != null || $scope.attraction.admission != null || $scope.attraction.openingHours != null || $scope.attraction.phoneNum != null ||$scope.attraction.website != null;
		}
		
		 
		var locationWatch = $scope.$watch(function () {
		    return location.hash
		}, function (newVal, oldVal) {
			
			if (newVal != oldVal) {
				var tabName = $location.hash().split("=")[1];
				$scope.attractionsTab = tabName == "attractions";
				$scope.itineraryTab = $location.hash().indexOf("attraction") >= 0 || $location.path() .indexOf("attraction-by-type") >= 0;
			}
		});
		
		$scope.$on('$destroy', function(){
			if (curItrSitesWatch != null) {
				curItrSitesWatch();
			}
			tabWatch();
			locationWatch();
		});
		
		$scope.showLargePhoto = false;
		$scope.showLargeRestPhoto = function(restaurant) {
			if (restaurant != null) {
				$scope.showLargePhoto = restaurant != null;
				$("#largeRestPhotoDiv").animate({width: '100%'},500);
				$rootScope.$broadcast("itineraryFireEvent","attraction enlarge photo",null,false);
			} else {
				$scope.showLargePhoto = restaurant != null;
				$("#largeRestPhotoDiv").animate({width: '0px'},500, function() {
					$scope.showLargePhoto = false;
				})
			}
			
		}
		
	}]);
});
define('ngApp/website/attractions/travelersPlansController',["ngApp/website/main/main"],
    function(main) {
	var app = angular.module('visitacity');
	

	
	app.controller('travelersPlansController', ['$scope','$q','$filter','whatsNearByService','$routeParams',
	                                              function ($scope,$q,$filter,whatsNearByService,$routeParams) {
		
		$scope.sitesNearby = new Array();
		$scope.lang = $routeParams.lang;
		//$scope.lang = getActiveLang(true);
		
		$scope.popolateNearBy = function() {
			if ($scope.sitesNearby.length == 0) {
				fireEvent('Attractions','open numbers explenation',$scope.nearbyattraction.shortTitle);
				var callA = whatsNearByService.getData($scope.nearbyattraction.id);
				var idx = 0;
				$q.all(new Array(callA)).then(
					function(results) {
						for (var i=0;i<results[0].length;i++) {
							if (idx>2) {
								break;
							}
							var curSite = $filter('filter')($scope.attractionsArr, {id: results[0][i].destinationSiteId}, true)[0];
							if (curSite == null) {
								continue;
							}
							idx++;
							curSite.walkingTime = results[0][i].walkingTime;
							curSite.transitTime = results[0][i].transitTime;
							$scope.sitesNearby.push(curSite);
						}
					}
				);
			}
		}
		
		
		$scope.getIconForSite = function(site) {
			var typeWalking = "&#xE536;";
			var typeDrivig = "&#xE531;";
			var typeTrain = "&#xE535;";
			
			var result = typeWalking;
   	   		if ($scope.transitMethod == "drive") {
   	   			result = typeDrivig;
   	   		} else if (site.walkingTime > 1800) {
   	   			result = typeTrain;
   	   		} 
			return result;
		}
		
	}]);
});
define('ngApp/website/attraction/attractionController',["ngApp/website/main/main",
        "app/core/mapServices",
        "ngApp/website/map/mapMgr",
        "app/core/login",
        "app/mobile/core/mapLoader"],
    function(main,MapServices,MapMgr,LoginMgr,MapLoader) {
	var app = angular.module('visitacity');
	

	
	
	app.controller('attractionController',['$scope','$rootScope','$http','$q','$filter','$routeParams','$timeout','$uibModal','blockUI','redirectPaScv',
	                                       'GlobalDefs','MyPlansService','GeneralModalService','activitiesService','dataWearhouseService',
	                                       '$window','GlobalDefsNew','whatsNearByService','attractionsService','$location','emailConsentService',
	                                       function($scope,$rootScope,$http, $q,$filter,$routeParams,$timeout,$uibModal,blockUI,redirectPaScv,
	                                    		   GlobalDefs,MyPlansService,GeneralModalService,activitiesService,dataWearhouseService,
	                                    		   $window,GlobalDefsNew,whatsNearByService,attractionsService,$location,emailConsentService) {
		
		
		emailConsentService.consentRequired().then(function(data) {
			$scope.requireEmailConsent = data;
		});
		var allowHandleScroll = false;
		window.angular.element($window).off('scroll');
		$('.qtip').qtip('hide'); //hide qtip if comming from itinerary page
		blockUI.start("Loading...");
		//var myBlockUI = blockUI.instances.get("mapBlockUI");
		//myBlockUI.start();
		var loadImageQ = checkImageLoaded();
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.fullyLoaded = false;
		$scope.sitesArr = new Array();
		$scope.sitesNearby = new Array();
		$scope.topItins = new Array;
		$scope.paPass = null;
		$scope.userItinArr = new Array();
		$scope.attraction = null;
		$scope.redirectPaSvc = redirectPaScv;
		$scope.loggedInUser = "";
		var loginMgr = LoginMgr.getInstance();
		if (loginMgr.isLogin()) {
			loginMgr.getLoggedInUserObject().then(function(data) {
  				 $scope.loggedInUser = data != null && data.email != null ? data.email : null;
          	 });
		} 
		$scope.mps = MyPlansService;
		$scope.cityLegal = $routeParams.city;
		$scope.cityObj = null;
		$scope.paArr = new Array();
		$scope.loadFactor = 0;
		$scope.mainPaSkip = null;
		$scope.rightSidePa = null;
		$scope.descMain = null;
		$scope.descMore = null;
		$scope.lang = $routeParams.lang;
		var transitMethod;
		handleAttractionScroll();
		$scope.continentLoad= [{
			name:"US",
			loadArr: new Array(18,16,25,27,40,45,50,45,37,26,21,25)
		},{
			name:"Australia",
			loadArr: new Array(25,35,34,21,16,20,28,28,24,29,33,54)
		},{
			name:"Japan",
			loadArr: new Array(20,16,30,45,34,32,50,33,31,50,40,46)
		},{
			name:"Singapore",
			loadArr: new Array(40,32,34,34,30,28,45,40,28,34,32,40)
		},{
			name:"Asia",
			loadArr: new Array(42,40,40,34,32,30,33,34,32,42,44,46)
		}];
		
		var ajaxLoadTiming = new TrackTiming("PageCoreLoadNew", "ajax_data_time"); 

		
		
		var callA = attractionsService.init($scope.cityLegal);
		var callB = $http.get(appRoot + '/api/my-plans');
		var callC = activitiesService.init($scope.cityLegal);
		$q.all(new Array(callB)).then(
				function(results) {
					$scope.userItinArr = results[0].data.lstItineraries;
				 }, function(errors) {
		   			 
	   			 }
	   	);
				
		$q.all(new Array(callA, callC)).then(
	   			 function(results) {
	   				ajaxLoadTiming.send();
	   				$scope.cityObj = attractionsService.allAttractionsData.city;
	   				if ($scope.cityObj.destinationOverrideId == null) {
	   					$scope.cityObj.region = null;
	   				}
	   				$scope.attraction = $filter('filter')(attractionsService.allAttractionsData.lstSites, {legalName: $routeParams.name}, true)[0];
	   				$scope.attraction.userItinerariesCountStr = $filter('number')($scope.attraction.userItinerariesCount,0);
	   				$scope.paArr = activitiesService.getSitePaidActivities($scope.attraction.id);
	   				$scope.passName = attractionsService.allAttractionsData.passName;
	   				$scope.sitesArr = attractionsService.allAttractionsData.lstSites;
	   				$scope.topItins = attractionsService.allAttractionsData.topItins;
	   				$scope.paPass = attractionsService.allAttractionsData.paPass;
	   				$scope.loadArr = getLoadArr($scope.cityObj);
	   				transitMethod = attractionsService.allAttractionsData.long_distance_method;
	   				
	   				$scope.attraction.description = $filter('removeStyles')($scope.attraction.description);
	   				//if ($scope.attraction.description.length > 1500 && ieVersion != 8) {
	   				var tmpArr = $filter('cut')($scope.attraction.description,true,2200,'','.',true);
	   				if (tmpArr[1] != null && tmpArr[1].length < 400) {
	   					$scope.descMain = $scope.attraction.description;
	   				} else {
	   					$scope.descMain = tmpArr[0];
	   					$scope.descMore = tmpArr[1];
	   				}

	   				$scope.attraction.address = $filter('getSiteInfo')($scope.attraction.contactInformation,"Address");
	   				$scope.attraction.phoneNum = $filter('getSiteInfo')($scope.attraction.contactInformation,"Phone Number"); 
	   				$scope.attraction.admission = $filter('getSiteInfo')($scope.attraction.contactInformation,"Admission");
	   				$scope.attraction.openingHours = $filter('getSiteInfo')($scope.attraction.contactInformation,"Opening Hours");
					if (($scope.attraction.openingHours == null || $scope.attraction.openingHours.length <=0) && $scope.attraction.openingHoursText != null && $scope.attraction.openingHoursText.length > 0) {
						$scope.attraction.openingHours = $scope.attraction.openingHoursText;
					}
	   				
	   				if ($scope.attraction.mainPaidActivity != null) {
	   					$scope.rightSidePa = $scope.attraction.mainPaidActivity;
	   				} else if ($scope.paPass != null) {
	   					$scope.rightSidePa = $scope.paPass;
	   				} else {
	   					$scope.rightSidePa = $scope.paArr[0];
	   				}

	   				if ($scope.attraction.mainPaidActivity != null) {
	   					$scope.attraction.topAd = $scope.attraction.mainPaidActivity;
					} else {
						var topAdArr = activitiesService.getAttractionAdForText($scope.attraction);
						$scope.attraction.topAd = topAdArr[0]; 
					}
	   				
	   				if ($scope.lang != "en") {
	   					//don't show text ads in other languages
	   					$scope.attraction.topAd = null;
	   				}
	   				
	   				if (parseInt($scope.attraction.noPerUsers)/$scope.sitesArr.length*100 <= 10) {
	   					//console.log('site in the first 10%, no factor');
	   					$scope.loadFactor = 1;
	   				} else if (parseInt($scope.attraction.noPerUsers)/$scope.sitesArr.length*100 <= 30) {
	   					//console.log('site in the first 30%, -1 factor');
	   					$scope.loadFactor = 1.2;
	   				} else {
	   					//console.log('-2 factor');
	   					$scope.loadFactor = 1.5;
	   				}
	   				
	   				//skip the line - set max load factor
	   				if ($scope.attraction.mainPaidActivity != null && $scope.attraction.mainPaidActivity.title.toLowerCase().indexOf("skip") >=0) {
	   					//console.log('found skip the line, load factor 0');
	   					$scope.loadFactor = 1;
	   					$scope.mainPaSkip = $scope.attraction.mainPaidActivity;
	   				}
	   				
	   				//override load factor from admin
	   				if ($scope.attraction.touristLoad == 3) {
	   					$scope.loadFactor = 1;
	   				} else if ($scope.attraction.touristLoad == 1) {
	   					$scope.loadFactor = 1.2;
	   				} else if ($scope.attraction.touristLoad == 1) {
	   					$scope.loadFactor = 1.5;
	   				}
	   				
	   				
	   				$timeout(function() {
	   					var bc = new Array();
	   					bc.push({name: "Attractions",url: $scope.appRoot + "/" + $routeParams.lang + "/" + $scope.cityObj.legalName + "/attraction-by-type/all"});
	   	  				bc.push({name: $scope.attraction.shortTitle});
	   	   				$rootScope.$broadcast("update_breadcrumb",bc, attractionsService.allAttractionsData.city, $routeParams.lang);
	   	   				
	   					$rootScope.$broadcast("update_main_header_width","attractionController");
	   					$window.document.title = $scope.attraction.shortTitle + " in  " + $scope.cityObj.name + " | Visit A City";
	   				},1000);
	   				
	   				individualPageLoadTiming.send();
					blockUI.reset();
	   				
	   				/*$timeout(function() {
	   					var callD = MapLoader.getInstance().load();
	   					$q.all(new Array(callD)).then(
	   						function(results) {	
	   							loadMapAsync();
	   						}
	   					);
	   				},0);*/
	   				
	   			 }, function(errors) {
	   			 
	   			 }
	   	);
		
		
		function loadMapAsync() {
			$scope.transitWord = "walking";
			if (transitMethod == "drive") {
				$scope.transitWord = transitMethod;
			}
    		var attractionsArr = new Array($scope.attraction);
    		//$scope.sitesNearby = newarbyList.slice(0,5);
    		
    		var mapPosition = new Object();
			mapPosition.lng  = $scope.attraction.longitude;
			mapPosition.lat = $scope.attraction.latitude;
			mapPosition.zoom = 15;
			var callA = MapMgr.getInstance().load();
			var callB = whatsNearByService.getData($scope.attraction.id);
			$q.all(new Array(callA,callB,loadImageQ)).then(
  						function(results) {
  							var resultArr;
  							if (results[1].data != null) {
  								resultArr = results[1].data;
  							} else {
  								resultArr = results[1];
  							}
  							var idx = 0;
	   						for (var i=0;i<results[1].length;i++) {
	   							var curSite = $filter('filter')($scope.sitesArr, {id: resultArr[i].destinationSiteId}, true)[0];
	   							if (curSite == null) {
	   								continue;
	   							}
	   							idx++;
	   							if (resultArr[i].walkingTime != null) {
	   								curSite.walkingTime = resultArr[i].walkingTime;
	   							}
	   							if (resultArr[i].transitTime != null) {
	   								curSite.transitTime = resultArr[i].transitTime;
	   							}
	   							
	   							$scope.sitesNearby.push(curSite);
	   							if (idx>4) {
	   								break;
	   							}
	   						}
	   						attractionsArr = attractionsArr.concat($scope.sitesNearby);
	   						
	   						var mapOptions = {
   					              zoom: 14,
   					              mapTypeId: google.maps.MapTypeId.ROADMAP,
   					              scrollwheel: true,
   					              panControl: false,
   					              draggable: true,
   					              zoomControlOptions: {
   					                  position: google.maps.ControlPosition.LEFT_BOTTOM
   					              },
   					              scaleControl: true,
   					              streetViewControl: false
				            };
	   						setTimeout( function() {
		   						$scope.map = MapMgr.getInstance().initMapObject(mapOptions,true,false,"divMapParent");
		   						MapMgr.getInstance().initializeMap("divMapParent", mapPosition, attractionsArr, $scope.attraction, 5, $scope.showEdit == 1 ? true : false, true, false);
		   						//$scope.map = MapMgr.getInstance().initializeMap("divMap", mapPosition, attractionsArr, $scope.attraction, 5, $scope.showEdit == 1 ? true : false, true, false);
		   						
								var gEvt1 = google.maps.event.addListener($scope.map, 'idle', function(){
									setTimeout( function() {
										var cityMap = new Object();
										cityMap[$scope.cityObj.id] = $scope.cityObj;
										cityMap[$scope.cityObj.id].attractionsArr = attractionsArr;
										MapMgr.getInstance().drawOverlays("divMapParent", null, cityMap , $scope.attraction.id, 5, $scope.showEdit == 1 ? true : false,false,false,true);
	   									//fire this when using the back button
	   									$( "body").trigger( "unblockui");
	   								},1500);
	
									
									//Fix Collisions
									setTimeout( function() {
										$('#divMapImg_' + $scope.attraction.id).css("opacity","1");
										$('#titleMapImg_' + $scope.attraction.id).addClass("map_name_wrapper-br"); //default class
										fixColision($scope.sitesNearby,"MapImg_",true);
										},500);
									$scope.$apply(function() {
										$scope.fullyLoaded = true;
									});
									
									
								});
								MapMgr.getInstance().addEventListener(gEvt1);
	   						},500);
  						}
  				);
		}
		
		function fixColision(siteArr,prefixId,doRemoveOverlay,city) {
	  		//console.time('fixColision');
	  		var cssOptionsArr = new Array('map_name_wrapper-tl','map_name_wrapper-tr','map_name_wrapper-bl','map_name_wrapper-br');
	  		var counter = 0;
	  		for (var i=0;i<siteArr.length;i++) {
	  			var curAttr = siteArr[i];
	  			var cssClass= "";
	  			if (city != null) {
	  				//set the initial class based on the position of the element
	  				if (siteArr[i].latitude > city.midLat) {
						if (siteArr[i].longitude > city.midLng) {
							cssClass = "map_name_wrapper-tr";
						} else {
							cssClass = "map_name_wrapper-tl";
						}
					} else {
						if (siteArr[i].longitude > city.midLng) {
							cssClass = "map_name_wrapper-br";
						} else {
							cssClass = "map_name_wrapper-bl";
						}
					}
	  			} else {
	  				cssClass = "map_name_wrapper-br";
	  			}
				

	  			var curElem = $('#title' + prefixId + curAttr.id);
	  			var mapCounter = 0;
	  			var cssMap = new Object();
	  			cssMap[mapCounter++] = cssClass;
	  			//add all the classes to the map but add the best class as the first option to try
	  			for (var l=0;l<cssOptionsArr.length;l++) {
	  				if (cssOptionsArr[l] != cssClass) {
	  					cssMap[mapCounter++] = cssOptionsArr[l];
	  				}
	  			}
	  			if (city == null) {
	  				//for city label, always use bottom right
	  				cssMap = {0:'map_name_wrapper-br'};
	  			}
	  			if (city == null || curAttr.attrVisible) {
	  				//get position of all corners
	  				var rectObj = new Object();
	  				if (city != null) {
	  					//check the position of all 4 options together, if this doesn't conflict no need to check each one seperatly
		  				curElem.removeClass("map_name_wrapper-tr map_name_wrapper-tl map_name_wrapper-br map_name_wrapper-bl").addClass("map_name_wrapper-tr");
		  				var bcRect = curElem[0].getBoundingClientRect();
		  				rectObj.top = bcRect.top;
		  				rectObj.right = bcRect.right;
		  				curElem.removeClass("map_name_wrapper-tr map_name_wrapper-tl map_name_wrapper-br map_name_wrapper-bl").addClass("map_name_wrapper-bl");
		  				bcRect = curElem[0].getBoundingClientRect();
		  				rectObj.bottom = bcRect.bottom;
		  				rectObj.left = bcRect.left;
	  				}
	  				curElem.removeClass("map_name_wrapper-tr map_name_wrapper-tl map_name_wrapper-br map_name_wrapper-bl").addClass(cssClass);
	  				for (var j=0;j<i;j++) {
	  					var checkWithAttr = siteArr[j];
	  	  				var targetElem = $('#title' + prefixId + checkWithAttr.id);
	  	  				if ((city == null || checkWithAttr.attrVisible) && (targetElem.css("display") == "inline-block" || targetElem.css("display") == "block")) {
	  	  					var notVisible = true;
	  	  					var prevClass = null;
	  	  					if (city != null) {
		  	  					var overlappStatus = collision(targetElem,curElem,rectObj);
		  	  					if (!overlappStatus) {
		  	  						continue;
		  	  					}
	  	  					}
	  	  					
	  	  					//now check each option
	  	  					for (var l=0;l<4;l++) {
	  	  						cssKey = cssMap[l];
	  	  						if (cssKey == null) {
	  	  							continue;
	  	  						}
	  	  						curElem.removeClass("map_name_wrapper-tr map_name_wrapper-tl map_name_wrapper-br map_name_wrapper-bl").addClass(cssKey);

	  	  						var overlappStatus = collision(targetElem,curElem);
	  	  						
		  	  					if (overlappStatus) {
		  	  						//if there is an overlapp, we can't use this direction anymore
		  	  						delete cssMap[l];
		  	  					}

	  	  					}
	  	  					if (Object.keys(cssMap).length == 0) {
	  	  						//remove
		  	  					if (doRemoveOverlay) {
	  	  	  						MapMgr.getInstance().removeOverlays(curAttr.id);
	  	  	  					} 
	  	  	  					$('#title' + prefixId + curAttr.id).hide();
	  	  	  					$('#title' + prefixId + curAttr.id).css("opacity","0.01");
	  	  	  					counter++;
	  	  	  					break; 	
	  	  					} else {
	  	  						//set the class to the best possible option
	  	  						var setClass = null;
	  	  						for (cssKey in cssMap) {
	  	  							setClass  = cssMap[cssKey];
		  	  						break;
	  	  						}
	  	  						curElem.removeClass("map_name_wrapper-tr map_name_wrapper-tl map_name_wrapper-br map_name_wrapper-bl").addClass(setClass);
	  	  					}
	  	  				}
	  	  				
	  	  			}

	  			} else {
	  				counter++;
	  			}
	  		}
	  		return counter;
	  	  }
		
		/*$( "body" ).on( "mapCreate", function() {
			 $("#divMapParent").css("border","none");
			 $("#divMapParent").css("min-heigh","300px");
			 $("#divMapParent").css('height',$("#mainAttractionImageMid").css("height"));
		});*/
		
		/*$( "body" ).on( "unblockui", function() {
			setTimeout( function() {
				 myBlockUI.reset();
				 $scope.$apply();
			},500);
			$( "body").off("unblockui");
		});*/
		
		/**
		 * Deferred function to check when image is loaded
		 * The map can be loaded only when mapMgr is ready and also map div height is set based on the image height
		 */
		function checkImageLoaded() {
			var deferred = $q.defer();
			$("#mainAttractionImageMid").load(function() {
				$("#divMapParent").css('height',$(this).css("height"));
				$("#siteName").css("width",$("#mainAttractionImageMid").css("width"));
				//$scope.mapLoading = true;
				
				$timeout(function() {
					$(window).scrollTop(0);
					handleAttractionScroll();
					angular.element($window).bind("scroll", function() {
						allowHandleScroll = true;
						handleAttractionScroll();
			        });
					$("#siteName").css("visibility","visible");
				}, 500);
				 
				deferred.resolve();
			});
			return deferred.promise;
		}
		
		
		function getLoadArr() {
			var cityLoad = null;
			var continentLoad = $scope.continentLoad[0].loadArr; //default to first
			for (var i=0;i<$scope.continentLoad.length;i++) {
				if ($scope.cityObj.country.name == $scope.continentLoad[i].name) {
					cityLoad = $scope.continentLoad[i].loadArr;
					break;
				} else if ($scope.cityObj.continent == $scope.continentLoad[i].name) {
					continentLoad = $scope.continentLoad[i].loadArr;
				}
			}
			return cityLoad != null ? cityLoad : continentLoad;
		}
		
		//Check if sites are on top	
		function collision($div1, $div2) {
			try {
				  var x1 = $div1.offset().left;
			      var y1 = $div1.offset().top;
			      var h1 = $div1.outerHeight(true);// + 10;
			      var w1 = $div1.outerWidth(true) + 40;
			      var b1 = y1 + h1;
			      var r1 = x1 + w1;
			      var x2 = $div2.offset().left;
			      var y2 = $div2.offset().top;
			      var h2 = $div2.outerHeight(true);// + 10;
			      var w2 = $div2.outerWidth(true) + 40;
			      var b2 = y2 + h2;
			      var r2 = x2 + w2;

			      if (b1 < y2 || y1 > b2 || r1 < x2 || x1 > r2) return false;
			      return true;
			} catch (err){return false}
		    
		}
		
		$scope.callbackFactory = function(site) {
			return function(response, status) {
				if (status == google.maps.DirectionsStatus.OK) {
					site.walkingTime = response.routes[0].legs[0];
					//sort sites by walking time
					$scope.sitesNearby.sort(function(a, b) {
						if (a.walkingTime && b.walkingTime) {
							return  a.walkingTime.duration.value - b.walkingTime.duration.value;
						} else {
							return 0;
						}
					});
					$scope.$apply();
				};
			}
		};
		
		$scope.getTitle = function(load,index) {
			var monthArr = ["January","February","March","April","May","June","July","August","September","October","November","December"]
			var str = " : Medium Crowd";
			if (load >= 45) {
				str = " : Highly Crowded"
			} else if (load <35) {
				str = " : Low Crowd"
			}
			return monthArr[index] + str;
		}
		
		/*//Calculate distance to newarby sites
		$scope.getSitesNearby = function(site) {
			var siteLat = site.latitude;
	    	var siteLng = site.longitude;
	    	
	    	var newarbyList = angular.copy($scope.sitesArr);
	    	
	    	newarbyList.sort(function(a, b) {
	    		var diffal = mapSvc.calcDistanceBetween(siteLat, siteLng, a.latitude, a.longitude);
	    		var diffB = mapSvc.calcDistanceBetween(siteLat, siteLng, b.latitude, b.longitude);
	    		
	    		// sort by distance, grace of 200 meters
	    		if (Math.abs( diffal - diffB) > 200) {
	    			return diffal - diffB;	
	    		}
	    		
    		
	    		return  b.noPerUsers - a.noPerUsers;          		
	    	});
	    	
	    	var distanceArr = new Array();
	    	var max = 25;
	    	if (newarbyList.length < max) {
	    		max = newarbyList.length;
	    	}
	    	for (var i=1;i<max;i++) {
	    		distanceArr.push(new google.maps.LatLng(newarbyList[i].longitude, newarbyList[i].latitude));
	    	}
	    	
	    	return distanceArr;
		}*/
		
		
		//Show/hide print/download dialog
	    $scope.toggleModal = function(action, guide){
	    	//fireEvent('itinerary-by-day',action+'-dialog-open','');
	    	$scope.abNum = $scope.requireEmailConsent ? "100" : "1";
			fireEvent("Download","download_itinerary_" + $scope.abNum + "_open","attraction page");
	    	var di = $uibModal.open({
			      templateUrl: 'ngApp/website/itinerary/modals/download-guide.html',
			      controller: 'GuideModalInstanceController',
			      windowClass : 'itinerary-download-black',
			      resolve: {
			          guide: function () {
			            return guide;
			          },
			          action: function () {
			        	  return action
			          },
			          user: function() {
			        	  return $scope.loggedInUser 
			          },
			          page: function() {
			        	  return "attraction page" 
			          }
			          
			       }
			});
	    };
	    
	    
		$scope.saveItin = function(itin) {
			var saved = $filter('filter')($scope.userItinArr, {baseItineraryId: itin.id}, true);
			
			var title= "Save Itinerary"
			var content = "";
			var btn1Txt = "Open My Plans";
			var btn2Txt = "Close";
			var btn1Url = $scope.appRoot + "/my-plans"
			var btn2Url = "close";
			if (saved.length >0) {
				content =  itin.name + " is already part of your plans and is accessible from the My Plans menu on the top right side of your screen.";
			} else {
				content = itin.name + " has been saved to My Plans";
				require(["app/itinerary/itineraryDataMgr"],
		                function(ItineraryDataMgr) {
							var itinMgr = new ItineraryDataMgr(itin);
							$q.all(new Array(itinMgr.save())).then(function(res) {
								//Add to my plans
								$scope.userItinArr.push(itin);
								require(["app/core/login","app/itinerary/userItineraryDao"], function(LoginMgr,UserItineraryDao) {
									UserItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
										MyPlansService.setMyPlans(userItineraries);
										$scope.$apply();
									});
								})
				        	},
				        	function(e) {
				        		
				        	});
		                }
			    	);
				 
			}
			
			//GeneralModalService.generalModal("attractions","save-itinerary",title,content,btn1Txt,btn2Txt,btn1Url,btn2Url);
			return;
		}
		
		$scope.wrongInfo = function() {
			$scope.title = "Incorrect/Missing Information for " + $scope.attraction.shortTitle + " (" + $scope.cityObj.name + ")";
			GeneralModalService.generalModal("ngApp/website/shared/modals/wrong-info-modal.html","wrongInfoController",$scope);
		}
		
		$scope.downloadAttraction = function(type) {
			//fireEvent('Attraction',type + ' attraction open','');
			$scope.abNum = $scope.requireEmailConsent ? "100" : "1";
			fireEvent("Download",type + "_attractions_" + $scope.abNum + "_open","attraction page");
			$scope.title = type + " " + $scope.attraction.shortTitle + " PDF";
			$scope.event = $filter('eventObject')('Download',type + "_attractions_" + $scope.abNum + "_", "attraction page");
			GeneralModalService.generalModal("ngApp/website/attraction/download-modal.html","downloadModalController",$scope);
		}
		
		$scope.downloadApp = function() {
			//fireEvent('Attraction','download app open','');
			$scope.abNum = $scope.requireEmailConsent ? "100" : "1";
	    	fireEvent("Download","download_app_" + $scope.abNum + "_open","attraction page");
			$scope.event = $filter('eventObject')('Download',"download_app_" + $scope.abNum + "_","attraction page");
			GeneralModalService.generalModal("ngApp/website/itinerary/modals/download-app.html","downloadModalController",$scope);
		}
		
		var w1 = $scope.$watch('mps.getMyPlans()', function(newVal, oldVal) {1
			if (newVal != oldVal && newVal.length > 0) {
				var itin = $filter('filter')($scope.topItins, {id: newVal[0][2]}, true)[0];
				$scope.userItinArr.push(itin);
			}
		  });
		
		$scope.$on("$destroy",function (){
			w1();
			MapMgr.getInstance().removeOverlays();
	    	MapMgr.getInstance().hideMap();
	    	MapMgr.getInstance().clearEventListeners();
		});
		 
		$scope.changeAttraction = function(site) {
			//do nothing
		}
		
		$scope.openTest = function() {
			console.log("child call parent");
			window.opener.CallParent();
			
		}
		
		$scope.showSite = function(curSite) {
			//do nothing
			/*var targetElem = $('#titleMapImg_' + curSite.id);
			if (!targetElem.is(":visible")) {
				$('#titleMapImg_' + curSite.id).show();
				$('#titleMapImg_' + curSite.id).css("z-index","11");
				curSite.notVisible = true;
			}*/
		}
		
		$scope.hideSite = function(curSite) {
			/*if (curSite.notVisible) {
				$('#titleMapImg_' + curSite.id).hide();
				$('#titleMapImg_' + curSite.id).css("z-index","10");
			}*/
			
		}
		
		
		
		
		/**
		 * Handle sticking the site name and navigation on scroll
		 */
		var scrollOn = "";
		function handleAttractionScroll() {
			try {
				if (!allowHandleScroll) {
					return;
				}
	        	var indicator = $("#cityactionsheaderindicator");
	        	var acttionsDiv = $("#cityactionsheader");
	        	
	        	var siteNameIndicator = $("#siteNameIndicator");
	        	var siteNameDiv = $("#siteName");
	        	
	        	
	        	var width = $("#attractionController").css("width").replace("px","");
		    	var widthInt = parseInt(width);
		    	
		    	var imageWidth = $("#mainAttractionImageMid").css("width").replace("px","");
		    	
		    	var fixedHeight = "60px";
		    	if ($scope.attraction.subTitle != null && $scope.attraction.subTitle.length > 0) {
		    		fixedHeight = "64px";
		    	}
		    	
		    	var scrollTop = $(window).scrollTop();
		    	var curElementTop = indicator.offset().top; 
		    	if (scrollTop > (curElementTop - 70) ) {
	        		acttionsDiv
	    			.css("position", "fixed")
	    			.css("top", fixedHeight)
	    			.css("z-index", "999")
	    			.css("background-color", "#FFFFFF")
	        		.css("width", widthInt-30 + "px")
	        		
	        	}
	        	else {
	        		acttionsDiv
	    			.css("position", "relative")
	    			.css("top", "");
	        		
	        	}
	        	
	        	var siteNameElementTop = siteNameIndicator.offset().top;
	        	
	        	
	        	if (scrollTop > (siteNameElementTop - 64) ) {
	        		siteNameDiv
	    			.css("position", "fixed")
	    			.css("height", "64px")
	    			.css("top", "0px")
	    			.css("z-index", "999")
	    			.css("left", "")
	    			.css("right", "")
	    			.css("margin", "")
	    			.css("background-color", "rgba(94,94,94,1)");
	        		
	        		if (scrollOn != "below") {
	        			scrollOn = "below";
		        		siteNameDiv.animate({
		        			width: (widthInt-30) + "px"
		        		},300);
	        		}
	        	}
	        	else {
	        		siteNameDiv
	    			.css("position", "absolute")
	    			.css("height", "auto")
	    			.css("background-color", "rgba(94,94,94,0.8)")
	    			.css("top", "");
	        		
	        		if (scrollOn != "above") {
	        			scrollOn = "above";
	        			siteNameDiv.animate({
	        				width: imageWidth
	        			},300, function() {
	        				siteNameDiv
	            			.css("left", "0")
	            			.css("right", "0")
	            			.css("margin", "0px 15px 0px 15px");
	        			});
	        		}
	        	}
			} catch(e) {}
        	
        }
		
		
	}]);
	
});	

/*! ###########################################################################

 Source: https://github.com/dutchcelt/Keep-in-View

 Copyright (C) 2011 - 2013,  Lunatech Labs B.V., C. Egor Kloos. All rights reserved.
 GNU General Public License, version 3 (GPL-3.0)

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see http://www.opensource.org/licenses/gpl-3.0.html

 ########################################################################### */

// Uses AMD or browser globals to create a jQuery plugin.

(function( factory ){

	if( typeof define === 'function' && define.amd ){
		// AMD. Register as an anonymous module.
		define( 'keepinview',['jquery'], factory );
	} else {
		// Browser globals
		factory( jQuery );
	}

}( function( $ ){

	$.fn.keepInView = function( settings ){

		return this.each( function( index, stickyElem ){

			var $elem;
			var $parent;

			var defaults = {

				// Position will be fixed regardless of scroll position when set to true
				fixed:        false,

				// Vertical offset that applies to both top and bottom;
				edgeOffset:   0,

				// Override z-index if you can't or don't want to set this with CSS
				zindex:       $( stickyElem ).css( 'zIndex' ),

				// Override all scripted positions with your own custom CSS classname
				// The set classname will be triggered when element scrolls out of view
				// The Script will add a suffix of '-top' or '-bottom'
				customClass:  false,

				//  Only trigger this script on scrolling out at the 'top', 'bottom' the default is 'both'.
				trigger:      'both',

				// Scrollable box
				scrollable:   false,

				//  Set the height and width (user can override these if necessary)
				h:            $( stickyElem ).height(),
				w:            $( stickyElem ).width(),

				//  If a pageload scrolls to a hash you can use this to offset anchors if the 'sticky' element is covering the anchored content
				//  Beware that if the anchor itself contains content that it will also move up the page.
				//  This feature is best used with the clone feature below.
				offsetAnchor: false, // boolean.

				//  Clone the sticky element and prepend to its parent.
				//  Beware that the original item is not removed from the page so make sure that the cloned element will cover it.
				//  The cloned item can be styled via the classname "KIV-cloned"
				cloned:       false // boolean.

			};

			var options = $.extend( {}, defaults, settings );

			if( options.cloned ){
				$parent = $( stickyElem ).parents().eq( 0 );
				$elem = $( stickyElem ).clone().prependTo( $parent ).hide().addClass( "KIV-cloned" );
				$( stickyElem ).addClass( "KIV-original" )
			} else {
				$elem = $( stickyElem );
			}

			var offset = $( stickyElem ).offset(),
				position = $( stickyElem ).css( 'position' ),
				leftPosition = $( stickyElem ).css( 'left' ),
				marginOffset = ( leftPosition === "auto" ) ? parseInt( $( stickyElem ).css( 'marginLeft' ), 10 ) : 0,
				cssObject = (function(){
					return {
						position: 'fixed',
						//left: leftPosition - marginOffset + 'px',
						width: (options.scrollable) ? options.w - 15 : options.w,
						height: (options.scrollable) ? ($( window ).height() - offset.top) + "px" : options.h,
						zIndex:   options.zindex
					}
				})(),
				prepCSS = function( cssSettings ){
					$elem.css( $.extend( {}, cssObject, cssSettings ) );
				},
				fixCSS = function( t ){
					$elem.css( { top: t + 'px' } );
					if( options.offsetAnchor ){
						$( stickyElem ).css( { visibility: "hidden" } );
						$elem.slideDown( "normal" );
					}
				}

			if( options.offsetAnchor ){

				// It is possible that there a lot of anchors!
				// Using an array instead of a loop by 'shifting' the array
				// This speeds up the iterations and setTimeout prevents the browser from locking up.

				// put all the dom elements collected by jQuery in to an array
				var $anchors = $( "a[name]" );
				var anchorArray = $.makeArray( $anchors );

				var arrayShifter = function(){

					var start = +new Date();

					do {

						var anchor = anchorArray.shift();
						//  Invoke lazyLoad method with the current item
						if( anchorArray[0] !== void 0 ){
							$( anchor ).css( { position: "relative", display: "block", top: "-" + $elem.outerHeight() + "px" } );
						}

					} while( anchorArray[0] !== void 0 && (+new Date() - start < 50) ); // increase to 100ms if needed.

					if( anchorArray[0] !== void 0 ){
						setTimeout( arrayShifter, 0 );
					}

				};
				arrayShifter();
			}


			var setElem = function( opts ){

				//  Making sure that $elem doesn't fire if it is taller than the window (like a sidebar)
				//  To prevent elastic scrolling fireing set the body in css to 'overflow: hidden'.
				//  Then wrap your content in a div with 'overflow: auto'.

				if( $elem.height() > $( window ).height() && !options.scrollable ){
					return false;
				}

				if( options.clearStyle ){
					$elem.removeAttr( "style" );
				}
				var scrolledOutAt = "";
				var windowHeight = $( window ).height();
				var outerHeight = $elem.outerHeight();
				if( windowHeight < parseInt( offset.top + outerHeight - Math.abs( $( window ).scrollTop() ) + options.edgeOffset, 10 ) && !options.fixed ){
					scrolledOutAt = "bottom";
				}

				if( ($( window ).scrollTop()) > offset.top - options.edgeOffset && !options.fixed ){
					scrolledOutAt = "top";
				}

				if( !options.customClass ){

					if( options.scrollable ){
						prepCSS( {height: (windowHeight - offset.top) + "px", overflow: "auto"} );
					} else {
						prepCSS();

					}

					if( scrolledOutAt === "bottom" && (options.trigger === 'both' || options.trigger === 'bottom') ){
						if( options.scrollable ){
							prepCSS( {height: windowHeight + "px", top: (windowHeight - outerHeight - options.edgeOffset) + "px", overflow: "auto" } );
						} else {
							fixCSS( (windowHeight - outerHeight - options.edgeOffset) );
						}

					} else if( scrolledOutAt === "top" && (options.trigger === 'both' || options.trigger === 'top') ){
						if( options.scrollable ){
							prepCSS( { height: windowHeight + "px", top: options.edgeOffset + "px", overflow: "auto" } );
						} else {
							fixCSS( options.edgeOffset );
						}

					} else if( options.fixed ){
						$elem.css( {top: options.edgeOffset, height: "auto"} );
					} else {
						if( options.scrollable ){
							$elem.css( {position: position, top: offset.top + "px", height: (windowHeight - offset.top + $( window ).scrollTop()) + "px"} );
						} else {
							if( options.offsetAnchor ){
								$( stickyElem ).css( { visibility: "visible" } );
								$elem.hide();
							} else {
								$elem.removeAttr( 'style' );
							}
						}
					}

				} else if( options.customClass ){
					if( options.trigger === 'both' ){
						if( scrolledOutAt === "bottom" || scrolledOutAt === "top" ){
							$elem.addClass( options.customClass + "-" + scrolledOutAt );
						} else if( !scrolledOutAt ){
							$elem.removeClass( options.customClass + "-top" ).removeClass( options.customClass + "-bottom" );
						}
					} else if( scrolledOutAt === options.trigger ){
						$elem.addClass( options.customClass + "-" + options.trigger );
					} else if( !scrolledOutAt ){
						$elem.removeClass( options.customClass + "-" + options.trigger );
					}
				}
			}

			var staySticky = function(){
				options.w = $elem.width();
				options.h = $elem.height();
				offset = $elem.offset();
				options.clearStyle = true;
				requestAnimationFrame( setElem );
			}
			var setElemRequest = function(){
				options.clearStyle = false;
				requestAnimationFrame( setElem );
			}

			var killSticky = function(){
				$elem.removeAttr( 'style' ).off( ".sticky" );
				$( window ).off( '.sticky', staySticky ).off( '.sticky', setElemRequest );
			}

			$elem.on( 'update.sticky', staySticky );
			$elem.on( 'unstick.sticky', killSticky );
			$( window ).on( 'resize.sticky', $elem, staySticky ).on( 'scroll.sticky', $elem, setElemRequest ).trigger( 'scroll' );

		} );
	};

} ));



define('ngApp/website/itinerary-ng/itineraryActionsController',[ "app/core/login",
        "ngApp/website/main/main",
        "app/extensions/core/paidActivityRedirect",
        "app/core/mapServices",
        "app/mobile/core/mapLoader",
        "app/itinerary/itineraryDataMgr",
        "app/itinerary/userItineraryDao",
        "app/itinerary/itinerarySite",
        "keepinview"],
    function(LoginMgr,main,PaidActivityRedirect,MapServices,MapLoader,ItineraryDataMgr,UserItineraryDao,ItinerarySite,Sortable) {
	var app = angular.module('visitacity');
	
	
	
	
	
	app.controller('itineraryActionsController',['$scope','$rootScope','$http','$q','$filter','$routeParams','$timeout','$uibModal','$templateCache','$compile',
	                                      'GlobalDefs','CityService','activitiesService','$location','blockUI','anchorSmoothScroll','itineraryService',
	                                      'dataWearhouseService','$window','GlobalDefsNew','redirectPaScv','MyPlansService','itinerarySitesService','scrollKeeper',
	                                      'attractionsService','CurrenciesService','lastModService','hotelService','emailConsentService',
	                                       function($scope,$rootScope,$http,$q,$filter,$routeParams,$timeout,$uibModal,$templateCache,$compile,
	                                    		   GlobalDefs,CityService,activitiesService,$location,blockUI,anchorSmoothScroll,itineraryService,
	                                    		   dataWearhouseService,$window,GlobalDefsNew,redirectPaScv,MyPlansService,itinerarySitesService,scrollKeeper,
	                                    		   attractionsService,CurrenciesService,lastModService,hotelService,emailConsentService) {
		
		
		$scope.daysArr = new Array();
		var w4 = $scope.$watch(function(){
	        return itineraryService.daysArr;
	      }, function(newVal, oldVal){
	    	  if (newVal != oldVal) {
	    		  $scope.daysArr = itineraryService.getDaysArr();
	    	 }	
	      });
		
	}]);
	
});	
define('ngApp/website/itinerary-ng/itineraryControllerNg',[ "app/core/login",
        "ngApp/website/main/main",
        "app/extensions/core/paidActivityRedirect",
        "app/core/mapServices",
        "app/mobile/core/mapLoader",
        "app/itinerary/itineraryDataMgr",
        "app/itinerary/userItineraryDao",
        "app/itinerary/itinerarySite",
        "keepinview"],
    function(LoginMgr,main,PaidActivityRedirect,MapServices,MapLoader,ItineraryDataMgr,UserItineraryDao,ItinerarySite,Sortable) {
	var app = angular.module('visitacity');
	
	
	
	
	 //Return the pass attraction text
	app.filter('adjustVisitDuration', ['$filter', function($filter){
	   	 return function(min) {
	   		 var str = "";
	   		 if (!isNaN(min)) {
	   			 if (min <= 30) {
	   				str = "15 - 30 "+ $filter('translateFilter')("minutes");
	   			 } else if (min <= 60) {
	   				str = "30 - 60 " + $filter('translateFilter')("minutes");
	   			 } else {
	   				var rounded60 = Math.ceil(min/60); 
	   				str = (rounded60-1) + " - " + (rounded60) + " " + $filter('translateFilter')("hours");
	   			 }
	   		 }
	   		 return str;
	   	 }
	   }]);
	
	 //Return the pass attraction text
	app.filter('niceTime',['$filter', function($filter){
	   	 return function(t,isShort) {
	   		var hours = Math.floor(t/60);          
	   		var minutes = t % 60;
	   		var minutesStr = (minutes > 0 && minutes < 10) ? "0" + minutes : minutes;
	   		var minuteNameStr = "minute";
	   		if (isShort) {
	   			//minutesStr = minutes;
	   			minuteNameStr = "min";
	   		}
	   		
	   		var result = "";
	   		if (hours > 0) {
	   			result += "**hours** hour";
	   		}
	   		if (hours > 1) {
	   			result += "s";
	   		}
	   		if (hours > 0 && minutes > 0) {
	   			if (isShort) {
	   				result += ", ";
	   			} else {
	   				result += " and ";
	   			}
	   			
	   		}
	   		if (minutes > 0) {
	   			result += "**minutes** " + minuteNameStr
	   		}
	   		if (minutes > 1) {
	   			result += "s";
	   		}
	   		if (result.length == 0) {
	   			result = "0 " + minuteNameStr + "s";
	   		}
	   		return $filter('translateFilter')(result,"**hours**",hours,"**minutes**",minutes);
	   	 }
	   }]);
	
	/**
	 * Handles the top ad text in the itinerary page
	 */
	app.directive('itineraryAd', ['$http','$compile','$templateCache',function($http,$compile,$templateCache) {
	       return {
	        	restrict: 'A',
	            link: function(scope, element, attrs) {
	            	scope.getTopAd()
	            	 .then(function(result){
	            		scope.paLabel = attrs.paLabel;
	    	            	$http.get(appWebRoot + '/directives/itinerary/text-ads/' + result + '.html', {cache: $templateCache}).
	    	    	        	success(function(content) {
	    	    	        		var compiledContent = $compile(content)(scope);
	    	    	        		element.html(compiledContent);
	    	    	        	});
		              }, function(error){
		
		              });
	            	
	            }
	        }
	}]);
	
	
	app.controller('itineraryControllerNg',['$scope','$rootScope','$http','$q','$filter','$routeParams','$timeout','$uibModal','$templateCache','$compile',
	                                      'GlobalDefs','CityService','activitiesService','$location','blockUI','anchorSmoothScroll','itineraryService',
	                                      'dataWearhouseService','$window','GlobalDefsNew','redirectPaScv','MyPlansService','itinerarySitesService','scrollKeeper',
	                                      'attractionsService','CurrenciesService','lastModService','hotelService','emailConsentService','sharedItineraryService','exprService',
	                                       function($scope,$rootScope,$http,$q,$filter,$routeParams,$timeout,$uibModal,$templateCache,$compile,
	                                    		   GlobalDefs,CityService,activitiesService,$location,blockUI,anchorSmoothScroll,itineraryService,
	                                    		   dataWearhouseService,$window,GlobalDefsNew,redirectPaScv,MyPlansService,itinerarySitesService,scrollKeeper,
	                                    		   attractionsService,CurrenciesService,lastModService,hotelService,emailConsentService,sharedItineraryService,exprService) {
		
		
		
		var to1,to2,to3,to4,to5,to6,to7,to8,to9,to10,to11,to12,to13,to14,
			to15,to16,to17,to18,to19,to20,to21,to22,to23,to24,to25,to26,to27;
		
		//Reset itinerary in case we are moving from a different itinerary
		itineraryService.reset();
		
		var sessionToken1 = null;
		//var sessionToken2 = null;
		
		var exisitingMessageShown;
		$scope.$on('$destroy', function(){
			$( "body" ).unbind( "user_itinerary_post_save");
			$( "body" ).unbind( "user_itinerary_post_save_failed");
			$( "body" ).unbind( "showOpeningErrors");
			$( "body" ).unbind( "handleOpeningHoursTip");
			angular.element($window).off("scroll", handleScroll);
			$( "body" ).unbind( "paid_activity_redirect.itineraryNg");
			if (attractionsService.deferred && attractionsService.deferred.promise) {
				try {
					//kill the attractions service if it's in progress
					attractionsService.deferred.resolve();
				} catch(e){}
			}
			
			$scope.moreActions = false;
			window.angular.element($window).off('scroll');
			myPlansWatch();
			itrDasyWatch();
			//itrDaysArrWatch();
			//itrServiceWatch();
			selectedDayWatch();
			itrServiceSitesWatch();
			try {
				//try to close all modals
				if ($scope.modalInstance != null) {
					$scope.modalInstance.dismiss();
				}
			} catch (e) {}
			modalInstanceWatch();
			locationWatch();
			var counter = 0;
			if (to1) {
				$timeout.cancel(to1);
				counter++;
			}
			if (to2) {
				$timeout.cancel(to2);
				counter++;
			}
			if (to3) {
				$timeout.cancel(to3);
				counter++;
			}
			if (to4) {
				$timeout.cancel(to4);
				counter++;
			}
			if (to5) {
				$timeout.cancel(to5);
				counter++;
			}
			if (to6) {
				$timeout.cancel(to6);
				counter++;
			}
			if (to7) {
				$timeout.cancel(to7);
				counter++;
			}
			if (to8) {
				$timeout.cancel(to8);
				counter++;
			}
			if (to9) {
				$timeout.cancel(to9);
				counter++;
			}
			if (to10) {
				$timeout.cancel(to10);
				counter++;
			}
			if (to11) {
				$timeout.cancel(to11);
				counter++;
			}
			if (to12) {
				$timeout.cancel(to12);
				counter++;
			}
			if (to13) {
				$timeout.cancel(to13);
				counter++;
			}
			if (to14) {
				$timeout.cancel(to14);
				counter++;
			}
			if (to15) {
				$timeout.cancel(to15);
				counter++;
			}
			if (to16) {
				$timeout.cancel(to16);
				counter++;
			}
			if (to17) {
				$timeout.cancel(to17);
				counter++;
			}
			if (to18) {
				$timeout.cancel(to18);
				counter++;
			}
			if (to19) {
				$timeout.cancel(to19);
				counter++;
			}
			if (to20) {
				$timeout.cancel(to20);
				counter++;
			}
			if (to21) {
				$timeout.cancel(to21);
				counter++;
			}
			if (to22) {
				$timeout.cancel(to22);
				counter++;
			}
			if (to23) {
				$timeout.cancel(to23);
				counter++;
			}
			if (to24) {
				$timeout.cancel(to24);
				counter++;
			}
			if (to25) {
				$timeout.cancel(to25);
				counter++;
			}
			if (to26) {
				$timeout.cancel(to26);
				counter++;
			}
			if (to27) {
				$timeout.cancel(to27);
				counter++;
			}
			clearInterval(makeMostTimer);
			$scope.initWatch = false;
		});
		
		
		blockUI.start($filter("translateFilter")("Loading Itinerary") + "...");
		
		$timeout(function() {
			handleWindowsResize();
			handleScroll();
		}, 3000)
		
		var retainedScroll = scrollKeeper.getScroll($location.path());
		$scope.timeFormat = getTimeFormat();
		
		
	
		require(["app/core/login"], function(LoginMgr) {
			$scope.loginMgr = LoginMgr;
			$scope.loginMgr = $scope.loginMgr.getInstance();
    		if ($scope.loginMgr != null) {
    			$scope.loginMgr.getLoggedInUserObject().then(function(data) {
   				 $scope.emailAddress = data != null && data.email != null ? data.email : null;
          	 });
    		}
			
			
		});
		
		UserItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
			MyPlansService.setMyPlans(userItineraries);
		});
		
		emailConsentService.consentRequired().then(function(data) {
			$scope.requireEmailConsent = data;
		});
		
		
		//reset serach params
		$location.search('activitiesCategoryId', null).replace();
		$location.search('activitiesSearchByName', null).replace();
		$location.search('features', null).replace();
		$location.search('minRating', null).replace();
		$location.search('maxPrice', null).replace();
		$location.search('attractionsCategory', null).replace();
		$location.search('attractionSearchByName', null).replace();
		$location.search('activitiesSortBy', null).replace();
		
		$scope.restHideTopContent = false;
		$scope.scrolledVer = false;
		$scope.paPassLabel = "itinerary tips pass";
		$scope.itineraryLoading = true;
		var reportScrollToDetails = true;
		$scope.isMobile = isTablet();
		$scope.redirectPaSvc = redirectPaScv;
		$scope.searchRunning = true;
		$scope.imagesCdn = GlobalDefs.getImagesCdn();

		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.appRootSecure = $scope.appRoot.replace("http:","https:"); 
		var itinId = $routeParams.id;
		$scope.lang = $routeParams.lang;
		$scope.initWatch = false;
		if ($scope.lang == null) {
			//in the itinerary page, there is no route param
			$scope.lang = getActiveLang(true);
		}
			
		//$scope.selectedDay = $location.search().day;
		var selectedDay = $location.hash().indexOf("tripOverview") < 0 ? $location.search().day : null;
		var toExperiment = false;
		if ($routeParams.itineraryName != null) {
			var name = $routeParams.itineraryName;
			var dayIdx = name.lastIndexOf("-day-");
			itinId = name.substring(0, dayIdx);
			if ($location.search().day == null) {
				selectedDay = name.substring(dayIdx + 5, name.length);
				//open trip overview experiment
				/*toExperiment = exprService.isInExperiment("expr-itinerary-tripoverview-default",10);
				if (toExperiment) {
					selectedDay = null;
				}*/
			}
			
		}
		
		$scope.tabOrderAttractions = exprService.isInExperiment("expr-itinerary-tab-order",50);
		if ($scope.tabOrderAttractions) {
			exprService.fireExperimentEvent("itinerary-tab-order","itinerary-tab-order-attractions");
		} else {
			exprService.fireExperimentEvent("itinerary-tab-order","itinerary-tab-order-restaurants");
		}
		
		$scope.printShorterText = exprService.isInExperiment("expr-itinerary-print-shorter-text",50);
		if ($scope.printShorterText) {
			exprService.fireExperimentEvent("itinerary-print-shorter-text","itinerary-print-shorter-text-true");
		} else {
			exprService.fireExperimentEvent("itinerary-print-shorter-text","itinerary-print-shorter-text-false");
		}
		
		
		if ($routeParams.userItineraryId) {
			itinId = $routeParams.userItineraryId;
		}
		$scope.cityObj = null;
		$scope.paPass = null;
		$scope.allAttractions = new Array();
		
		//$scope.daysArr = new Array();
		$scope.userItinArr = new Array();
		//$scope.showTripOverview = false;
		$scope.showMyPlaces = false;
		$scope.newSiteRes = null;
		$scope.bestNewSite = null;
		$scope.attractionsTab = true;
		$scope.activityCategory1Name = "";
		$scope.activityCategory2Name = "";
		$scope.activityCategory1Legal = "";
		$scope.activityCategory2Legal = "";
		
		$scope.itineraryService = itineraryService;

		$scope.loc = encodeURIComponent($location.url());
		$scope.itineraryLoaded = false;
		$scope.newItineraryName = "";
		var requireReload = false;
		var lastTimeShowedMakeTheMost;
		$scope.topAd = null;
		$scope.wishlistObject = new Object();
		
		var wasChanged = readCookie("units_changed") != null ? "-changed" : "";
		fireEvent("Itinerary-2.0","measure units", getIsMeter() ? "metric"+wasChanged : "non-metric" + wasChanged);
		
		$scope.tabs = [
		               {active: true,name: "itinerary"},
		               {active: false,name: "attractions"},
		               {active: false,name: "activities"},
		               {active: false,name: "activities1"},
		               {active: false,name: "activities2"}
		              ];
		
		$scope.activeUnit = getLocalDistanceUnit();
		$scope.currencies = CurrenciesService.getCurrencies();
		$scope.activeCurrency = "USD ($)"; //Default currency
		//if (window.localStorage['currencyText'] != null) {
		if (wrapGetLocalStorage('currencyText') != null) {
			//$scope.activeCurrency = window.localStorage['currencyText'];
			$scope.activeCurrency = wrapGetLocalStorage('currencyText');
		}
		var langUrl = "";
		if ($scope.lang != "en") {
			langUrl = "/" + $scope.lang;
		}
		var ajaxCall = appRoot + '/api/itineraries-user'+langUrl+'?id=' + itinId + "&rnd="+new Date().getTime();
		if ($routeParams.srcEmail) {
			ajaxCall += "&srcEmail=" + $routeParams.srcEmail;
		}
		if ($routeParams.city && !$routeParams.userItineraryId) {
			ajaxCall =  "/jsonws/" + $routeParams.city + "/itineraries/" + itinId;
			if ($routeParams.lang != "en") {
				ajaxCall += "/" + $routeParams.lang;
			}
		}

				 
		var callA = $http.get(ajaxCall);
		var callB = MapLoader.getInstance().load();
		var ajaxLoadTiming = new TrackTiming("PageCoreLoadNew", "ajax_data_time");
		$q.all(new Array(callA,callB)).then(
	   			 function(resultsA) {
	   				ajaxLoadTiming.send();
	   				
	   				$scope.cityObj = hotelService.isShowHotel(resultsA[0].data.city,"itinerary");
	   				CityService.setCurCity($scope.cityObj);
	   				//get user clicked activities
	   				var getThings = dataWearhouseService.getData(appRoot + '/api/user/getUserClickedActivities?rnd='+new Date().getTime() + $scope.lang,"userClickedActivities"+$scope.lang);
	   		        $q.all(new Array(getThings)).then(function(data) {
	   		       		$scope.userClickedPaArr = $filter('unique')(data[0].data ,"vendorProductId");
	   		       		$scope.userClickedPaArr = $filter('filter')($scope.userClickedPaArr, {cityId: $scope.cityObj.id}, true);
	   		    	  });
	   		        
	   				
	   				lastModService.setLastMod($scope.cityObj.legalName).then(
	   		   			 function(results) {
	   		   				 loadItinerary(resultsA);
	   		   			 }, function(errors) {
	   		   			 
	   		   			 }
	   				);

					
	   			 }, function(errors) {
	   			 
	   			 }
	   	);
		
		
		//var callAttractions;
		function loadItinerary(resultsA) {
			var callAttractions = attractionsService.init($scope.cityObj.legalName);
			var activitiesCall = activitiesService.init($scope.cityObj.legalName);
   			$q.all(new Array(callAttractions,activitiesCall)).then(
   	   			 function(attrResults) {
   	   				 //$scope.itineraryService.selectedTab = toExperiment ? "tripOverview" : "itinerary";
   	   				 //$scope.selectedTab = "itinerary";
	   	   			var itrUsedBy = resultsA[0].data.countItineraryUsedBy;
	   	   			if (attractionsService.getItinUsedBy(resultsA[0].data.itinerary) != null) {
	   	   				itrUsedBy = attractionsService.getItinUsedBy(resultsA[0].data.itinerary);
	   	   			}
	   	   			var itr = resultsA[0].data.itinerary;
	   	   			var parentId = $location.search().parentId;
	   	   			if (parentId != null) {
	   	   				itr.parentItineraryId = parseInt(parentId);
	   	   				$location.search('parentId', null).replace();
	   	   			}
	   	   			var startHour = $location.search().startHour;
		   	   		if (startHour != null) {
	   	   				itr.itinerarySites[0].hourText = startHour;
	   	   				$location.search('startHour', null).replace();
	   	   			}
		   	   		$scope.allAttractions = attractionsService.allAttractionsData.lstSites;
	   				$scope.allAttractions = attractionsService.setAttractionsReadMore($scope.allAttractions,500,"forceFontSizeMap",true,150);
					//set attraction ads
					for (var i=0;i<$scope.allAttractions.length;i++) {
		   				$scope.allAttractions[i].activitiesArr = activitiesService.getSitePaidActivities($scope.allAttractions[i].id,5);
		   				if ($scope.allAttractions[i].mainPaidActivity != null) {
		   					$scope.allAttractions[i].topAd = $scope.allAttractions[i].mainPaidActivity;
						} else {
							var topAdArr = activitiesService.getAttractionAdForText($scope.allAttractions[i]);
							$scope.allAttractions[i].topAd = topAdArr[0]; 
						}
		   			}
	   		
	   	   			itineraryService.init(itr,$scope.allAttractions,new Array(),selectedDay,toExperiment);
	   	   			$scope.initWatch = true;
	   	   			itineraryService.newGen = true;
	   	   			//$scope.itinerary = itineraryService.getItinerary();
	   	   			if ($scope.itineraryService.itinerary.noOfDays == 0) {
	   					//handle itinerary from scratch
	   					$scope.itineraryService.itinerary.noOfDays = 1;
	   				}
	   				$scope.newItineraryName = $scope.itineraryService.itinerary.name;
   	   				
   	   				$scope.allRests = attractionsService.allRestData;
   	   				//initItinerarySites();
   	   				/*$timeout(function() {
   	   					$rootScope.$broadcast("all_attractions",$scope.allAttractions);
   	   				}, 0);*/
	   	   			//$scope.itineraryDataMgr = new ItineraryDataMgr($scope.itinerary);
   	   				$scope.itineraryDataMgr = itineraryService.getItineraryDataMgr();
   	   				
   	   				$scope.updateWishlist();
	   				
   	   				//$rootScope.$broadcast("countItineraryUsedBy",resultsA[0].data.countItineraryUsedBy);
	   				$scope.paPass = attractionsService.allAttractionsData.paPass;
	   				
	   				
	   				if (toExperiment) {
   						exprService.fireExperimentEvent("itinerary-tripoverview-default","itinerary-tripoverview-default-true");
   						selectedDay = null;
   						//$scope.changeTab("tripOverview",null,true);
	   				} else if ($location.hash() != "" && $location.hash().indexOf("itinerary") < 0) {
	   					//change tab only for non-itinerary
	   					var tabName = $location.hash().split("=");
	   					$scope.changeTab(tabName[1],null,true);
   						exprService.fireExperimentEvent("itinerary-tripoverview-default","itinerary-tripoverview-default-false");
	   				} else {
	   					//on load, if in itinerary tab, set page to that tab
	   					$scope.itineraryService.selectedTab = "itinerary";
	   	   				$scope.selectedTab = "itinerary";
   						exprService.fireExperimentEvent("itinerary-tripoverview-default","itinerary-tripoverview-default-false");
	   					//$scope.fireTabEvent("itinerary");
	   				}
	   				
	   				//$scope.isEditable = resultsA[0].data.editable;
		   			if (!$scope.itineraryService.itinerary.isEditable) {
		   				//updateallowRouting();
		   				$scope.itineraryService.itinerary.clientUniqueItrId = null;
		   			} else {
		   				$scope.itineraryService.disableRouting = true;
						$scope.itineraryService.getItineraryDataMgr()._estimatedRouting = true;
		   				//updateallowRouting();
		   			}
		   			
		   			
		   			
		   			//GlobalDefsNew.setGlobal("longDistanceMethod",resultsA[0].data.longDistanceMethod);
		   			//$scope.userItinArr = angular.fromJson(resultsA[0].data.userItineraries);
		   			//$scope.transitIcon = resultsA[0].data.longDistanceMethod == "drive" ? "fa-car" : "fa-train";

		   			var bc = new Array();
	   				if ($scope.itineraryService.itinerary.clientUniqueItrId == null) {
	   					var daysTxt =  $scope.itineraryService.itinerary.noOfDays > 1 ? " " + $filter('translateFilter')("Days") : " " + $filter('translateFilter')("Day");
	   					bc.push({name: "In " + $scope.itineraryService.itinerary.noOfDays + daysTxt,url: $scope.appRoot + "/"+ $scope.lang +"/" + $scope.cityObj.legalName + "/itinerary-by-day/" + $scope.itineraryService.itinerary.noOfDays});
	   				}
	   				bc.push({name: $scope.itineraryService.itinerary.name});
   	   				$rootScope.$broadcast("update_breadcrumb",bc, $scope.cityObj, $scope.lang);
	   				$rootScope.$broadcast("update_main_header_width","itineraryController");
	   				$window.document.title = $scope.itineraryService.itinerary.name + " | Visit A City";
	   				
	   				//start timers, but wait at least 10 seconds so they don't pop up on page load
	   				$timeout(function() {
		   				handleMakeMost();
		   				handleDaysMenuTip();
		   				handleFindAttractionsTip();
		   				handleActivitiesTip();
					}, 20000)
					
					
					

	   				//handleChatTimer();

	   		    	if ($( window ).width() > 1380) {
	   		    		$( "#divHelp" ).css("left","0px");
	   		    	}
	   		    	if (ieVersion == null || ieVersion > 9) {
	   		    		$( "#divHelp" ).keepInView( {fixed: true, zindex: 1200, edgeOffset: 300} );
	   		    	}
	   		    	
	   		    	//handle check if user already has this itinerary
					if ($scope.itineraryService.itinerary.baseItineraryId == null) {
		   				var tmpArr = new Array();
			   			for (var i=0;i<$scope.userItinArr.length;i++) {
			   				if ($scope.userItinArr[i][2] == $scope.itineraryService.itinerary.id) {
			   					tmpArr.push($scope.userItinArr[i]);
			   				}
			   			}
			   			if (tmpArr.length > 0 && !exisitingMessageShown) {
			   				to27 = $timeout(function() {
			   					$scope.openExistingItineraryDialog(tmpArr);
							}, 1500)
			   				
			   				exisitingMessageShown = true;
			   			}
	   			 	}
					
					if (retainedScroll != null && retainedScroll > 200) {
						to1 = $timeout(function() {
							$(window).scrollTop(retainedScroll);
						}, 1500)
					}
					
					$scope.itineraryLoaded = true;
					if ($scope.paPass == null) {
						//get ad for top in case there is no city pass
						$scope.topAd = activitiesService.getItineraryRelatedAd($scope.itineraryService.itinerary.itinerarySites);
					}

					$rootScope.$broadcast("top_ad_populated");
					$scope.activityCategory1Name = activitiesService.cityPaidActivityCategories[2].name;
					if (activitiesService.cityPaidActivityCategories[2].shortName) {
						$scope.activityCategory1Name = activitiesService.cityPaidActivityCategories[2].shortName;
					}
					$scope.activityCategory2Name = activitiesService.cityPaidActivityCategories[3].name;
					if (activitiesService.cityPaidActivityCategories[3].shortName) {
						$scope.activityCategory2Name = activitiesService.cityPaidActivityCategories[3].shortName;
					}
					$timeout(function() {
						$("#itinerary_blue_bar").css("width",$("#itineraryController").css("width"));
					}, 500)
					
					individualPageLoadTiming.send();
	   				
					$scope.itineraryLoading = false;
					
   	   			 }, function(errors) {
   		   			 
	   			 }
   			);
		}
		
		function handleWindowsResize() {
			var width = $("#itineraryController").css("width").replace("px","");
	    	var widthInt = parseInt(width);
			$scope.stuckBarPadding = "0px " + (($(window).width() - widthInt + 30)/2) + "px";
		}
		
		$( "body" ).on( "paid_activity_redirect.itineraryNg", function( event) {
			$timeout(function() {
				var getThings = $http.get(appRoot + '/api/user/getUserClickedActivities?rnd='+new Date().getTime() + $scope.lang);
				 $q.all(new Array(getThings)).then(function(data) {
					 $scope.userClickedPaArr = $filter('unique')(data[0].data ,"vendorProductId");
					 $scope.userClickedPaArr = $filter('filter')($scope.userClickedPaArr, {cityId: $scope.cityObj.id}, true);
				});
			},5000);
			
		   
  		});
		
		$(window).on("resize.doResize", function (){
			$rootScope.$broadcast("update_main_header_width","itineraryController");
			$("#itinerary_blue_bar").css("width",$("#itineraryController").css("width"));
			$("#tabsMain").find("ul:first").css("width","100%");
			$scope.stuckBarPadding = null;
			handleWindowsResize();
			$("body").trigger("handle_itinerary_resize");
		});
		
		
		var toVar;
		function loadingIndicatorAnimation() {
			var counter = 1
			var lastCounter = 1;
			$("#loading"+counter).addClass("loading_indicator_selected");
			counter++;
			toVar = window.setInterval(function(){
				$("#loading"+counter).addClass("loading_indicator_selected");
				$("#loading"+lastCounter).removeClass("loading_indicator_selected");
				lastCounter = counter;
				counter++;
				if (counter > 4) {
					counter = 1;
				}

			},1000);
		}
		
		function updateallowRouting() {
			if (!isInterestingCountry($scope.lang)) {
				$scope.itineraryService.disableRouting = true;
				$scope.itineraryService.getItineraryDataMgr()._estimatedRouting = true;
			}
			fireEvent("Itinerary-2.0", "disable routing",$scope.itineraryService.disableRouting);
		}
		
		
		/*$scope.openShareCenter = function() {
			//var url = "/itinerary/share-center?id=" + $scope.itinerary.id;
			//if ($routeParams.srcEmail) {
				//url += "&srcEmail=" + $routeParams.srcEmail;
			//}
			//window.location.href = url;
			var shareObj = new Object();
			shareObj.id = $scope.itinerary.clientUniqueItrId;
			if ($routeParams.srcEmail) {
				shareObj.srcEmail= $routeParams.srcEmail;
			}
			$location.path("/itinerary/share").search(shareObj);
			if(!$scope.$$phase) $scope.$apply();
		}*/
		
		var saveItrTimer = null;
		$scope.$on('saveItinerary', function (event,doRefresh) {
			if ($scope.itineraryService.itinerary.isEditable) { //don't save if itinerary is not editable
				requireReload = doRefresh;
				//don't run multiple saves at once
				if (saveItrTimer == null) {
					saveItrTimer = window.setInterval(function() {
						itineraryService.saveItinerary();
						clearInterval(saveItrTimer);
						saveItrTimer = null;
		        	}, 1000);
				}
			}
			
		});
		
		
		$scope.showMoreActions = function() {
			
			var width = $scope.moreActions ? "110px" : "500px";
			$("#moreActionsDiv").animate({
				maxWidth: width
			},1000,function() {
				$scope.moreActions = !$scope.moreActions;
				$scope.$apply()
			});
			
		}
		
		$scope.refresh = function() {
			var callA = $http.get(appRoot + '/api/itineraries-user-refresh?id=' +  $scope.itineraryService.itinerary.clientUniqueItrId + "&rnd="+new Date().getTime());
			$q.all(new Array(callA)).then(
  					 function(results) {
  						var newItsiteNo = null;
  						
  						for (var i=0;i<$scope.itineraryService.itinerary.itinerarySites.length;i++) {
  							if ($scope.itineraryService.itinerary.itinerarySites[i].id == null) {
  								newItsiteNo = $scope.itineraryService.itinerary.itinerarySites[i].noInTrip;
  								break;
  							}
  						}
  						itineraryService.init(results[0].data.itinerary,$scope.allAttractions,$scope.allRests,$scope.selectedDay,itineraryService.showTripOverview);
  						if (newItsiteNo != null) {
  							//get new Site
  							//$scope.newAddedAttraction = $filter('filter')($scope.itinerary.itinerarySites, {noInTrip: newItsiteNo}, true)[0];
  							itineraryService.setNewAddedAttraction($filter('filter')(itineraryService.getItinerary().itinerarySites, {noInTrip: newItsiteNo}, true)[0]);
  						}
  						
  						//updateallowRouting();
  						$scope.itineraryService.disableRouting = true;
  						$scope.itineraryService.getItineraryDataMgr()._estimatedRouting = true;
  						$scope.updateWishlist();
  						itinerarySitesService.setSites($scope.itineraryService.itinerary.itinerarySites);
  						if (itineraryService.selectedTab == "myPlaces") {
  							$scope.changeTab("myPlaces");
  						}
  					}, function(errors) {
  		   			 
  	   			 });
		}
		var ohInterval = null;
		function runValidateOpeningHours() {
			/*if (ohInterval == null) {
				ohInterval = setInterval(openingHoursRunInterval, 1500);
			}*/
			openingHoursRunInterval();
		}
		
		//don't run twice if called within same second
		function openingHoursRunInterval() {
			for (var i=1;i<=$scope.itineraryService.itinerary.noOfDays;i++) {
				itineraryService.getItineraryDataMgr().processDay(i, null, true);
			}
			itineraryService.getItineraryDataMgr().validateOpeningHours();
			window.clearInterval(ohInterval);
			ohInterval = null;
		}
		

		
		var myPlansWatch = $scope.$watch(MyPlansService.getMyPlans, function(newVal, oldVal) {
			 if (newVal && newVal.length > 0) {
				 $scope.userItinArr = newVal;
			 }
		  });

		$scope.getTopAd = function() {
			var deferred = $q.defer();
			$scope.$on('top_ad_populated', function () {
				if ($scope.topAd == null) {
					deferred.reject();
					return;
				}
				var res = "tours";
				if ($scope.topAd.activity.name.toLowerCase().indexOf("walking") >=0) {
					res = "walking";
				} else if ($scope.topAd.activity.name.toLowerCase().indexOf("cultur") >=0) {
					res = "culture";
				} else if ($scope.topAd.activity.name.toLowerCase().indexOf("food") >=0) {
					res = "food";
				} else if ($scope.topAd.activity.name.toLowerCase().indexOf("night") >=0) {
					res = "night";
				}
				deferred.resolve(res);
		   });
			return deferred.promise;
		}
		
		/*$scope.$on('itinerary_day_changed', function (event, day) {
			$scope.showTripOverview = false;
			$scope.showMyPlaces = false;
			$scope.selectedDay = angular.copy(day);
			//var tmpArr = $filter('filter')($scope.itinerary.itinerarySites, {dayInTrip: $scope.selectedDay.no}, true);
			$scope.curItinerarySites = $filter('filter')($scope.itinerary.itinerarySites, {dayInTrip: $scope.selectedDay.no}, true);
	   });*/
		
		var itrDasyWatch = $scope.$watch('itineraryService.itinerary.noOfDays', function(newVal, oldVal) {

			if (newVal != null) {
				itineraryService.generateDays();
			}	
    	});
		
		
		var selectedDayWatch = $scope.$watch(function(){
			return itineraryService.selectedDay;
		}, function(newVal, oldVal){
			if ($scope.initWatch && newVal != oldVal) {
				$scope.selectedDay = itineraryService.getSelectedDay();
			}
	    });
		
		/*var itrServiceWatch = $scope.$watch(function(){
			return itineraryService.itinerary;
		}, function(newVal, oldVal){
			if (newVal != oldVal) {
				$scope.itinerary = itineraryService.getItinerary();
			}
	    });*/
		
		
		/*var itrDaysArrWatch = $scope.$watch(function(){
			return itineraryService.daysArr;
		}, function(newVal, oldVal){
			if (newVal != oldVal) {
				$scope.daysArr = itineraryService.getDaysArr();
			}
	    });*/
		
		/*$scope.$watch(itineraryService.getSelectedDay, function(newVal, oldVal) {
			if (newVal != oldVal) {
				$scope.selectedDay = itineraryService.getSelectedDay();
			}
		});
*/
		var itrServiceSitesWatch = $scope.$watch(function(){
		        return itineraryService.curItinerarySites;
		      }, function(newVal, oldVal){
		    	  if ($scope.initWatch && newVal != oldVal && newVal != null) {
		    		  	//$scope.curItinerarySites = itineraryService.getCurItinerarySites();
						for (var i=0;i<$scope.itineraryService.curItinerarySites.length;i++) {
							$scope.itineraryService.curItinerarySites[i].idx = (i+1);
						}
						/*if ($scope.showMyPlaces) {
							var myPlacesHotelAdded = false; 
							newVal = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,function(value, index){
													if (value.type != null && value.type == "hotel") {
														if (myPlacesHotelAdded) {
															return false;
														}
														myPlacesHotelAdded = true;
													}
													return value.dayInTrip == -1;
												});
						}*/
						//$scope.itinerary = itineraryService.getItinerary();
						itinerarySitesService.setSites($scope.itineraryService.itinerary.itinerarySites);
						//itineraryService.setSelectedDay(itineraryService.getSelectedDay());
						//$rootScope.$broadcast("itinerary_sites_changed",$scope.itinerary,newVal, itineraryService.getDaysArr(), itineraryService.getSelectedDay(), $scope.itineraryDataMgr,$scope.allAttractions,$scope.newAddedAttraction);
						//$scope.newAddedAttraction = null;
						runValidateOpeningHours();
					}	
		});
		      
		
		/**
		 * only set showTripOverview as true
		 */
		$scope.$on('load_trip_overview_ic', function (event, args) {
			$scope.showTripOverview = true;
			$scope.loadTripOverview();
		});
		$scope.$on('load_my_places_ic', function (event, args) {
			$scope.showMyPlaces = true;
			$scope.showTripOverview = false;
		});
		
		
		
		$scope.$on('itinerary_change_tab', function (event, args) {
			$scope.updateLocationHash(args);
		});
	
		
		var tabWatch = $scope.$watch(function(){
			return itineraryService.selectedTab;
		}, function(newVal, oldVal){
			if ($scope.initWatch && newVal != oldVal && $scope.cityObj != null) {
				$scope.changeTab($scope.itineraryService.getSelectedTab());
			}
	    });
		
		$scope.changeTab = function(tabName,forceMapRefresh,skipEvent) {
			scrollToMap(tabName).then (function(){
				$scope.tabsLoading = false;
				//reset search field
				$location.search("attractionSearchByName",null);
				if (tabName == null || tabName.length == 0) {
					tabName = "itinerary"; //default
					if ($location.hash()) {
						tabName = $location.hash().split("=")[1];
					}
				}
				
				if (tabName == "tripOverview") {
					//if (!$scope.itineraryService.showTripOverview) {
						
						//$scope.showTripOverview = true;
						//first load into trip overview, wait for activities to get loaded
						$q.all(new Array(activitiesService.init($scope.cityObj.legalName))).then(
		   					 function(results) {
		   						$scope.itineraryService.setShowTripOverview(true);
		   						$scope.itineraryService.curItinerarySites = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,function(value, index){ if (value.dayInTrip != -1) {return true} });
		   					}, function(errors) {
		   		   			 
		   	   			 });
					//}
				} else if (tabName == "myPlaces") {
					$scope.itineraryService.curItinerarySites = new Array().concat($scope.wishlistObject.attractions).concat($scope.wishlistObject.restaurants).concat($scope.wishlistObject.shopping).concat($scope.wishlistObject.other);
					//$scope.itineraryService.curItinerarySites = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,function(value, index){ if (value.dayInTrip == -1) {return true} });
					$scope.showMyPlaces = true;
					itineraryService.showTripOverview = false;
					$timeout(function() {
	   	   				blockUI.reset();
	   	   			},800);
				} else if (tabName == "restaurants") {
					$scope.itineraryService.curItinerarySites = $filter('filter')(itineraryService.getItinerary().itinerarySites,function(value, index){
						return value.dayInTrip != -1;
					});
					//$scope.itineraryService.setCurItinerarySites($scope.curItinerarySites);
					$scope.itineraryService.showTripOverview = true;
				} else if (tabName == "itinerary") {
					if (lastTab == "myPlaces" || lastTab == "restaurants" || lastTab == "tripOverview") {
						//when coming back from whishlist, fix the itinerary sites to the selected day 
						var selectedDay = itineraryService.getSelectedDay().no != null ? itineraryService.getSelectedDay().no : itineraryService.getSelectedDay();
						$scope.itineraryService.curItinerarySites = $filter('filter')($scope.itineraryService.itinerary.itinerarySites, {dayInTrip: selectedDay}, true);
					}
					$scope.itineraryService.setShowTripOverview(false);
					$scope.showMyPlaces = false;
					try {
						//$scope.itineraryDataMgr.processDay($scope.selectedDay.no);
						$scope.itineraryService.processDay();
					} catch (err) {}
					
					/*to2 = $timeout(function() {
						$rootScope.$broadcast("google_map_resize",forceMapRefresh);
					}, 1000);*/
				} else if (tabName == "attractions" || tabName.indexOf("activities") >=0) {
					$timeout(function() {
	   	   				blockUI.reset();
	   	   			},800);
				} else {
					$scope.itineraryService.setShowTripOverview(false);
					$scope.showMyPlaces = false;
					//$rootScope.$broadcast('hide_trip_overview');
				}
				
				$scope.updateLocationHash(tabName);
				$scope.selectedTab = tabName;
				lastTab = tabName;
				$scope.itineraryService.selectedTab = tabName;
				$scope.fireTabEvent(tabName);
				$timeout(function() {
					$scope.tabsLoading = false;
				}, 500);
				
			});
			
		};
		
		//var tabStartTime = new Date().getTime();
		//var tabEndTime = null;
		var lastTab = "itinerary";
		$scope.fireTabEvent = function(tabName) {
			if (tabName == "myPlaces") {
				tabName = "wishlist";
			}
			//fireEvent("Itinerary-2.0", "change tab - " + tabName);
			/*var tabEndTime = new Date().getTime();
			if (tabStartTime != null) {
				var time = (tabEndTime - tabStartTime)/1000;
				fireEvent("Itinerary-2.0", "exit tab time - " + lastTab,"",Math.round(time));
			}
			tabStartTime = new Date().getTime();
			lastTab = tabName;*/
			tabName = tabName == "activities1" ? "activities2" : tabName;
			tabName = tabName == "activities" ? "activities1" : tabName;
			var pageName = $location.url().replace("/itineraries-user","/itineraries-user/tab-" + tabName).replace("/itineraries/","/itineraries/tab-" + tabName + "/");
			ga('set', 'page', pageName);
    		ga('send', 'pageview');
		}
		
		var curTab = "";
		var dorReplaceHash = false;
		$scope.updateLocationHash = function(tabName) {
			curTab = tabName;
			if (tabName == "attractions") {
				createCookie("findAttractionsTabClicked",1,365);
			}
			if (tabName == "activities") {
				createCookie("activitiesTipShown",1,365);
			}
			if ($location.hash() == "tab=" + tabName) {
				return;
			} else if (tabName == "itinerary" && $location.hash() == "") {
				return
			} else {
				$timeout(function() {
					$location.hash("tab=" + tabName);
				},0);
				
			}
			
		}
		
		var locationWatch = $scope.$watch(function () {
		    return location.hash
		}, function (newVal, oldVal) {
			if (newVal != null && oldVal != null && oldVal.length > 0) {
				var tabname = newVal.replace("#tab=","");
				tabname = tabname.length == 0 ? "itinerary" : tabname;
				if ($scope.itineraryService.selectedTab != tabname) {
					//back
					$scope.itineraryService.selectedTab = tabname;
				}
			}
		});
		
		
		
		$scope.$on('$routeChangeStart', function (event, next, current) {
			//when coming from regional itinerary, if new itinerary created, need to go back to new saved parent
			if (next.pathParams.itineraryName != null && $scope.itineraryService.itinerary.isEditable) {
				//set path 
				$location.path('/'+ next.pathParams.lang +'/'+ next.pathParams.city +'/itineraries-r/'+next.pathParams.itineraryName).search({"userItineraryId":$scope.itineraryService.itinerary.parentItineraryId}).replace();
			}
	    });

		function showTipsDialog(element,templateUrl,positionMy,positionAt,timerVar,cookieName,ignoreLastTipShown) {
			if (miOpened || $('.qtip:visible').length > 0) {
				//wait for all modals to be closed before opening this dialog
				return;
			}
			if ($location.hash() != "" && $location.hash().indexOf("itinerary") < 0) {
				//open only when user is in the itinerary tab
				return;
			}
			if ($location.url().indexOf("itinerar") < 0) {
				//don't show when not in itinerary page
				return;
			}
			var lastShowTime = readCookie(cookieName + "Time");
			var intervalFromLastShow = new Date().valueOf() - lastShowTime;
			if (intervalFromLastShow < 90000) {
				return;
			}
			var lastTipShown = readCookie("lastTipShown");
			intervalFromLastShow = new Date().valueOf() - lastTipShown;
			if (!ignoreLastTipShown && intervalFromLastShow < 90000) {
				return;
			}
			createCookie("lastTipShown",new Date().valueOf(),365)
			
			clearInterval(timerVar); //stop the timer after first show
			var cookieVal = readCookie(cookieName);
			if (cookieVal != null) {
				//don't run if cookie already created (could be from another controller
				return;
			}
			fireEvent("Itinerary-2.0", "tip shown " + cookieName);
			createCookie(cookieName,1,365);
			var fixedClass = isTablet() ? "" : "tooltip-fixed";
			$http.get(appWebRoot + templateUrl, {cache: $templateCache}).
				success(function(content) {
		       		var tmpScope = $scope.$new(true);
		       		tmpScope.cityObj = $scope.cityObj;
		       		tmpScope.registerNow = function() {
		       			window.location.href = $scope.appRootSecure + "/login?from=" + encodeURIComponent($location.url());
		    		}
		       		var compiledContent = $compile(content)(tmpScope);
		              $(element).qtip({
		                content: {
		                	text:compiledContent,
		                	button: 'Close'
		                },
		                position: {
		                  my: positionMy,
		                  at: positionAt,
		                  target: $(element),
		                  viewport: $(window)
		                },
		                style: {
		                	classes: 'qtip-rounded qtip-bootstrap qtip-shadow qtip-close-black ' + fixedClass,
		                	tip: {
		          	          width: 15,
		          	          height: 15
		          	      	}
		                },
		                hide: {
		                  delay : 300,
		                  event : 'click unfocus'
		                }, 
		                show : {
		                	solo: true,
		                	delay : 0,
		                	event : '',
		                    effect: function() {
		                    	var animationSpeed = 300;
		                    	if (element == "#helpsignin") {
		                    		 $(this).show().animate({left:"+=10"},100).animate({left:"-=10"},animationSpeed).
			                        	animate({left:"+=10"},animationSpeed).animate({left:"-=10"},animationSpeed).
			                        	animate({left:"+=10"},animationSpeed).animate({left:"-=10"},animationSpeed);
		                    	} else {
		                    		 $(this).show().animate({top:"+=10"},100).animate({top:"-=10"},animationSpeed).
			                        	animate({top:"+=10"},animationSpeed).animate({top:"-=10"},animationSpeed).
			                        	animate({top:"+=10"},animationSpeed).animate({top:"-=10"},animationSpeed);
		                    	}
		                       
		                    }
		                } 
		            }).qtip('show');
		         });
         
		//show qtip once created	
        to3 = $timeout(function() {
       	  $(element).qtip('show');
           }, 0);
		}
		
		
		$( "body" ).on( "handleOpeningHoursTip", function( event) {
			handleOpeningHoursTip();
		});
		
		function handleOpeningHoursTip() {
			var isShown = readCookie("openHoursTipShown");
			if (isShown != null) {
				return;
			}
			
			to4 = $timeout(function() {
				var element = "#openingHoursConflictNum";
				var templateUrl = "/itinerary/modals/help-tips/opening_hours.html"
				var positionMy = 'top center';
					var positionAt = 'bottom middle';
					showTipsDialog(element,templateUrl,positionMy,positionAt,daysMenuTipTimer,"openHoursTipShown",true);
			}, 5000);
			
		}
		
		var daysMenuTipTimer;
		function handleDaysMenuTip() {
			var lastTipShown = readCookie("lastTipShown");
			if (lastTipShown == null) {
				createCookie("lastTipShown",new Date().valueOf(),365)
			}
			var isShown = readCookie("daysMenuShown");
			if (isShown != null) {
				return;
			}
			var lastShowTime = readCookie("daysMenuShownTime");
			var actionInterval = 10 * 1000;
			if (lastShowTime == null) {
				createCookie("daysMenuShownTime",new Date().valueOf(),365)
				actionInterval = 60 * 1000;
			}
			
			to5 = $timeout(function() {
				daysMenuTipTimer = window.setInterval(function() {
						var element = "#daysMenuDiv";
						var templateUrl = "/itinerary/modals/help-tips/days.html"
						var positionMy = 'top center';
						var positionAt = 'bottom middle';
						showTipsDialog(element,templateUrl,positionMy,positionAt,daysMenuTipTimer,"daysMenuShown");
		        	}, 3000);
					
			}, actionInterval);
		}
		
		var findAttractionsTipTimer;
		function handleFindAttractionsTip() {
			var isShown = readCookie("findAttractionsTabClicked");
			if (isShown != null) {
				return;
			}
			var actionInterval = 20 * 1000;
			var lastShowTime = readCookie("findAttractionsTabClickedTime");
			if (lastShowTime == null) {
				createCookie("findAttractionsTabClickedTime",new Date().valueOf(),365)
				actionInterval = 120 * 1000;
			}
			
			to6 = $timeout(function() {
				findAttractionsTipTimer = window.setInterval(function() {
					var element = "#attractionsTab";
   					var templateUrl = "/itinerary/modals/help-tips/attractions.html"
   					 var positionMy = 'top center';
	                 var positionAt = 'bottom middle';
					showTipsDialog(element,templateUrl,positionMy,positionAt,findAttractionsTipTimer,"findAttractionsTabClicked");
		        	}, 3000);
					
			}, actionInterval);
		}
		
		var loginTipTimer;
		function handleLoginTip() {
			var isShown = readCookie("loginTipShown");
			if (isShown != null) {
				return;
			}
			if ($scope.loginMgr.isLogin()) {
				//don't show if used logged in
				return;
			}
			var actionInterval = 60 * 1000;
			to7 = $timeout(function() {
				loginTipTimer = window.setInterval(function() {
   					var element = "#helpsignin";
   					var templateUrl = "/itinerary/modals/help-tips/signin.html"
   					 var positionMy = 'middle left';
	                 var positionAt = 'center right';
					showTipsDialog(element,templateUrl,positionMy,positionAt,loginTipTimer,"loginTipShown");
		        	}, 5000);
					
			}, actionInterval);
		}
		
		var activitiesTipTimer;
		function handleActivitiesTip() {
			var isShown = readCookie("activitiesTipShown");
			if (isShown != null) {
				return;
			}
			var lastShowTime = readCookie("activitiesTipShownTime");
			var actionInterval = 30 * 1000;
			if (lastShowTime == null) {
				createCookie("activitiesTipShownTime",new Date().valueOf(),365)
				actionInterval = 180 * 1000;
			}
			to8 = $timeout(function() {
				activitiesTipTimer = window.setInterval(function() {
   					var element = "#activitiesTab";
   					var templateUrl = "/itinerary/modals/help-tips/activities.html"
   					var positionMy = 'top center';
	                var positionAt = 'bottom middle';
					showTipsDialog(element,templateUrl,positionMy,positionAt,activitiesTipTimer,"activitiesTipShown");
		        	}, 3000);
					
			}, actionInterval);
		}
		
	
		
		var makeMostTimer;
		function handleMakeMost() {
			// start makeTheMost deamon
        	lastTimeShowedMakeTheMost = wrapGetLocalStorage("lastTimeShowedMakeTheMost");
        	if (lastTimeShowedMakeTheMost == null) {
        			wrapSetLocalStorage("lastTimeShowedMakeTheMost", new Date().valueOf());
					lastTimeShowedMakeTheMost = new Date().valueOf();        		
        	}
        	
        	makeMostTimer = window.setInterval(function() {
        		showMakeTheMostDialog();
        	}, 5000);
		}
		
        function showMakeTheMostDialog() {
        	var disabledShow = wrapGetLocalStorage("dont_show_makethemost_tips");
        	disabledShow = disabledShow != null && disabledShow == "1";
        	
        	// indication for process disabled
        	if (disabledShow || lastTimeShowedMakeTheMost == null) {
        		clearInterval(makeMostTimer);
        		return;
        	}
        	
        	// done proceed if there is other dialog open
        	//if ($('div.qtip:visible').length > 0) {
        	//	return;
        	//}
        	
        	var intervalFromLastShow = new Date().valueOf() - lastTimeShowedMakeTheMost;
        	var actionInterval = 240 * 1000;
        	var savedEmail =  $scope.emailAddress;
        	
        	
        	if ( (intervalFromLastShow > actionInterval) && 
        			(savedEmail == null || savedEmail.length == 0) ) {
        		lastTimeShowedMakeTheMost = null;
        		
        		showMakeMost();
        	}
        }
		
		$scope.deleteItinerary = function(itin) {
			$rootScope.$broadcast("itineraryFireEvent","delete itinerary","",true);
			UserItineraryDao.getInstance().deleteItinerary(itin.clientUniqueItrId).then(function(userItineraries) {
				//window.location.href = appRoot;
				$location.search({});
				$location.hash("");
				$location.path("/en/" + $scope.cityObj.legalName);
				$scope.$apply();
			});
		}
		
		
		$scope.renameItinerary = function() {
			$rootScope.$broadcast("itineraryFireEvent","rename itinerary","",true);
			itineraryService.getItineraryDataMgr().setAvoidCreatingNewName();
			itineraryService.getItineraryDataMgr().save($scope.newItineraryName); 
			UserItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
				MyPlansService.setMyPlans(userItineraries);
			});
		}
		
		$( "body" ).on( "user_itinerary_post_save_failed", function( event, userItineraries, name, noOfChanges, moreData) {
			$("#changesSavedFailMsg").fadeIn('slow').animate({opacity: 0.95}, 3000).fadeOut('slow'); 
			
		});

		var newItineraryCreatedTimeOut;
		$( "body" ).unbind( "user_itinerary_post_save");
		$( "body" ).on( "user_itinerary_post_save", function( event, userItineraries, name, noOfChanges, moreData) {
			$("#changesSavedMsg").fadeIn('slow').animate({opacity: 0.95}, 3000).fadeOut('slow'); 
			$("#changesSavedMsgStuck").fadeIn('slow').animate({opacity: 0.95}, 3000).fadeOut('slow');
			if (!$scope.itineraryService.itinerary.isEditable) {
					itineraryService.getItinerary().clientUniqueItrId = itineraryService.getItineraryDataMgr()._itineraryObj.clientUniqueItrId;
					if (shareRedirect) {
						shareRedirect = false;
						//window.location.href = appRoot + "/itinerary/share?id=" + $scope.itinerary.clientUniqueItrId;
						//$location.path("/itinerary/share?id=" + $scope.itinerary.clientUniqueItrId);
						$location.path("/itinerary/share").search({"id":$scope.itineraryService.itinerary.clientUniqueItrId});
						if(!$scope.$$phase) $scope.$apply();
					} else {
						newItineraryCreatedTimeOut = window.setInterval(function(){
							newIntineraryCreated();
						}, 1000);
					}
					
					
					$scope.itineraryService.itinerary.isEditable = true;
					require(["app/core/login","app/itinerary/userItineraryDao"], function(LoginMgr,UserItineraryDao) {
						UserItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
							MyPlansService.setMyPlans(userItineraries);
							$scope.$apply();
						});
					});
					handleLoginTip();
					$rootScope.$broadcast("itineraryFireEvent","Itinerary Modified",null,false);
					requireReload = true;
			}
			runValidateOpeningHours();
			if (requireReload) {
				$scope.refresh();
			} 

		});
		
		var tmpId;
		
		
		$scope.$on('doSignIn', function (event, args) {
			$rootScope.$broadcast("itineraryFireEvent","redirect signin",args,true);
			to9 = $timeout(function() {
				window.location.href = $scope.appRootSecure + "/login?from=" + encodeURIComponent($location.url());
	   		}, 200);
			
	   });
		
		$scope.$on('nearBySites', function (event, args) {
			$rootScope.$broadcast("itineraryFireEvent","whats nearby",args,true);
			$('.qtip').qtip('hide'); //hide qtip 
			$scope.searchRunning = true;
			$scope.showNearBy = true;
			$scope.updateLocationHash("attractions");
			var argsObj = angular.fromJson(args);
			tmpId = $filter('filter')($scope.allAttractions,{id :argsObj.siteId},true)[0];
			try {
				$scope.$apply();
			} catch (err) {}
	   });


		$scope.$on('attractions_controller_loaded', function (event, args) {
			if ($scope.showNearBy) {
				$rootScope.$broadcast("nearBySitesAttractionsController",tmpId);
				
			}

		});
		
		$scope.$on('activities_controller_loaded', function (event, args) {
			anchorSmoothScroll.scrollTo("tabsMain");
		});
		
		
		
		$scope.openExistingItineraryDialog = function(curUserItins) {
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary/modals/open_existing_itinerary.html',
		        controller: ReuseableModalController,
		        scope: $scope
		    });
			
			$scope.modalInstance.result.then(function (result) {
				var url;
				if (curUserItins.length > 1) {
					//url = "/my-plans";
					$location.path("/my-plans");
				} else {
					//url = "/itineraries-user?id=" + curUserItins[0][0] + "&day=1";
					$location.path("/itineraries-user").search({"id":curUserItins[0][0],"day":"1"});
				}
				//window.location.href= url;
				//$location.path(url);
			}, function () {
			});
			
		}
		
		function newIntineraryCreated() {
			if (miOpened) {
				//wait for all modals to be closed before opening this dialog
				return;
			}
			//open dialog and clear timeout
			clearTimeout(newItineraryCreatedTimeOut);
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary/modals/new_itinerary_created.html',
		        controller: ReuseableModalController ,
		        scope: $scope,
		        windowClass : 'make-the-most'
		    });
			$scope.modalInstance.result.then(function (result) {
					$location.search("userItineraryId",$scope.itineraryService.itinerary.clientUniqueItrId);
					if (result == 'signup') {
						$rootScope.$broadcast("itineraryFireEvent","redirect signin","new itinerary created",false);
						to10 = $timeout(function() {
							window.location.href = $scope.appRootSecure + "/signup?from=" + encodeURIComponent($location.url());
				   		}, 200);
					} else if (result == 'downloadGuide') {
						$rootScope.$broadcast("downloadGuide",'{"htmlFile":"download-guide.html","from":"new itinerary created","type":"download"}');
					} else if (result == 'getApp') {
						$rootScope.$broadcast("downloadApp",'{"from":"make the most"}');
					} else if (result == 'shareEmail') {
						$rootScope.$broadcast("shareEmail",'{"from":"new itinerary created"}');
					}
					
			    }, function () {
			    	$location.search("userItineraryId",$scope.itineraryService.itinerary.clientUniqueItrId);
			    });
		}
		
		function showMakeMost() {
			if (miOpened || $('.qtip:visible').length > 0) {
				//wait for all modals to be closed before opening this dialog
				return;
			}
			fireEvent("Itinerary-2.0", "make most open");
			$scope.modalInstance = $uibModal.open({
				 templateUrl: 'ngApp/website/itinerary/modals/make-the-most.html',
				 controller: ReuseableModalController ,
			     scope: $scope,
			     windowClass : 'make-the-most'
			});
			$scope.modalInstance.result.then(function (result) {
				fireEvent("Itinerary-2.0", "make most ok");
				if (result == 'signup') {
					$rootScope.$broadcast("itineraryFireEvent","redirect signin","make the most",false);
					to11 = $timeout(function() {
						window.location.href = $scope.appRootSecure + "/signup?from=" + encodeURIComponent($location.url());
			   		}, 200);
				} else if (result == 'downloadGuide') {
					$rootScope.$broadcast("downloadGuide",'{"htmlFile":"download-guide.html","from":"make the most","type":"download"}');
				} else if (result == 'printGuide') {
					$rootScope.$broadcast("downloadGuide",'{"htmlFile":"print-guide.html","from":"make the most","type":"print"}');
				} else if (result == 'shareEmail') {
					$rootScope.$broadcast("shareEmail",'{"from":"make the most"}');
				}
				wrapSetLocalStorage("lastTimeShowedMakeTheMost", new Date().valueOf());
				lastTimeShowedMakeTheMost = new Date().valueOf();
				wrapSetLocalStorage("dont_show_makethemost_tips", 1);
		    }, function () {
		    	wrapSetLocalStorage("lastTimeShowedMakeTheMost", new Date().valueOf());
				lastTimeShowedMakeTheMost = new Date().valueOf();
				wrapSetLocalStorage("dont_show_makethemost_tips", 1);
				fireEvent("Itinerary-2.0", "make most cancel");
		    });
		}
		
		$scope.$on('helpDialog', function (event, args) {
			tempModal();
			$rootScope.$broadcast("itineraryFireEvent","help dialog open","",true);
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-ng/modals/get-help.html',
		        controller: ReuseableModalController ,
		        scope: $scope
		    });
			
			$scope.modalInstance.result.then(function (result) {
				$rootScope.$broadcast("itineraryFireEvent","help dialog ok","",true);
			    }, function () {
			    	$rootScope.$broadcast("itineraryFireEvent","help dialog cancel","",true);
			    });
	   });
		
		
		/**
		 * Watch when modal is open or closed and set variable
		 */
		$scope.modalInstance = null;
		var modalInstanceWatch = $scope.$watch('modalInstance', function(newVal, oldVal) {
			if ($scope.modalInstance != null) {
				$scope.modalInstance.opened.then(function() {
					$("#itinerary-backdrop").removeClass("modal-backdrop");
				    miOpened = true;
				});
				$scope.modalInstance.result.then(function() {
			   		miOpened = false;
			   		$("#itinerary-backdrop").removeClass("modal-backdrop");
				}, function () {
					miOpened = false;
					$("#itinerary-backdrop").removeClass("modal-backdrop");
			    });
			}
	    });
		
		
		$scope.$on('itineraryFireEvent', function (event,name,value,isAction) {
			try {
				var nameArgs = angular.fromJson(name);
				if (nameArgs.eventName) {
					name = nameArgs.eventName;
					value = nameArgs.eventValue;
					isAction = nameArgs.eventIsAction;
				}
			} catch (err) {}
			
			try {
				var argsObj = angular.fromJson(value);
				if (argsObj.from) {
					value = argsObj.from;
				}
			} catch (err) {}
			
			fireEvent("Itinerary-2.0", name, value);
			if (value != null) {
				fireEvent("Itinerary-2.0", name + ' unique', null);
			}
			
			var firstActionCookie = readCookie("itineraryFirstAction");
			if (!firstActionCookie) {
				createCookie("itineraryFirstAction","1",365);
				fireEvent("Itinerary-2.0", "first action - " + name, value);
			}
			
			
		});
		
		
		$( "body" ).unbind( "showOpeningErrors");
		$( "body" ).on( "showOpeningErrors", function(event) {
			if (miOpened || $('.qtip:visible').length > 0) {
				//if a window is open, wait till it's closed to show the opening hours warning.
				openingHoursTimer = window.setInterval(function() {
					showOpeningErros(null, false);
	        	}, 2000);
				return;
			} else {
				showOpeningErros(null, false);
			}
			//$( "body" ).unbind( "showOpeningErrors");
		});
		
		$scope.$on('showOpeningErrors', function (event, args) {
			showOpeningErros(args, true);
	   });
		
		var openingHoursTimer;
		function showOpeningErros(args, doTriggerEvent) {
			if (miOpened) {
				return;
			}
			clearInterval(openingHoursTimer);
			tempModal();
			if (doTriggerEvent) {
				$rootScope.$broadcast("itineraryFireEvent","show opening hours errors open",args,true);
			}
			
			$scope.siteErrorsArr = new Array();
			for (var i=0;i<$scope.itineraryService.getDaysArr().length;i++) {
				var dayErrorsArr = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,function(value, index){ if (value.dayInTrip == $scope.itineraryService.getDaysArr()[i].no && value.openHoursError != null) {return true} });
				if (dayErrorsArr.length > 0) {
					$scope.itineraryService.getDaysArr()[i].dayErrorsArr = dayErrorsArr;
					$scope.siteErrorsArr.push($scope.itineraryService.getDaysArr()[i]);
				}
			}
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary/modals/opening-hours-errors.html',
		        controller: ReuseableModalController ,
		        scope: $scope
		    });
			
			$scope.modalInstance.result.then(function (result) {
				if (doTriggerEvent) {
					$rootScope.$broadcast("itineraryFireEvent","show opening hours errors ok",args,true);
				}
				
			    }, function () {
			    	if (doTriggerEvent) {
			    		$rootScope.$broadcast("itineraryFireEvent","show opening hours errors cancel",args,true);
			    	}
			    });
		}
		
		/**
		 * Remove itinerary
		 */
		$scope.$on('removeSiteFromItinerary', function (event, args) {
			tempModal();
			$rootScope.$broadcast("itineraryFireEvent","remove attraction open",args,true);
			$scope.selectedAttraction = $scope.itineraryService.getItinerarySite(args);
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-ng/modals/remove-site.html',
		        controller: ReuseableModalController ,
		        scope: $scope
		    });
			
			$scope.modalInstance.result.then(function (result) {
				
				$rootScope.$broadcast("itineraryFireEvent","remove attraction ok",args,true);
				//to12 = $timeout(function() {
				blockUI.start("Removing...");
   	   			//}, 0);
				
				
				if ($scope.selectedAttraction.additionalData != null && $scope.selectedAttraction.additionalData.taLocationId != null) {
   	   				//update restaurants
   	   				itineraryService.restaurantInItinerary($scope.selectedAttraction,false);
   	   			}
				
				//TODO: handle remove first site
				if (!itineraryService.getItineraryDataMgr().isContainsHotel() && $scope.itineraryService.curItinerarySites.length > 1 && ($scope.itineraryService.curItinerarySites[0].id == $scope.selectedAttraction.id))  {
					//When removeing the first site of the day (not hotel) set the start time to the original time
					$scope.itineraryService.curItinerarySites[1].hourText = $scope.selectedAttraction.hourText;
					//TODO: itinerary service
				}
				$q.all(new Array(itineraryService.getItineraryDataMgr().removeSite($scope.selectedAttraction,true))).then(
						function(results) {
			   	   			requireReload = false
			   	   			//$scope.curItinerarySites = $scope.itineraryDataMgr.processDay($scope.selectedDay.no); 
			   	   			//$scope.itineraryDataMgr.save();
			   	   			 
			   	   			/*if ($scope.showMyPlaces) {
			   	   				itineraryService.setCurItinerarySites(itineraryService.getItineraryDataMgr().getPersonalActivities());
			   	   			} else {
			   	   				itineraryService.processDay();
			   	   			}*/
			   	   			
			   	   			$scope.itineraryService.curItinerarySites = $scope.itineraryService.processDay();
			   	   			itineraryService.saveItinerary();
			   	   			itineraryService.generateDays();
			   	   			
			   	   			
			   	   			$timeout(function() {
			   	   				blockUI.reset();
			   	   			},300);
			   	   			//itineraryService.setCurItinerarySites($scope.curItinerarySites);
			   	   			
			   	   			
			   	   			//$rootScope.$broadcast("refreshItineraryAttractions",$scope.selectedAttraction,false);
				   	   		
			   	   			
						}, function(errors) {
						});
			    }, function () {
			    	$rootScope.$broadcast("itineraryFireEvent","remove attraction cancel",args,true);
			    });
	   });
		
		/**
		 * Support for back button when hash changes
		*/ 
		/*var locationWatch = $scope.$watch(function () {
		    return location.hash
		}, function (newVal, oldVal) {
			
			if (newVal != oldVal) {
				var tabName = $location.hash().split("=")[1];
				if (tabName != null) {
					GlobalDefsNew.setGlobal("tmpNearBy", null); //reset show near by in attractions controller
				}
				var doForce = false;
				if ($("#divMap").children().length == 0) {
					//Check if maop was destroyed and force recreate (happens on back button)
					doForce = true;
				}
				$scope.changeTab(tabName,doForce);
				
				
			} else if (newVal == "#tab=itinerary") {
				$scope.changeTab("itinerary");
			}
		});*/


		function scrollToMap(tabName) {
			var deffered = new $.Deferred();
			if (tabName == "restaurants" || lastTab == "restaurants") {
				$scope.tabsLoading = true;
				$timeout(function() {
					blockUI.start("Loading...");
   	   			}, 0);
				if (lastTab == "restaurants") {
					$scope.restHideTopContent = false;
					$timeout(function() {
						$("html, body").animate({
							scrollTop:  $("#divTopTabIndicator").offset().top-7
						}, 1000,function() {
							$timeout(function() {
								angular.element($window).on("scroll", handleScroll);
							},500);
							
						});
					}, 800);
					$timeout(function() {
						blockUI.reset();
						$scope.tabsLoading = false;
	   	   			}, 3000);
					$timeout(function() {
						deffered.resolve();
	   	   			}, 2000);
					
					
				} else if (tabName == "restaurants") {
					$scope.restHideTopContent = true;
					stuckTabsOff();
					$timeout(function() {
						$scope.tabsLoading = false;
						angular.element($window).off("scroll", handleScroll);
	   	   			}, 1500);
					deffered.resolve();
				}
				
			} else {
				if (!$("#divTopTabIndicator").isOnScreen()) {
					//$timeout(function() {
						//hide the content while scroll is happening
						$scope.tabsLoading = true;
					//}, 0);
					var scrollSpeed = 1000;
					if (($(window).scrollTop() - $("#divTopTabIndicator").offset().top) < 1000) {
						scrollSpeed = ($(window).scrollTop() - $("#divTopTabIndicator").offset().top);
					}
					angular.element($window).off("scroll", handleScroll);
					$timeout(function() {
						//hide stuck tabs before reaching the top
						stuckTabsOff();
						$scope.$apply();
	   	   			}, scrollSpeed/2);
					$("html, body").animate({
						scrollTop:  $("#divTopTabIndicator").offset().top-7
					}, scrollSpeed,function() {
						//blockUI.reset();
						$timeout(function() {
							angular.element($window).on("scroll", handleScroll);
							$scope.tabsLoading = false;
		   	   			}, 1000);
						deffered.resolve();
					});
				} else {
					deffered.resolve();
				}
			}
			return deffered;
		}
		
		
		$scope.changeDay = function(day,from,noScroll) {
			$rootScope.$broadcast("trigger-change-day",day,from,noScroll);
		}
		
		$scope.loadMyPlaces = function(from) {
			if (dorReplaceHash) {
				$location.hash("tab=myPlaces").replace();
			} else {
				dorReplaceHash = true;
				$location.hash("tab=myPlaces")
			}
			$scope.showMyPlaces = true;
			$rootScope.$broadcast('load_my_places',$scope.itineraryService.itinerary,from);
		}
		
		$scope.loadTripOverview = function(from) {
			if (dorReplaceHash) {
				$location.hash("tab=tripOverview").replace();
			} else {
				dorReplaceHash = true;
				$location.hash("tab=tripOverview")
			}
			
			//$rootScope.$broadcast('load_trip_overview',$scope.itinerary,from);
		}
		
		/**
		 * Prevent modal delay, open temporary modal
		 */
		function tempModal() {
			//$("#itinerary-backdrop").addClass("modal-backdrop fade in");
		}
		
	
	   
		
		$scope.$on('adjustDurationMin', function (event, args) {
			tempModal();
			$scope.selectedAttraction = $scope.itineraryService.getItinerarySite(args);
			$scope.selectedAttractionVisitDuration = $scope.selectedAttraction.visitTimeMinutes;
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-ng/modals/adjust-duration.html',
		        controller: ReuseableModalController ,
		        scope: $scope,
		        backdrop: 'static'
		    });
			$rootScope.$broadcast("itineraryFireEvent","change duration open",args,true);
			$scope.modalInstance.result.then(function (result) {
				$rootScope.$broadcast("itineraryFireEvent","change duration ok",args,true);
				to13 = $timeout(function() {
					blockUI.start("Adjusting Duration...");
   	   			}, 0);
				requireReload = false
				//$scope.itineraryDataMgr.adjustDuration($scope.selectedAttraction,result);
				itineraryService.getItineraryDataMgr().adjustDuration($scope.selectedAttraction,result);
				//$scope.curItinerarySites = $scope.itineraryDataMgr.processDay($scope.selectedDay.no);
				itineraryService.processDay();
				$timeout(function() {
					blockUI.reset();
  	   			}, 500);
		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","change duration cancel",args,true);
		    });
			
			
	   })
	   
	   
	   $scope.$on('addNotes', function (event, args) {
		   tempModal();
		   $scope.selectedAttraction = $scope.itineraryService.getItinerarySite(args);
		   $scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-ng/modals/add-notes.html',
				controller: ReuseableModalController ,
		        scope: $scope
		    });
		   $rootScope.$broadcast("itineraryFireEvent","add notes open",args,true);
		   $scope.modalInstance.result.then(function (result) {
			   $rootScope.$broadcast("itineraryFireEvent","add notes ok",args,true);
			   	requireReload = false;
			   	$scope.selectedAttraction = itineraryService.setNoteReadMore($scope.selectedAttraction);
				itineraryService.getItineraryDataMgr().addNotes($scope.selectedAttraction);
				$rootScope.$broadcast("itr_site_changed",$scope.selectedAttraction);
		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","add notes cancel",args,true);
		    });
		   	

	   });
		
		var addType = null;
		$scope.$on('addBreak', function (event, args) {
			tempModal();
			var argsObj = angular.fromJson(args);
			addType = argsObj.type;
			$scope.selectedAttraction = null;
			$scope.googleAutoCompleteInpt = "googleAutoCompleteInput";
			if (args == null || argsObj.personalPlace || argsObj.isRestaurant) {
				$scope.myPlaceTitle = "Add My Places";
				$scope.myPlaceSubTitle = "Search for more places you plan to visit during your trip";
				if (argsObj.title != null) {
					$scope.myPlaceTitle = argsObj.title;
				}
				
				if (argsObj != null && argsObj.type == "hotel") {
					$scope.myPlaceSubTitle = "Search for your hotel";
				}
				
				$rootScope.$broadcast("itineraryFireEvent","add my place open - label:from",args,true);
				
				$scope.isBreak = false;
				
				if (args != null && argsObj.personalPlace || argsObj.isRestaurant) {
					$scope.selectedAttraction = $scope.itineraryService.getItinerarySite(args);
					$scope.newPersonalAttraction = $scope.itineraryService.createNewSiteObj($scope.selectedAttraction,"");
				} else {
					$scope.newPersonalAttraction = $scope.itineraryService.createNewSiteObj();
				}
				$scope.newPersonalAttraction.type = "my-place";
				if (argsObj.type != null) {
					$scope.newPersonalAttraction.type = argsObj.type;
				}
			} else {
				//$rootScope.$broadcast("itineraryFireEvent","add break open",args,true);
				$scope.selectedAttraction = $scope.itineraryService.getItinerarySite(args);
				$scope.newPersonalAttraction = $scope.itineraryService.createNewSiteObj($scope.selectedAttraction,"Break");
				$scope.newPersonalAttraction.type = "break";
				$scope.isBreak = true;
			}
			$scope.isEditBreak = false;
			$rootScope.$broadcast("itineraryFireEvent","add my place open - label:type",$scope.newPersonalAttraction.type,false);
			if ($scope.newPersonalAttraction.type == "transit") {
				//default transit duration to 0
				$scope.newPersonalAttraction.visitTimeMinutes = 0;
			}
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-ng/modals/add-my-place.html',
		        controller: ReuseableModalController ,
		        scope: $scope
		    });
			$scope.modalInstance.result.then(function (result) {
				$rootScope.$broadcast("itineraryFireEvent","add my place ok - label:type",$scope.newPersonalAttraction.type,false);
				$rootScope.$broadcast("itineraryFireEvent","add my place ok - label:from",args,true);
				if (result.bestFitPlan) {
					$rootScope.$broadcast("itineraryFireEvent","add my place ok - label:time","best fit plan",false);
				} else if (result.bestFitDay) {
					$rootScope.$broadcast("itineraryFireEvent","add my place ok - label:time","best fit day",false);
				}  else if (result.dayInTrip == -1) {
					$rootScope.$broadcast("itineraryFireEvent","add my place ok - label:time","no day no time",false);
				} else {
					$rootScope.$broadcast("itineraryFireEvent","add my place ok - label:time","user day and time",false);
				}
				$rootScope.$broadcast("selectedPlaceTypeAll");
				if (addType == "hotel") {
					scrollToMap();
					to14 = $timeout(function() {
						blockUI.start("Saving...");
	   	   			}, 0);
					requireReload = true;
					$q.all(new Array(itineraryService.getItineraryDataMgr().addHotel(result,true))).then(
			   	   			 function(results) {
			   	   				 itineraryService.generateDays();
			   	   				 $scope.newAddedAttraction = $scope.itineraryService.curItinerarySites[0];
			   	   				 //$scope.itineraryDataMgr.save();
			   	   				 itineraryService.saveItinerary();
			   	   			 }, function(errors) {
			   	   				 console.log("Error: " + errors);
			   	   				 itineraryService.saveItinerary();
			   	   			 }
			        	), function(errors) {
				   			console.log("Error: " + errors);
				   			itineraryService.saveItinerary();
		   	   			};
					//$rootScope.$broadcast("itineraryFireEvent","add hotel ok",args,true);
				} else {
					if ($scope.newPersonalAttraction.site != null) {
						$scope.newPersonalAttraction.site.isInItinerary = true;
					}
					if ($scope.newPersonalAttraction.type == null) {
						//$rootScope.$broadcast("itineraryFireEvent","add break ok",args,true);
					} else {
						
						scrollToMap();
					}
					if ($scope.newPersonalAttraction.type != null) {
						scrollToMap();
					}
					if ($scope.newPersonalAttraction.bestFitDay || $scope.newPersonalAttraction.bestFitPlan) {
						$rootScope.$broadcast("changeDay","",null,$scope.newPersonalAttraction);
					
					} else {
						to15 = $timeout(function() {
							blockUI.start("Saving...");
		   	   			}, 0);
						requireReload = true;
						$q.all(new Array(itineraryService.getItineraryDataMgr().addPersonalActivity($scope.newPersonalAttraction))).then(
				   	   			 function(results) {
				   	   				 itineraryService.generateDays();
				   	   				 if ($scope.newPersonalAttraction.dayInTrip > 0) {
				   	   					 //$scope.selectedDay = $filter('filter')($scope.daysArr,{no:parseInt($scope.newPersonalAttraction.dayInTrip)},true)[0];
				   	   					 itineraryService.setSelectedDay($filter('filter')($scope.itineraryService.getDaysArr(),{no:parseInt($scope.newPersonalAttraction.dayInTrip)},true)[0]);
				   	   				 } else if ($location.hash().indexOf("myPlaces") < 0) {
				   	   					$scope.updateWishlist()
					   	   				$timeout(function() {
					   	   					$scope.changeTab("myPlaces");
						   	   			}, 200);
				   	   				 } 
				   	   				 
				   	   			 }, function(errors) {
						   			 
				   	   			 }
				        	);
					}
					
					
				}
				
				
		    }, function () {
		    	if ($scope.newPersonalAttraction.type == "break") {
		    		$rootScope.$broadcast("itineraryFireEvent","add break cancel",args,true);
		    	} else if ($scope.newPersonalAttraction.type == "hotel") {
		    		$rootScope.$broadcast("itineraryFireEvent","add hotel cancel",args,true);
		    	} else {
		    		$rootScope.$broadcast("itineraryFireEvent","add my place cancel",args,true);
				}
		    	$rootScope.$broadcast("itineraryFireEvent","add my place cancel - label:from",args,true);
		    	$rootScope.$broadcast("itineraryFireEvent","add my place cancel type - label:type",$scope.newPersonalAttraction.type,false);
		    });

	   });
		
		$scope.$on('editBreak', function (event,args,elem,attr) {
			tempModal();
			if (attr == null) {
				$scope.selectedAttraction = $scope.itineraryService.getItinerarySite(args);
				$scope.newPersonalAttraction = angular.copy($scope.selectedAttraction);
			}
			
			if ($scope.newPersonalAttraction.type == null) {
				$scope.isBreak = true;
			}
			
			if ($scope.newPersonalAttraction.additionalData != null) {
				$scope.newPersonalAttraction.additionalData = angular.fromJson($scope.newPersonalAttraction.additionalData);
			}
			
			$scope.myPlaceTitle = "Edit " + $scope.newPersonalAttraction.name;
			$scope.isEditBreak = true;
			$scope.googleAutoCompleteInpt = "googleAutoCompleteInput";
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary/modals/add-break.html',
		        controller: ReuseableModalController ,
		        scope: $scope
		    });
			$rootScope.$broadcast("itineraryFireEvent","edit my place open",args,true);
			$scope.modalInstance.result.then(function (result) {
				$rootScope.$broadcast("itineraryFireEvent","edit my place ok",args,true);
				if ($scope.newPersonalAttraction.bestFitDay || $scope.newPersonalAttraction.bestFitPlan) {
					$rootScope.$broadcast("changeDay","",null,$scope.newPersonalAttraction);
				} else {
					to16 = $timeout(function() {
						blockUI.start("Saving...");
	   	   			}, 0);
					if ($scope.newPersonalAttraction.wasFirst && !itineraryService.getItineraryDataMgr().isContainsHotel()) {
						//handle start time if site is first
						var daySites = $filter('filter')($scope.itineraryService.itinerary.itinerarySites, {dayInTrip: $scope.newPersonalAttraction.dayInTrip}, true);
						if (daySites.length > 2) {
							daySites[1].hourText = $scope.newPersonalAttraction.hourText;
						}
						
					}
					requireReload = true;
					//$scope.itineraryDataMgr.addPersonalActivity($scope.newPersonalAttraction,$scope.selectedAttraction);
					itineraryService.getItineraryDataMgr().addPersonalActivity($scope.newPersonalAttraction,$scope.selectedAttraction);
					//$scope.itineraryDataMgr.processDay($scope.selectedDay.no);
					itineraryService.processDay();
				}
				
		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","edit my place cancel",args,true);
		    });

	   });
		
		var shareRedirect = false;
		$scope.$on('shareEmail', function (event, args) {
			$rootScope.$broadcast("itineraryFireEvent","share",args,true);
			if ($scope.itineraryService.itinerary.clientUniqueItrId != null) {
				//window.location.href = appRoot + "/itinerary/share?id=" + $scope.itinerary.clientUniqueItrId;
				$location.path("/itinerary/share").search({"id":$scope.itineraryService.itinerary.clientUniqueItrId});
				if(!$scope.$$phase) $scope.$apply();
				//$scope.$apply(function() { $location.path("/itinerary/share") });
			} else {
				shareRedirect = true;
				//$scope.itineraryDataMgr.save();
				itineraryService.saveItinerary();
			}
			
			/*tempModal();
			if ($scope.itinerary.clientUniqueItrId != null) {
				$scope.shareMessage = "\n" + $scope.itinerary.name + "\n\n" + $scope.appRoot + "/itineraries-user?id=" + $scope.itinerary.clientUniqueItrId + "&day=" + $scope.selectedDay.no;
			} else {
				$scope.shareMessage = "\n" + $scope.itinerary.name + "\n\n" + $location.absUrl();
			}
			
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary/modals/share-guide.html',
		        controller: ReuseableModalController ,
		        scope: $scope
		    });
			$rootScope.$broadcast("itineraryFireEvent","share email open",args,true);
			$scope.modalInstance.result.then(function (result) {
				$rootScope.$broadcast("itineraryFireEvent","share email ok",args,true);
		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","share email cancel",args,true);
		    });
*/
	   });
		
		$scope.$on('reorderDays', function (event, args) {
			
			tempModal();
			//update sites in each day
			for (var i=0;i<$scope.itineraryService.getDaysArr().length;i++) {
				$scope.itineraryService.getDaysArr()[i].daySites = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,{dayInTrip :$scope.itineraryService.getDaysArr()[i].no},true);
			}
			
			$scope.daysArrCopy = angular.copy($scope.itineraryService.getDaysArr());
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-ng/modals/change-days-order.html',
		        controller: ReuseableModalController ,
		        scope: $scope
		    });
			$rootScope.$broadcast("itineraryFireEvent","reorder days open",args,true);
			$scope.modalInstance.result.then(function (result) {
				$rootScope.$broadcast("itineraryFireEvent","reorder days ok",args,true);
				to17 = $timeout(function() {
					blockUI.start("Saving...");
   	   			}, 0);
				//$scope.itineraryDataMgr.reorderDays(result);
				itineraryService.getItineraryDataMgr().reorderDays(result);
				//$scope.curItinerarySites = $scope.itineraryDataMgr.processDay($scope.selectedDay.no);
				itineraryService.processDay();
				to18 = $timeout(function() {
					blockUI.reset();
   	   			}, 500);
		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","reorder days cancel",args,true);
		    });

	   });
		
		$scope.$on('changeAttractionsOrder', function (event, args) {
			tempModal();
			$scope.tmpItinerarySites = angular.copy(itineraryService.curItinerarySites);
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-ng/modals/change-attractions-order.html',
		        controller: ReuseableModalController ,
		        scope: $scope
		    });
			$rootScope.$broadcast("itineraryFireEvent","change attractions order open",args,true);
			$scope.modalInstance.result.then(function (result) {
				$rootScope.$broadcast("itineraryFireEvent","change attractions order ok",args,true);
				/**
				 * Get the start time and noInTrip of the previous first item
				 */
				to19 = $timeout(function() {
					blockUI.start("Changing Order...");
   	   			}, 0);
   	   			
				to20 = $timeout(function() {
					var newNoInTrip = itineraryService.curItinerarySites[0].noInTrip;
					var dayStartTime =  itineraryService.curItinerarySites[0].hourText;
					var el = document.getElementById('attractionsReorder');
					for (var i=0;i<result.length;i++) {
						for (var j=0;j<itineraryService.itinerary.itinerarySites.length;j++) {
							if (itineraryService.itinerary.itinerarySites[j].id == result[i].id) {
								//update the noInTrip based on the new location
								itineraryService.itinerary.itinerarySites[j].noInTrip = newNoInTrip;
								
								itineraryService.itinerary.itinerarySites[j].curSiteTransitType = null;
								itineraryService.itinerary.itinerarySites[j].directionsData = null;
								itineraryService.itinerary.itinerarySites[j].metersDistancePrev = null;
								itineraryService.itinerary.itinerarySites[j].minutesWalkingPrev = null;
								itineraryService.itinerary.itinerarySites[j].metersWalkingPrev = null;
								itineraryService.itinerary.itinerarySites[j].minutesTransitPublicPrev = null;
								itineraryService.itinerary.itinerarySites[j].metersTransitPrev = null;
								itineraryService.itinerary.itinerarySites[j].minutesTransitCarPrev = null;
								itineraryService.itinerary.itinerarySites[j].metersTransitCarPrev = null;
								
								if (i==0) {
									//set the day start time for the first item
									itineraryService.itinerary.itinerarySites[j].hourText = dayStartTime;
								}
								break;
							}
						}
						newNoInTrip++;
					}

					itineraryService.getItineraryDataMgr().setItineraryObj($scope.itineraryService.itinerary);
					//itineraryService.init(itineraryService.getItineraryDataMgr().getItineraryObj());
					//itineraryService.processDay();
					requireReload = true;
					$q.all(new Array(itineraryService.saveItinerary())).then(
		   	   			 function(results) {
		   	   				 //$scope.curItinerarySites = $scope.itineraryDataMgr.processDay($scope.selectedDay.no);
		   	   				 blockUI.reset();
		   	   			 }, function(errors) {
				   			 
		   	   			 }
			        );
				}, 500);
		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","change attractions order cancel",args,true);
		    });

	   });

		
		//Sort attractions (cancel sort for hotels)
		$scope.sortableOptions = {
				cancel: ".unsortable"
		}
		
		$scope.newAddedAttraction = null;
		
		$scope.$on('addAttraction', function (event, args) {
			tempModal();
			$scope.isChangeDay = false;
			var argsObj = angular.fromJson(args);
			
			//support for add from wishlist
			var visitAttraction = null;
			var personalAttraction = null;
			if (argsObj.siteId) {
				visitAttraction =  $filter('filter')($scope.allAttractions,{id :argsObj.siteId},true)[0];
				$scope.selectedAttraction = visitAttraction;
			} else {
				personalAttraction = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,{id :argsObj.siteId},true)[0];
				$scope.selectedAttraction = personalAttraction;
			}
			
			$q.all(new Array(itineraryService.getItineraryDataMgr().suggestAddAttraction(personalAttraction,visitAttraction))).then(
	   	   			 function(results) {
	   	   				 $scope.bestNewSite = results[0][0];
	   	   				 $scope.newSiteRes  = $filter('unique')(results[0] ,"day");
	   	   				 var daysPrefix = $filter('translateFilter')("Day") + " ";
	   	   				 if ($scope.newSiteRes.length > 7) {
	   	   					 daysPrefix = "D-";
	   	   				 }
	   	   				 for (var i=0;i<$scope.newSiteRes.length;i++) {
	   	   					 if (i==0) {
	   	   						 $scope.newSiteRes[i].isActive = true;
	   	   					 } else {
	   	   						 $scope.newSiteRes[i].isActive = false;
	   	   					 }
	   	   				 }
	   	   			 }, function(errors) {
			   			 
	   	   			 }
	        	);
			 
			 $scope.modalInstance = $uibModal.open({
					templateUrl: appWebRoot + '/itinerary-ng/modals/add-site.html',
			        controller: ReuseableModalController ,
			        scope: $scope,
			        windowClass : 'add-day-dialog'
			    });
			 	$rootScope.$broadcast("itineraryFireEvent","add attraction open",args,true);
				$scope.modalInstance.result.then(function (result) {
					$rootScope.$broadcast("itineraryFireEvent","add attraction ok","",true);
					$scope.itineraryService.selectedTab = "itinerary";
					to21 = $timeout(function() {
						blockUI.start("Saving...");
	   	   			}, 0);
					scrollToMap();
					$scope.showMyPlaces = false;
					requireReload = true;
					itineraryService.getItineraryDataMgr().setItineraryObj(result.newItineraryObj);
					$scope.selectedAttraction.isInItinerary = true;
					itineraryService.setNewAddedAttraction($scope.selectedAttraction);
					itineraryService.setSelectedDay($filter('filter')($scope.itineraryService.getDaysArr(),{no :result.day},true)[0]);
					$q.all(new Array(itineraryService.getItineraryDataMgr().ensureRoutingDataForDay(itineraryService.getSelectedDay().no))).then(
			   	   		function(results) {
			   	   		$q.all(new Array(itineraryService.saveItinerary())).then(
					   	   		function(results) {
					   	   			itineraryService.generateDays();
					   	   			if ($scope.selectedAttraction.additionalData != null && $scope.selectedAttraction.additionalData.locationId && $scope.selectedAttraction.type == "restaurant") {
					   	   				itineraryService.restaurantInItinerary($scope.selectedAttraction,true);
					   	   			}
					   	   			
					   	   			//$scope.newAddedAttraction = $scope.selectedAttraction;
					   	   			//$rootScope.$broadcast("addedNewAttraction",$scope.selectedAttraction);
					   	   			//$scope.changeTab("itinerary",false,true);
					   	   			//$rootScope.$broadcast("refreshItineraryAttractions",$scope.selectedAttraction,true);
					   	   		}
					   	   	);
			   	   		}
				   	);

			    }, function () {
			    	$rootScope.$broadcast("itineraryFireEvent","add attraction cancel","",true);
			    });
		
	   });
		
		$scope.$on('updateWishlist', function (event) {
			$scope.updateWishlist();
		});
		
		$scope.updateWishlist = function() {
			$scope.wishlistObject.attractions = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,function(value, index){ if (value.dayInTrip == -1 && value.site != null) {return true} });
			$scope.wishlistObject.restaurants = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,function(value, index){ if (value.dayInTrip == -1 && value.type == 'restaurant') {return true} });
			$scope.wishlistObject.shopping = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,function(value, index){ if (value.dayInTrip == -1 && value.type == 'shopping') {return true} });
			$scope.wishlistObject.other = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,function(value, index){ if (value.dayInTrip == -1 && value.type != 'shopping' && value.type != 'restaurant' && value.site == null) {return true} });
		}
		
		
		
		$scope.$on('wishlistNameClick', function (event, args) {
			var argsObj = angular.fromJson(args);
			if (argsObj.itrSiteId != null && argsObj.itrSiteId.length > 0) {
				var itrSiteIdInt = parseInt(argsObj.itrSiteId);
				var itrSite = $filter('filter')(itineraryService.itinerary.itinerarySites,{id :itrSiteIdInt},true)[0];
				if (itrSite.site != null) {
					window.open($scope.appRoot+'/'+$scope.lang+'/'+$scope.cityObj.legalName+'/attractions/'+itrSite.site.legalName);
				} else if (itrSite.additionalData != null && itrSite.additionalData.taLocationId != null) {
					$scope.selectedAttractionNg = itrSite;
					$scope.selectedAttractionNg.website = itrSite.additionalData.website;
					$scope.selectedAttractionNg.locationId = itrSite.additionalData.taLocationId;
					$scope.selectedAttractionNg.bookingUrl = itrSite.additionalData.bookingUrl;
					$scope.selectedAttractionNg.address = itrSite.additionalData.address;
					$scope.selectedAttractionNg.priceLevel = itrSite.additionalData.priceLevel;
					$scope.selectedAttractionNg.phone = itrSite.additionalData.phone;
					$scope.selectedAttractionNg.rating = itrSite.additionalData.rating;
					$scope.selectedAttractionNg.cuisine = itrSite.additionalData.cuisine;
					$scope.selectedAttractionNg.numReviews = itrSite.additionalData.numReviews;
					$scope.selectedAttractionNg.smallPhoto = itrSite.additionalData.smallPhoto;
					$scope.selectedAttractionNg.isInItinerary = true; 
					$scope.itineraryService.getReviewsForRestaurants($scope.selectedAttractionNg);
					
					$rootScope.$broadcast("itineraryFireEvent","open restaurant overlay ",args,true);
					$scope.modalInstance = $uibModal.open({
						templateUrl: appWebRoot + '/itinerary-ng/directives/itinerary-large-restaurant-overlay.html',
				        controller: ReuseableModalController ,
				        scope: $scope,
				        windowClass : 'rest-overlay-dialog'
				    });
				}
			}
		});
		
		
		$scope.$on('addToWishlist', function (event, args) {
			var argsObj = angular.fromJson(args);
			if (argsObj.itrSiteId != null && argsObj.itrSiteId.length > 0) {
				//remove
				$rootScope.$broadcast("itineraryFireEvent","remove from wishlist",args,true);
				var itrSiteIdInt = parseInt(argsObj.itrSiteId);
				$scope.selectedAttraction = $filter('filter')(itineraryService.itinerary.itinerarySites,{id :itrSiteIdInt},true)[0];
				$q.all(new Array(itineraryService.getItineraryDataMgr().removeSite($scope.selectedAttraction,true))).then(
						function(results) {
			   	   			requireReload = true;
			   	   			itineraryService.saveItinerary();
			   	   			$scope.updateWishlist();
						}, function(errors) {
						
						});
			} else {
				$scope.selectedAttraction = $filter('filter')($scope.allAttractions,{id :argsObj.siteId},true)[0];
				$rootScope.$broadcast("itineraryFireEvent","add to wishlist",args,true);
				var newItrSite = { 
		    			visitTimeMinutes : $scope.selectedAttraction.averageVisitDuration,
		    			dayInTrip: -1,
		    			site : $scope.selectedAttraction,
		    			noInTrip: 1000,
		    			isInItinerary: true
		    	};
				newItrSite = new ItinerarySite(newItrSite);
				itineraryService.itinerary.itinerarySites.push(newItrSite);
				itineraryService.getItineraryDataMgr().setNoInTrip();
				requireReload = true;
				//$rootScope.$broadcast("refreshItineraryAttractions",newItrSite,true);
				$q.all(new Array(itineraryService.saveItinerary())).then(
			   	   		function(results) {
			   	   			$scope.updateWishlist();
			   	   		}
			   	   	);
			}
			
			
			
			
	   });
		
		
		
		
		$scope.$on('changeDay', function (event,args,elem,attr) {
			tempModal();
			$scope.isChangeDay = true;
			var setToDay = false;
			$scope.bestFit = false;
			if (attr) {
				requireReload = true;
				$scope.selectedAttraction = attr;
				$scope.bestFit = $scope.selectedAttraction.bestFitPlan;
				$scope.isChangeDay = false;
				if ($scope.newPersonalAttraction != null && ($scope.newPersonalAttraction.bestFitDay || $scope.newPersonalAttraction.bestFitPlan)) {
					//handle best fit in specific day
					//if ($scope.newPersonalAttraction.bestFitDay) {
						setToDay = true;
					//}
					$scope.isChangeDay = false;
					$scope.bestFit = true;
				}
				//$scope.selectedAttraction.noInTrip = 1000; //reset no in trip
			} else {
				$scope.selectedAttraction = $scope.itineraryService.getItinerarySite(args);
				if ($scope.selectedAttraction.dayInTrip == -1) {
					$scope.isChangeDay = false; //handle add from wishlist like add
					if ($scope.selectedAttraction.site != null) {
						$scope.selectedAttraction.name = $scope.selectedAttraction.site.shortTitle;
						$scope.selectedAttraction.shortTitle = $scope.selectedAttraction.site.shortTitle;
						//$scope.selectedAttraction.bestFitDay = true;
					} 
				}
			}
			
			$("#divMapImg_" + $scope.selectedAttraction.noInTrip).qtip("hide");
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-ng/modals/add-site.html',
		        controller: ReuseableModalController ,
		        scope: $scope,
		        windowClass : 'add-day-dialog'
		    });
			//handle attractions map
			$("#attrDivMapParent_child").appendTo($("body"));
        	$("#attrDivMapParent_child").hide();
        	
			to22 = $timeout(function() {
				$q.all(new Array(itineraryService.getItineraryDataMgr().suggestAddAttraction($scope.selectedAttraction, null, itineraryService.getSelectedDay().no))).then(
		   	   			 function(results) {
		   	   				 $scope.bestNewSite = results[0][0];
		   	   				 $scope.newSiteRes  = $filter('unique')(results[0] ,"day");
		   	   				 if ($scope.selectedAttraction.dayInTrip == $scope.bestNewSite.newItrSite.dayInTrip) {
		   	   					 $scope.bestNewSite = $scope.newSiteRes[0];
		   	   				 }
		   	   				 for (var i=0;i<$scope.newSiteRes.length;i++) {
		   	   					 $scope.newSiteRes[i].isActive = false;
		   	   					 if ($scope.bestFit || ($scope.newPersonalAttraction != null && $scope.newPersonalAttraction.bestFitPlan)) {
		   	   						 if ($scope.newSiteRes[i].day == $scope.bestNewSite.day) {
		   	   							 $scope.newSiteRes[i].isActive = true;
		   	   						 }
		   	   					 } else if ($scope.newPersonalAttraction != null && $scope.newPersonalAttraction.bestFitDay) {
			   	   					 if ($scope.newSiteRes[i].day == $scope.selectedAttraction.dayInTrip) {
		   	   							 $scope.newSiteRes[i].isActive = true;
		   	   						 }
		   	   					 } else if ($scope.newSiteRes[i].day == 1) { 
			   	   					//set active tab as first day
			   	   					$scope.newSiteRes[i].isActive = true; 
		   	   						 
		   	   					 }
		   	   					 var curDay = $scope.newSiteRes[i];
		   	   					 var prevSite = null;
		   	   					 var nextSite = null;
		   	   					 for (var j=0;j<curDay.newItrSites.length;j++) {
		   	   						 //if (curDay.newItrSites[j].site && curDay.newItrSites[j].site.id == curDay.newItrSite.site.id) {
		   	   						 if (curDay.newItrSites[j].id == curDay.newItrSite.id) {
		   	   							 prevSite = curDay.newItrSites[j-1];
		   	   							 nextSite = curDay.newItrSites[j+1];
		   	   							 curDay.prevSite = prevSite;
		   	   							 curDay.nextSite = nextSite;
		   	   							 break;
		   	   						 }
		   	   					 }
		   	   				 }
		   	   			 }, function(errors) {
				   			 
		   	   			 }
		        	);
				}, 0);
				if ($scope.selectedAttraction.taRestaurant) {
					$rootScope.$broadcast("itineraryFireEvent","add restaurant open",args,true);
				} else {
					$rootScope.$broadcast("itineraryFireEvent","change attraction day open",args,true);
				}
			 	
			 	
				$scope.modalInstance.result.then(function (result) {
					

	            	requireReload = true;
					if (result == "doEdit") {
						$rootScope.$broadcast("editBreak",null,null,$scope.newPersonalAttraction);
						return;
					}
					scrollToMap();
					if ($scope.selectedAttraction.taRestaurant) {
						$rootScope.$broadcast("itineraryFireEvent","add restaurant ok",args,true);
					} else {
						$rootScope.$broadcast("itineraryFireEvent","change attraction day ok",args,true);
					}
					to23 = $timeout(function() {
						blockUI.start("Saving...");
	   	   			}, 0);
					itineraryService.setNewAddedAttraction($scope.selectedAttraction);
					itineraryService.getItineraryDataMgr().setItineraryObj(result.newItineraryObj);
					itineraryService.setSelectedDay($filter('filter')(itineraryService.getDaysArr(),{no :result.day},true)[0]);
					$location.search('day', result.day).replace();
					itineraryService.selectedTab = "itinerary";
					$q.all(new Array(itineraryService.getItineraryDataMgr().ensureRoutingDataForDay(itineraryService.getSelectedDay().no))).then(
			   	   		function(results) {
			   	   		//itineraryService.generateDays();
			   	   		$q.all(new Array(itineraryService.saveItinerary())).then(
					   	   		function(results) {
					   	   			$scope.updateWishlist();
						   	   	});
			   	   		}
				   	);

			    }, function () {
			    	if ($scope.selectedAttraction.taRestaurant) {
						$rootScope.$broadcast("itineraryFireEvent","add restaurant cancel",args,true);
					} else {
						$rootScope.$broadcast("itineraryFireEvent","change day attraction cancel",args,true);
					}
			    });
		
	   });
		
		$scope.$on('addDay', function (event, args) {
			tempModal();
			if ($scope.itineraryService.itinerary.noOfDays == 10) {
				$scope.modalInstance = $uibModal.open({
   					templateUrl: appWebRoot + '/itinerary/modals/error-add-day.html',
   					controller: ReuseableModalController,
   					scope: $scope
   			    });
				$rootScope.$broadcast("itineraryFireEvent","add day more than 10 error","",true);
				return;
			}
			$rootScope.$broadcast("itineraryFireEvent","add day open",args,true);
			requireReload = true;
			$q.all(new Array(itineraryService.getItineraryDataMgr().addDay())).then(
   	   			 function(results) {
	   	   			$scope.modalInstance = $uibModal.open({
	   					templateUrl: appWebRoot + '/itinerary-ng/modals/add-day.html',
	   					controller: ReuseableModalController,
	   			        scope: $scope
	   			    });
	   	   			
	   	   		$scope.modalInstance.result.then(function (result) {
	   	   			$rootScope.$broadcast("itineraryFireEvent","add day ok",args,true);
	   	   			$scope.itineraryService.itinerary = $scope.itineraryService.getItineraryDataMgr().getItineraryObj();
					itineraryService.generateDays();
				}, function () {
					$rootScope.$broadcast("itineraryFireEvent","add day cancel",args,true);
				});
	   	   			
   	   			 }, function(errors) {
		   			 
   	   			 }
        	);
	   });
		
		$scope.$on('removeDay', function (event, args) {
			tempModal();
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-ng/modals/remove-day.html',
				controller: ReuseableModalController ,
			    scope: $scope
			});
			$rootScope.$broadcast("itineraryFireEvent","remove day open",args,true);
			$scope.modalInstance.result.then(function (result) {
				$rootScope.$broadcast("itineraryFireEvent","remove day ok",args,true);
				if (itineraryService.selectedDay.no == result.no) {
					$scope.changeDay(itineraryService.getDaysArr()[0]);
				}
				itineraryService.getItineraryDataMgr().removeDay(result.no);
		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","remove day cancel",args,true);
		    });
		});
		//	
		$scope.$on('itinerarySettings', function (event, args) {
			tempModal();
			$scope.modalInstance = $uibModal.open({
				 templateUrl: 'ngApp/website/itinerary-ng/modals/settings.html',
				 controller: ReuseableModalController ,
			     scope: $scope
			});
			$rootScope.$broadcast("itineraryFireEvent","itinerary settings open",null,true);
			
			$scope.modalInstance.result.then(function (result) {
				var changed = null;
	        	if (result.maxWalkTime != $scope.itineraryService.itinerary.maxWalkTime || result.defaultTransit != $scope.itineraryService.itinerary.defaultTransit) {
	        		//transit settings changed
	        		$scope.itineraryService.itinerary.maxWalkTime = result.maxWalkTime;
	        		$scope.itineraryService.itinerary.defaultTransit = result.defaultTransit;
	        		itineraryService.getItineraryDataMgr()._maxWalkTimeMins = $scope.itineraryService.itinerary.maxWalkTime;
		        	itineraryService.getItineraryDataMgr()._itineraryObj.defaultTransit = $scope.itineraryService.itinerary.defaultTransit;
		        	itineraryService.processDay();
		        	itineraryService.saveItinerary();
		        	changed = true;
	        	}
	        	
	        	if (result.activeUnit != $scope.activeUnit) {
	        		//units changed
	        		createCookie("is_metric", result.activeUnit == "KM" ? true : false);
	    			createCookie("us_timeformat", result.activeUnit == "KM" ? false : true);
	    			createCookie("units_changed", true);
	    			fireEvent("General","ChangeUnits", result.activeUnit == "KM" ? "metric" : "non-metric");
	    			$scope.activeUnit = result.activeUnit;
	    			try {
	    				//force itinerary details refresh
	    				var curDay = itineraryService.getSelectedDay();
		    			$scope.changeDay(itineraryService.getSelectedDay()+1,"change units", false);
		    			$scope.changeDay(curDay,"change units", false);
	    			} catch (err) {}
	    			
	    			changed = true;
	        	}
	        	
	        	if (result.activeCurrency != $scope.activeCurrency) {
	        		//currency changed
	        		var selctedCurrency = $filter('filter')($scope.currencies,{displayName:result.activeCurrency},true)[0];
	        		//window.localStorage['currencyAbb'] = selctedCurrency.name;
	    			//window.localStorage['currencyText'] = selctedCurrency.displayName;
	        		wrapSetLocalStorage('currencyAbb',selctedCurrency.name);
	        		wrapSetLocalStorage('currencyText',selctedCurrency.displayName);
	    			createCookie("currencyAbb", selctedCurrency.name);
	    			$scope.activeCurrency = result.activeCurrency;
	    			changed = true;
	        	}
	        	if (changed) {
	        		$rootScope.$broadcast("itineraryFireEvent","itinerary settings changed",null,true);
	        	}
		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","itinerary settings cancel",null,true);
		    });
		});
		
		
		$scope.$on('updateEmail', function (event, args) {
			$scope.emailAddress = args;
		});
		$scope.$on('downloadGuide', function (event, args) {
			tempModal();
			var argsObj = angular.fromJson(args);
			$scope.argsObj = argsObj;
			var htmlFile = 'download-guide.html';
			if (argsObj.htmlFile) {
				htmlFile = argsObj.htmlFile; 
			}
			$scope.modalInstance = $uibModal.open({
				 templateUrl: 'ngApp/website/itinerary/modals/' + htmlFile,
				 controller: ReuseableModalController ,
				 windowClass : "itinerary-download-black",
			     scope: $scope
			});
			//$rootScope.$broadcast("itineraryFireEvent",argsObj.type + " guide open",args,true);
			$scope.abNum = $scope.requireEmailConsent ? "100" : "1";
			fireEvent("Download",argsObj.type + "_itinerary_" + $scope.abNum + "_open",argsObj.from);
			$scope.downloadType = argsObj.type;
			$scope.modalInstance.result.then(function (result) {
				//$rootScope.$broadcast("itineraryFireEvent",argsObj.type + " guide ok",args,true);
				if (result.indexOf("ok") < 0) {
					//$scope.doSetTripDates(result);
					itineraryService.generateDays();
				}
				
		    }, function () {
		    	//$rootScope.$broadcast("itineraryFireEvent",argsObj.type + " guide cancel",args,true);
		    	fireEvent("Download",argsObj.type + "_itinerary_" + $scope.abNum + "_cancel",argsObj.from);
		    });
		});
		
		$scope.$on('downloadRestaurants', function (event, args) {
			tempModal();
			$scope.modalInstance = $uibModal.open({
				 templateUrl: 'ngApp/website/itinerary/modals/download-restaurants.html',
				 controller: ReuseableModalController ,
				 windowClass : 'itinerary-download-black',
			     scope: $scope
			});
			$scope.abNum = $scope.requireEmailConsent ? "100" : "1"; 
			fireEvent("Download","download_restaurants_" + $scope.abNum + "_open",null);
			//$rootScope.$broadcast("itineraryFireEvent","download restaurants open",args,true);
			$scope.modalInstance.result.then(function (result) {
				//$rootScope.$broadcast("itineraryFireEvent","download restaurants ok",args,true);
		    }, function () {
		    	//rootScope.$broadcast("itineraryFireEvent","download restaurants cancel",args,true);
		    	fireEvent("Download","download_restaurants_" + $scope.abNum + "_cancel",null);
		    });
			
		});
		
		
		
		$scope.$on('downloadApp', function (event, args) {
			tempModal();
			$scope.argsObj = angular.fromJson(args);
			$scope.modalInstance = $uibModal.open({
				 templateUrl: 'ngApp/website/itinerary/modals/download-app.html',
				 controller: ReuseableModalController ,
				 windowClass : 'itinerary-download-black',
			     scope: $scope
			});
			//$rootScope.$broadcast("itineraryFireEvent","download app open",args,true);
			$scope.abNum = $scope.requireEmailConsent ? "100" : "1"; 
			fireEvent("Download","download_app_" + $scope.abNum + "_open",$scope.argsObj.from);
			$scope.modalInstance.result.then(function (result) {
				
				
				//$rootScope.$broadcast("itineraryFireEvent","download app ok",args,true);
				
		    }, function () {
		    	//$rootScope.$broadcast("itineraryFireEvent","download app cancel",args,true);
		    	fireEvent("Download","download_app_" + $scope.abNum + "_cancel",args.from);
		    });
		});
		
		
		
		
		
	   $scope.$on('changeStartTime', function (event, args) {
		   tempModal();
		   
		   var argsObj = angular.fromJson(args);
		   if (argsObj.siteId != null) {
			   //used in trip overview
			   $scope.selectedAttraction = $filter('filter')(itineraryService.getCurItinerarySites(),{id :argsObj.siteId},true)[0];
		   }  else {
			   $scope.selectedAttraction = itineraryService.getCurItinerarySites()[0]; //start time is always for the first site
		   }
			var d = new Date();
			d.setHours( $scope.selectedAttraction.hourText.split(":")[0] );
			d.setMinutes( $scope.selectedAttraction.hourText.split(":")[1] );
			$scope.selectedAttraction.hourDate = d; 
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-ng/modals/adjust-start-time.html',
		        controller: ReuseableModalController ,
		        scope: $scope // <- This is it!
		    });
			$rootScope.$broadcast("itineraryFireEvent","change start time open",args,true);
			$scope.modalInstance.result.then(function (result) {
				$rootScope.$broadcast("itineraryFireEvent","change start time ok",args,true);
				to24 = $timeout(function() {
					blockUI.start("Saving...");
   	   			}, 0);
				var h =  result.startTime.getHours()
				var m = result.startTime.getMinutes();
				if (m == "0") {
					m = "00";
				}
				var hourTxt = h + ":" + m;
				$scope.selectedAttraction.hourText = hourTxt;
				requireReload = true;
				if (result.applyAllDays) {
					itineraryService.getItineraryDataMgr().setStartHourForAllDays($scope.selectedAttraction.hourText);
				} else {
					//$scope.itineraryDataMgr.save();
					itineraryService.getItineraryDataMgr().setStartHourForAllDays($scope.selectedAttraction.hourText,$scope.selectedAttraction.dayInTrip);
				}
				
				//$rootScope.$broadcast("itr_site_changed",$scope.selectedAttraction,true);
				//$scope.curItinerarySites = $scope.itineraryDataMgr.processDay($scope.selectedDay.no);
				//itineraryService.processDay();
		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","change start time cancel",args,true);
		    });

	   });
	   
	   
	   
	   $scope.$on('addTripDates', function (event, args) {
		   tempModal();
		   var argsObj = angular.fromJson(args);
		   var from = argsObj.from;
		   $scope.setTripDates = argsObj.addTripDates;
		   $scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-ng/modals/add-trip-dates.html',
		        controller: ReuseableModalController ,
		        windowClass : 'make-the-most',
		        //windowClass : ($scope.emailAddress == null || $scope.emailAddress.length == 0) ? '' : 'itr-small-date',
		        scope: $scope
		    });
			$rootScope.$broadcast("itineraryFireEvent","add trip dates open",from,true);
			$scope.modalInstance.result.then(function (result) {
				$rootScope.$broadcast("itineraryFireEvent","add trip dates ok",from,true);
				
				$scope.doSetTripDates(moment(result,'YYYY-MM-DD',true).toDate());
	   			$scope.emailAddress = $("#emailAddressSend").val();
	   			if ($scope.emailAddress) {
	   				if ($scope.emailAddress == null || ($scope.emailAddress != null && $scope.emailAddress.length == 0)) {
	   					$rootScope.$broadcast("itineraryFireEvent","add trip dates new email",null,true);
	   				}
	   				
	   				/*require(["app/core/login"], function(LoginMgr) {
						LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
					})*/
	   			}

		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","add trip dates cancel",from,true);
		    });
	   });
	   
	   $scope.doSetTripDates = function(result) {

		   	//$scope.itineraryDataMgr.setStartDate(result);
		   itineraryService.getItineraryDataMgr().setStartDate(result);
		   itineraryService.generateDays();
		   itineraryService.saveItinerary();
		   	//$scope.itineraryDataMgr.save();
		   	
  			//$scope.curItinerarySites = $scope.itineraryDataMgr.processDay($scope.selectedDay.no); 
	   }
	   
	  /* $scope.$on('addHotel', function (event, args) {
		   tempModal();
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary/modals/add-hotel.html',
		        controller: HotelsController ,
		        scope: $scope
		    });
			$rootScope.$broadcast("itineraryFireEvent","add hotel open",args,true);
			$scope.modalInstance.result.then(function (result) {
				scrollToMap();
				$rootScope.$broadcast("itineraryFireEvent","add hotel ok",args,true);
				to25 = $timeout(function() {
					blockUI.start("Saving...");
   	   			}, 0);
				requireReload = true;
				$q.all(new Array(itineraryService.getItineraryDataMgr().addHotel(result,true))).then(
		   	   			 function(results) {
		   	   				 $scope.newAddedAttraction = itineraryService.curItinerarySites[0]
		   	   				 //$scope.itineraryDataMgr.save();
		   	   				 itineraryService.saveItinerary();
		   	   			 }, function(errors) {
				   			 
		   	   			 }
		        	);

		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","add hotel cancel",args,true);
		    });
	   });*/
	   
	   $scope.$on('removeHotel', function (event, args) {
		   	tempModal();
		   	$scope.selectedAttraction = $scope.itineraryService.getItinerarySite(args);
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-ng/modals/remove-hotel.html',
		        controller: ReuseableModalController ,
		        scope: $scope
		    });
			$rootScope.$broadcast("itineraryFireEvent","remove hotel open",args,true);
			$scope.modalInstance.result.then(function (result) {
				blockUI.start("Saving...");
				if (result == "all") {
					itineraryService.getItineraryDataMgr().removeHotel();
					$rootScope.$broadcast("itineraryFireEvent","remove hotel ok - all",args,true);
				} else {
					//handle empty day with only hotel
					if (itineraryService.curItinerarySites.length == 2 && itineraryService.curItinerarySites[0].isHotel() && itineraryService.curItinerarySites[1].isHotel()) {
						//console.log('Empty day with hotel');
					}
					$q.all(new Array(itineraryService.getItineraryDataMgr().removeSite($scope.selectedAttraction,true))).then(
							function(results) {
				   	   			requireReload = false;
				   	   			itineraryService.processDay();
				   	   			itineraryService.saveItinerary();
				   	   			$timeout(function() {
				   	   				itineraryService.curItinerarySites = $filter('filter')(itineraryService.itinerary.itinerarySites, {dayInTrip: $scope.selectedDay.no}, true);
				   	   			}, 100)
				   	   		
							}, function(errors) {
					});
					$rootScope.$broadcast("itineraryFireEvent","remove hotel ok - instance",args,true);
				}
				
				itineraryService.processDay();
				
				to26 = $timeout(function() {
					//remove the saving message
					blockUI.reset();
				}, 1000)
				
		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","remove hotel cancel",args,true);
		    });

	   })
 
	   
	   ReuseableModalController = function($scope){
		   $('.qtip').qtip('hide'); //hide qtip
			$scope.progressVal = 0;
			$scope.runProgress = false;
			$scope.doneLoading = false;
			$scope.askPasswd = false;
			$scope.userQuestion = "";
			$scope.hasEmailConset = false;
			$scope.showPlaceNameField = false;
			$scope.showPlaceAddressField = false;
			$scope.dayToRemove = $scope.selectedDay != null ? $scope.itineraryService.getDaysArr()[$scope.selectedDay.no-1] : 1;
			$scope.myGooglePlace = null;
			var farAwayCounter = 0;
			$scope.numOfDays = itineraryService.getItinerary().noOfDays;
			$scope.datepickerOptions = {showWeeks:false};
			
			 $scope.today = function() {
			        $scope.newPersonalAttraction.additionalData.date = new Date();
			 };

			 $scope.clear = function () {
				 $scope.newPersonalAttraction.additionalData.date = null;
			 };


			 $scope.open1 = function($event) {
			        $event.preventDefault();
			        $event.stopPropagation();

			        $scope.opened = {
			          value: true
			        };
			    };

			    $scope.dateOptions = {
			        formatYear: 'yy',
			        startingDay: 1
			    };
		
			
			
			
			
			if ($scope.itineraryService.itinerary.startDate) {
				//set start date in date dialogs if itinerary has a date
				$scope.startDate = new Date($scope.itineraryService.itinerary.startDate);
			}
			$timeout(function() {
				$("#addNotesTxtArea").focus();
			}, 1000);

			$scope.loadSortable = function(id) {
				$("#" + id).sortable({
					items: "div:not(.unsortable)"
				});
				
			}

			
			$scope.changeAddSitesTab = function(idx) {
				for (var i=0;i<$scope.newSiteRes.length;i++) {
   					 if ($scope.newSiteRes[i].day==idx) {
   						 $scope.newSiteRes[i].isActive = true;
   					 } else {
   						 $scope.newSiteRes[i].isActive = false;
   					 }
   				 }
			}
			
			$scope.setShowBestFalse = function() {
				$scope.showBest = false;
			}
			
			/**
			 * Handles the date dropdown opener
			 */
			$scope.open = function($event) {
			    $event.preventDefault();
			    $event.stopPropagation();

			    $scope.opened = true;
			};
			
			var addrAutocompleteName = null;

			$scope.getSuggestionsFromServer = function(input) {
				var deferred = $q.defer();
				if (input.length < 3) {
					return;
				}
				var baseUrl = appRoot + "/api/app/googleAutocompleteForWebsite?location="+ $scope.cityObj.latitude + ","+ $scope.cityObj.longitude+ "&radius=50000&sessiontoken="+sessionToken1+"&input="+input;
				$http.get(baseUrl).then(function 
						successCallback(response) {
						if (response.data.status != "OK") {
							var obj = new Object();
							obj.title = "No results found for <b>&qout;" + input + "&qout;</b>";
							obj.isLast = true;
							obj.imagesCdn = imagesCdn;
							response.data.predictions.push(obj);
						} else {
							if (response.data.predictions != null && response.data.predictions.length > 0) {
								response.data.predictions[0].isFirst = true;
								response.data.predictions[response.data.predictions.length-1].isLast = true;
							}
							for (var i=0;i<response.data.predictions.length;i++) {
								var curPrediction = response.data.predictions[i];
								var title = curPrediction.structured_formatting.main_text;
								var re = new RegExp(input,"gi");
								title = title.replace(re, "<b style='text-transform: capitalize;'>"+input+"</b>");
								curPrediction.title = title;
								curPrediction.imagesCdn = imagesCdn;
							}
						}
						
						deferred.resolve(response.data.predictions);
				});
				
				return deferred.promise;
			 } 
			$scope.getPlaceDetailsRunning = false;
			$scope.myPlaceOnSelect = function(selectedItem) {
				$scope.getPlaceDetailsRunning = true;
				var baseUrl = appRoot + "/api/app/googlePlaceFullDataForWebsite/"+selectedItem.place_id+"/default?sessiontoken=" + sessionToken1;
				$http.get(baseUrl).then(function 
						successCallback(response) {
						$scope.getPlaceDetailsRunning = false;
						sessionToken1 = createGuid(); //reset session token
						$scope.myGooglePlace = response.data.result;
						if ($scope.myGooglePlace != null) {
							$scope.newPersonalAttraction.address = $scope.myGooglePlace.formatted_address;
							$scope.newPersonalAttraction.fullName = $scope.myGooglePlace.name + ", " + $scope.myGooglePlace.formatted_address;
							$scope.newPersonalAttraction.name = $scope.myGooglePlace.name;
							if ($scope.newPersonalAttraction.type != "hotel") {
								$scope.newPersonalAttraction.type = handlePlaceType($scope.myGooglePlace.types);
							}
							
							//$scope.$apply(function() {
								$scope.errorFieldTxt = null;
								$scope.newPersonalAttraction.longitude = $scope.myGooglePlace.geometry.location.lng;
								$scope.newPersonalAttraction.latitude = $scope.myGooglePlace.geometry.location.lat;
								if ($scope.myGooglePlace.types.length > 0 &&  ($scope.myGooglePlace.types[0] == "street_address" || $scope.myGooglePlace.types[0] == "route")) {
									$scope.newPersonalAttraction.name = "";
									$scope.showPlaceNameField = true;
								}
			   				//});
						}
				});
			}
			
			$scope.loadGoogleAutocomplete = function() {
				if (isInterestingCountry($scope.lang) || $scope.isBreak) {
					$scope.showPlaceNameField = false;
					$scope.interestingCountry = true;
					if (sessionToken1 == null) {
						sessionToken1 = createGuid();
					}
				} else {
					$scope.interestingCountry = false;
					$scope.placeholder = "Search for address";
					$scope.showPlaceAddressField = true;
					$scope.showPlaceNameField = true;
				}
			}
			
			$scope.closeAutocompleteOptions = function() {
				addrAutocompleteName.set("place", null);
			}
			
			function handlePlaceType(typesArr) {
				var typesObject = [{
				                	   name: "restaurant",
				                	   keywords: ["restaurant","food"]
				                   },{
				                	   name: "shopping",
				                	   keywords: ["shopping","store"]
				                   },{
				                	   name: "transit",
				                	   keywords: ["airport","transit_station","bus_station","train_station"]
				                   }];
				if (typesArr != null && typesArr.length > 0) {
					for (var i=0;i<typesArr.length;i++) {
						var curType = typesArr[i];
						for (var x=0;x<typesObject.length;x++) {
							for (y=0;y<typesObject[x].keywords.length;y++) {
								var curGoogleType = typesObject[x].keywords[y];
								if (curType == curGoogleType) {
									return typesObject[x].name;
								}
							}
						}
					}
				}
				return "my-place";
			}
		
			 var runProgressWatch = $scope.$watch('runProgress', function(newVal, oldVal) {
				if (newVal) {
				
					$timeout(function() {
						$scope.progressVal = 1;
						$("#customProgressBar").addClass("progress-bar-full");
					}, 500);
					
					$timeout(function() {
						$scope.runProgress = false;
						$scope.progressVal =100;
						$( ".modal-content" ).css("max-height","1000px");
					}, 5000);
					
				}	
		 	});
			 
			 $scope.$on('$destroy', function(){
				 runProgressWatch();
			 });
			 
	        $scope.confirm = function(res) {
	        	if (res) {
	        		$scope.modalInstance.close(res);
	        	} else {
	        		$scope.modalInstance.dismiss();
	        	}
	        }
	        
	        $scope.showRestaurantOverlay = function() {
	        	$scope.modalInstance.close("");
	        }
	        
	        $scope.initSettings = function() {
	        	$scope.settings = new Object();
	        	$scope.settings.maxWalkTime = $scope.itineraryService.itinerary.maxWalkTime;
	        	$scope.settings.defaultTransit = $scope.itineraryService.itinerary.defaultTransit;
	        	$scope.settings.activeUnit = $scope.activeUnit;
	        	$scope.settings.activeCurrency = $scope.activeCurrency;
	        }
	        
	        $scope.updateSettings = function() {
	        	$scope.confirm($scope.settings);
	        }
	        
	        /**
	         * Open my places from the select type popover
	         */
	        $scope.doAddMyPlace = function(siteId,personalPlace,from,title,type) {
	        	$timeout(function() {
	        		var str = '"personalPlace":'+personalPlace+',"from":"'+$scope.myPlaceFrom+'","title":"'+title+'","type":"'+type + '"';
	        		if (siteId != null) {
	        			str += ',"siteId":'+siteId
	        		}
	        		$rootScope.$broadcast("addBreak",'{'+str+'}');
				}, 0);
	        	 $scope.confirm("ok");
	        	
	        }
	        
	        $scope.doDownloadComplete = function(startDate,andClose) {
	        	var doSave = false;
	        	var isd = new Date($scope.itineraryService.itinerary.startDate);
	        	if (startDate == null || isd.getTime() == startDate.getTime()) {
	        		if (andClose) {
	        			$scope.modalInstance.close("");
	        		}
	        		
	        	} else {
	        		doSave = true;
	        		//save date only if it has changed\
	        		if (andClose) {
	        			$scope.modalInstance.close(startDate);
	        		}
	        	}
	        	return doSave;
	        }
	        
	        /**
	         * Sort attractions in overlay
	         */
	        $scope.changeAttractionsOrder = function() {
	        	var arr = new Array();
	        	$('#attractionsReorder').children().each(function () {
	        	    var s = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,{id:parseInt($(this).attr("siteid"))},true)[0];
	        	    arr.push(s);
	        	});
	        	$scope.modalInstance.close(arr);
	        }
	        
	        /**
	         * Sort days
	         */
	        $scope.sortDays = function() {
	        	var arr = new Array();
	        	$('#sortableDays').children().each(function () {
	        	    arr.push(parseInt($(this).attr("dayno")));
	        	});
	        	$scope.modalInstance.close(arr);
	        }
	        
	       /* $scope.rateGuide = function(res) {
	        	$scope.submitted = true;
	        	$timeout(function() {
	        		$http.post(appRoot + '/ws/saveUserItineraryRating', {itineraryRatingObj: angular.toJson($scope.itineraryService.itineraryRating)}).
					  success(function(data, status, headers, config) {
						  //No need for success message
					  }).
					  error(function(data, status, headers, config) {

					  });
	        		$scope.submittedOk = true;
				}, 1500);
	        }*/

	        $scope.getItinerarySites = function() {
	        	var rndFiveMin = 1000 * 60 * 5;
	        	$scope.dayItinerarySites = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,function(value, index){
	        		/*if ($scope.newPersonalAttraction.longitude == null) {
	        			return false;
	        		}*/

	        		value.optionTxt = "After ";
	        		value.optionTxt += value.site != null ? value.site.shortTitle : value.name;
	        		 
	        		if (!$scope.isEditBreak && $scope.newPersonalAttraction.longitude != null) {
	        			//get the time for each site
	        			var destSite = new ItinerarySite($scope.newPersonalAttraction);
	        			var res = itineraryService.getItineraryDataMgr().getDirectionsData(value,destSite);
	        			var siteVisitEnd = new Date(value.visitHourEnd);
	        			siteVisitEnd.setMinutes(siteVisitEnd.getMinutes() + res.timeToArrival);
	        			var rounded = new Date(Math.round(siteVisitEnd.getTime() / rndFiveMin) * rndFiveMin)
	        			value.optionTxt = $filter('date')(rounded, 'shortTime') + " (" + value.optionTxt + ")";
	        		}
	        		if (value.dayInTrip > 0 && value.dayInTrip == $scope.newPersonalAttraction.dayInTrip) {
	        			if (value.type != null && value.type == "hotel") {
	        				return false;
	        			}
	        			if (value.id == $scope.newPersonalAttraction.id) {
	        				return false;
	        			}
	        			return true;
	        		}
	        		return false;
				});
	        	
	        	//handle the selected options - angular sucks
	        	$timeout(function() {
	        		$("#breakDaySelect").val($scope.newPersonalAttraction.dayInTrip);
	        		
	        		var selectedValue = "bestFitDay";
	        		if ($scope.newPersonalAttraction.noInTrip > 0 && $scope.newPersonalAttraction.noInTrip != 1000) {
	        			selectedValue = $scope.newPersonalAttraction.noInTrip;
	        		}
	        		$("#breakTimeSelect").val(selectedValue);
	        		
	        	},500);
	        	
	        }
	        
	        $scope.isFirstSite = function() {
	        	var firstNo =  $scope.getFistSiteNo(false);
	        	var newSiteNo = parseInt($scope.newPersonalAttraction.noInTrip);
	        	if ($scope.newPersonalAttraction.wasFirst == null) {
	        		$scope.newPersonalAttraction.wasFirst =  (firstNo == newSiteNo);
	        	}
	        	return firstNo == newSiteNo;
	        }
	        
	        $scope.getFistSiteNo = function(doSet) {
	        	var res = 1;//default
	        	
	        	var dayInt = parseInt($scope.newPersonalAttraction.dayInTrip);
	        	var tmpArr = new Array();
	        	while (tmpArr.length == 0 && dayInt > 0) {
	        		tmpArr = $filter('filter')($scope.itineraryService.itinerary.itinerarySites, {dayInTrip: dayInt}, true);
	        		if (tmpArr.length == 0) {
	        			dayInt--;
	        		}
	        	}
	        	
	        	if (tmpArr.length > 0) {
	        		res = tmpArr[0].noInTrip;
	        		//res++
	        	}
	        	if (itineraryService.getItineraryDataMgr().isContainsHotel()) {
        			res += 1;
        		}
	        	if (doSet) {
	        		$scope.newPersonalAttraction.noInTrip = res;
	        		//handle setting the start time
	        		if (tmpArr.length > 0) {
	        			$scope.newPersonalAttraction.hourText = tmpArr[0].hourText;
	        		}
	        	}
	        	return res;
	        }
	        
	        $scope.copyPosition = function() {
	        	$scope.newPersonalAttraction.dayInTripCopy = $scope.newPersonalAttraction.dayInTrip;
	        	$scope.newPersonalAttraction.noInTripCopy = $scope.newPersonalAttraction.noInTrip;
	        }
	        
      
	        $scope.checkValidAddress = function(isWishlist) {
	        	if (!isInterestingCountry($scope.lang) && !$scope.isBreak) {
		        	var geocoder = new google.maps.Geocoder();
		        	var radiusMeters = 50000;
					var cityCenter = new google.maps.LatLng($scope.cityObj.latitude, $scope.cityObj.longitude);
					var bounds = new google.maps.Circle({center: cityCenter, radius: radiusMeters}).getBounds();
					var address = document.getElementById('googleAutoCompleteInputAddress').value;
					geocoder.geocode({'address': address, bounds: bounds}, function(results, status) {
						if (status === 'OK') {
							$scope.myGooglePlace = results[0];
							if ($scope.myGooglePlace != null) {
								$scope.newPersonalAttraction.address = $scope.myGooglePlace.formatted_address;
								$scope.newPersonalAttraction.fullName = document.getElementById('googleAutoCompleteInputName').value;
								$scope.newPersonalAttraction.name = document.getElementById('googleAutoCompleteInputName').value;
								if ($scope.newPersonalAttraction.type != "hotel") {
									$scope.newPersonalAttraction.type = handlePlaceType($scope.myGooglePlace.types);
								}
								doCheckValidAddress(isWishlist);
							}
						} else {
							$scope.$apply(function() {
								$scope.errorFieldTxt = "Could not find address for \"" + address + "\"";
							});
							return;
						}
					});
	        	} else {
	        		doCheckValidAddress(isWishlist);
	        	}
	        }
	        
	        function doCheckValidAddress(isWishlist) {
	        	$scope.errorFieldTxt = null;
	        	if ($scope.showPlaceNameField) {
					 var name = $("#" + $scope.googleAutoCompleteInpt + "Name").val();
					 $scope.newPersonalAttraction.name = name.length > 0 ? name : $scope.newPersonalAttraction.address;
				}
	        	if ($scope.newPersonalAttraction.name.length == 0) {
	        		$scope.errorFieldTxt = "Name cannot be blank";
	        		fireEvent("Itinerary-2.0", "my place name/address is blank");
	        		return;
	        	}
	        	
	        	
	        	var mapServices = new MapServices();

	        	var address = $("#" + $scope.googleAutoCompleteInpt).val();
				if ($scope.myGooglePlace != null) {
					var firstItrSite = itineraryService.getItineraryDataMgr().getItrSiteByNo(1);
					
					// todo: handle also checking on empty itinerary
					if (firstItrSite != null && farAwayCounter == 0) {
						var placeLat = isInterestingCountry($scope.lang) ? $scope.myGooglePlace.geometry.location.lat : $scope.myGooglePlace.geometry.location.lat();
						var placeLng = isInterestingCountry($scope.lang) ? $scope.myGooglePlace.geometry.location.lng : $scope.myGooglePlace.geometry.location.lng();
						var meters = mapServices.calcDistanceBetween(firstItrSite.getLatLng().lat(), firstItrSite.getLatLng().lng(),
								placeLat, placeLng);
						//console.log("meters distance from first itr site", meters);
						
						if (meters > 100000) {
							//_self._validateInputs.data("validator").invalidate({
							//	'txtActAddress': 'This place is too far away from the itinerary'	
							//});
							$scope.errorFieldTxt = $scope.newPersonalAttraction.name + " is far from " + $scope.cityObj.name + ", are you sure you want to add it to your itinerary?";
							//$scope.$apply();
							farAwayCounter++;
							return;
						}							
					}

					$scope.newPersonalAttraction.longitude = isInterestingCountry($scope.lang) ? $scope.myGooglePlace.geometry.location.lng : $scope.myGooglePlace.geometry.location.lng();
					$scope.newPersonalAttraction.latitude = isInterestingCountry($scope.lang) ? $scope.myGooglePlace.geometry.location.lat : $scope.myGooglePlace.geometry.location.lat();
					$scope.newPersonalAttraction.address = $scope.myGooglePlace.formatted_address;
					var additionalDataObj = new Object();
					additionalDataObj.website = $scope.myGooglePlace.website;
					additionalDataObj.googlePlaceId = $scope.myGooglePlace.place_id;	
					additionalDataObj.phoneNum = $scope.myGooglePlace.formatted_phone_number;
					$scope.newPersonalAttraction.additionalData = additionalDataObj;
					if ($scope.myGooglePlace.photos != null && $scope.myGooglePlace.photos.length > 0) {
						//var googleImage = $scope.myGooglePlace.photos[0].getUrl({'maxWidth': 350, 'maxHeight': 350});
						//var photoRef = sharedItineraryService.getPhotoReference(googleImage);
						var photoRef = $scope.myGooglePlace.photos[0].photo_reference;
						$scope.newPersonalAttraction.googleImgUrl =  globExprWeb["google-photos-cloudfront"] + "/googleplaceimage/" + $scope.newPersonalAttraction.additionalData.googlePlaceId + "/350/350/pic.jpg"
						if (photoRef != null && photoRef.length > 0) {
							$scope.newPersonalAttraction.googleImgUrl += "?photoreference=" + photoRef;
						}
						if ($scope.myGooglePlace.photos[0].html_attributions != null && $scope.myGooglePlace.photos[0].html_attributions.length > 0) {
							$scope.newPersonalAttraction.googleImgCredit = $scope.myGooglePlace.photos[0].html_attributions[0];
						}
					}
					
					/*if ($scope.myGooglePlace.photos != null && $scope.myGooglePlace.photos.length > 0) {
						$scope.newPersonalAttraction.googleImgUrl =  $scope.myGooglePlace.photos[0].getUrl({'maxWidth': 350, 'maxHeight': 350});
						if ($scope.myGooglePlace.photos[0].html_attributions != null && $scope.myGooglePlace.photos[0].html_attributions.length > 0) {
							$scope.newPersonalAttraction.googleImgCredit = $scope.myGooglePlace.photos[0].html_attributions[0];
						}
					}*/
					
					if (isWishlist) {
						$scope.newPersonalAttraction.dayInTrip = -1;
					} else {
						$scope.newPersonalAttraction.bestFitPlan = true;
					}
					$scope.confirm($scope.newPersonalAttraction);
				} else {
					if ($scope.isBreak || $scope.isEditBreak || $scope.newPersonalAttraction.latitude != null) {
						$scope.confirm($scope.newPersonalAttraction);
					} else {
						$scope.errorFieldTxt = "Please enter a valid address";
						return;
					}
				}
	        }
	        
	        $scope.changeStartTime = function(time,applyAllDays) {
	        	if (time == null) {
	        		$scope.invalidStartTime = true;
	        		return;
	        	}
	        	var res = new Object();	        		
	        	res.startTime = time;
	        	res.applyAllDays = applyAllDays;
	        	$scope.modalInstance.close(res);
	        }
	        
	        $scope.setVisitDuration = function(duration) {
	        	if (duration != null) {
	        		$scope.modalInstance.close(duration);
	        	} else {
	        		$scope.modalInstance.dismiss();
	        	}
	        }
	        
		
			$scope.askQuestion = function() {
	        	 $scope.emailAddress = $("#emailAddressSend").val(); //Get the value using jquery to avoid angular autofil issue
				 if (isEmail($scope.emailAddress) && $scope.userQuestion.length > 0) {
					  $scope.submitted = true;
					  $http.post(appRoot + '/jsp/contactus.jsp', {
						  txtSubject : "Question on: " + window.location.href,
						  txtDesc:  $scope.userQuestion,
						  txtEmail:  $scope.emailAddress}).
					  success(function(data, status, headers, config) {
						  /*require(["app/core/login"], function(LoginMgr) {
								LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
							})*/
						  	$scope.submittedOk = true;
						  	$scope.submitted = false;
						  	//$scope.confirm('ok');
						  }).
						  error(function(data, status, headers, config) {
							  console.log('sent fail');  
						    
						  });

					  
					  //$$scope.modalInstance.close();
				  } else {
					  if ($scope.userQuestion.length == 0) {
						  $("#invalidQuestion").css("visibility","visible");
					  } else {
						  $("#invalidEmail").css("visibility","visible");						  
					  }
				  }
	        }
	        
	        $scope.downloadGuide = function(type,hasEmailConsent) {
	        	$scope.emailAddress = $("#emailAddressSend").val(); //Get the value using jquery to avoid angular autofil issue
				if (isEmail($scope.emailAddress)) {
					 $rootScope.$broadcast("updateEmail",$scope.emailAddress);
					 var waitFor = 2000;
					 var consent = "ok"
					 if ($scope.requireEmailConsent) {
	        			consent = hasEmailConsent ? "ok_with_consent" : "ok_no_consent";
	 					//if consent is required fire OK and also ok_consent/ok_no_consent
						fireEvent("Download",$scope.argsObj.type + "_itinerary_" + $scope.abNum + "_" + consent,$scope.argsObj.from);
					 } 
					fireEvent("Download",$scope.argsObj.type + "_itinerary_" + $scope.abNum + "_ok",$scope.argsObj.from);
					if ($scope.doDownloadComplete($scope.startDate,false)) {
						itineraryService.getItineraryDataMgr().setStartDate($scope.startDate);
						if ($scope.itineraryService.itinerary.isEditable) {
							itineraryService.generateDays();
							itineraryService.getItineraryDataMgr().save();
						}
	
					 } else {
						
						if ($scope.itineraryService.itinerary.isEditable) {
							itineraryService.generateDays();
							itineraryService.getItineraryDataMgr().save();
						}
					 }
					 
					  $scope.submitted = true;
					  $timeout(function() {
						  $http.post(appRoot + '/itineraries/send', {
							  downloadType: type,
							  emailTo : $scope.emailAddress, 
							  itrId : $scope.itineraryService.itinerary.id,
							  itrName: $scope.itineraryService.itinerary.name,
							  isMeter: getIsMeter() ? 1 : 0,
							  lang: $scope.lang != "en" ? $scope.lang : null,
							  itrConflicts: $scope.itineraryService.itinerary.hasOpeningErrors > 0,
							  itrLegalName: $scope.itineraryService.itinerary.legalName,
							  itrLink: window.location.href}).
							  success(function(data, status, headers, config) {
							  //require(["app/core/login"], function(LoginMgr) {
									emailConsentService.updateUserConsent(hasEmailConsent,$scope.emailAddress);
								  	/*if (!$scope.requireEmailConsent || ($scope.requireEmailConsent && hasEmailConsent)) {
								  		LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
								  		emailConsentService.updateUserConsent(true);
								  	}*/
								//})
								
									$timeout(function() {
									  	$scope.submittedOk = true;
									  	$scope.submitted = false;
									}, 1500);
		
							  }).error(function(data, status, headers, config) {
								  //console.log('sent fail');
								  throw "download itinerary failed " + data;
							    
							  });
					  }, waitFor);
					  
				  } else {
					  $("#invalidEmail").css("visibility","visible");
					  fireEvent("Download",$scope.argsObj.type + "_itinerary_" + $scope.abNum + "_invalid_email",$scope.emailAddress);
				  }
	        }
	        
	        $scope.shareEmail = function(subject) {
	        	$scope.emailAddress = $("#emailAddressSend").val(); //Get the value using jquery to avoid angular autofil issue
				 if (isEmail($scope.emailAddress)) {
					  $scope.submitted = true;
					  var msg = $scope.shareMessage;
					  msg = msg.replace(/(\r\n|\n|\r)/g,"<br />");
					  $http.post(appRoot + '/ws/shareItinerary', {
						  subject : "",
						  body: msg,
						  to: $scope.emailAddress,
						  fromName: ""}).
						  success(function(data, status, headers, config) {
							  /*require(["app/core/login"], function(LoginMgr) {
									LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
								})*/
								
								$timeout(function() {
								  	$scope.submittedOk = true;
								  	$scope.submitted = false;
								}, 2000);
							  }).
						  error(function(data, status, headers, config) {
							  console.log('sent fail');  
						    
						  });
				  
				  } else {
					  $("#invalidEmail").css("visibility","visible");
					  //console.log("Please enter a valid email address");
				  }
	        }
		
	        $scope.downloadRestaurants= function(hasEmailConsent) {
	        	$scope.emailAddress = $("#emailAddressSend").val(); //Get the value using jquery to avoid angular autofil issue
	        	if (isEmail($scope.emailAddress)) {
	        		$rootScope.$broadcast("updateEmail",$scope.emailAddress);
	    			if ($scope.requireEmailConsent) {
	    				var consent = hasEmailConsent ? "ok_with_consent" : "ok_no_consent";
	    				fireEvent("Download","download_restaurants_" + $scope.abNum + "_" + consent,null);
	    			}
	    			fireEvent("Download","download_restaurants_" + $scope.abNum + "_ok",null);
	        		$("#invalidEmail").css("visibility","hidden");
					$scope.submitted = true;
					$http.post(appRoot + '/restaurants/send', {
						emailTo :$scope.emailAddress, 
						cityId : $scope.cityObj.id,
						attractionId : null,
						siteType : null}).
					success(function(data, status, headers, config) {
						emailConsentService.updateUserConsent(hasEmailConsent,$scope.emailAddress);
						 /* require(["app/core/login"], function(LoginMgr) {
								LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
							})*/
						$timeout(function() {
							$scope.submittedOk = true;
						  	$scope.submitted = false;
						},1000);
					}).error(function(data, status, headers, config) {
						//console.log('sent fail');  
						throw "download restaurants failed\n" + data;
					});
				 } else {
					 $("#invalidEmail").css("visibility","visible");
					 fireEvent("Download","download_restaurants_" + $scope.abNum + "_invalid_email",$scope.emailAddress);
				 }
	        }
		
	        /**
	         * Share the app and handle register user
	         */
		 $scope.shareApp= function(hasEmailConsent) {
	        	$scope.emailAddress = $("#emailAddressSend").val(); //Get the value using jquery to avoid angular autofil issue
				 if (isEmail($scope.emailAddress)) {
					 $rootScope.$broadcast("updateEmail",$scope.emailAddress);
					 if ($scope.requireEmailConsent) {
						 var consent = hasEmailConsent ? "ok_with_consent" : "ok_no_consent";
						 fireEvent("Download","download_app_" + $scope.abNum + "_" + consent,$scope.argsObj.from);
					}
					fireEvent("Download","download_app_" + $scope.abNum + "_ok",$scope.argsObj.from);
					$("#invalidEmail").css("visibility","hidden");
					$scope.submitted = true;
					  $http.post(appRoot + '/itineraries/send', {
						  downloadType: "app",
						  emailTo : $scope.emailAddress, 
						  itrId : $scope.itineraryService.itinerary.id,
						  itrName: $scope.itineraryService.itinerary.name,
						  isMeter: 1,
						  itrLegalName: $scope.itineraryService.itinerary.legalName,
						  itrLink: window.location.href}).
						  success(function(data, status, headers, config) {
							  $timeout(function() {
								  	$scope.submittedOk = true;
								  	$scope.submitted = false;
								  	if (!$scope.loginMgr.isLogin()) {
								  		 $http.post(appRoot + '/ws/login/clientonly', {
											  clientUniqueId: getUserUniqueId(),
											  email: $scope.emailAddress}).
											  	success(function(data, status, headers, config) {	
											  		if (data.isNewEmail) {
											  			$scope.askPasswd = true;
														$scope.submittedOk = false;
											  		}
											  		emailConsentService.updateUserConsent(hasEmailConsent,$scope.emailAddress);
											  		//require(["app/core/login"], function(LoginMgr) {
													//	LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
													//});
											  	}).error(function(data, status, headers, config) {
													  //console.log('sent fail');
													  throw "login client failed\n" + data;
												});
										
									} else {
										/*require(["app/core/login"], function(LoginMgr) {
											LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
										});*/
										emailConsentService.updateUserConsent(hasEmailConsent,$scope.emailAddress);
									}
								}, 2000);
								
							 
								
						 }).error(function(data, status, headers, config) {
							  //console.log('sent fail');
							  throw "share app failed\n" + data;
						  });
				  } else {
					  $("#invalidEmail").css("visibility","visible");
					  fireEvent("Download","download_app_" + $scope.abNum + "_invalid_email",$scope.emailAddress);
				  }
	        }
		 
		var LOGIN_ERROR_USER_EMAIL_EXISTS = 10;
	    var LOGIN_ERROR_USER_NOT_FOUND = 11;
		 $scope.doRegister = function() {
			
			if (! $scope.password.match(/^([a-zA-Z0-9]{6,})$/)) {
				fireEvent("login", "signup invalid password");
				$scope.badPassword = true;
				return;
			}
			$scope.badPassword = false;
			$scope.submitted = true;
			LoginMgr.getInstance().signup($scope.emailAddress, $scope.password, "", "").then(function(loginResult) {
				if (loginResult.errorId > 0) {
					if (loginResult.errorId == LOGIN_ERROR_USER_EMAIL_EXISTS) {
						fireEvent("login", "signup user email exists");
						$scope.alreadyRegistered = true;
						$scope.submitted = false;
					}
					else {
						fireEvent("Error", "login-signup-exception", null, loginResult.errorMessage);
					}
					$scope.loginRuinning = false;
				}
				else  {
					$scope.submittedOk = true;
				  	$scope.submitted = false;
				  	$( "body" ).trigger( "login_done", [] );
				}
				
				$scope.$apply();
			}, function(e) {
				$scope.loginRuinning = false;
				fireEvent("Error", "login-signup unknown error");
			});	
		 }
	        

		};
		
		angular.element($window).on("scroll", handleScroll);
		
		
		var scrollCheckCounter = 1;
        function handleScroll() {
        	if ($scope.stuckBarPadding == null) {
    	    	var width = $("#itineraryController").css("width").replace("px","");
    	    	var widthInt = parseInt(width);
	    		$scope.stuckBarPadding = "0px " + (($(window).width() - widthInt + 30)/2) + "px";
	    	}
        	
        	if ($location.url().indexOf("itinerar") < 0) {
				//don't show when not in itinerary page
				return;
			}
        	scrollCheckCounter++;
        	
        	
        	if (scrollCheckCounter % 3 != 0) {
        		//no need to calculate everything on every small scroll movement
        		return;
        	}
        	var scrollTop = $(window).scrollTop();
        	
        	//var mapWrapper = $("#map-drawer-wrapper");
        	var indicator = $("#divTopTabIndicator");
        	
        	var topTab = $("#tabsMain").find("div:first");
        	var daysMenuDiv = $("#itinerary_blue_bar");
        	var itineraryIndicator = $("#itineraryMapWrapperIndicator");
        	var belowMapActionIndicator= $("#mapBottomBarIndicator");

        	var belowMapActionIcons = $("#mapBottomBar");
        	
        	if ($location.hash().indexOf("attraction") >= 0) {
        		daysMenuDiv = $("#attractions_blue_bar");
        		mapWrapper = $("#attractions-list-wrapper");
        	} else if ($location.hash().indexOf("activities") >= 0) {
        		daysMenuDiv = $("#activities_blue_bar");
        		mapWrapper = $("#activities-list-wrapper");
        	}
	    	var curElementTop = indicator.offset().top; 
	    	
	    	if (reportScrollToDetails && $("#belowMap").offset() && $scope.selectedTab == "itinerary") {
	    		var viewableOffset = $("#belowMap").offset().top - scrollTop;
	    		if (viewableOffset < 100) {
	    			reportScrollToDetails = false;
	    			fireEvent("Itinerary-2.0", "scrolled to itinerary details");
	    		}
	    	}
	    	
	    	//console.log(scrollTop + "::" + curElementTop);
        	if (!$scope.scrolledVer && scrollTop > (curElementTop + 100) ) {
        		stuckTabsOn();
        		
        	} else if ($scope.scrolledVer && scrollTop < (curElementTop + 50)) {
        		stuckTabsOff();
        	}
        		
        }
	   
        
        function stuckTabsOn() {
        	var height = $scope.selectedTab == "attractions" || $scope.selectedTab == "activities"  || $scope.selectedTab == "activities1" ? "105px" : "95px";
    		$scope.scrolledVer = true;
    		$("#stuckTabsMain").animate({
    			height: height
    		},500)
    		if ($scope.selectedTab == "attractions" || $scope.selectedTab == "activities" || $scope.selectedTab == "activities1") {
    			var tabId = $scope.selectedTab == "attractions" ? "attractions_blue_bar" : "activities_blue_bar";
    			$("#" + tabId).css("margin-top","0px");
    			$("#" + tabId).appendTo($("#attractions-bar-parent-ng"));
    		}
        }

        function stuckTabsOff() {
        	$scope.scrolledVer = false;
    		$("#stuckTabsMain").animate({
    			height: '0px'
    		},500)
    		if ($scope.selectedTab == "attractions"  || $scope.selectedTab == "activities" || $scope.selectedTab == "activities1") {
    			var tabId = $scope.selectedTab == "attractions" ? "attractions_blue_bar" : "activities_blue_bar";
    			var parentPrefix = $scope.selectedTab == "attractions" ? "attractions" : "activities";
    			var marginTop = "70px";
    			$("#" + tabId).appendTo($("#"+parentPrefix+"_blue_bar_parent"));
    			if ( $scope.selectedTab == "activities" || $scope.selectedTab == "activities1") {
    				$("#" + tabId).css("margin-top",marginTop);
    			}
    			
    		}
        }
        
        
        
        
        
        
        //NEW GEN CODE
        

	
		
	}]);
	
});	
define(
    'ngApp/website/itinerary-ng/mapSiteOverlay',["jquery.qtip.min","app/mobile/core/mapLoader"],
    function(qTip,MapLoader) {
    	
    	MapLoader.getInstance().load().done(function() {
    		MapSiteOverlay.prototype = new google.maps.OverlayView();
    	});
    	
        function MapSiteOverlay(mapMgr, itrSite, imgSize, divContainerId, noEvents, siteRoot, number,disableRouting, color,isRestaurant) {
        	this._mapMgr = mapMgr;
            this.map = this._mapMgr._map;
            this.itrSite = itrSite;
        	this.imgSize = 25;
        	if (itrSite.isAttractionContainer()) {
        		this.imgSize = 60;
        	}
        	if (color != null) {
        		this.imgSize = 13;
        	}
        	this.noEvents = noEvents;
        	this.siteRoot = siteRoot;
        	this.number = number;
        	this.disableRouting = disableRouting;
        	this.color = color;
        	this.divContainerId = divContainerId;
        	this.mapWidth = $("#" + divContainerId).width();
        	this.mapHeight = $("#" + divContainerId).height();
            
            this.div = null;
            this.infoDiv = null;
            this.marker = null;
            
            this.isRestaurant = isRestaurant && !this.itrSite.dayInTrip > 0;
            
            if (this.isRestaurant) {
            	this.color = "overview-class-rest";
            	this.imgSize = 10;
            }
            
            //this.infoWindowWidth = 300;
            //this.infoWindowHeight = 95;
            
            this.previousDivBorder = null;

            // Explicitly call setMap on this overlay
            this.setMap(this.map);  
            
            this.textBoxHeight = 25;
            
            this.textBoxRelativeRect = null;
            this.textBoxShown = true;
            
            this.overlayLoaded = new $.Deferred();
            
            this.mapOffset = null;
        	
            return( this );
        }
        
        MapSiteOverlay.prototype.repositionText = function(overlayArr, hideIfCantFindPosition, doRedraw) {
        	if (doRedraw) {
        		//in case of drag, the draw is not beeing executed and the map bounds are not beeing claculated
        		this.draw();
        	}

        	var type = this.div.attr("type");
        	var positionOptions = this.getAllPositionOptions(type);
        	if (type =="restaurant") {
        		positionOptions = new Array(positionOptions[0]);
        	}
        	var textBox = this.div.find("[name=divSiteName]");
        	var arrowIcon = this.div.find(".map_name_wrapper");
        	var textBoxArrow = this.div.find("[name=divSiteNameArrow]");
        	var textBoxText = this.div.find("[name=divSiteNameText]");
        	
        	
        	
        	var textBoxWidth = textBox.width();
        	var textBoxPositionLeftTop = this.div.position();  
        	var selectedPosition = positionOptions[0];
        	var curItrSiteName = this.itrSite.getName();
        	var relativeRect = null;
        	var isIntersect = false;
        	var debugFunc = false;
        	var mapRect = {
        		left: this.mapOffset.x,
        		top: this.mapOffset.y,
        		right: this.mapOffset.x + this.mapWidth,
        		bottom: this.mapOffset.y +  this.mapHeight       			
        	}
        	
        	var rightOffset = 500;
			if (window.location.hash.indexOf("restaurants") > 0) {
				rightOffset = 200;
			}
        	var mapActionsAreaRect = {
        		left: this.mapOffset.x,
        		top: this.mapOffset.y,
        		right: this.mapOffset.x + rightOffset,
        		bottom: this.mapOffset.y + 50
            };
        	
        	debugFunc ? console.log("mapOffset", this.mapWidth, this.mapHeight, this.mapOffset) : null;
        	
        	for (var j=0;j<positionOptions.length;j++) {
        		var currentPosition = positionOptions[j];
        		isIntersect = false;
        		
        		relativeRect = {
        			top: textBoxPositionLeftTop.top  + currentPosition.top - 2,
        			left: textBoxPositionLeftTop.left + currentPosition.left - 2,
        			bottom: textBoxPositionLeftTop.top + currentPosition.top + this.textBoxHeight + 2,
        			right: textBoxPositionLeftTop.left + currentPosition.left + textBoxWidth + 2
        		}
        		
        		// continue if out of map bounds
    			if (! this.fullIntersectRect(mapRect, relativeRect) ) {
    				debugFunc ? console.log(curItrSiteName, currentPosition.name, "not intersect mapRect", mapRect, relativeRect) : null;
    				isIntersect = true;
    				continue;
    			}
        		
        		// continue if on actions button
    			if (this.intersectRect(relativeRect, mapActionsAreaRect, 0, 5) ) {
    				debugFunc ? console.log(curItrSiteName, currentPosition.name, "intersect mapActionsAreaRect") : null;
    				isIntersect = true;
    				continue;
    			}
        		for (var i=0;i<overlayArr.length;i++) {
        			var curOverlay = overlayArr[i];
        			var curOverlayName = curOverlay.itrSite.getName();
        			
        			if (curOverlay.itrSite._clientUniqueId == this.itrSite._clientUniqueId) {
        				continue;
        			}
        			
        			if (curOverlay.itrSite.isVisitRestaurant()) {
        				continue;
        			}
        			
        			// check intersect with overlay rectangle
        			if (this.color == null) {
        				//no need to check in trip overview dot's as they don't have an image
        				if (this.intersectRect(relativeRect, curOverlay.getCurrentRect(), 5, 5 ) ) {
            				debugFunc ? console.log(curItrSiteName, currentPosition.name, "intersect overlay image " + curOverlay.itrSite.getName()) : null;        				
            				isIntersect = true;
            				break;
            			}
        			}
        			
        			var grace = 5;
        			if (window.location.hash.indexOf("restaurants") > 0) {
        				//put less attractions
        				if (!this.isRestaurant) {
        					grace = -10;
        				} else {
        					grace = 10;
        				}
        				
        			}
        			
        			// check intersect with text box
        			if (curOverlay.textBoxShown && curOverlay.textBoxRelativeRect != null && 
        					this.intersectRect(relativeRect, curOverlay.textBoxRelativeRect, grace, grace) ) {
        				debugFunc ? console.log(curItrSiteName, currentPosition.name, "intersect overlay text " + curOverlay.itrSite.getName()) : null;
        				isIntersect = true;
        				break;
        			}
        		}
        		
        		if (! isIntersect) {
        			selectedPosition = currentPosition;
        			break;
        		}
        	}        	
        	
        	// check if we stayed at default position due to intersect all, keep the current rect
        	if (isIntersect) {
        		//console.log(curItrSiteName, "could not find position ");
        		
        		relativeRect = {
        			top: textBoxPositionLeftTop.top + selectedPosition.top - 2,
        			left: textBoxPositionLeftTop.left + selectedPosition.left - 2,
        			bottom: textBoxPositionLeftTop.top + selectedPosition.top + this.textBoxHeight + 2,
        			right: textBoxPositionLeftTop.left + selectedPosition.left + textBoxWidth + 2
            	}
        	}
        	else {
        		debugFunc ? console.log(curItrSiteName, "found position " + selectedPosition.name) : null;
        	}
        	
        	// store relative position
        	this.textBoxRelativeRect = relativeRect;
        	
        	// set textbox position and padding
        	var paddingLeft = selectedPosition.name == "posRight" ? "5px" : "0px";
        	
        	this.textBoxShown = ! (hideIfCantFindPosition && isIntersect);
        	if (hideIfCantFindPosition) {
        		if (this.textBoxShown) {
        			
        			if (type =="restaurant") {
        				$(this.div.children().get(0)).css("display", "none");
        				this.div.addClass("overview-class-rest-visible");
        			}
        			
        			/*if (type =="restaurant") {
            			textBox.attr("arrowClass",selectedPosition.arrowClass);
        			}
        			if (type =="restaurant") {
            			arrowIcon.css("display","");
            			arrowIcon.removeClass("itinerary_ng_map_name_wrapper-tl itinerary_ng_map_name_wrapper-tc itinerary_ng_map_name_wrapper-tr itinerary_ng_map_name_wrapper-bl itinerary_ng_map_name_wrapper-bc itinerary_ng_map_name_wrapper-br itinerary_ng_map_name_wrapper-t itinerary_ng_map_name_wrapper-b itinerary_ng_map_name_wrapper-l itinerary_ng_map_name_wrapper-r ")
            			arrowIcon.addClass(selectedPosition.arrowClass)
            			this.div.find(".visit_overview_overlay").css("display","none");
        			}*/
        			textBox.css("visibility", "");
        			textBox.css("padding-left", paddingLeft);
        			//textBox.attr("title",selectedPosition.name);
        			$(this.div.children().get(0)).css("visibility", "");
            		textBox.animate({
            			"top": selectedPosition.top,
            			"left": selectedPosition.left
            		}, 500);
        		}
        		else {
        			if (type =="restaurant") {
        				$(this.div.children().get(0)).css("display", "");
        				this.div.removeClass("overview-class-rest-visible");
        			}
        			//don't hide if site is highlighted
        			if (textBoxText.css("font-size") != "16px") {
        				textBox.css("visibility", "hidden");
        				//$(this.div.children().get(0)).css("visibility", "hidden");
        			}
        			this.div.find(".visit_overview_overlay").css("display","");
        			arrowIcon.css("display","none");
        		}
        	} 
        	
        	// set arrow         	
        	if (selectedPosition.arrowTop) {
        		textBoxArrow
        		.css("top", selectedPosition.arrowTop)
        		.css("bottom", "");
        	}
        	if (selectedPosition.arrowBottom) {
        		textBoxArrow
        		.css("bottom", selectedPosition.arrowBottom)
        		.css("top", "");
        	}
        	if (selectedPosition.arrowLeft) {
        		textBoxArrow
        		.css("left", selectedPosition.arrowLeft)
        		.css("right", "");
        	}
        	if (selectedPosition.arrowRight) {
        		textBoxArrow
        		.css("right", selectedPosition.arrowRight)
        		.css("left", "");
        	}
        }
        
        MapSiteOverlay.prototype.intersectRect = function(r1, r2, gracex, gracey) {
        	gracex = gracex == null ? 0 : gracex;
        	gracey = gracey == null ? 0 : gracey;
        	
        	return !
        		(
        			( (r2.left - r1.right ) > (gracex * -1) ) || 
        			( (r2.right - r1.left) < gracex ) ||        				
        			( (r2.top - r1.bottom ) > (gracey * -1) ) ||
        			( (r1.top - r2.bottom ) > (gracey * -1) )
        		);
        }
        
        MapSiteOverlay.prototype.fullIntersectRect = function(r1, r2) {
        	var gracex = 10;
        	var gracey = 10;
        	
        	var b1 = ( (r2.left - r1.left ) > (gracex * -1) );
        	var b2 = ( (r1.right - r2.right) > (gracex * -1) );
        	var b3 = ( (r2.top - r1.top ) > (gracey * -1) );
        	var b4 = ( (r1.bottom - r2.bottom ) > (gracey * -1) )
        	var res = b1 && b2 && b3 && b4;
        	
        	return res;
        }
        
        MapSiteOverlay.prototype.getAllPositionOptions = function(type) {
        	//var divPositionLeftTop = this.div.position();
        	var textWidth = this.div.find("[name=divSiteName]")[0].scrollWidth;
        	//var textHeight = this.textBoxHeight;
        	var textHeight = this.div.find("[name=divSiteName]")[0].scrollHeight;
        	var allPositions = [];
        	
        	// top left
        	var offsetL = 10;
        	var offsetT = 10;
        	if (type == "restaurant") {
        		offsetT = 15;
        		offsetL = 15;
        	}
        	allPositions.push({
        		name: "topleft",
        		left: (0 - textWidth + offsetL),
        		top: (0 - textHeight + offsetT),
        		arrowBottom: '0px',
        		arrowRight: '0px',
        		arrowClass: 'itinerary_ng_map_name_wrapper-tl'
        	}); 
        	
        	// top center
        	offsetT = 5;
        	if (type == "restaurant") {
        		offsetT = 0;
        		offsetL = 0;
        	}
        	allPositions.push({
        		name: "posTopCenter",
            	left: (0 +  (this.imgSize/2) - (textWidth / 2)),
            	top: (0 - textHeight + offsetT),
            	arrowBottom: '0px',
        		arrowLeft: '50%',
        		arrowClass: 'itinerary_ng_map_name_wrapper-tc'
        	}); 
        	
        	// top right
        	offsetT = 5;
        	if (type == "restaurant") {
        		offsetT = 0;
        		offsetL = 0;
        	}
        	allPositions.push({
        		name: "posTopRight",
            	left: (0 + this.imgSize/2),
            	top: (0 - textHeight + offsetT),
            	arrowBottom: '0px',
        		arrowLeft: '0px',
        		arrowClass: 'itinerary_ng_map_name_wrapper-tr'
        	});
        	
        	// right
        	offsetL = 0;
        	offsetT = 0;
        	if (type == "restaurant") {
        		offsetT = 0;
        		offsetL = 0;
        	}
        	allPositions.push({
        		name: "posRight",
            	left: (0 + this.imgSize + offsetL),
            	top: (0 +  (this.imgSize/2) - (textHeight / 2) + offsetT),
            	arrowTop: '50%',
        		arrowLeft: '0px',
        		arrowClass: 'itinerary_ng_map_name_wrapper-r'
        	});        	
        	
        	// bottom right
        	offsetL = 10;
        	offsetT = 10;
        	if (type == "restaurant") {
        		offsetT = 0;
        		offsetL = 0;
        	}
        	allPositions.push({
        		name: "posBottomRight",        			
            	left: (0 + this.imgSize - offsetL),
            	top: (0 + this.imgSize - offsetT),
            	arrowTop: '0px',
        		arrowLeft: '0px',
        		arrowClass: 'itinerary_ng_map_name_wrapper-br'
        	});
        	
        	// bottom center
        	offsetT = 0;
        	if (type == "restaurant") {
        		offsetT = 0;
        		offsetL = 0;
        	}
        	allPositions.push({
        		name: "posBottomCenter",
            	left: (0 +  (this.imgSize/2) - (textWidth / 2)),
            	top: (0 + this.imgSize + offsetT),
            	arrowTop: '0px',
        		arrowLeft: '50%',
        		arrowClass: 'itinerary_ng_map_name_wrapper-bc'
        	}); 
        	
        	// bottom left
        	offsetT = 10;
        	offsetL = 10;
        	if (type == "restaurant") {
        		offsetT = 0;
        		offsetL = 0;
        	}
        	allPositions.push({
        		name: "posBottomLeft",
        		left: (0 - textWidth + offsetL),
        		top: (0 + this.imgSize - offsetT),
        		arrowTop: '0px',
        		arrowRight: '0px',
        		arrowClass: 'itinerary_ng_map_name_wrapper-bl'
        	}); 
        	
        	// left
        	allPositions.push({
        		name: "posLeft",
        		left: (0 - textWidth),
            	top: (0 +  (this.imgSize/2) - (textHeight / 2)),
            	arrowTop: '50%',
            	arrowRight: '0px',
            	arrowClass: 'itinerary_ng_map_name_wrapper-l'
        	}); 
        	
        	//console.log(allPositions);
        	return allPositions;
        }
        
        MapSiteOverlay.prototype.getCurrentRect = function() {
        	var rect = null;
        	try {
        		var positionLeftTop = this.div.position();        	
            	rect = {
            		left: positionLeftTop.left,
            		top: positionLeftTop.top,
            		right: (positionLeftTop.left + this.imgSize),
            		bottom: (positionLeftTop.top + this.imgSize)
            	}
        	} catch (e) {
        		console.log("Failed to get position " + e);
        	}
        	
        	
        	//console.log(this.itrSite.getName(), rect);
        	return rect;
        }
        
        MapSiteOverlay.prototype.onAdd = function() {
        	var _self = this;
        	
        	// create site img div  
        	var imageSrc = this.itrSite.getImagePath();
        	var overviewClass = this.color != null ? "overview-class " + this.color : "";
        	var hideDot = this.color != null ? " text-hidden" : "";
        	var numberRightPosition  = this.itrSite.isAttractionContainer() ? "2" : "-14";
	          	
        	var name = this.itrSite.getName();
        	var myPlaceClass = "visit_place_overlay";
        	/*if (this.itrSite.isVisitRestaurant()) {
        		myPlaceClass = " visit_restaurant_overlay"; 
        	}*/
        	var wrapperClass = "itin-map-site-wrapper-ng ";
        	var idPrefix = "";
        	
        	if (this.color != null) {
        		myPlaceClass = " visit_overview_overlay";
        		idPrefix = _self._mapMgr._mapDivContainerId;
        		wrapperClass = "itin-map-site-wrapper-ng-no-hover ";
        	}
        	
        	var classMyPlace = this.itrSite.isPersonalActivity() || this.itrSite.isRestaurant() ? "itin-map-site-wrapper-my-place" : "";
        	//var visibility = this.itrSite.isVisitRestaurant() && !$("#show_rests_checkbox").is(":checked") ? "visibility:hidden" : "";
        	var restClass = ""; 
        	var zIndex = "z-index:auto";
        	/*if (this.itrSite.isVisitRestaurant()) {
        		restClass += " itinerary_map_name_wrapper_rest itin-map-site-wrapper-my-place-visit-rest"; 
        		zIndex = "z-index:-1";
        	}*/
        		
        	var hourText = "";
        	if (!_self.disableRouting) {
	    		if (readCookie("us_timeformat") == "true") {
	    			hourText += timeFormatter(this.itrSite.visitHour._d);
	    		} else if (this.itrSite.hourText != null) {
	    			hourText += this.itrSite.hourText;
	    		}
        	}
        	
        	if (window.location.hash.indexOf("restaurants") >0) {
        		if (this.isRestaurant) {
        			var symbol = "fas fa-utensils";
        			if (this.itrSite.cuisine != null && this.itrSite.cuisine.indexOf("Cafe") >=0) {
        				symbol = "fa fa-coffee";
        			} else if (this.itrSite.cuisine != null && this.itrSite.cuisine.indexOf("Bar") >=0) {
        				symbol = "fas fa-glass-martini";
        			}
        			hourText = '<i class="'+symbol+'"></i>'
        		} else if (this.itrSite.type == "hotel") {
        			hourText = '<i class="fas fa-bed" style="color:#FFF;font-size:15px"></i>'
        		} else if (this.itrSite.type == "restaurant") {
        			hourText = '<i class="fas fa-utensils" style="color:#FFF;font-size:15px"></i>'
        		} else {
        			hourText = '<i class="fas fa-university" style="color:#FFF;font-size:15px"></i>'
        		}
        		
        	}
        	
        	var siteName = this.itrSite.getName();
        	if (this.isRestaurant ) {
        		//siteName = siteName.substring(0, 18) + "...";
        		siteName = "";
        	}
        	
        	var type = "attraction";
        	if (this.isRestaurant) {
        		type = "restaurant";
        	} else if (this.itrSite.site == null) {
        		type = "personal";
        	}
        	
        	
            var html = "";			
        	html += "<div type='"+type+"' class='" + wrapperClass + classMyPlace + " " + overviewClass +"' id='divMapImg_" + this.itrSite.id + "' itrSiteNo='" + this.itrSite.noInTrip + "'  " + 
        		"' style='"+zIndex+";width:" + this.imgSize + "px;height:" + this.imgSize + "px;position: absolute;cursor:pointer'>";
        	if (this.color != null) {
        		html += " <div id='imgMapImg_" + this.itrSite.id + "' class='"+myPlaceClass+"' style='width:" + this.imgSize + "px;height:" + this.imgSize + "px;border-radius:50%'></div>";
        		html += " <div class='map_name_wrapper' style='z-index:1;display:none'></div>";
        		/*html += " <i class='fas fa-caret-right' style='color:#2F38D1;font-size:22px;display:none;position:relative;z-index:2'></i>";*/
        	} else if (imageSrc != null) {
        		html += "	<img  site-id='"+this.itrSite.id+"' id='imgMapImg_" + this.itrSite.id + "' src='" + imageSrc + "' class='img-circle itin-site-img zoom'></img>";
        	} else {
        		html += " <div id='imgMapImg_" + this.itrSite.id + "' class='zoom "+myPlaceClass+"' style='height:25px;width:25px;border-radius:50% !important;margin:5px;'><i style='font-size: 14px;padding:4px;' class='material-icons " + this.itrSite.getDesignIconClass() + "'>" + this.itrSite.getDesignIconCode() + ";</i></div>";
        	}
        	
    		var width = "15px";
    		
    		/*if (this.itrSite.noTitle != null && this.itrSite.noTitle.length > 1) {
    			width = (6 * this.itrSite.noTitle.length) + "px";
    		}*/
    		
    		/*var displayError = "none";
    		if (this.itrSite.openHoursError != null) {
    			displayError = "inline";
    		}*/
    		
    		html += "<div site-id='"+this.itrSite.id+"' style='width:auto;z-index:1' class='itinerary_map_name_wrapper " + restClass + "' id='"+idPrefix+"divSiteNameWrapper_"+this.itrSite.id+"' name='divSiteName'>";
    		
    		html += "<div name='divSiteNameArrow' class='divSiteNameArrow " + hideDot + "'></div>";
    		
    		html += "<div id='"+idPrefix+"divSiteNameText_"+this.itrSite.id+"' name='divSiteNameText' style='white-space:nowrap;border-radius:10px;text-align:center;padding: 1px 4px;font-size:12px'>"; 
    		/*if (this.isRestaurant) {
    			html += "<i class='fas fa-utensils' style='font-size: 15px;padding: 2px 0px 2px 5px;'></i>"
    		}*/
    		html += hourText + " " + siteName + "</div>"; 
    		/*if (this.isRestaurant) {
    			var cuisine = "";
    			var rating = "";
    			if (this.itrSite.cuisine != null) {
    				cuisine = this.itrSite.cuisine.split(",")[0] + " - ";
    			}
    			var price = "$";
    			if (this.itrSite.priceLevel ==2) {
    				price = "$$$";
    			} else if (this.itrSite.priceLevel ==3) {
    				price = "$$$$"
    			}
    			if (this.itrSite.rating != null) {
    				rating = " - " + this.itrSite.rating; 
    				if (this.itrSite.rating.toString().indexOf(".5") < 0) {
    					rating += ".0";
    				}  
    			}
    			
    			html += "<div class='itinerary-rest-overlay-details'>" + cuisine + price + rating + "</div></div>";
    		} else {
    			html += "</div>"; //close the restaurant name wrapper
    		}*/
    		html += "</div>";

        	html += "</div>";
        	
        	
        	
        	var $newDiv = $(html);
        	this.div = $newDiv;
        	$newDiv.appendTo($("body"));
        	
        	
        	
        	/*var divSiteNameText = $newDiv.find("[name=divSiteNameText]");
        	var textWidth = divSiteNameText[0].scrollWidth;*/
        	//divSiteNameText.parent().css("width", (textWidth + 10) + "px");        	
        	
        	// create info div - don't remove
        	var panes = this.getPanes();			
        	panes.overlayMouseTarget.appendChild($newDiv[0]);
        	
        	// in no events is set that means that this overlay is tmp. mainly to highlight existing overlay
        	if (this.noEvents) {
        		return;
        	}
        	
        	var me = this.itrSite;
        	var scope = angular.element(document.getElementById("itineraryMapDrawerControllerNg")).scope();
        	
        	if (!this.isRestaurant) {
	        	$("#imgMapImg_" + this.itrSite.id).hover(
						function () {
							$("#itin-drawer-"+$(this).attr("site-id")).addClass("itinerary-drawer-hover-map");
							$("#divSiteNameWrapper_"+$(this).attr("site-id")).addClass("itin_action_icon_selected");
							if (!isTablet()) {
								$("#divDrawerActionIcon_"+$(this).attr("site-id")).addClass("drawer-icon-mouseover");
							}
							
							
						},
						function () {
							$("#itin-drawer-"+$(this).attr("site-id")).removeClass("itinerary-drawer-hover-map");
							$("#divSiteNameWrapper_"+$(this).attr("site-id")).removeClass("itin_action_icon_selected");
							if (!isTablet()) {
								$("#divDrawerActionIcon_"+$(this).attr("site-id")).removeClass("drawer-icon-mouseover");
							}
						}
				);
	        	
	        	
	        	$("#" + idPrefix + "divSiteNameWrapper_" + this.itrSite.id).hover(
						function () {
							$("#imgMapImg_"+$(this).attr("site-id")).addClass("zoomed");
							$(this).addClass("itin_action_icon_selected");
						},
						function () {
							$("#imgMapImg_"+$(this).attr("site-id")).removeClass("zoomed");
							$(this).removeClass("itin_action_icon_selected");
						}
				);
	        	
	        	$("#imgMapImg_" + this.itrSite.id).click(
	            		function() {
	                  		scope.showSiteOverlay(me,'map');
	            		}
	            	);
	            	
	        	$("#" + idPrefix + "divSiteNameWrapper_" + this.itrSite.id).click(
	        		function() {
	                	scope.showSiteOverlay(me,'map');
	            	}
	        	);
        	} else {
        		$("#divMapParentdivSiteNameWrapper_" + this.itrSite.id).click(
                   	function() {
                       	scope.showRestaurantOverlay(me,'map');
                   	}
                );
        		$("#divMapImg_" + this.itrSite.id).hover(
        			function() {
        				scope.drawerMouseOver(me.id,true,false,true,null,'',true);
        				/*if ($(this).find(".itinerary_map_name_wrapper").css("visibility") == "hidden") {
        					$(this)	.find(".itinerary_map_name_wrapper").css("visibility","visible"); 
        					$(this)	.find(".itinerary_map_name_wrapper").attr("pre-visibility","hidden");
        				}*/
                    },
					function () {
                    	scope.drawerMouseOver(me.id,false,false,true,null,'',true);
                    	/*if ($(this)	.find(".itinerary_map_name_wrapper").attr("pre-visibility") == "hidden") {
                    		$(this)	.find(".itinerary_map_name_wrapper").css("visibility","hidden");
                    		$(this)	.find(".itinerary_map_name_wrapper").attr("pre-visibility",null);
                    	}*/
                    	 
					}
        		);
        		
        		
        	}
        	if (this.isRestaurant) {
        		_self.addContextTip($newDiv);
        	}
          };  
          
          function timeFormatter(date){
        	 // var date = new Date(dateTime);
        	  if (date.getHours()>=12){
        	      var hour = parseInt(date.getHours()) - 12;
        	      var amPm = "pm";
        	      if (hour == 0) {
        	    	  hour = 12;
        	      }
        	  } else {
        	      var hour = date.getHours(); 
        	      var amPm = "am";
        	  }
        	  var min = date.getMinutes();
        	  if (min < 10) {
        		  min = "0" + min;
        	  }
        	 
        	  var time = hour + ":" + min + amPm;
        	  return time;
        }
          
          MapSiteOverlay.prototype.addContextTip = function(curDiv) {
        	  var _self = this;
        	 //$(curDiv).attr("itr-site-qtip",_self.itrSite);
        	 //$(curDiv ).hover(function() {
        		 //trigger angular event to generate qtip
        		 
        	  //});
        	  	//connect the qtip to the map image
        	  	//allow a short delay so map is loaded without interuption
       			setTimeout( function() {
       				var $body = angular.element(document.body);
       				var $rootScope = $body.scope().$root;
          			$rootScope.$broadcast("mapsitehoverin-ng",[curDiv,_self.itrSite.id]);
       			}, 200 );
       			
       			
          }
          
            
         
          MapSiteOverlay.prototype.draw = function() {
        	  var overlayProjection = this.getProjection();
        	  var latLng = this.itrSite.getLatLng();        	    
        	  var centerPoint = overlayProjection.fromLatLngToDivPixel(latLng);
        	  var northEastPoint = overlayProjection.fromLatLngToDivPixel(this.map.getBounds().getNorthEast());
        	    
        	    // calc map offset
        	    this.mapOffset = {
        	    	y: northEastPoint.y,
        	    	x: (northEastPoint.x - this.mapWidth)
        	    };
        	    
        	    // place image div
        	    var $div = this.div;
        	    $div.css("left", (centerPoint.x - this.imgSize/2) + 'px');
        	    $div.css("top", (centerPoint.y- this.imgSize/2) + 'px');        	    
       	    
        	    this.overlayLoaded.resolve();
          };
          
          MapSiteOverlay.prototype.removePx = function(val) {
        	  val = val.replace("px", "");
        	  return parseInt(val);
          }
          
          MapSiteOverlay.prototype.highlightSite = function(color, isEffect) {
        	  var _self = this;
        	  
        	 color = color != null ? color : "rgb(23,63,214)";
        	 // color = "rgb(23,63,214)";
        	  
        	  if (isEffect) {        		  
        		  if (this._blinkInterval == null) {
        			  var curColor = "white";
        			  var overallTime = 0;
        			  
            		  this._blinkInterval = setInterval(function(){
            			  curColor = curColor == "white" ? color : "white";            			  
            			 _self.div.animate({"border-color": curColor}, "fast");
            			 overallTime += 1000;
            			 
            			 // remove
            			 if (overallTime > 8000) {
            				 clearInterval(_self._blinkInterval);
            			 }
            		  }
            		  ,1000);
        		  }
        		  //this.div.effect("shake", {distance: 5}, 3000);  
        	  }
        	  else {
        		  this.div.css("border", "3px solid " + color);  
        	  }
        	  
          };
          
          MapSiteOverlay.prototype.unhighlightSite = function() {
        	  this.div.css("border", "3px solid white");
          }; 

          MapSiteOverlay.prototype.onRemove = function() {
        	  var _self = this;
        	  if (this.div == null) {
        		  return;
        	  }
        	 /* if (_self.div.qtip('api')) {
        		  _self.div.qtip('api').destroy();
        	  }    */ 
        	  
        	  if (_self._blinkInterval != null) {
        		  clearInterval(_self._blinkInterval);
        	  }
        	  
        	  if (_self.highlightInterval) {
				clearInterval(_self.highlightInterval);
        	  }        	  
			
        	  if ( _self.newOverlay != null) {
				if (_self.newOverlay.div != null) {
					_self.newOverlay.div.remove();
				}
				
				_self.newOverlay.setMap(null);
				_self.newOverlay = null;
        	  }			
			  
        	  this.div.remove();
          };
 
        return(MapSiteOverlay);
    }    

);

define(
    'ngApp/website/itinerary-ng/mapMgr',["app/mobile/core/mapLoader",
     "ngApp/website/map/mapMgr",
     "app/core/mapServices"],
    function(MapLoader,GlobalMapLoader,MapServices) {
 
    	var _MapSiteOverlay = null;
        function MapMgr(){ 
        	this._map = null;
        	this._overlayArr =null;
        	this._directionsDisplayAr = [];
        	this._mapLoadedDeffered = new $.Deferred();
        	this._mapIdle = new $.Deferred();
        	this._overlaysBounds = null;
        	this._overlayForLatLng = null;
        	this._ignoreFirstZoomEvent = null;
        	this._restArr = null;
        	this._restOverlayArr = [];
        	this._mapDivContainerId = null;
        	this._restMarkersArr = [];
        	//this.daysArr = [];
        	this._bounds = null;
        	this._restTxtSearch = false;
        	this._polylineAr = [];
        	
        	//this._showHotelOnMap = localStorage.getItem("showHotelOnMap") != null ? (localStorage.getItem("showHotelOnMap") == "1") : true;
        	//this._showHotelOnMap = wrapGetLocalStorage("showHotelOnMap") != null ? (wrapGetLocalStorage("showHotelOnMap") == "1") : true;
        	this._mapServices = new MapServices();
            return( this );
        }
        
        MapMgr.prototype.setGoogleMapsLoaded = function() {
        	var _self = this;
        	
			require(["ngApp/website/itinerary-ng/mapSiteOverlay"],
				    function(MapSiteOverlay){
						_self._mapLoadedDeffered.resolve();
				    }
			);	        
        }
        
        MapMgr.prototype.getGoogleMapsLoaded = function() {
        	return this._mapLoadedDeffered;
        }

        MapMgr.prototype.initializeMapFromItrSites = function(mapDivContainerId,siteArr,siteForEmptyMap,disableRouting,mapType) {
        	var _self = this;
        	
        	if (siteArr == null) {
        		//CASES WHERE SITEARR IS NOT DEFINED
        		siteArr = new Array();
        	}

        	_self._mapDivContainerId = mapDivContainerId;
        	
        	//_self.daysArr.push(siteArr);
        		
        	MapLoader.getInstance().load().done(function() {
        		if (_self._map == null) {
        			var bounds = new google.maps.LatLngBounds();
        			// init map
                  	var mapOptions = {
                  	  center : bounds.getCenter(),
                      zoom: 14,
                      mapTypeId: google.maps.MapTypeId.ROADMAP,
                      scrollwheel: false,
                      panControl: false,
                      streetViewControl: false,
                      mapTypeControlOptions: {
                          mapTypeIds: []
                      },
                      zoomControlOptions: {
                          position: google.maps.ControlPosition.LEFT_BOTTOM 
                      },
                      fullscreenControl: false,
                      draggable: true
                      //draggable: (! isTablet())
                    };
                  	//var gml = new GlobalMapLoader();
        			_self._map = GlobalMapLoader.getInstance().initMapObject(mapOptions,true,true,mapDivContainerId);
        		
	    			var el1 = google.maps.event.addListener(_self._map, 'zoom_changed', function() {
	    				if (_self._mapDivContainerId == "divMapParent") {
	    					$("body").trigger("itinerary_map_ready");
	    					fireEvent("Itinerary-2.0", "map zoom");
	    				}
	    				setTimeout(function() {
	    					if (_self._restArr == null || _self._restArr.length == 0) {
	    						_self.handleSiteOverlayTextPosition();
	    					}
                 				
                 		}, 500);                		
	                 });
	    			 GlobalMapLoader.getInstance().addEventListener(el1);
	                 
	    			 var el2 = google.maps.event.addListener(_self._map, 'dragend', function() {
	    				if (_self._mapDivContainerId == "divMapParent") {
 		    				$("body").trigger("itinerary_map_ready");
 		    				fireEvent("Itinerary-2.0", "map move");
 		    			}
                 		setTimeout(function() {
                 			if (_self._restArr == null || _self._restArr.length == 0) {
                 				_self.handleSiteOverlayTextPosition(true);
                 			}
                 		}, 500);                		
	                 });
	                 GlobalMapLoader.getInstance().addEventListener(el2);
	                 
	                 var el3 = google.maps.event.addListenerOnce(_self._map, 'idle', function() {
	                	/*if (_self._mapDivContainerId == "divMapParent") {
	                		$("body").trigger("itinerary_map_ready");
		    			}*/
	                 	_self.createUtilityOverlay();
	                 });
	                 GlobalMapLoader.getInstance().addEventListener(el3);
	                 
	                 var el4 = google.maps.event.addListenerOnce(_self._map, 'resize', function() {
	                	setTimeout(function() {
	                		var padeft = $("#itinerary-map-wrapper").css("padding-left").replace("px","");
	                		var padLeftInt = parseInt(padeft);
	                		$("#itinerary-map-wrapper").animate({ 
	     					   'padding-left' : (padLeftInt+1) + "px"
	     					}, 200, function(){
	     						setTimeout(function() {
	    	                		$("#itinerary-map-wrapper").css('padding-left','');
	    	                 	}, 500);   
	     					});
	                 	}, 1500);
	                	
	                	
					});
	                 //GlobalMapLoader.getInstance().addEventListener(el4);
        		}
        		
        		if (mapType != null && mapType == 'attractions') {
        			_self.initializeAttractionsMapFromItrSitesReady(mapDivContainerId,siteArr,siteForEmptyMap);	
        		} else {
        			if (siteArr.length > 0 && siteArr[0].color != null) {
        				//reset the bounds and the directions before starting
        				_self.clearDirections();
        				_self._bounds = new google.maps.LatLngBounds(); 
        				_self.clearOverlays();
        				_self.clearRestOverlays();
        				for (var i=0;i<siteArr.length;i++) {
        					_self.initializeMapFromItrSitesReady(mapDivContainerId,siteArr[i].sites,siteForEmptyMap,disableRouting,siteArr[i],siteArr.length == i+1);
        				}
        			} else {
        				_self.initializeMapFromItrSitesReady(mapDivContainerId,siteArr,siteForEmptyMap,disableRouting,null,true);
        			}
        			
        		}
        		
        		google.maps.event.trigger(_self._map, "resize");
        	});
        }
        
        
        MapMgr.prototype.initializeMapFromItrSitesReady = function(mapDivContainerId,siteArr,siteForEmptyMap,disableRouting,curSiteArrObj,isLast) {
        	var _self = this;
//        	var bounds = new google.maps.LatLngBounds();
        	
        	if (curSiteArrObj == null) {
        		curSiteArrObj = new Object(); //initialize
        		_self.clearDirections();
        		_self._bounds = new google.maps.LatLngBounds();
        		_self.clearOverlays();
        	}
        	//var isFirstMapUsage = false;
        	
        	// ignore first zoom event because setting the textbox position will be taken care of by the overlay creation part.
        	this._ignoreFirstZoomEvent = true;
        	
        	// clone and remove last hotel element if its there
        	siteArr = siteArr.clone();
       	
        	if (siteArr.length > 0 && siteArr[0].getType() == "hotel" && ! this.isShowHotelOnMap()) {
        		//siteArr.shift();
        	}
        	
        	// remove last element if that\'s an hotel (only if there are other sites on that day)
        	if (siteArr.length > 1 && siteArr[0].getType() == "hotel" &&  siteArr[siteArr.length -1].getType() == "hotel") {
        		siteArr.pop();
        	}
        	
        	if (siteArr == null || siteArr.length == 0) {
        		this._map.setCenter(new google.maps.LatLng(siteForEmptyMap.latitude, siteForEmptyMap.longitude));
        		this._map.setZoom(12);
        		
        		require(["ngApp/website/itinerary-ng/mapSiteOverlay"],
    				    function(MapSiteOverlay){
    						_MapSiteOverlay = MapSiteOverlay;
        			}
        		);
        		//this.initEmptyMap(mapDivContainerId, siteForEmptyMap);
        		return;
        	}        	
        	
        	var idx = 1;
        	for (var i=0;i<siteArr.length;i++) {
        		// for later use directions display
        		if (siteArr[i].getType() != "hotel") {
        			siteArr[i].noIdx = (idx++);	
        		}
        		else {
        			siteArr[i].noIdx = -1;
        		}
        		
        		if (curSiteArrObj.lineColor == null) {
        			_self._bounds.extend(siteArr[i].getLatLng());
        		} else {
        			//for trip overview, exclude far away attractions
        			var distance = _self._mapServices.calcDistanceBetween(siteArr[i].getLatLng().lat(), siteArr[i].getLatLng().lng(), siteForEmptyMap.latitude, siteForEmptyMap.longitude);
        			if (distance < 10000) {
        				_self._bounds.extend(siteArr[i].getLatLng());
        			}
        		}
        	}	 

          	if (!disableRouting) {
          		if (siteArr.length > 1) {
          			this.addWayPoints(siteArr, 0, siteArr.length-1,curSiteArrObj.lineColor);	
          		}          			
          	} else if (window.location.hash.indexOf("restaurants") < 0 && window.location.hash.indexOf("myPlaces") < 0) {
          		if (siteArr.length > 1) {
          			this.addSimpleLine(siteArr, 0, siteArr.length-1,curSiteArrObj.lineColor);	
	          	}
          	}
          
          

          	//for 1 site, set zoom manually otherwise zoom is too large
          	if (siteArr.length <= 1) {
          		this._map.setZoom(13); 
          	}
          		
          	// group personal activities per attractions
          	var attractionsAr = [];
          	var personalActAr = [];
          	
            for (var i=0;i<siteArr.length;i++) {
            	if (siteArr[i].isAttractionContainer() ) {
            		attractionsAr.push(siteArr[i]);
            	}
            	else {
            		personalActAr.push(siteArr[i]);
            	}
            }
            
            for (var i=0;i<siteArr.length;i++) {
            	var noTitleArr = [siteArr[i].noIdx];
            	var commonLocationWithAttraction = false;
            	
            	for (var j=0;j<siteArr.length;j++) {
            		if (i != j && siteArr[i].getLatLng().lat() == siteArr[j].getLatLng().lat() && siteArr[i].getLatLng().lng() == siteArr[j].getLatLng().lng()) {            			
            			noTitleArr.push(siteArr[j].noIdx);
            			
            			if (siteArr[j].isAttractionContainer()) {
            				commonLocationWithAttraction = true;
            			}
            		}
            	}
            	
            	// clean title if it\'s personal activity which has common location with attraction
            	if (! siteArr[i].isAttractionContainer() && commonLocationWithAttraction) {
            		siteArr[i].noTitle = "";
            	}
            	else {
                	// create title
                	noTitleArr.sort();
                	siteArr[i].noTitle = noTitleArr.join(", ");  
                	
                	// don't show hotel number
                	if (siteArr[i].noTitle == "-1") {
                		siteArr[i].noTitle = "";
                	}
            	}           	

            }
          	
          	// sort array so northeast elements will be drawn first
            attractionsAr.sort(function(a, b)	{ 	
          		// northeast elements will be drawn first
          		return (a.getLatLng().lat() > b.getLatLng().lat() ? -1 : 1);	  	  	
          	});
          	
            // clear overlays
            
            
          	// add attraction overlays so it will be on front of personal activities
			require(["ngApp/website/itinerary-ng/mapSiteOverlay"],
				    function(MapSiteOverlay){
						
						_MapSiteOverlay = MapSiteOverlay;
			            // first add personal activities so it will be behind attractions
			            for (var i=0;i<personalActAr.length;i++) {
			            	var overlay = new _MapSiteOverlay(_self, personalActAr[i], 25, 
			            			mapDivContainerId, false, appRoot, personalActAr[i].noIdx, disableRouting,curSiteArrObj.color);
			            	
			            	_self._overlayArr.push(overlay); 
			            }				
				
			            // add attractions
			            for (var i=0;i<attractionsAr.length;i++) {
			            	var overlay = new _MapSiteOverlay(_self, attractionsAr[i], 25, 
			            			mapDivContainerId, false, appRoot, attractionsAr[i].noIdx,disableRouting,curSiteArrObj.color);
			            	
			            	_self._overlayArr.push(overlay); 
			            }
			            if (isLast) {
				            _self._mapIdle.then(function() {
				            	// if we have at least 3 items see if we can get better zoom
				            	// fit bounds
				              	_self._map.fitBounds(_self._bounds);
				              	_self._overlaysBounds = _self._bounds;
				              	if (siteArr != null && siteArr.length > 0) {
				              		_self._map.setCenter(_self._bounds.getCenter());
				              	} else {
				              		_self._map.setZoom(12); 
				              		_self._map.setCenter(new google.maps.LatLng(siteForEmptyMap.latitude, siteForEmptyMap.longitude));
				              	}
				              	setTimeout(function() {
				              		$("body").trigger("itinerary_map_init");
				              		if (curSiteArrObj != null || siteArr.length > 2) {
					                	//if (! _self.handleMapFitToBounds(mapDivContainerId) ) {
					                		_self.handleSiteOverlayTextPosition();	
					                	//} 			            				            		
					            	} else {
					            		if (siteArr.length > 0) {
					            			_self._map.setZoom(16); 
					            		}
					            		_self.handleSiteOverlayTextPosition();
					            	}
		                 		}, 500);   
				            	
				            });
			            }
				    }
			);	
        };	
        
        MapMgr.prototype.getMapStyleOptions = function() {
        	var noPoi =  		[
                         		  {
                         		    "featureType": "landscape",
                         		    "stylers": [ {
                         		        "color": "#dfdfdf"
                         		      }]
                         		  },{
                         		    "featureType": "poi",
                         		    "elementType": "labels.icon",
                         		    "stylers": [{
                         		    	"visibility": "off"
                         		      }]
                         		  },{
                         		    "featureType": "poi",
                         		    "elementType": "labels.text",
                         		    "stylers": [{
                         		        "visibility": "off"
                         		      }]
                         		  },{
                         		    "featureType": "poi.park",
                         		    "stylers": [{
                         		        "color": "#a3d25b"
                         		      }]
                         		  },{
                         		    "featureType": "road",
                         		    "stylers": [{
                         		        "visibility": "simplifed"
                         		      },{
                         		        "weight": "0"
                         		      }]
                         		  },{
                         		    "featureType": "road",
                         		    "elementType": "labels.icon",
                         		    "stylers": [{
                         		        "hue": "#fff700"
                         		      },{
                         		        "saturation": -26
                         		      },{
                         		        "lightness": 37
                         		      },{
                         		        "visibility": "simplified"
                         		      }]
                         		  },{
                         		    "featureType": "road.highway",
                         		    "elementType": "geometry",
                         		    "stylers": [{
                         		        "color": "#BBBBBB"
                         		      },{
                         		        "weight": 0.4
                         		      }]
                         		  },{
                         		    "featureType": "road.local",
                         		    "stylers": [{
                         		        "visibility": "on"
                         		      }]
                         		  },{
                         		    "featureType": "transit",
                         		    "stylers": [{
                         		        "visibility": "off"
                         		      }]
                         		  },{
                         		    "featureType": "transit",
                         		    "elementType": "labels.text",
                         		    "stylers": [{
                         		        "visibility": "off"
                         		      }]
                         		  },{
                         		    "featureType": "water",
                         		    "stylers": [{
                         		        "color": "#24a0d0"
                         		      },{
                         		        "saturation": 50
                         		      },{
                         		        "lightness": 25
                         		      }
                         		    ]
                         		  }
                         		];
         	
          	return noPoi;
        }
        
        MapMgr.prototype.createUtilityOverlay = function() {
        	var _self = this;
        	
        	// create overlay for lat lng calc and resolve
        	if (this._overlayForLatLng == null) {
            	var overlayForLatLng = new google.maps.OverlayView();
            	
            	overlayForLatLng.loadedDefered = new $.Deferred();
            	overlayForLatLng.draw = function() {
            		_self._mapIdle.resolve();
            	};
            	
            	overlayForLatLng.setMap(_self._map);        	
            	this._overlayForLatLng = overlayForLatLng;        		
        	}
        }
        
      
        MapMgr.prototype.adjustAttractionsMap = function(mapDivContainerId,siteForEmptyMap,siteArr,curSite,isNew) {
        	var _self = this;
        	if (this._map == null) {
        		return false;
        	}
        	
        	if (_self.isInBounds(curSite) || isNew) {
        		_self._map.fitBounds(_self._bounds);
              	_self._overlaysBounds = _self._bounds;
              	if (siteArr != null && siteArr.length > 0) {
              		_self._map.setCenter(_self._bounds.getCenter());
              	} else {
              		_self._map.setZoom(12); 
              		_self._map.setCenter(new google.maps.LatLng(siteForEmptyMap.latitude, siteForEmptyMap.longitude));
              	}
        	} else {
        		_self._map.setZoom(12); 
          		_self._map.setCenter(curSite.getLatLng());
        	}
        	
          	//_self.handleSiteOverlayTextPosition();
        }
        
        
        MapMgr.prototype.handleMapFitToBounds = function(mapDivContainerId) {
        	var _self = this;
        	if (this._map == null) {
        		return false;
        	}
        	var mapBounds = this._map.getBounds();
        	var overlayBounds = this._overlaysBounds;
        	var mapNorthEastInPixels = _self.getLatLngToPix(mapBounds.getNorthEast());
        	if (mapNorthEastInPixels == null) {
        		return false;
        	}
        	var overlaysNorthEastInPixels = _self.getLatLngToPix(overlayBounds.getNorthEast());
        	var mapContainer = $("#" + mapDivContainerId);
        	var divWidthAllowedDiff = mapContainer.width() * 0.3;
        	var divHeightAllowedDiff = mapContainer.height() * 0.25;
        	var diffXRight = mapNorthEastInPixels.x - overlaysNorthEastInPixels.x;
        	var diffYRight = overlaysNorthEastInPixels.y - mapNorthEastInPixels.y;
        	
        	//console.log(divWidthAllowedDiff, divHeightAllowedDiff, diffXRight, diffYRight, overlaysNorthEastInPixels.y, mapNorthEastInPixels.y);
        	
        	if (diffXRight > divWidthAllowedDiff && diffYRight > divHeightAllowedDiff) {
        		var zoom = _self._map.getZoom();
        		_self._map.setZoom(zoom + 1);
        		
        		return true;
        	}
        	
        	return false;
        }
        
        MapMgr.prototype.handleSiteOverlayTextPosition = function(doRedraw) {
        	var _self = this;
        	var arrDefered = [];
        	
        	_self.createUtilityOverlay();
        	
            for (var i=0;i<this._overlayArr.length;i++) { 	
            	arrDefered.push(this._overlayArr[i].overlayLoaded);
            }
            
            
        	
        	$.when.apply($, arrDefered).done(function() {
            	// zero textBoxRelativeRect
        		for (var i=0;i<_self._overlayArr.length;i++) { 	
                	_self._overlayArr[i].textBoxRelativeRect = null;
                }         	

            	// draw text with respect to images only
                for (var i=0;i<_self._overlayArr.length;i++) { 	
                	_self._overlayArr[i].repositionText(_self._overlayArr);
                }
                
                // final, hide texts that still intersect. give priority to more important places
                var overlaysAr = _self._overlayArr;
                overlaysAr.sort(function(a, b)	{
                	// give priority to first site in day                	
                	if (a.itrSite.idx == 1) {
                		return -1;
                	}
                	
                	if (b.itrSite.idx == 1) {
                		return 1;
                	}
                	
                	//sort restaurants
                	if (a.itrSite.raking != null && b.itrSite.raking != null) {
                		return (b.itrSite.raking - a.itrSite.raking);	  
                	}
                	if (a.itrSite.taRestaurant) {
                		return 1;
                	}
                	if (b.itrSite.taRestaurant) {
                		return 1;
                	}
                	
                	if (a.itrSite.idx == null) {
                		return 1;
                	}
                	
                	if (b.itrSite.idx == null) {
                		return 1;
                	}
                	
                	var aNoPerUsers = a.itrSite.site != null && a.itrSite.site.noPerUsers != null ? a.itrSite.site.noPerUsers : 0;
                	var bNoPerUsers = b.itrSite.site != null && b.itrSite.site.noPerUsers != null ? b.itrSite.site.noPerUsers : 0;
              		return (aNoPerUsers - bNoPerUsers);	  	  	
              	});
  
                for (var i=0;i<_self._overlayArr.length;i++) { 	
                	_self._overlayArr[i].textBoxShown = false;
                }                

            	// draw text with respect to images and existing textboxes
                for (var i=0;i<_self._overlayArr.length;i++) { 	
                	_self._overlayArr[i].repositionText(_self._overlayArr, true, doRedraw);
                }
                
        	});
            
        }
        
        /**
         * Draw restaurants
         */
        MapMgr.prototype.drawRestaurants = function(restArr) {
        	var _self = this;
        	_self._restArr = restArr;
    		_self.clearRestOverlays();
    		var restCounter = 0;
    		var skippedRestCounter = 0;
    		//require(["ngApp/website/itinerary-ng/mapSiteOverlay"],
			//	    function(MapSiteOverlay){
		    			for (var i=0;i<_self._restArr.length;i++) {
		    				var isInBounds = _self.isInBounds(_self._restArr[i]);
		    				if ((_self._restTxtSearch || isInBounds) && _self._restArr[i].dayInTrip == null) {
		    					var overlay = new _MapSiteOverlay(_self, _self._restArr[i], 25, 
		    							"divMapParent_child", false, appRoot, _self._restArr[i].noIdx,true,null,true);
		    					_self._overlayArr.push(overlay);
		    					
		    				} 
		    				if (isInBounds) {
		    					$("body").trigger("itinerary_rest_in_bounds",_self._restArr[i].locationId);
		    					restCounter++;
		    				} else {
		    					skippedRestCounter++;
		    				}
		                	 
						}
		    			$("body").trigger("itinerary_rest_in_bounds_done");
		    			_self.handleSiteOverlayTextPosition(true);
		    			//console.log("in bounds: " + restCounter);
		    			//console.log("not in bounds: " + skippedRestCounter);
		    			//console.timeEnd("drawRestaurants");
		    			if (_self._restArr.length > 0 && restCounter == 0 && _self._restTxtSearch) {
		    				$("body").trigger("no_rests_in_bounds");
		    			}
    			//}
			//);	 
        }
        
        MapMgr.prototype.fitMapToRestBounds = function() {
        	var _self = this;
        	var bounds = new google.maps.LatLngBounds();
        	for (var i=0;i<_self._restArr.length;i++) {
        		bounds.extend(_self._restArr[i].getLatLng());
        	}
        	_self._map.fitBounds(bounds);
        	_self.handleSiteOverlayTextPosition();
        }
        
        
        /**
         * Clear restaurants
         */
        MapMgr.prototype.clearRestOverlays = function() {
        	var _self = this;
        	for (var i=0;i<_self._overlayArr.length;i++) {
        		if (_self._overlayArr[i].isRestaurant) {
        			try {
        				_self._overlayArr[i].setMap(null);
                		$("#divMapImg_" + _self._overlayArr[i].id).css("display","none");
                		_self._overlayArr.splice(i, 1);
                		i--;
        			} catch(err) {}
        			
        		}
        		
        	}
        }
        
        MapMgr.prototype.getLatLngToPix = function(pos) {
        	var p = null;
        	var overlay = this._overlayForLatLng;
        	if (overlay == null) {
        		return p;
        	}
        	var proj = overlay.getProjection();
        	if (proj != null) {
        		p = proj.fromLatLngToContainerPixel(pos);
        	}
        	return p;
        }
        
        MapMgr.prototype.clearOverlays = function() {
            if (this._overlayArr != null) {
                for (var i=0;i<this._overlayArr.length;i++) {
                	this._overlayArr[i].setMap(null);
                	this._overlayArr[i].itrSite = {noInTrip : -1};
                	this._overlayArr[i] = null;
                }    
                
                this._overlayArr = null;
            } 	
            
            this._overlayArr = [];
        }
        
        MapMgr.prototype.initEmptyMap = function(mapDivContainerId, siteForEmptyMap) {
        	
         	var mapOptions = {
         			center: new google.maps.LatLng(siteForEmptyMap.latitude, siteForEmptyMap.longitude),
                    zoom: 12,
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    scrollwheel: false,
                    draggable: true,
                    fullscreenControl: false
                    //draggable: (! isTablet())
                  };
                  
        	//if (this._map == null) {
        		//this._map = new google.maps.Map($("#" + mapDivContainerId).get(0), mapOptions);
        		//this._map.setOptions({styles: this.getMapStyleOptions()mapOptions);
        		this._map = GlobalMapLoader.getInstance(mapDivContainerId).initMapObject(mapOptions,false,true,mapDivContainerId);
        	//}      

        	this.clearOverlays();
        	this.clearDirections();
        }
        
        MapMgr.prototype.addWayPoints = function (siteArr, fromIdx, toIdx,lineColOverride) {
        	var _self = this;
	      	//var directionsService = new google.maps.DirectionsService();
      	  
	      	var lineColor = lineColOverride != null ? lineColOverride : "#00b3fd";
	      	 
	      	var lineSymbol = {
	      		  path: google.maps.SymbolPath.CIRCLE,
	      		  scale: lineColOverride != null ? 1 : 2,
	      		  strokeColor: lineColor,
	      		  fillColor: lineColor,
	      		  fillOpacity:1.0 
	      	 };
      	   
	      	var polylineOptionsActual = {	    
      		    icons: [{
      		        icon: lineSymbol,
      		        repeat: lineColOverride != null ? "5px" : "10px"
      		     }],
      		    strokeWeight:0
	      	};  
	      	
	      	// avoid putting special line on safari. causing safari to crash 
	      	if (navigator.userAgent.indexOf('Mac OS X') != -1) {
	      		//polylineOptionsActual = null;
	      		polylineOptionsActual = {	    
	      				strokeColor: lineColor,
	          		    strokeWeight: lineColOverride != null ? 2 : 3
	      		}
	      	} 
      		
	      	var rendererOptions = {
      			polylineOptions: polylineOptionsActual,
      			suppressMarkers:true,
      			preserveViewport:true
	      	};
	      	
	      	var directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
	      	this._directionsDisplayAr.push(directionsDisplay);
	      	directionsDisplay.setMap(this._map);
      	  
	      	var start = siteArr[fromIdx].getLatLng();
	      	var end = siteArr[toIdx].getLatLng();
	      	var waypts = [];
	      	var wayPointsStr = "";
	      	for (var i=(fromIdx + 1);i<(toIdx);i++) {
	      		var stopOver = fromIdx == 0 ? false : true;
	      		var location = siteArr[i].getLatLng();
	      		waypts.push({
	      			location:  location,
      	            stopover: stopOver}
	      		);
	      		if (wayPointsStr.length >0) {
	      			wayPointsStr += "|";
	      		}
	      		wayPointsStr += location.lat().toFixed(3) + "," + location.lng().toFixed(3);
	      		
	      	}
      	  
	      	var request = {
	      			origin: start,
	      			destination: end,
	      			waypoints: waypts,
	      			optimizeWaypoints: false,
	      			travelMode: google.maps.TravelMode.WALKING
	      	};
	      	var originStr =  start.lat().toFixed(3) + "," + start.lng().toFixed(3);
	      	var destinationStr =  end.lat().toFixed(3) + "," + end.lng().toFixed(3);
	      	_self.getRouteFromServer(originStr,destinationStr,wayPointsStr,"walking").then(function(results) {
	      		var obj = new Object();
		      	try {
		      		obj = JSON.parse(results);
		      	} catch (ex) {
		      		//console.log(ex);
		      	}
		      	if (obj.status != null && obj.status == "OK") {
		      		obj.request = request;
			      	var tcr = typecastRoutes(obj.routes)
			      	directionsDisplay.setOptions({
			             directions : {
			                 routes : tcr,
			                 request: request
			             },
			            draggable : false,
			            polylineOptions: polylineOptionsActual,
			      		suppressMarkers:true,
			      		preserveViewport:true,
			      		suppressInfoWindows: true,
			             map : _self._map
			         });
			      	directionsDisplay.setDirections(obj);
		      	} else {
		      		//log sentry
		      		var status = "empty";
		      		if (obj.status != null) {
		      			status = obj.status;
		      		}
		      		Raven.captureException(new Error('Failed to get directions from server: ' + status), {
		      		  logger: status
		      		});
		      		
		      	}
		      	
	      	});
      	};
      	
      	MapMgr.prototype.addSimpleLine = function (siteArr, fromIdx, toIdx,lineColOverride) {
      		var _self = this;
      		
      		var path = new Array();
	      	for (var i=fromIdx;i<=toIdx;i++) {
	      		path.push(siteArr[i].getLatLng());
	      	}
      		var lineColor = lineColOverride != null ? lineColOverride : "#00b3fd";
	      	 
	      	var lineSymbol = {
	      		  path: google.maps.SymbolPath.CIRCLE,
	      		  scale: lineColOverride != null ? 1 : 2,
	      		  strokeColor: lineColor,
	      		  fillColor: lineColor,
	      		  fillOpacity:1.0 
	      	 };
      	   
	      
	      	var renderOpts = null;
	      	
	      	// avoid putting special line on safari. causing safari to crash 
	      	if (navigator.userAgent.indexOf('Mac OS X') != -1) {
	      		renderOpts = {
	      			map: _self._map,
	    	   	    path: path,
	    	   	    strokeColor: lineColor,
	    	   	    strokeWeight: lineColOverride != null ? 2 : 3
	      		}
	      	} else {
	      		renderOpts = {
	    	      		map: _self._map,
	    	   	      	path: path,
	    	   	      	icons: [{
	    	      	 		icon: lineSymbol,
	    	      	 		repeat: lineColOverride != null ? "5px" : "10px"
	    	      	 	}],
	    	      	 	strokeWeight:0
	      		}
	      	} 
	      	_self._polylineAr.push(new google.maps.Polyline(renderOpts));

      	}                         
                        
      	
      	MapMgr.prototype.getRouteFromServer = function(origin,destination,wayPointsStr,travelMode) {
      		var deffered = new $.Deferred();
      		var url = globExprWeb["google-photos-cloudfront"] + "/api/getRoute?travelMode="+travelMode.toLowerCase()+"&origin="+origin+"&destination=" + destination + "&waypoints=" + wayPointsStr;
      		$.ajax({
    			  url: url,
    			  type: "GET",
    			  cache: true
	     	}).done(function(results) {
	  	      	deffered.resolve(results); 	      		
	  	    }).fail(function() {
	  	    	deffered.resolve("");
	  	    });
      		return deffered;
      	}
      	
      	MapMgr.prototype.clearDirections = function() {
          	for (var i=0;i<this._directionsDisplayAr.length;i++) {
          		this._directionsDisplayAr[i].setMap(null);
          		this._directionsDisplayAr[i] = null;
          	}
          	this._directionsDisplayAr = [];
          	
          	for (var i=0;i<this._polylineAr.length;i++) {
          		this._polylineAr[i].setMap(null);
          		this._polylineAr[i] = null;
          	}
          	this._polylineAr = [];
      	}
      	
      	MapMgr.prototype.isShowHotelOnMap = function() {
      		return this._showHotelOnMap;
      	};
      	
      	MapMgr.prototype.isShowRests = function() {
      		return true;
      	};
      
      	
      	MapMgr.prototype.changeShowHotelOnMap =  function(isShow) {
      		this._showHotelOnMap = isShow;      		
      	};
      	
      	MapMgr.prototype.destroyMap =  function(isShow) {
      		this._map = null;
      		this._overlayForLatLng = null;
      		this._mapIdle = new $.Deferred();
      	};
      	
      	MapMgr.prototype.isInBounds =  function(site) {
      		if (this._map != null && this._map.getBounds() != null) {
      			return this._map.getBounds().contains(site.getLatLng());
      		}
      	}
        
        var instance = new MapMgr();
        
        MapMgr.getInstance = function() {
        	return instance;
        }; 
        
        MapMgr.newInstance = function() {
        	instance = new MapMgr();
        	return instance;
        }; 
 
        return(MapMgr);
    }

);

/**!
 * Sortable
 * @author	RubaXa   <trash@rubaxa.org>
 * @license MIT
 */


(function (factory) {
	"use strict";

	if (typeof define === "function" && define.amd) {
		define('Sortable',factory);
	}
	else if (typeof module != "undefined" && typeof module.exports != "undefined") {
		module.exports = factory();
	}
	else if (typeof Package !== "undefined") {
		Sortable = factory();  // export for Meteor.js
	}
	else {
		/* jshint sub:true */
		window["Sortable"] = factory();
	}
})(function () {
	"use strict";

	var dragEl,
		ghostEl,
		cloneEl,
		rootEl,
		nextEl,

		scrollEl,
		scrollParentEl,

		lastEl,
		lastCSS,

		oldIndex,
		newIndex,

		activeGroup,
		autoScroll = {},

		tapEvt,
		touchEvt,

		/** @const */
		RSPACE = /\s+/g,

		expando = 'Sortable' + (new Date).getTime(),

		win = window,
		document = win.document,
		parseInt = win.parseInt,

		supportDraggable = !!('draggable' in document.createElement('div')),

		_silent = false,

		abs = Math.abs,
		slice = [].slice,

		touchDragOverListeners = [],

		_autoScroll = _throttle(function (/**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl) {
			// Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
			if (rootEl && options.scroll) {
				var el,
					rect,
					sens = options.scrollSensitivity,
					speed = options.scrollSpeed,

					x = evt.clientX,
					y = evt.clientY,

					winWidth = window.innerWidth,
					winHeight = window.innerHeight,

					vx,
					vy
				;

				// Delect scrollEl
				if (scrollParentEl !== rootEl) {
					scrollEl = options.scroll;
					scrollParentEl = rootEl;

					if (scrollEl === true) {
						scrollEl = rootEl;

						do {
							if ((scrollEl.offsetWidth < scrollEl.scrollWidth) ||
								(scrollEl.offsetHeight < scrollEl.scrollHeight)
							) {
								break;
							}
							/* jshint boss:true */
						} while (scrollEl = scrollEl.parentNode);
					}
				}

				if (scrollEl) {
					el = scrollEl;
					rect = scrollEl.getBoundingClientRect();
					vx = (abs(rect.right - x) <= sens) - (abs(rect.left - x) <= sens);
					vy = (abs(rect.bottom - y) <= sens) - (abs(rect.top - y) <= sens);
				}


				if (!(vx || vy)) {
					vx = (winWidth - x <= sens) - (x <= sens);
					vy = (winHeight - y <= sens) - (y <= sens);

					/* jshint expr:true */
					(vx || vy) && (el = win);
				}


				if (autoScroll.vx !== vx || autoScroll.vy !== vy || autoScroll.el !== el) {
					autoScroll.el = el;
					autoScroll.vx = vx;
					autoScroll.vy = vy;

					clearInterval(autoScroll.pid);

					if (el) {
						autoScroll.pid = setInterval(function () {
							if (el === win) {
								win.scrollTo(win.pageXOffset + vx * speed, win.pageYOffset + vy * speed);
							} else {
								vy && (el.scrollTop += vy * speed);
								vx && (el.scrollLeft += vx * speed);
							}
						}, 24);
					}
				}
			}
		}, 30)
	;



	/**
	 * @class  Sortable
	 * @param  {HTMLElement}  el
	 * @param  {Object}       [options]
	 */
	function Sortable(el, options) {
		this.el = el; // root element
		this.options = options = _extend({}, options);


		// Export instance
		el[expando] = this;


		// Default options
		var defaults = {
			group: Math.random(),
			sort: true,
			disabled: false,
			store: null,
			handle: null,
			scroll: true,
			scrollSensitivity: 30,
			scrollSpeed: 10,
			draggable: /[uo]l/i.test(el.nodeName) ? 'li' : '>*',
			ghostClass: 'sortable-ghost',
			ignore: 'a, img',
			filter: null,
			animation: 0,
			setData: function (dataTransfer, dragEl) {
				dataTransfer.setData('Text', dragEl.textContent);
			},
			dropBubble: false,
			dragoverBubble: false,
			dataIdAttr: 'data-id',
			delay: 0
		};


		// Set default options
		for (var name in defaults) {
			!(name in options) && (options[name] = defaults[name]);
		}


		var group = options.group;

		if (!group || typeof group != 'object') {
			group = options.group = { name: group };
		}


		['pull', 'put'].forEach(function (key) {
			if (!(key in group)) {
				group[key] = true;
			}
		});


		options.groups = ' ' + group.name + (group.put.join ? ' ' + group.put.join(' ') : '') + ' ';


		// Bind all private methods
		for (var fn in this) {
			if (fn.charAt(0) === '_') {
				this[fn] = _bind(this, this[fn]);
			}
		}


		// Bind events
		_on(el, 'mousedown', this._onTapStart);
		_on(el, 'touchstart', this._onTapStart);

		_on(el, 'dragover', this);
		_on(el, 'dragenter', this);

		touchDragOverListeners.push(this._onDragOver);

		// Restore sorting
		options.store && this.sort(options.store.get(this));
	}


	Sortable.prototype = /** @lends Sortable.prototype */ {
		constructor: Sortable,

		_onTapStart: function (/** Event|TouchEvent */evt) {
			var _this = this,
				el = this.el,
				options = this.options,
				type = evt.type,
				touch = evt.touches && evt.touches[0],
				target = (touch || evt).target,
				originalTarget = target,
				filter = options.filter;


			if (type === 'mousedown' && evt.button !== 0 || options.disabled) {
				return; // only left button or enabled
			}

			target = _closest(target, options.draggable, el);

			if (!target) {
				return;
			}

			// get the index of the dragged element within its parent
			oldIndex = _index(target);

			// Check filter
			if (typeof filter === 'function') {
				if (filter.call(this, evt, target, this)) {
					_dispatchEvent(_this, originalTarget, 'filter', target, el, oldIndex);
					evt.preventDefault();
					return; // cancel dnd
				}
			}
			else if (filter) {
				filter = filter.split(',').some(function (criteria) {
					criteria = _closest(originalTarget, criteria.trim(), el);

					if (criteria) {
						_dispatchEvent(_this, criteria, 'filter', target, el, oldIndex);
						return true;
					}
				});

				if (filter) {
					evt.preventDefault();
					return; // cancel dnd
				}
			}


			if (options.handle && !_closest(originalTarget, options.handle, el)) {
				return;
			}


			// Prepare `dragstart`
			this._prepareDragStart(evt, touch, target);
		},

		_prepareDragStart: function (/** Event */evt, /** Touch */touch, /** HTMLElement */target) {
			var _this = this,
				el = _this.el,
				options = _this.options,
				ownerDocument = el.ownerDocument,
				dragStartFn;

			if (target && !dragEl && (target.parentNode === el)) {
				tapEvt = evt;

				rootEl = el;
				dragEl = target;
				nextEl = dragEl.nextSibling;
				activeGroup = options.group;

				dragStartFn = function () {
					// Delayed drag has been triggered
					// we can re-enable the events: touchmove/mousemove
					_this._disableDelayedDrag();

					// Make the element draggable
					dragEl.draggable = true;

					// Disable "draggable"
					options.ignore.split(',').forEach(function (criteria) {
						_find(dragEl, criteria.trim(), _disableDraggable);
					});

					// Bind the events: dragstart/dragend
					_this._triggerDragStart(touch);
				};

				_on(ownerDocument, 'mouseup', _this._onDrop);
				_on(ownerDocument, 'touchend', _this._onDrop);
				_on(ownerDocument, 'touchcancel', _this._onDrop);

				if (options.delay) {
					// If the user moves the pointer before the delay has been reached:
					// disable the delayed drag
					_on(ownerDocument, 'mousemove', _this._disableDelayedDrag);
					_on(ownerDocument, 'touchmove', _this._disableDelayedDrag);

					_this._dragStartTimer = setTimeout(dragStartFn, options.delay);
				} else {
					dragStartFn();
				}
			}
		},

		_disableDelayedDrag: function () {
			var ownerDocument = this.el.ownerDocument;

			clearTimeout(this._dragStartTimer);

			_off(ownerDocument, 'mousemove', this._disableDelayedDrag);
			_off(ownerDocument, 'touchmove', this._disableDelayedDrag);
		},

		_triggerDragStart: function (/** Touch */touch) {
			if (touch) {
				// Touch device support
				tapEvt = {
					target: dragEl,
					clientX: touch.clientX,
					clientY: touch.clientY
				};

				this._onDragStart(tapEvt, 'touch');
			}
			else if (!supportDraggable) {
				this._onDragStart(tapEvt, true);
			}
			else {
				_on(dragEl, 'dragend', this);
				_on(rootEl, 'dragstart', this._onDragStart);
			}

			try {
				if (document.selection) {
					document.selection.empty();
				} else {
					window.getSelection().removeAllRanges();
				}
			} catch (err) {
			}
		},

		_dragStarted: function () {
			if (rootEl && dragEl) {
				// Apply effect
				_toggleClass(dragEl, this.options.ghostClass, true);

				Sortable.active = this;

				// Drag start event
				_dispatchEvent(this, rootEl, 'start', dragEl, rootEl, oldIndex);
			}
		},

		_emulateDragOver: function () {
			if (touchEvt) {
				_css(ghostEl, 'display', 'none');

				var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY),
					parent = target,
					groupName = ' ' + this.options.group.name + '',
					i = touchDragOverListeners.length;

				if (parent) {
					do {
						if (parent[expando] && parent[expando].options.groups.indexOf(groupName) > -1) {
							while (i--) {
								touchDragOverListeners[i]({
									clientX: touchEvt.clientX,
									clientY: touchEvt.clientY,
									target: target,
									rootEl: parent
								});
							}

							break;
						}

						target = parent; // store last element
					}
					/* jshint boss:true */
					while (parent = parent.parentNode);
				}

				_css(ghostEl, 'display', '');
			}
		},


		_onTouchMove: function (/**TouchEvent*/evt) {
			if (tapEvt) {
				var touch = evt.touches ? evt.touches[0] : evt,
					dx = touch.clientX - tapEvt.clientX,
					dy = touch.clientY - tapEvt.clientY,
					translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';

				touchEvt = touch;

				_css(ghostEl, 'webkitTransform', translate3d);
				_css(ghostEl, 'mozTransform', translate3d);
				_css(ghostEl, 'msTransform', translate3d);
				_css(ghostEl, 'transform', translate3d);

				evt.preventDefault();
			}
		},


		_onDragStart: function (/**Event*/evt, /**boolean*/useFallback) {
			var dataTransfer = evt.dataTransfer,
				options = this.options;

			this._offUpEvents();

			if (activeGroup.pull == 'clone') {
				cloneEl = dragEl.cloneNode(true);
				_css(cloneEl, 'display', 'none');
				rootEl.insertBefore(cloneEl, dragEl);
			}

			if (useFallback) {
				var rect = dragEl.getBoundingClientRect(),
					css = _css(dragEl),
					ghostRect;

				ghostEl = dragEl.cloneNode(true);

				_css(ghostEl, 'top', rect.top - parseInt(css.marginTop, 10));
				_css(ghostEl, 'left', rect.left - parseInt(css.marginLeft, 10));
				_css(ghostEl, 'width', rect.width);
				_css(ghostEl, 'height', rect.height);
				_css(ghostEl, 'opacity', '0.8');
				_css(ghostEl, 'position', 'fixed');
				_css(ghostEl, 'zIndex', '100000');

				rootEl.appendChild(ghostEl);

				// Fixing dimensions.
				ghostRect = ghostEl.getBoundingClientRect();
				_css(ghostEl, 'width', rect.width * 2 - ghostRect.width);
				_css(ghostEl, 'height', rect.height * 2 - ghostRect.height);

				if (useFallback === 'touch') {
					// Bind touch events
					_on(document, 'touchmove', this._onTouchMove);
					_on(document, 'touchend', this._onDrop);
					_on(document, 'touchcancel', this._onDrop);
				} else {
					// Old brwoser
					_on(document, 'mousemove', this._onTouchMove);
					_on(document, 'mouseup', this._onDrop);
				}

				this._loopId = setInterval(this._emulateDragOver, 150);
			}
			else {
				if (dataTransfer) {
					dataTransfer.effectAllowed = 'move';
					options.setData && options.setData.call(this, dataTransfer, dragEl);
				}

				_on(document, 'drop', this);
			}

			setTimeout(this._dragStarted, 0);
		},

		_onDragOver: function (/**Event*/evt) {
			var el = this.el,
				target,
				dragRect,
				revert,
				options = this.options,
				group = options.group,
				groupPut = group.put,
				isOwner = (activeGroup === group),
				canSort = options.sort;

			if (evt.preventDefault !== void 0) {
				evt.preventDefault();
				!options.dragoverBubble && evt.stopPropagation();
			}

			if (activeGroup && !options.disabled &&
				(isOwner
					? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list
					: activeGroup.pull && groupPut && (
						(activeGroup.name === group.name) || // by Name
						(groupPut.indexOf && ~groupPut.indexOf(activeGroup.name)) // by Array
					)
				) &&
				(evt.rootEl === void 0 || evt.rootEl === this.el) // touch fallback
			) {
				// Smart auto-scrolling
				_autoScroll(evt, options, this.el);

				if (_silent) {
					return;
				}

				target = _closest(evt.target, options.draggable, el);
				dragRect = dragEl.getBoundingClientRect();


				if (revert) {
					_cloneHide(true);

					if (cloneEl || nextEl) {
						rootEl.insertBefore(dragEl, cloneEl || nextEl);
					}
					else if (!canSort) {
						rootEl.appendChild(dragEl);
					}

					return;
				}


				if ((el.children.length === 0) || (el.children[0] === ghostEl) ||
					(el === evt.target) && (target = _ghostInBottom(el, evt))
				) {
					if (target) {
						if (target.animated) {
							return;
						}
						targetRect = target.getBoundingClientRect();
					}

					_cloneHide(isOwner);

					if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect) !== false) {
						el.appendChild(dragEl);
						this._animate(dragRect, dragEl);
						target && this._animate(targetRect, target);
					}
				}
				else if (target && !target.animated && target !== dragEl && (target.parentNode[expando] !== void 0)) {
					if (lastEl !== target) {
						lastEl = target;
						lastCSS = _css(target);
					}


					var targetRect = target.getBoundingClientRect(),
						width = targetRect.right - targetRect.left,
						height = targetRect.bottom - targetRect.top,
						floating = /left|right|inline/.test(lastCSS.cssFloat + lastCSS.display),
						isWide = (target.offsetWidth > dragEl.offsetWidth),
						isLong = (target.offsetHeight > dragEl.offsetHeight),
						halfway = (floating ? (evt.clientX - targetRect.left) / width : (evt.clientY - targetRect.top) / height) > 0.5,
						nextSibling = target.nextElementSibling,
						moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect),
						after
					;

					if (moveVector !== false) {
						_silent = true;
						setTimeout(_unsilent, 30);

						_cloneHide(isOwner);

						if (moveVector === 1 || moveVector === -1) {
							after = (moveVector === 1);
						}
						else if (floating) {
							after = (target.previousElementSibling === dragEl) && !isWide || halfway && isWide;
						} else {
							after = (nextSibling !== dragEl) && !isLong || halfway && isLong;
						}

						if (after && !nextSibling) {
							el.appendChild(dragEl);
						} else {
							target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
						}

						this._animate(dragRect, dragEl);
						this._animate(targetRect, target);
					}
				}
			}
		},

		_animate: function (prevRect, target) {
			var ms = this.options.animation;

			if (ms) {
				var currentRect = target.getBoundingClientRect();

				_css(target, 'transition', 'none');
				_css(target, 'transform', 'translate3d('
					+ (prevRect.left - currentRect.left) + 'px,'
					+ (prevRect.top - currentRect.top) + 'px,0)'
				);

				target.offsetWidth; // repaint

				_css(target, 'transition', 'all ' + ms + 'ms');
				_css(target, 'transform', 'translate3d(0,0,0)');

				clearTimeout(target.animated);
				target.animated = setTimeout(function () {
					_css(target, 'transition', '');
					_css(target, 'transform', '');
					target.animated = false;
				}, ms);
			}
		},

		_offUpEvents: function () {
			var ownerDocument = this.el.ownerDocument;

			_off(document, 'touchmove', this._onTouchMove);
			_off(ownerDocument, 'mouseup', this._onDrop);
			_off(ownerDocument, 'touchend', this._onDrop);
			_off(ownerDocument, 'touchcancel', this._onDrop);
		},

		_onDrop: function (/**Event*/evt) {
			var el = this.el,
				options = this.options;

			clearInterval(this._loopId);
			clearInterval(autoScroll.pid);

			clearTimeout(this.dragStartTimer);

			// Unbind events
			_off(document, 'drop', this);
			_off(document, 'mousemove', this._onTouchMove);
			_off(el, 'dragstart', this._onDragStart);

			this._offUpEvents();

			if (evt) {
				evt.preventDefault();
				!options.dropBubble && evt.stopPropagation();

				ghostEl && ghostEl.parentNode.removeChild(ghostEl);

				if (dragEl) {
					_off(dragEl, 'dragend', this);

					_disableDraggable(dragEl);
					_toggleClass(dragEl, this.options.ghostClass, false);

					if (rootEl !== dragEl.parentNode) {
						newIndex = _index(dragEl);

						// drag from one list and drop into another
						_dispatchEvent(null, dragEl.parentNode, 'sort', dragEl, rootEl, oldIndex, newIndex);
						_dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);

						// Add event
						_dispatchEvent(null, dragEl.parentNode, 'add', dragEl, rootEl, oldIndex, newIndex);

						// Remove event
						_dispatchEvent(this, rootEl, 'remove', dragEl, rootEl, oldIndex, newIndex);
					}
					else {
						// Remove clone
						cloneEl && cloneEl.parentNode.removeChild(cloneEl);

						if (dragEl.nextSibling !== nextEl) {
							// Get the index of the dragged element within its parent
							newIndex = _index(dragEl);

							// drag & drop within the same list
							_dispatchEvent(this, rootEl, 'update', dragEl, rootEl, oldIndex, newIndex);
							_dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);
						}
					}

					if (Sortable.active) {
						// Drag end event
						_dispatchEvent(this, rootEl, 'end', dragEl, rootEl, oldIndex, newIndex);

						// Save sorting
						this.save();
					}
				}

				// Nulling
				rootEl =
				dragEl =
				ghostEl =
				nextEl =
				cloneEl =

				scrollEl =
				scrollParentEl =

				tapEvt =
				touchEvt =

				lastEl =
				lastCSS =

				activeGroup =
				Sortable.active = null;
			}
		},


		handleEvent: function (/**Event*/evt) {
			var type = evt.type;

			if (type === 'dragover' || type === 'dragenter') {
				if (dragEl) {
					this._onDragOver(evt);
					_globalDragOver(evt);
				}
			}
			else if (type === 'drop' || type === 'dragend') {
				this._onDrop(evt);
			}
		},


		/**
		 * Serializes the item into an array of string.
		 * @returns {String[]}
		 */
		toArray: function () {
			var order = [],
				el,
				children = this.el.children,
				i = 0,
				n = children.length,
				options = this.options;

			for (; i < n; i++) {
				el = children[i];
				if (_closest(el, options.draggable, this.el)) {
					order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
				}
			}

			return order;
		},


		/**
		 * Sorts the elements according to the array.
		 * @param  {String[]}  order  order of the items
		 */
		sort: function (order) {
			var items = {}, rootEl = this.el;

			this.toArray().forEach(function (id, i) {
				var el = rootEl.children[i];

				if (_closest(el, this.options.draggable, rootEl)) {
					items[id] = el;
				}
			}, this);

			order.forEach(function (id) {
				if (items[id]) {
					rootEl.removeChild(items[id]);
					rootEl.appendChild(items[id]);
				}
			});
		},


		/**
		 * Save the current sorting
		 */
		save: function () {
			var store = this.options.store;
			store && store.set(this);
		},


		/**
		 * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
		 * @param   {HTMLElement}  el
		 * @param   {String}       [selector]  default: `options.draggable`
		 * @returns {HTMLElement|null}
		 */
		closest: function (el, selector) {
			return _closest(el, selector || this.options.draggable, this.el);
		},


		/**
		 * Set/get option
		 * @param   {string} name
		 * @param   {*}      [value]
		 * @returns {*}
		 */
		option: function (name, value) {
			var options = this.options;

			if (value === void 0) {
				return options[name];
			} else {
				options[name] = value;
			}
		},


		/**
		 * Destroy
		 */
		destroy: function () {
			var el = this.el;

			el[expando] = null;

			_off(el, 'mousedown', this._onTapStart);
			_off(el, 'touchstart', this._onTapStart);

			_off(el, 'dragover', this);
			_off(el, 'dragenter', this);

			// Remove draggable attributes
			Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
				el.removeAttribute('draggable');
			});

			touchDragOverListeners.splice(touchDragOverListeners.indexOf(this._onDragOver), 1);

			this._onDrop();

			this.el = el = null;
		}
	};


	function _cloneHide(state) {
		if (cloneEl && (cloneEl.state !== state)) {
			_css(cloneEl, 'display', state ? 'none' : '');
			!state && cloneEl.state && rootEl.insertBefore(cloneEl, dragEl);
			cloneEl.state = state;
		}
	}


	function _bind(ctx, fn) {
		var args = slice.call(arguments, 2);
		return	fn.bind ? fn.bind.apply(fn, [ctx].concat(args)) : function () {
			return fn.apply(ctx, args.concat(slice.call(arguments)));
		};
	}


	function _closest(/**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx) {
		if (el) {
			ctx = ctx || document;
			selector = selector.split('.');

			var tag = selector.shift().toUpperCase(),
				re = new RegExp('\\s(' + selector.join('|') + ')\\s', 'g');

			do {
				if (
					(tag === '>*' && el.parentNode === ctx) || (
						(tag === '' || el.nodeName.toUpperCase() == tag) &&
						(!selector.length || ((' ' + el.className + ' ').match(re) || []).length == selector.length)
					)
				) {
					return el;
				}
			}
			while (el !== ctx && (el = el.parentNode));
		}

		return null;
	}


	function _globalDragOver(/**Event*/evt) {
		evt.dataTransfer.dropEffect = 'move';
		evt.preventDefault();
	}


	function _on(el, event, fn) {
		el.addEventListener(event, fn, false);
	}


	function _off(el, event, fn) {
		el.removeEventListener(event, fn, false);
	}


	function _toggleClass(el, name, state) {
		if (el) {
			if (el.classList) {
				el.classList[state ? 'add' : 'remove'](name);
			}
			else {
				var className = (' ' + el.className + ' ').replace(RSPACE, ' ').replace(' ' + name + ' ', ' ');
				el.className = (className + (state ? ' ' + name : '')).replace(RSPACE, ' ');
			}
		}
	}


	function _css(el, prop, val) {
		var style = el && el.style;

		if (style) {
			if (val === void 0) {
				if (document.defaultView && document.defaultView.getComputedStyle) {
					val = document.defaultView.getComputedStyle(el, '');
				}
				else if (el.currentStyle) {
					val = el.currentStyle;
				}

				return prop === void 0 ? val : val[prop];
			}
			else {
				if (!(prop in style)) {
					prop = '-webkit-' + prop;
				}

				style[prop] = val + (typeof val === 'string' ? '' : 'px');
			}
		}
	}


	function _find(ctx, tagName, iterator) {
		if (ctx) {
			var list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;

			if (iterator) {
				for (; i < n; i++) {
					iterator(list[i], i);
				}
			}

			return list;
		}

		return [];
	}



	function _dispatchEvent(sortable, rootEl, name, targetEl, fromEl, startIndex, newIndex) {
		var evt = document.createEvent('Event'),
			options = (sortable || rootEl[expando]).options,
			onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);

		evt.initEvent(name, true, true);

		evt.to = rootEl;
		evt.from = fromEl || rootEl;
		evt.item = targetEl || rootEl;
		evt.clone = cloneEl;

		evt.oldIndex = startIndex;
		evt.newIndex = newIndex;

		rootEl.dispatchEvent(evt);

		if (options[onName]) {
			options[onName].call(sortable, evt);
		}
	}


	function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect) {
		var evt,
			sortable = fromEl[expando],
			onMoveFn = sortable.options.onMove,
			retVal;

		if (onMoveFn) {
			evt = document.createEvent('Event');
			evt.initEvent('move', true, true);

			evt.to = toEl;
			evt.from = fromEl;
			evt.dragged = dragEl;
			evt.draggedRect = dragRect;
			evt.related = targetEl || toEl;
			evt.relatedRect = targetRect || toEl.getBoundingClientRect();

			retVal = onMoveFn.call(sortable, evt);
		}

		return retVal;
	}


	function _disableDraggable(el) {
		el.draggable = false;
	}


	function _unsilent() {
		_silent = false;
	}


	/** @returns {HTMLElement|false} */
	function _ghostInBottom(el, evt) {
		var lastEl = el.lastElementChild,
			rect = lastEl.getBoundingClientRect();

		return (evt.clientY - (rect.top + rect.height) > 5) && lastEl; // min delta
	}


	/**
	 * Generate id
	 * @param   {HTMLElement} el
	 * @returns {String}
	 * @private
	 */
	function _generateId(el) {
		var str = el.tagName + el.className + el.src + el.href + el.textContent,
			i = str.length,
			sum = 0;

		while (i--) {
			sum += str.charCodeAt(i);
		}

		return sum.toString(36);
	}

	/**
	 * Returns the index of an element within its parent
	 * @param el
	 * @returns {number}
	 * @private
	 */
	function _index(/**HTMLElement*/el) {
		var index = 0;
		while (el && (el = el.previousElementSibling)) {
			if (el.nodeName.toUpperCase() !== 'TEMPLATE') {
				index++;
			}
		}
		return index;
	}

	function _throttle(callback, ms) {
		var args, _this;

		return function () {
			if (args === void 0) {
				args = arguments;
				_this = this;

				setTimeout(function () {
					if (args.length === 1) {
						callback.call(_this, args[0]);
					} else {
						callback.apply(_this, args);
					}

					args = void 0;
				}, ms);
			}
		};
	}

	function _extend(dst, src) {
		if (dst && src) {
			for (var key in src) {
				if (src.hasOwnProperty(key)) {
					dst[key] = src[key];
				}
			}
		}

		return dst;
	}


	// Export utils
	Sortable.utils = {
		on: _on,
		off: _off,
		css: _css,
		find: _find,
		bind: _bind,
		is: function (el, selector) {
			return !!_closest(el, selector, el);
		},
		extend: _extend,
		throttle: _throttle,
		closest: _closest,
		toggleClass: _toggleClass,
		index: _index
	};


	Sortable.version = '1.2.0';


	/**
	 * Create sortable instance
	 * @param {HTMLElement}  el
	 * @param {Object}      [options]
	 */
	Sortable.create = function (el, options) {
		return new Sortable(el, options);
	};

	// Export
	return Sortable;
});

define('ngApp/website/itinerary-ng/itineraryMapDrawerControllerNg',["ngApp/website/main/main",
        "ngApp/website/itinerary-ng/mapMgr",
        "ngApp/website/map/mapMgr",
        "app/itinerary/itineraryDataMgr",
        "Sortable",
        "app/itinerary/itinerarySite",
        "jquery.qtip.min"],
    function(main,MapMgr,GlobalMapMgr,ItineraryDataMgr,Sortable,ItinerarySite) {
	var app = angular.module('visitacity');
	
    
    var allow = true;
    
    /**
     * Generate qtip context menu for drawer
     */
    app.directive('itrSiteQtipNg', ['$http','$compile','$templateCache','$filter',function($http,$compile,$templateCache,$filter) {
        return {
        	restrict: 'A',
            link: function(scope, element, attrs) {
            	  scope.curItSite = $filter('filter')(scope.itineraryService.itinerary.itinerarySites,{id:parseInt(attrs.itrSiteQtipNg)},true)[0];
            	  if (scope.curItSite.dayInTrip == -1) {
            		  //disable for wishlist
            		  return;
            	  }
    	          scope.curSiteIdx = attrs.itrSiteQtipIndex;
    	          scope.getMyIndex = function(id) {
    	        	  //get current site index (to show set start time for first site
    	        	 return $("#divDrawerActionIcon_"+id).attr("itr-site-qtip-index");
  	    		  }	
    	          $http.get(appWebRoot + '/itinerary-ng/directives/site-overlay-menu.html', {cache: $templateCache}).
    	            success(function(content) {
    	              var compiledContent = $compile(content)(scope);
    	              var showEvt = isTablet() ? "mouseover click" : "mouseover focus";
    	              $(element).qtip({
    	                content: compiledContent,
    	                position: {
    	                  my: 'middle left',
    	                  at: 'middle right',
    	                  target: $(element)
    	                },
    	                style: {
    	                	classes: 'qtip-rounded qtip-bootstrap qtip-shadow',
    	                	tip: true
    	                },
    	                hide: {
    	                  fixed : true,
    	                  delay : 200,
    	                  event: 'mouseleave unfocus click'
    	                }, 
    	                show : {
    	                	solo: true,
    	                	delay : 200,
    	                	event: showEvt
    	                }, 
    	                events: {
    	                	show: function(event, api) {
    	                		//if notes was visible, hide it
    	                		/*if (scope.curItSite && $("div[notes-popover-body='" + scope.curItSite.id +"']").parent().parent().parent().attr("is-open") == "isOpen") {
    	                			$("#popoverElem_" + scope.curItSite.id).trigger("click");
    	                		}*/
    	                		fireEvent("Itinerary-2.0", "drawer menu open");
    	                	},
    	                	hide: function(event, api) {
    	                		try {
    	                			$("#imgMapImg_" + scope.curItSite.id).removeClass("zoomed");
        	                		$("#divSiteNameText_" + scope.curItSite.id).removeClass("itin_action_icon_selected");
        	                		$("#divMapImg_" + scope.curItSite.id).removeClass("itin-map-site-wrapper-hover-ng");
        	                		$("#divSiteNameText_" + scope.curItSite.id).animate({
        	    						"font-size": "11px"
        	    					},300,function() {
        	    						if ($("#divSiteNameWrapper_" + scope.curItSite.id).attr("preVisibility") == "hidden") {
        	    							$("#divSiteNameWrapper_" + scope.curItSite.id).css("visibility","hidden");
        	    							$("#divSiteNameWrapper_" + scope.curItSite.id).removeAttr("preVisibility");
        	    						}
        	    					});
    	                		} catch (ex) {
    	                			//don't fail here
    	                		}
    	                		
    	                	}
    	                }
    	            });

    	          });
            }
        }
    }]);
    
    /**
     * Generate qtip for notes in drawers
     */
    app.directive('itrSiteQtipNotes', ['$http','$compile','$templateCache','$filter',function($http,$compile,$templateCache,$filter) {
        return {
        	restrict: 'A',
            link: function(scope, element, attrs) {
            	element.mouseover(function(e){
            		//don't open the context menu when hovering on notes
            		e.stopPropagation();
        		});
            	  scope.site = $filter('filter')(scope.itineraryService.itinerary.itinerarySites,{id:parseInt(attrs.itrSiteQtipNotes)},true)[0];
    	          $http.get(appWebRoot + '/itinerary/modals/view-notes.html', {cache: $templateCache}).
    	            success(function(content) {
    	              var compiledContent = $compile(content)(scope);

    	              $(element).qtip({
    	                content: compiledContent,
    	                position: {
    	                  my: 'middle left',
    	                  at: 'middle right',
    	                  target: $(element)
    	                },
    	                style: {
    	                	classes: 'qtip-rounded qtip-bootstrap qtip-shadow',
    	                	tip: true
    	                },
    	                hide: {
    	                	fixed : true,
      	                  	delay : 200,
      	                  	event: 'mouseleave unfocus click'
    	                }, 
    	                show : {
    	                	solo: true,
    	                	event: 'mouseover focus click'
    	                }
    	            });

    	          });
            }
        }
    }]);
    
    /**
     * Directives to hide notes when moving from notes popup to body and when clicking edit in notes popup
     */
    app.directive('notesPopover' ['$timeout', function($timeout) {
        return function(scope, element, attrs) {
        	element.bind('click', function(e) {
        		allow = false; //don't allow the mouse leave event until dialog closes
        		$("#popoverElem_" + attrs.notesPopover).trigger("click");
        		$timeout(function() {
        			//release mouseleave event
        			allow = true;
				}, 200);
            });
        };
    }]);
    
   /* app.directive('notesPopoverBody', function() {
        return function(scope, element, attrs) {
        	element.bind('mouseleave', function(e) {
        		if (allow) {
        			//prevent click if already click on edit
        			$("#popoverElem_" + attrs.notesPopoverBody).trigger("click");
        		}
        		
            });
        };
    });*/
    
    /**
     * Generate qtip context menu for drawer
     */
    app.directive('itrSiteTransitQtip', ['$http','$compile','$templateCache','$filter','itineraryService',function($http,$compile,$templateCache,$filter,itineraryService) {
        return {
        	restrict: 'A',
            link: function(scope, element, attrs) {
            	scope.curItSite = $filter('filter')(scope.itineraryService.itinerary.itinerarySites,{id:parseInt(attrs.itrSiteTransitQtip)},true)[0];
    	        scope.wasChanged = false;
    	        if (isInterestingCountry(scope.lang)) {
    	        		scope.routeDetailsInProgress = true;
    	        }
    	        scope.isAllWalk = function() {
    	        	var realDuration = 0;
    	        	scope.curItSite.allWalk = true;
    	        	if (scope.curItSite.routeDetails != null && scope.curItSite.routeDetails.steps != null) {
	    	        	for (var i=0;i<scope.curItSite.routeDetails.steps.length;i++) {
		        			realDuration += scope.curItSite.routeDetails.steps[i].duration.value;
		        			if (scope.curItSite.routeDetails.steps[i].travel_mode=='TRANSIT') {
		        				scope.curItSite.allWalk = false;
		        			}
		        		}
    	        	}
    	        	return realDuration;
    	        }
    	        scope.doShowDirectionsInit = function() {
    	        	
    	        	if (scope.curItSite.routeDetails == null) {
	    	        	itineraryService.showDirections(scope.curItSite,'Transit',false).then(function(res) {
	    	        		var realDuration = scope.isAllWalk();
	    	        		scope.routeDetailsInProgress = false;
	    	        		if (scope.curItSite.allWalk) {
	    	        			var name = scope.curItSite.site != null ? scope.curItSite.site.shortTitle : scope.curItSite.name;
	    	        			fireEvent("Itinerary-2.0","No transit route found", name);
	    	        		}
	    	          	});
	    	         } else {
	    	        	 scope.isAllWalk();
	    	        	 scope.routeDetailsInProgress = false;
	    	        	 scope.$apply();
	    	         }
    	        }
            	  $http.get(appWebRoot + '/itinerary/modals/site-transit.html', {cache: $templateCache}).
    	            success(function(content) {
    	              var compiledContent = $compile(content)(scope);

    	              $(element).qtip({
    	                content: compiledContent,
    	                position: {
    	                  my: 'middle left',
    	                  at: 'middle right',
    	                  target: $(element)
    	                },
    	                style: {
    	                	classes: 'qtip-rounded qtip-bootstrap qtip-shadow',
    	                	tip: true
    	                },
    	                hide: {
    	                  fixed : true,
    	                  delay : 200,
    	                  event: 'mouseleave unfocus'
    	                  //event: 'click'
    	                }, 
    	                show : {
    	                	solo: true,
    	                	delay : 200,
    	                	event: 'mouseover focus click'
    	                }, 
    	                events: {
    	                	show: function(event, api) {
    	                		fireEvent("Itinerary-2.0", "transit menu open");
    	                		if (isInterestingCountry(scope.lang) && scope.curItSite.curSiteTransitType == 'transit') {
    	                			scope.doShowDirectionsInit();
    	            	        }
    	                	},
    	                	hide: function(event, api) {
    	                		
    	                		if (scope.wasChanged) {
    	                			scope.curItSite.transitType = scope.site.curSiteTransitType;
    	                			//save on change but not for a system itinerary
    	                			if (itineraryService.getItinerary().clientUniqueItrId != null) {
    	                				fireEvent("Itinerary-2.0", "transit changed");
            	                		itineraryService.setNoScroll(false);
    						   	   		itineraryService.saveItinerary();
    						   	   		itineraryService.processDay();
    	                			} else {
    	                				itineraryService.processDay();
    	                			}
    	                			scope.wasChanged = false;
    	                		}
    	                	}
    	                }
    	            });

    	          });
            }
        }
    }]);
    
	
	app.controller('itineraryMapDrawerControllerNg',['$scope','$rootScope','$filter','$location','$http','$templateCache','$compile','$timeout','$q','GlobalDefs','activitiesService','CityService',
	                                               'blockUI','redirectPaScv','itineraryService','dataWearhouseService','lastModService','$routeParams','$window','exprService',
	                                               function($scope,$rootScope,$filter,$location,$http,$templateCache,$compile,$timeout,$q,GlobalDefs,activitiesService,CityService,
	                                            		   blockUI,redirectPaScv,itineraryService,dataWearhouseService,lastModService,$routeParams,$window,exprService) {
		
	var to1,to2,to3,to4,to5,to6,to7,to8,to9,to10,to11,to12,to13;

	
	$( "body" ).on( "handle_itinerary_resize", function( event) {
		if ($scope.itineraryService.selectedTab == "restaurants") {
			handleItineraryResize();
		} else {
			resizeRestTab = true;
		}
	})
	
	function handleItineraryResize() {
		var width = $("#itineraryController").css("width").replace("px","");
    	var widthInt = parseInt(width);
		$scope.stuckBarPadding = "0px " + (($(window).width() - widthInt)/2) + "px";
		$("#itinerary-map-wrapper").css("margin",$scope.stuckBarPadding)
		$("#restaurant-blue-bar-wrapper").css("margin",$scope.stuckBarPadding)
		$("#mapBottomBar").css("margin",$scope.stuckBarPadding)
	}
	
	$scope.$on('$destroy', function(){
		$("body").unbind( "itinerary_map_ready");
		$("body").unbind( "itinerary_map_init");
		$("body").unbind( "handle_itinerary_resize");
		angular.element($window).off("scroll", loadMore);
		angular.element("#large-restaurant-overlay-container").off('scroll',handleRestOverlayScroll);
		MapMgr.getInstance().clearDirections();
		GlobalMapMgr.getInstance().hideMap();
		GlobalMapMgr.getInstance().hideMap(true); //hide attractions mape
		MapMgr.getInstance().clearOverlays();
		MapMgr.getInstance().clearRestOverlays();
		MapMgr.getInstance().destroyMap();
		GlobalMapMgr.getInstance().clearEventListeners();
		$('.qtip').each(function(){
			$(this).data('qtip').destroy();
		})
		
		w1();
		w2();
		//w3();
		w4();
		//w5();
		tabWatch();
		restTxtSearchWatch();
		//window.angular.element($window).off('scroll');
		var counter = 0;
		if (to1) {
			$timeout.cancel(to1);
			counter++;
		}
		if (to3) {
			$timeout.cancel(to3);
			counter++;
		}
		if (to4) {
			$timeout.cancel(to4);
			counter++;
		}
		if (to5) {
			$timeout.cancel(to5);
			counter++;
		}
		if (to6) {
			$timeout.cancel(to6);
			counter++;
		}
		if (to7) {
			$timeout.cancel(to7);
			counter++;
		}
		if (to8) {
			$timeout.cancel(to8);
			counter++;
		}
		if (to9) {
			$timeout.cancel(to9);
			counter++;
		}
		if (to10) {
			$timeout.cancel(to10);
			counter++;
		}
		if (to11) {
			$timeout.cancel(to11);
			counter++;
		}
		if (to12) {
			$timeout.cancel(to12);
			counter++;
		}
		if (to13) {
			$timeout.cancel(to13);
			counter++;
		}
		
		tripOverviewWatch();
	});
	
		
	
    	var width = $("#itineraryController").css("width").replace("px","");
    	var widthInt = parseInt(width);
		$scope.stuckBarPadding = "0px " + (($(window).width() - widthInt + 45)/2) + "px";
		var resizeRestTab = false;
		//var mapBlockUi = blockUI.instances.get('mapBlockUi');
		var restaurantsNewLoad = true;
		//$scope.itinerary = new Object();
		$scope.itineraryService = itineraryService;
		$scope.cityService = CityService;
		//$scope.curItinerarySites = new Array();
		$scope.allRests = new Array();
		//$scope.daysArr = new Array();
		$scope.selectedDay = new Object();
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		//$scope.showTripOverview = false;
		$scope.showMyPlaces = false;
		//$scope.countItineraryUsedBy = 0;
		$scope.newAttraction = null;
		$scope.redirectPaSvc = redirectPaScv;
		$scope.isMobile = isTablet();
		//$scope.myPlacesArr = new Array();
		$scope.selectedPlaceType = "All";
		$scope.selectedTab = $location.hash().length > 0 ? $location.hash().replace("tab=","") : "itinerary";
		var runOnce = true;
		var itrLoading = true;
		$scope.showSiteMapOverlay = false;
		$scope.userClickedPaArr = null;
		var START_LIMIT_COUNT = isTablet() ? 999 : 20;
		$scope.startLimit = START_LIMIT_COUNT;
		
		/**
		 * EXPERIMENTS
		 */
		$scope.onMapDownloadStyle = exprService.isInExperiment("expr-itinerary-onmap-download-style",50);
		if ($scope.onMapDownloadStyle) {
			exprService.fireExperimentEvent("itinerary-onmap-download-style","itinerary-onmap-download-style-grey-light-blue");
		} else {
			exprService.fireExperimentEvent("itinerary-onmap-download-style","itinerary-onmap-download-style-original");
		}
		
		/**
		 * *******************************************
		 */
		
		$scope.dynamicPopover = {
			templateUrl: appWebRoot + '/itinerary/modals/view-notes.html'
		};
		
		$scope.drawerMouseOverId = null;
		
		$scope.selectedCuisine = "All Cuisines";
		$scope.selectedPrice = "Any Price";
		
		$scope.selectedAttractionNg = null;
		$scope.lang = $routeParams.lang;
		if ($scope.lang == null) {
			//in the itinerary page, there is no route param
			$scope.lang = getActiveLang(true);
		}
		$scope.addMyPlace = false;
		
		var w1 = $scope.$watch('cityService.getCurCity()', function(newVal, oldVal) {
			if (newVal != null && $scope.activitySvc == null) {
				$scope.cityObj = CityService.getCurCity();
				prepareLastMod();
				//angular.element($window).on("scroll", loadAttractionMapScroll);
			}	
    	});
		
		
		if (ieVersion != null) {
			$scope.isIE = true;
		}
		
		
		/**
		 * Hide the drawer when overing on the notes drawer
		 */
		$scope.hideDrawerQtip = function() {
			$('.qtip').qtip('hide'); //hide qtip
		}
		
		/**
		 * Close the notes popover when moving away from the icon
		 */
		$scope.closePopover = function(id) {
			$("#" + id).trigger('mouseenter');
		}
		
		var setCookieOnce = true;
		$scope.daysDropdownStatus = function(status) {
			if (status) {
				$rootScope.$broadcast("itineraryFireEvent","days menu open","",false);
			}
			if (setCookieOnce && status) {
				createCookie("daysMenuShown",1);
				setCookieOnce = false;
			}
			
		}
		
		function prepareLastMod() {
			lastModService.setLastMod($scope.cityObj.legalName).then(
		   			 function(results) {
		   				$scope.loadData();
		   			 }, function(errors) {
		   			 
		   			 }
		   	);
		} 
		
		$scope.allActivities = new Array();
		$scope.loadData = function() {
			
			$q.all(new Array(activitiesService.init($scope.cityObj.legalName))).then(
  					 function(results) {
  						$scope.allActivities = activitiesService.allActivities;
  					 }, function(errors) {
	   		   			 
	   	   			}
  				);
		}
		
		$scope.mapExpended = false;
		$scope.expandTitle = "Expand Map";
		var leftPad;
		$scope.toggleMap = function() {
			$rootScope.$broadcast("itineraryFireEvent","expand/collapse map");
			if ($scope.mapExpended) {
				$scope.expandTitle = "Expand Map";
				//$("#itinerary-map-wrapper").css("padding-left","");
				 $("#itinerary-map-wrapper").animate({ 
					    'padding-left' : leftPad
					  }, "slow", function() {
						  $("#itinerary-drawer-wrapper").removeClass("col-offset-0");
						  $("#my-places-wrapper").removeClass("col-offset-0");
						  
						  MapMgr.getInstance().initializeMapFromItrSites("divMapParent", $scope.itineraryService.curItinerarySites,$scope.allAttractions[0],$scope.showMyPlaces);
					  });
				
			} else {
				leftPad = $("#itinerary-map-wrapper").css("padding-left");
				$("#itinerary-drawer-wrapper").addClass("col-offset-0");
				$("#my-places-wrapper").addClass("col-offset-0");
				$("#itinerary-drawer-wrapper").css("display","");
				$scope.expandTitle = "Collapse Map";
				//$("#itinerary-map-wrapper").css("padding-left","15px");
				 $("#itinerary-map-wrapper").animate({ 
					    'padding-left' : '15px'
					  }, "slow", function() {
						  MapMgr.getInstance().initializeMapFromItrSites("divMapParent", $scope.itineraryService.curItinerarySites,$scope.allAttractions[0],$scope.showMyPlaces);
					  });
			}
			$scope.mapExpended = !$scope.mapExpended;
		}
		
		$scope.$on('addedNewAttraction', function (event,newAttraction) {
			$scope.newAttraction = newAttraction;
		});
		
		/*$scope.$on('all_attractions', function (event,allAttractions) {
			$scope.allAttractions = allAttractions;
		});*/
		
		var w2 = $scope.$watch(function(){
			return itineraryService.allAttractions;
		}, function(newVal, oldVal){
			if (newVal != oldVal) {
				$scope.allAttractions = itineraryService.getAllAttractions();
			}
	    });
		
		var noUnblockUi = false;
		var tabWatch = $scope.$watch(function(){
			return itineraryService.selectedTab;
		}, function(newVal, oldVal){
			if (newVal != oldVal) {
				noUnblockUi = false;
				if (oldVal == "restaurants") {
					noUnblockUi = true;
				}
				$timeout.cancel(to1);
				$scope.addingToWishlist = false;
				$scope.showSiteOverlay(null);
				if (newVal == "restaurants") {
					if (resizeRestTab) {
						//if window was resized while in another tab
						handleItineraryResize();
						resizeRestTab = false;
					}
				
/*					$scope.curItinerarySites = $filter('filter')(itineraryService.getItinerary().itinerarySites,function(value, index){
						return value.dayInTrip != -1;
					});
					$scope.itineraryService.setCurItinerarySites($scope.curItinerarySites);*/
					//$timeout(function() {
					$("#restaurantCuisineSelect" ).val("All Cuisines");
					$("#restaurantPriceSelect" ).val("Any Price");	
					restaurantsNewLoad = true;
					//}, 0);
				} else if (newVal == "myPlaces") {
					$scope.selectedTab = newVal;
				} 
				$timeout(function() {
					$scope.selectedTab = newVal;
				}, 1000);
				/*if (newVal == "tripOverview") {
					$scope.doShowTripOverview();
				}*/
			}
	    });
		
		$scope.restaurantSearchTxt = "";
		$scope.restaurantSearchEnter = function() {
			if ($scope.restaurantSearchTxt.length > 0) {
				$rootScope.$broadcast("itineraryFireEvent","restaurant search by name");
				$scope.searchRestByName();
			}
		}
		
		$scope.searchRestByName = function() {
			//scroll to top of list
			$('#itineraryRestaurantDrawersList').animate({
  				scrollTop: 0
  			}, 'slow');
			
			//clear filters
			$("#restaurantCuisineSelect" ).val("All Cuisines");
			$("#restaurantPriceSelect" ).val("Any Price");
			
			MapMgr.getInstance()._restTxtSearch = true;
			blockUI.start("Updating Restaurant List");
			var baseUrl = appRoot + "/api/restaurants/" + $scope.cityObj.id + "/searchtxt?name="+$scope.restaurantSearchTxt;
			$http.get(baseUrl).then(function 
					successCallback(response) {
					var restArr = response.data;
					var restSiteArr = new Array();
					for (var i=0;i<restArr.length;i++) {
						if (restArr[i] != null) {
							//console.log(i + ": " + restArr[i]);
							restArr[i].taRestaurant = true;
							restSiteArr.push(new ItinerarySite(restArr[i]));
						}
					}
					$scope.allRests = restSiteArr;
					MapMgr.getInstance().drawRestaurants(restSiteArr);
					$timeout(function() {
						blockUI.reset();
					},500)
			  });
		}
		
		 var restTxtSearchWatch = $scope.$watch('restaurantSearchTxt', function(newVal, oldVal){
			 if (newVal != oldVal && $scope.restaurantSearchTxt != null && $scope.restaurantSearchTxt.length > 0) {
				 $rootScope.$broadcast("itineraryFireEvent","restaurant search by name");
				 $scope.searchRestByName();
			 } else if (newVal != oldVal) {
				 $scope.searchRestaurantsInArea();
			 }
			
		 });
		
		$scope.setSearchCheckbox = function() {
			$('#restaurantSearchCb').prop('checked', !$("#restaurantSearchCb").prop('checked'));
			$rootScope.$broadcast("itineraryFireEvent","restaurant search as i move map clicked");
		}
		
		var restaurantSerachTimer = null;
		$scope.showRedoSearch = false;
		//check if restaurants need to be processed
		$( "body" ).on( "itinerary_map_ready", function( event) {
			if (itineraryService.selectedTab == "restaurants") {
				//restart the map scroll handler
				if (!isTablet()) {
					$timeout(function() {
						//angular.element("#itineraryRestaurantDrawersList").off('scroll',loadMore);
						angular.element($window).on("scroll", loadMore);
					},1000);
				}
				
				
				if (!$("#restaurantSearchCb").prop('checked') && !restaurantsNewLoad) {
					$scope.showRedoSearch = true;
				}
				if ($scope.restaurantSearchTxt.length == 0 && ($("#restaurantSearchCb").prop('checked'))) {
					//$scope.searchRestaurantsInArea();
					var to = restaurantsNewLoad ? 1000 : 0;
					if (restaurantSerachTimer != null) {
						//check if process was already started and stop it of clicking zoom twice
						window.clearTimeout(restaurantSerachTimer); 
						restaurantSerachTimer = null;
					}
					restaurantSerachTimer = window.setInterval(function(){
						$scope.searchRestaurantsInArea();
					}, to);
				} else {
					$timeout(function() {
						//redraw after map mooves
						MapMgr.getInstance().handleSiteOverlayTextPosition();
					},500);
				}
			}
		});
		
		$( "body" ).on( "itinerary_map_init", function( event) {
			if (itineraryService.selectedTab == "restaurants") {
				if (restaurantSerachTimer != null) {
					//check if process was already started and stop it of clicking zoom twice
					window.clearTimeout(restaurantSerachTimer); 
					restaurantSerachTimer = null;
				}
				restaurantSerachTimer = window.setInterval(function(){
					$scope.searchRestaurantsInArea();
				}, 600);
			}
		});
		
		
		$( "body" ).on( "no_rests_in_bounds", function(event) {
			if ($scope.restaurantSearchTxt.length > 0) {
				MapMgr.getInstance().fitMapToRestBounds();
			}
		});
		
		
		$( "body" ).on( "itinerary_rest_in_bounds", function(event,restLocationId) {
			if ($scope.restaurantSearchTxt.length == 0) {
				$scope.itineraryService.setRestInBound(restLocationId);
			} else {
				//text search
				var foundRest = $filter('filter')($scope.allRests, {locationId: restLocationId}, true);
				if (foundRest.length > 0) {
					foundRest[0].isInBounds = true;
				}
				
			}
		});
		
		$( "body" ).on( "itinerary_rest_in_bounds_done", function(event) {
			//ignore for search by name
			if ($scope.restaurantSearchTxt.length == 0) {
				$scope.itineraryService.getRestaurantsInBounds();
				$scope.allRests = $scope.itineraryService.restaurantsInBounds;
				$scope.allRests = $filter('orderBy')($scope.allRests,'visitNo');
			} else {
				$scope.allRests.sort(function(a, b)	{
					if (a.isInBounds && b.isInBounds) {
						return (a.ranking - b.ranking);
					} else if (a.isInBounds) {
						return -1;
					} else {
						return 1;
					}
	          			  	  	
	          	});
			}
		});
		
		$scope.fireItrEvt = function(name,value) {
			$rootScope.$broadcast("itineraryFireEvent",name,value);
		}
		

		$scope.restaurantSearchCbClicked = function() {
			var isClicked = $("#restaurantSearchCb").prop('checked') ? "check" : "uncheck";
			$rootScope.$broadcast("itineraryFireEvent","restaurant search on map checkbox",isClicked);
		}
		
		//var markers = [];
		var centerPoint = null;
		$scope.searchRestaurantsInArea = function(numRetries) {
			$scope.showRestaurantOverlay(null); //make sure overlay is closed
			window.clearTimeout(restaurantSerachTimer); 
			restaurantSerachTimer = null;
			
			$scope.showRedoSearch = false;
			restaurantsNewLoad = false;
			MapMgr.getInstance()._restTxtSearch = false;
			blockUI.start("Updating Restaurant List");
			$('html, body').animate({
  				scrollTop: 0
  			}, 'slow');
			
			if (centerPoint == null) {
				centerPoint = latLng2Point(MapMgr.getInstance()._map.getCenter(),MapMgr.getInstance()._map);
			}
			
			if (centerPoint.x == 0 && centerPoint.y == 0) {
				//retry if center was not set properly (map not ready)
				if (numRetries != null) {
					numRetries++;
				} else {
					numRetries = 1;
				}
				if (numRetries < 10) {
					$timeout(function() {
						//maybe map not loaded, retry
						var padeft = $("#itinerary-map-wrapper").css("padding-left").replace("px","");
	            		var padLeftInt = parseInt(padeft);
	            		$("#itinerary-map-wrapper").animate({ 
	 					   'padding-left' : (padLeftInt+1) + "px"
	 					}, 0, function(){
	 						centerPoint = null;
	 						$scope.searchRestaurantsInArea(numRetries);
	 						setTimeout(function() {
		                		$("#itinerary-map-wrapper").css('padding-left','');
		                 	}, 500);   
	 					});
						
					},300);
				}
				return;
			}
			
			var arr = new Array();
			
			var p1 = point2LatLng(new google.maps.Point(centerPoint.x/5,centerPoint.y/4),MapMgr.getInstance()._map);
			var p2 = point2LatLng(new google.maps.Point(3*(centerPoint.x/5),centerPoint.y/4),MapMgr.getInstance()._map);
			var p3 = point2LatLng(new google.maps.Point(centerPoint.x,centerPoint.y/4),MapMgr.getInstance()._map);
			var p4 = point2LatLng(new google.maps.Point(centerPoint.x+2*(centerPoint.x/4),centerPoint.y/5),MapMgr.getInstance()._map);
			var p5 = point2LatLng(new google.maps.Point(2*centerPoint.x-(centerPoint.x/4),centerPoint.y/5),MapMgr.getInstance()._map);
			
			var p6 = point2LatLng(new google.maps.Point(centerPoint.x/5,3.75*centerPoint.y/5),MapMgr.getInstance()._map);
			var p7 = point2LatLng(new google.maps.Point(3*(centerPoint.x/5),3.75*centerPoint.y/5),MapMgr.getInstance()._map);
			var p8 = point2LatLng(new google.maps.Point(centerPoint.x,3.75*centerPoint.y/5),MapMgr.getInstance()._map);
			var p9 = point2LatLng(new google.maps.Point(centerPoint.x+2*(centerPoint.x/5),3.75*centerPoint.y/5),MapMgr.getInstance()._map);
			var p10 = point2LatLng(new google.maps.Point(2*centerPoint.x-(centerPoint.x/5),3.75*centerPoint.y/5),MapMgr.getInstance()._map);
			
			var p11 = point2LatLng(new google.maps.Point(centerPoint.x/5,2*centerPoint.y-3.75*(centerPoint.y/5)),MapMgr.getInstance()._map);
			var p12 = point2LatLng(new google.maps.Point(3*(centerPoint.x/5),2*centerPoint.y-3.75*(centerPoint.y/5)),MapMgr.getInstance()._map);
			var p13 = point2LatLng(new google.maps.Point(centerPoint.x,2*centerPoint.y-3.75*(centerPoint.y/5)),MapMgr.getInstance()._map);
			var p14 = point2LatLng(new google.maps.Point(centerPoint.x+2*(centerPoint.x/5),2*centerPoint.y-3.75*(centerPoint.y/5)),MapMgr.getInstance()._map);
			var p15 = point2LatLng(new google.maps.Point(2*centerPoint.x-(centerPoint.x/5),2*centerPoint.y-3.6675*(centerPoint.y/5)),MapMgr.getInstance()._map);
			
			var p16 = point2LatLng(new google.maps.Point(centerPoint.x/5,2*centerPoint.y-(centerPoint.y/4)),MapMgr.getInstance()._map);
			var p17 = point2LatLng(new google.maps.Point(3*(centerPoint.x/6),2*centerPoint.y-(centerPoint.y/4)),MapMgr.getInstance()._map);
			var p18 = point2LatLng(new google.maps.Point(centerPoint.x,2*centerPoint.y-(centerPoint.y/4)),MapMgr.getInstance()._map);
			var p19 = point2LatLng(new google.maps.Point(centerPoint.x+2*(centerPoint.x/5),2*centerPoint.y-(centerPoint.y/4)),MapMgr.getInstance()._map);
			var p20 = point2LatLng(new google.maps.Point(2*centerPoint.x-(centerPoint.x/5),2*centerPoint.y-(centerPoint.y/4)),MapMgr.getInstance()._map);
			
				
			arr.push(p1);
			arr.push(p2);
			arr.push(p3);
			arr.push(p4);
			arr.push(p5);
			arr.push(p6);
			arr.push(p7);
			arr.push(p8);
			arr.push(p9);
			arr.push(p10);
			arr.push(p11);
			arr.push(p12);
			arr.push(p13);
			arr.push(p14);
			arr.push(p15);
			arr.push(p16);
			arr.push(p17);
			arr.push(p18);
			arr.push(p19);
			arr.push(p20);
			
			

				//arr.push(MapMgr.getInstance()._map.getCenter());
				
			var zoom = MapMgr.getInstance()._map.getZoom();
			var cuisine = $("#restaurantCuisineSelect" ).val();
			var price = $("#restaurantPriceSelect" ).val();
			
			
			/*for (var i = 0; i < markers.length; i++) {
		          markers[i].setMap(null);
		        }*/
			
			
			for (var i=0;i<arr.length;i++) {
				$scope.itineraryService.appendAdditionalPoints(arr[i],zoom,cuisine,price);
				/*var marker = new google.maps.Marker({
			          position: arr[i],
			          map: MapMgr.getInstance()._map,
			          label: 'point' + (i+1),
			          title: 'point' + i
			        });*/
				//markers.push(marker);
			}
			
			$timeout(function() {
				$scope.getRestaurantsForItinerary();
			},0)
			
			//mapBlockUi.reset();
				
		};
		
		$scope.getRestaurantsForItinerary = function() {
			$scope.startLimit = isTablet() ? 999 : START_LIMIT_COUNT;
			var zoom = MapMgr.getInstance()._map.getZoom();
			var cuisine = $("#restaurantCuisineSelect" ).val();
			var price = $("#restaurantPriceSelect" ).val();
			var latLngStr = $scope.itineraryService.getLatLangStr(zoom,cuisine,price);
			var baseUrl = appRoot + "/api/restaurants/" + $scope.cityObj.id + "/radius?latLng="+latLngStr+"&zoom=" + zoom;
			if (cuisine != "All Cuisines") {
				baseUrl += "&cuisine=" + cuisine;
			}
			if (price != "Any Price") {
				baseUrl += "&priceLevel=" + price; //use length becatse we need a number 1-4
			}
			if (latLngStr.length > 0) {
				//get from server, otherwise we already have all the data on the client
				$http.get(baseUrl).then(function 
						successCallback(response) {
						$scope.itineraryService.processItrRests(response,zoom,cuisine,price);
						drawRestautants();
				  });
			} else {
				drawRestautants();
			}
			
		}
		
		var scrollEventTimer = null;
		function fireRestaurantScrollEvent(name) {
			window.clearTimeout(scrollEventTimer); 
			scrollEventTimer = null;
			$rootScope.$broadcast("itineraryFireEvent",name,null,false);
		}
		
		
		var loadMoreRunning = false;
		function loadMore() {
			try {
				if (loadMoreRunning) {
					return;
				}
				if (scrollEventTimer != null) {
					//check if process was already started and stop it of clicking zoom twice
					window.clearTimeout(scrollEventTimer); 
					scrollEventTimer = null;
				}
				scrollEventTimer = window.setInterval(function(){
					fireRestaurantScrollEvent("restaurant scroll in list");
				}, 500);
				
				var startLimit = $scope.startLimit-1;
				if (startLimit >= $scope.allRests.length) {
					startLimit = $scope.allRests.length - 1;
				}
				//console.log("load more: " + $("#restaurant_" + $scope.allRests[startLimit].id).offset().top);
				if (($("#restaurant_" + $scope.allRests[startLimit].id).offset().top - $(window).scrollTop()) < 1000) {
					loadMoreRunning = true;
					$timeout(function() {
						$scope.startLimit += START_LIMIT_COUNT;
						//console.log("startLimit:" + $scope.startLimit);
						$timeout(function() {
							loadMoreRunning = false;
						},300)
					},100);
				}
			} catch(err) {}
			
		}
		
		
		function drawRestautants() {
			var zoom = MapMgr.getInstance()._map.getZoom();
			var cuisine = $("#restaurantCuisineSelect" ).val();
			var price = $("#restaurantPriceSelect" ).val();
			var filteredRests = $scope.itineraryService.getFilteredRestaurants(zoom,cuisine,price);
			if (filteredRests.length == 0) {
				$rootScope.$broadcast("itineraryFireEvent","empty restaurants for city",$scope.cityObj.name,false);
			}
			MapMgr.getInstance().drawRestaurants(filteredRests);
			$timeout(function() {
				blockUI.reset();
			},500)
			
		}
		
		$scope.$on('itr_site_changed', function (event,itrSite,doRefreshMap) {
			for (var i=0;i<$scope.itineraryService.curItinerarySites.length;i++) {
				if ($scope.itineraryService.curItinerarySites[i].id == itrSite.id) {
					$scope.itineraryService.curItinerarySites[i] = itrSite;
					if (doRefreshMap) {
						MapMgr.getInstance().initializeMapFromItrSites("divMapParent", $scope.itineraryService.curItinerarySites,$scope.allAttractions[0],$scope.showMyPlaces);
					}
					break;
				}
			}
	   });
		
		$scope.filterPersonal = function(itrSite) {
			return itrSite.type != null;
		}
		
		$scope.markAddingToWishlist = function() {
			$scope.addingToWishlist = true;
		}
		
		var w4 = $scope.$watch(function(){
	        return itineraryService.curItinerarySites;
	      }, function(newVal, oldVal){
	    	  if (newVal != null && (itrLoading || newVal != oldVal)) {
	    		  itrLoading = false; //only first time when new and old val are the same

	    		if ($scope.addingToWishlist) {
	    			$scope.addingToWishlist = false;
	    			return;
	    		}
	    		
	    		$scope.showSiteOverlay(null);
	    		$scope.allAttractions = itineraryService.getAllAttractions();
	  			changeToDay = null;
	  			var addedAttraction = null;
	  			var days = itineraryService.getDaysArr();
	  			if (days != null && days.length == 0) {
	  				changeToDay = null;
	  			} else if (days != null && days.length > $scope.itineraryService.getDaysArr().length) {
	  				//added day, change to last
	  				changeToDay = days[days.length-1];
	  			}

	  			$scope.newAttraction = itineraryService.getNewAddedAttraction();
	  			itineraryService.setNewAddedAttraction(null); //reset new attraction
	  			//$scope.itinerary = new Object();
	  			//$scope.curItinerarySites = new Array();
	  			//$scope.itinerary = itineraryService.getItinerary();
	  			var myPlacesHotelAdded = false; 
	  			/*$scope.myPlacesArr = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,function(value, index){
	  									if (value.type != null && value.type == "hotel") {
	  										if (myPlacesHotelAdded) {
	  											return false;
	  										}
	  										myPlacesHotelAdded = true;
	  									}
	  									if ($scope.selectedPlaceType != "All") {
	  										return value.type == $scope.selectedPlaceType;
	  									}
	  									if (value.type != null && value.type == "break" && value.address.length <=0) {
	  										return false;
	  									}
	  									return value.dayInTrip == -1;
	  								});*/
	  			/*if ($scope.showMyPlaces) {
	  				$scope.itineraryService.curItinerarySites = $scope.myPlacesArr;
	  			} else {
	  				$scope.itineraryService.curItinerarySites = itineraryService.getCurItinerarySites();
	  			}*/
	  			
	  			//$scope.daysArr = itineraryService.getDaysArr();
	  			$scope.selectedDay = itineraryService.getSelectedDay();
	  			//$scope.itineraryDataMgr = itineraryService.getItineraryDataMgr();
	  			if (changeToDay != null) {
	  				$scope.changeDay(changeToDay);
	  			}
	  			
	  			if ($scope.itineraryService.selectedTab == "itinerary" || $scope.itineraryService.selectedTab == "tripOverview" || $scope.itineraryService.selectedTab == "restaurants" || $scope.itineraryService.selectedTab == "myPlaces") {
	  				//if ($("#divMap").children().length == 0) {
	  					to1 = $timeout(function() {
	  						if ($scope.itineraryService.selectedTab == "tripOverview" || $scope.itineraryService.selectedTab == "restaurants") {
	  							//tripoverview map
	  							var siteObjArr = new Array();
	  							for (var i=0;i<itineraryService.getDaysArr().length;i++) {
		  							var dayObj = new Object();
		  							dayObj.sites = itineraryService.getDaysArr()[i].daySites;
		  							if ($location.hash().indexOf("tab=restaurants") >=0) {
		  								dayObj.color = "overview-class-white overview-class-" + i;
		  							} else {
		  								dayObj.color = "overview-class-" + i;
		  							}
		  							
		  							dayObj.lineColor = colorArr[i];
		  							siteObjArr.push(dayObj);
		  						}
		  						if ( $scope.itineraryService.selectedTab == "restaurants") {
		  							//add wishlist restaurants
		  							var wishlistRests = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,function(value, index){ if (value.dayInTrip == -1 && value.type == 'restaurant') {return true} });
		  							if (wishlistRests.length > 0) {
		  								var dayObj = new Object();
			  							dayObj.sites = wishlistRests;
		  								dayObj.color = "overview-class-white overview-class-" + itineraryService.getDaysArr().length;
		  								dayObj.lineColor = colorArr[itineraryService.getDaysArr().length];
		  								siteObjArr.push(dayObj);
		  							}
		  						}
	  							MapMgr.getInstance().initializeMapFromItrSites("divMapParent",siteObjArr,$scope.allAttractions[0],$scope.itineraryService.disableRouting || $scope.itineraryService.selectedTab == "restaurants");
	  						} else {
	  							var disableRouting = $scope.itineraryService.selectedTab == "myPlaces" ? true : $scope.itineraryService.disableRouting;
	  							MapMgr.getInstance().initializeMapFromItrSites("divMapParent", $scope.itineraryService.curItinerarySites,$scope.allAttractions[0],$scope.itineraryService.disableRouting);
	  						}
  							
	  					}, 500);
	  				//}
	  			}
	  			if (itineraryService.getNoScroll()) {
	  				$('#itineraryDrawersList').animate({
		  				scrollTop: 0
		  			}, 'slow');
	  			}
	  			
	  			
	  			itineraryService.setNoScroll(true);
	  			//Fade effect for selected attraction
	  			if ($scope.newAttraction != null) {
	  				var res;
	  				if ($scope.newAttraction.shortTitle != null) {
	  					var checkId = $scope.newAttraction.id;
	  					if ($scope.newAttraction.site) {
	  						checkId = $scope.newAttraction.site.id;
	  					}
	  					res = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,function(value, index){
	  						if (value.site && value.site.id == checkId) {
	  							return true
	  						} 
	  					})[0];
	  				} else {
	  					res = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,{id:$scope.newAttraction.id},true)[0];
	  				}
	  				if (res != null && res.id != null) {
	  					$("#divSiteNameWrapper_"+res.id).addClass("itin_action_icon_selected");
	  					doHighlightNewSite(res.id);
	  					//$scope.newAttraction = null;
	  				}
	  			}
	  			to3 = $timeout(function() {
	  				if (!noUnblockUi) {
	  					//don't unblock when coming from restaurants, that is handled as part of the tab change
	  					blockUI.reset();
	  				}
	  				noUnblockUi = false;
	     	   		$("#itinerary-backdrop").removeClass("modal-backdrop");
	  	   		}, 2500);
	    	 }	
	      });
		
		/*$scope.drawAttractionsMap = function() {
			MapMgr.getInstance().initializeAttractionsMapFromItrSitesReady("divMap", $scope.itineraryService.allAttractions,null,$scope.itineraryService.allAttractions[0]);
		}*/
		

		function calcPoints(map) {
				var latLng = map.getCenter();
				var projection = map.getProjection();
				var bounds = map.getBounds();
				var topRight = projection.fromLatLngToPoint(bounds.getNorthEast());
				var bottomLeft = projection.fromLatLngToPoint(bounds.getSouthWest());
				var scale = Math.pow(2, map.getZoom());
				var worldPoint = projection.fromLatLngToPoint(latLng);
				return [Math.floor((worldPoint.x - bottomLeft.x) * scale), Math.floor((worldPoint.y - topRight.y) * scale)]
		}
		
		function latLng2Point(latLng, map) {
			  var topRight = map.getProjection().fromLatLngToPoint(map.getBounds().getNorthEast());
			  var bottomLeft = map.getProjection().fromLatLngToPoint(map.getBounds().getSouthWest());
			  var scale = Math.pow(2, map.getZoom());
			  var worldPoint = map.getProjection().fromLatLngToPoint(latLng);
			  return new google.maps.Point((worldPoint.x - bottomLeft.x) * scale, (worldPoint.y - topRight.y) * scale);
			}

			function point2LatLng(point, map) {
			  var topRight = map.getProjection().fromLatLngToPoint(map.getBounds().getNorthEast());
			  var bottomLeft = map.getProjection().fromLatLngToPoint(map.getBounds().getSouthWest());
			  var scale = Math.pow(2, map.getZoom());
			  var worldPoint = new google.maps.Point(point.x / scale + bottomLeft.x, point.y / scale + topRight.y);
			  return map.getProjection().fromPointToLatLng(worldPoint);
			}
		
		/**
		 * Highlight a new added site
		 */
		var highlightSightTo = null;
		function doHighlightNewSite(siteId) {
			var doShow = true;
			var counter = 0;
			
			highlightSightTo = window.setInterval(function(){
				$("#divMapImg_" + siteId).addClass("highlight-new-itinerary-site-map-container");
				if (miOpened || $('.qtip:visible').length > 0) {
					//wait for all modals to be closed before opening this dialog
					return;
				}
				if (doShow) {
					makePulseIn(siteId);
				} else {
					makePulseOut(siteId);
				}
				doShow = !doShow;
				if (counter == 16) {
					clearAction(siteId);
				}
				counter++;
			}, 600);
		}
		
		function clearAction(siteId) {
			window.clearInterval(highlightSightTo);
			to4 = $timeout(function() {
				//make the site unselected after last pulse finished
				$("#imgMapImg_" + siteId).removeClass( "unhighlight-new-itinerary-site-map");
				$("#imgMapImg_" + siteId).removeClass( "highlight-new-itinerary-site-map");
				$("#divSiteNameWrapper_" + siteId).removeClass("itin_action_icon_selected");
				$("#divMapImg_" + siteId).removeClass("highlight-new-itinerary-site-map-container");
			}, 700);
		}
		
		function makePulseIn(siteId) {
			$("#imgMapImg_" + siteId).removeClass( "unhighlight-new-itinerary-site-map")
			$("#imgMapImg_" + siteId).addClass( "highlight-new-itinerary-site-map")
		}
		
		function makePulseOut(siteId) {
			$("#imgMapImg_" + siteId).removeClass( "highlight-new-itinerary-site-map")
			$("#imgMapImg_" + siteId).addClass( "unhighlight-new-itinerary-site-map")
		}
		
		//Custom filter - filter based on the rating selected
		  $scope.placesTypeFilter = function (itrSite) {
			  if ($scope.selectedPlaceType == "All") {
				  return true;
			  } else {
				  return $scope.selectedPlaceType == itrSite.type;
			  }
			  
		  }; 
		  $scope.$on('selectedPlaceTypeAll', function (event) {
			  $scope.selectedPlaceType = "All";
		  });
		  
		  
		
		/**
		 * Resize the map
		 * This is run only once and only if the map is not ready.
		 * Required for when the page is open on tab != itinerary
		 */
		$scope.$on('google_map_resize', function (event, doForce) {
			if (doForce) {
				to5 = $timeout(function() {
					MapMgr.getInstance().initializeMapFromItrSites("divMapParent", $scope.itineraryService.curItinerarySites,$scope.allAttractions[0],$scope.showMyPlaces);
				}, 800);
			} else if (runOnce) {
				if (MapMgr.getInstance()._overlayArr == null && $scope.allAttractions.length > 0) {
					to6 = $timeout(function() {
						MapMgr.getInstance().initializeMapFromItrSites("divMapParent", $scope.itineraryService.curItinerarySites,new Array(),$scope.allAttractions[0],$scope.showMyPlaces);
					}, 0);
				} 
				runOnce = false;
			}
			
		});
		
		
		$scope.doExpandDrawer= function(evt,site,doExpand){
			var el = evt.currentTarget;
			var minHeight = doExpand ? $(el).height() + 60 : 55;
			if (!doExpand) {
				site.showDrawerActions = false;
				$scope.$apply();
			}
			$(el).animate({
            	minHeight: minHeight + "px"
            }, 600,function() {
            	if (doExpand) {
            		site.showDrawerActions = true;
            	}
            	site.TimeoutConst = null;
            	$scope.$apply();
            	//console.log("showDrawerActions:" + site.showDrawerActions);
            });
		}
		
		
		$scope.expandDrawer= function(evt,site,doExpand) {
			//console.log("1:" + site.showDrawerActions + "::" + doExpand + "::" + site.TimeoutConst);
			if (site.showDrawerActions == doExpand && site.TimeoutConst != null) {
				//console.log('cancel action');
				clearTimeout(site.TimeoutConst);
				return;
			}
			site.TimeoutConst = setTimeout(function(){
				$scope.doExpandDrawer(evt,site,doExpand);
			}, 500);
		}
		
		/**
		 * Handle map icon when hovering over map
		 */
		$scope.drawerMouseOver = function(siteId,isAdd,isPersonalActivity,isRestaurant,address,divPrefix,forceTripOverview) {
			if (divPrefix == null) {
				divPrefix = "divMapParent";
			}
			if (isAdd) {
				$scope.mouseOverSiteId=siteId;
				if ($scope.itineraryService.showTripOverview || forceTripOverview) {
					//in trip overview, enlarge the font size. Show the site name if it was hidden
					var arrowIcon = $("#divMapImg_" + siteId).find(".map_name_wrapper");
					if ($("#"+divPrefix+"divSiteNameWrapper_" + siteId).css("visibility") == "hidden") {
						$("#"+divPrefix+"divSiteNameWrapper_" + siteId).attr("preVisibility","hidden");
						var selectedPosition = $("#"+divPrefix+"divSiteNameWrapper_" + siteId).attr("arrowClass");
						selectedPosition = selectedPosition == null ? "itinerary_ng_map_name_wrapper-tl itinerary_ng_map_name_wrapper-tl-inverted" : selectedPosition;
						arrowIcon.css("display","");
						arrowIcon.addClass(selectedPosition +" itinerary_ng_map_name_wrapper-inverted")
            			$("#divMapImg_" + siteId).find(".visit_overview_overlay").css("display","none");
					}
					$("#divMapParentdivSiteNameWrapper_" + siteId).css("z-index","999");
					$("#"+divPrefix+"divSiteNameWrapper_" + siteId).css("visibility","visible");
					if (isRestaurant) {
						$("#divMapImg_" + siteId).removeClass("overview-class-rest");
						$("#divMapImg_" + siteId).addClass("overview-class-rest-inverted");
						arrowIcon.addClass("itinerary_ng_map_name_wrapper-inverted")
					}
					
					if (!isRestaurant) {
						$("#"+divPrefix+"divSiteNameText_" + siteId).animate({
							"font-size": "16px"
						},300);
					}
				} else {
					if (!isPersonalActivity && !isRestaurant) {
						//don't show on map breaks without address because they are ontop of a site
			    		$("#divSiteNameWrapper_" + siteId).addClass("itin_action_icon_selected");
			    		$("#itin-drawer-"+$(this).attr("site-id")).addClass("itinerary-drawer-hover-map");
					}
					
					if (isPersonalActivity || isRestaurant) {
						$("#divMapImg_" + siteId).addClass("map-info-icon-my-place");
					}
					$("#imgMapImg_" + siteId).addClass("zoomed");
					$timeout(function() {
						$("#divMapImg_" + siteId).addClass("itin-map-site-wrapper-hover-ng");
					},200);
				}
				
			} else {
				if ($scope.itineraryService.showTripOverview || forceTripOverview) {
					//in trip overview, restore the font size. hide the site name if it was hidden
					var fontSize = "11px";
					if (isRestaurant) {
						fontSize = "13px";
					}
					if (isRestaurant) {
						$timeout(function() {
							$("#divMapImg_" + siteId).addClass("overview-class-rest")
							$("#divMapImg_" + siteId).removeClass("overview-class-rest-inverted")
							$("#divMapParentdivSiteNameWrapper_" + siteId).css("z-index","1");
						},300);
					}
				    (function(siteId){
				    	$("#"+divPrefix+"divSiteNameText_" + siteId).animate({
							"font-size": fontSize
						},300,function() {
							var arrowIcon = $("#divMapImg_" + siteId).find(".map_name_wrapper");
							arrowIcon.removeClass("itinerary_ng_map_name_wrapper-inverted itinerary_ng_map_name_wrapper-tl-inverted")
							if ($("#"+divPrefix+"divSiteNameWrapper_" + siteId).attr("preVisibility") == "hidden") {
								arrowIcon.css("display","none");
								$("#"+divPrefix+"divSiteNameWrapper_" + siteId).css("visibility","hidden");
								$("#"+divPrefix+"divSiteNameWrapper_" + siteId).removeAttr("preVisibility");
								$("#divMapImg_" + siteId).find(".visit_overview_overlay").css("display","");
							}
							
							$("#divMapParentdivSiteNameWrapper_" + siteId).css("z-index","1");
							$scope.mouseOverSiteId=null;
						});
				    })(siteId);
					
				} else {
					$timeout(function() {
						$scope.mouseOverSiteId=null;
						$("#imgMapImg_" + siteId).removeClass("zoomed");
		        		$("#divSiteNameWrapper_" + siteId).removeClass("itin_action_icon_selected");
		        		$("#divMapImg_" + siteId).removeClass("itin-map-site-wrapper-hover-ng");
					},300);
				}
			}
			
		}
		
        $scope.getItinerarySites = function() {
        	var rndFiveMin = 1000 * 60 * 5;
        	$scope.dayItinerarySites = $filter('filter')($scope.itineraryService.itinerary.itinerarySites,function(value, index){
        		/*if ($scope.newPersonalAttraction.longitude == null) {
        			return false;
        		}*/

        		value.optionTxt = "After ";
        		value.optionTxt += value.site != null ? value.site.shortTitle : value.name;
        		 
        		if (!$scope.isEditBreak && $scope.newPersonalAttraction.longitude != null) {
        			//get the time for each site
        			var destSite = new ItinerarySite($scope.newPersonalAttraction);
        			var res = itineraryService.getItineraryDataMgr().getDirectionsData(value,destSite);
        			var siteVisitEnd = new Date(value.visitHourEnd);
        			siteVisitEnd.setMinutes(siteVisitEnd.getMinutes() + res.timeToArrival);
        			var rounded = new Date(Math.round(siteVisitEnd.getTime() / rndFiveMin) * rndFiveMin)
        			value.optionTxt = $filter('date')(rounded, 'shortTime') + " (" + value.optionTxt + ")";
        		}
        		if (value.dayInTrip > 0 && value.dayInTrip == $scope.newPersonalAttraction.dayInTrip) {
        			if (value.type != null && value.type == "hotel") {
        				return false;
        			}
        			if (value.id == $scope.newPersonalAttraction.id) {
        				return false;
        			}
        			return true;
        		}
        		return false;
			});
        	
        	//handle the selected options - angular sucks
        	$timeout(function() {
        		$("#breakDaySelect").val($scope.newPersonalAttraction.dayInTrip);
        		
        		var selectedValue = "bestFitDay";
        		if ($scope.newPersonalAttraction.noInTrip > 0 && $scope.newPersonalAttraction.noInTrip != 1000) {
        			selectedValue = $scope.newPersonalAttraction.noInTrip;
        		}
        		$("#breakTimeSelect").val(selectedValue);
        		
        	},500);
        	
        }
        
		$scope.$on('trigger-change-day', function (event, day,from,noScroll) {
			$scope.changeDay(day,from,noScroll);
		});
		
		var tripOverviewWatch = $scope.$watch(function(){
			return itineraryService.showTripOverview;
		}, function(newVal, oldVal){
			if (newVal != oldVal && newVal && $scope.itineraryService.selectedTab != "restaurants") {
				$scope.itineraryService.selectedTab = "tripOverview"
				//$scope.doShowTripOverview();
				//$location.hash("tab=tripOverview").replace();
			}
	    });
		
		$scope.changeDay = function(day,from,noScroll) {
			$location.search('day', day.no).replace();
			$location.hash("tab=itinerary").replace();
			/*if (ieVersion == null || (!noScroll && ieVersion != null)) {
				to7 = $timeout(function() {
					blockUI.start("Loading...");
				}, 0);
			} else {
				$("#itinerary-backdrop").addClass("modal-backdrop fade in");
			}*/
			//if (from) {
			$rootScope.$broadcast("itineraryFireEvent","go to day",from,false);
			//}
			if (!$("#divTopTabIndicator").isOnScreen() && !noScroll) {
				$("html, body").animate({
					scrollTop:  $("#divTopTabIndicator").offset().top-15
				}, 300);
			}
			to8 = $timeout(function() {
				$scope.selectedDay=day;
				$scope.itineraryService.curItinerarySites = $filter('filter')($scope.itineraryService.itinerary.itinerarySites, {dayInTrip: $scope.selectedDay.no}, true);
				$scope.itineraryService.showTripOverview = false;
				$scope.showMyPlaces = false;
				itineraryService.setSelectedDay(day);
				//itineraryService.setCurItinerarySites($scope.curItinerarySites);
				itineraryService.processDay(day);
				//$rootScope.$broadcast("itinerary_day_changed", day);
			}, 500);
		}
		
		var colorArr = ["#002060","#ee833a","#7f7f7f","#cc9b00","#ffc000","#9f4510","#456a2c","#7030a0","#ff66ff","#ff7c80"]

		
		$scope.doShowTripOverview = function(skipBroadcase) {
			//$rootScope.$broadcast("itineraryFireEvent","show trip overview",true);
			/*if (!skipBroadcase) {
				$rootScope.$broadcast("load_trip_overview_ic");
			}*/
			$scope.itineraryService.setShowTripOverview(true);
			if (itineraryService.getDaysArr() == null) {
				$timeout(function() {
					//wait for service if it's not ready
					$scope.doShowTripOverview();
				}, 300);
				return;
			}
			
			$scope.itineraryService.curItinerarySites = $filter('filter')(itineraryService.getItinerary().itinerarySites,function(value, index){
				return value.dayInTrip != -1;
			});
			//$scope.itineraryService.setCurItinerarySites($scope.curItinerarySites);
			//createAttractionMap();
			//angular.element($window).on("scroll", loadAttractionMapScroll);
		}
		
/*		$scope.showMyPlacesBubble = function() {
			if ($scope.myPlacesArr.length <=0) {
				to12 = $timeout(function() {
					var fixedClass = isTablet() ? "" : "tooltip-fixed";
					var templateUrl = "/itinerary/modals/help-tips/my-places.html";
					$http.get(appWebRoot + templateUrl, {cache: $templateCache}).
						success(function(content) {
			       		var tmpScope = $scope.$new(true);
			       		var compiledContent = $compile(content)(tmpScope);
			              $("#myPlacesListWrapper").qtip({
			                content: {
			                	text:compiledContent,
			                	button: 'Close'
			                },
			                position: {
			                  my: 'left center',
			                  at: 'top right',
			                  target: $("#myPlacesListWrapper"),
			                  viewport: $(window)
			                },
			                style: {
			                	classes: 'qtip-rounded qtip-bootstrap qtip-shadow qtip-close-black ' + fixedClass,
			                	tip: {
			          	          width: 15,
			          	          height: 15
			          	      	}
			                },
			                hide: {
			                  delay : 300,
			                  event : 'click unfocus'
			                }, 
			                show : {
			                	solo: true,
			                	delay : 0,
			                	event : '',
			                    effect: function() {
			                    	var animationSpeed = 300;
		                    		 $(this).show().animate({left:"+=10"},100).animate({left:"-=10"},animationSpeed).
			                        	animate({left:"+=10"},animationSpeed).animate({left:"-=10"},animationSpeed).
			                        	animate({left:"+=10"},animationSpeed).animate({left:"-=10"},animationSpeed);
			                       
			                    }
			                } 
			            }).qtip('show');
			         });
				}, 200);
			}
		}*/
		
		
		var requireAr = isTablet() ? ["jquery.ui.touch-punch.min"] : [];
		require(requireAr,
				function(TouchPunch) {  
			 		/*$( "#sortable" ).sortable({
			 			disabled: isTablet(),
			 			start: function(e, ui) {
							wasUpdated = false;
							$('.qtip').qtip('hide'); //hide qtip while dragging
							$(ui.item).css("list-style","none"); //hide bullet if it appears
						},
						update: function(e, ui) {
							wasUpdated = true;
						},
		        		stop: function( e, ui ) {
		        			if (wasUpdated) {
		        				
			        			$rootScope.$broadcast("itineraryFireEvent","change attractions order drawer","",true);
			        			var movedDiv = ui.item;
								var curIdx = parseInt(movedDiv.attr("idx"));
					        	var newIdx = movedDiv.index() + 1;      	
					        	var curNoInTrip = movedDiv.attr("nointrip");

					        	$q.all(new Array(itineraryService.getItineraryDataMgr().moveItrSite(curNoInTrip, (newIdx - curIdx ),false))).then(
					   	   			 function(results) {
					   	   				 itineraryService.processDay();
						   	   			$q.all(new Array(itineraryService.getItineraryDataMgr().save())).then(
								   	   			 function(results) {
								   	   				 //MapMgr.getInstance().initializeMapFromItrSites("divMap", $scope.curItinerarySites,$scope.allAttractions[0]);
								   	   				 //$scope.itineraryDataMgr.validateOpeningHours();
								   	   				 //$rootScope.$broadcast("itinerary_sites_changed_details",$scope.itinerary,$scope.curItinerarySites, $scope.daysArr, $scope.selectedDay,$scope.itineraryDataMgr);
								   	   			
								   	   				 //itineraryService.processDay();
								   	   			 }, function(errors) {
										   			 
								   	   			 }
									        );

					   	   			 }, function(errors) {
							   			 
					   	   			 }
					        	);
		        			}
		        		}
	        		});*/
				}
		);   
		
		$( "body" ).on( "mapCreate", function() {
			 $("#divMapParent").css("border","none");
			 $("#divMapParent").css("margin-bottom","0px");
			 $("#divMapParent").css("height","100%");
		});
		
		$scope.$on('updateItrSite', function (event,itrSite) {
			var imageId = itrSite.googleImgUrl;
			for (var i=0;i<itineraryService.getItinerary().itinerarySites.length;i++) {
				if (itineraryService.getItinerary().itinerarySites[i].id == itrSite.id) {
					//console.log('bad image: ' + itineraryRegionalService.getItinerary().itinerarySites[i].googleImgUrl);
					//itineraryRegionalService.getItinerary().itinerarySites[i] = itrSite;
					//$scope.itinerary = itineraryService.getItinerary();
					
					//this is needed otherwise dom is not properly refreshed
					$timeout(function() {
						//force a refresh of the image in the UI
						$scope.itineraryService.itinerary.itinerarySites[i].googleImgUrl = null;
			   		}, 1000);
					$timeout(function() {
						//force a refresh of the image in the UI
						//console.log('replaceing the bad image with:' + imageId);
						$scope.itineraryService.itinerary.itinerarySites[i].googleImgUrl = imageId;
			   		}, 2000);
					
					break;
				}
			}
			
		});
		
		
		/*$scope.$on('showSite', function (event,site) {
			$scope.showSite(site);
		});*/
		
		$scope.$on('showSiteOverlay', function (event,site) {
			$scope.showSiteOverlay(site);
		});
		
		$scope.showSiteOverlay = function(site,from) {
			if (site != null && site.additionalData != null && site.additionalData.taLocationId != null) {
				site.taRestaurant = true;
				site.locationId = site.additionalData.taLocationId;
				site.bookingUrl = site.additionalData.bookingUrl;
				site.rating = site.additionalData.rating;
				site.smallPhoto = site.additionalData.smallPhoto;
				site.largePhoto = site.additionalData.largePhoto;
				site.dayInTrip = site.dayInTrip;
				site.isInItinerary = true;
				$scope.showRestaurantOverlay(site,from);//site is restaurant
			} else {
				$timeout(function() {
					$scope.hideDrawerQtip(); //close context menu
				},250);
				$scope.selectedAttractionNg = null;
				$timeout(function() {
					if (site != null) {
						$rootScope.$broadcast("itineraryFireEvent","map overlay open",from,true);
					}
					$("overlayImageSpinner").css("visibility","visible");
					$("overlayImageImg").css("opacity","0.1");
					$scope.showSiteMapOverlay = site != null;
					$scope.selectedAttractionNg = site;
				})
			}
			
			
		}
		
		$scope.showRestaurantOverlay = function(restaurant,from) {
			var to = 10;
			if (restaurant != null && $scope.restaurantSearchTxt.length > 0 && !MapMgr.getInstance().isInBounds(restaurant)) {
				//on text search, if restaurant not in bounds, set the restaurant to the center
				MapMgr.getInstance()._map.setCenter(restaurant.getLatLng())
				to = 1000;
			} else if (restaurant == null && $scope.restaurantSearchTxt.length > 0) {
				//when closing the overlay, make sure text overlay is handled
				MapMgr.getInstance().handleSiteOverlayTextPosition();
			}
			$scope.selectedAttractionNg = null;
			$timeout(function() {
				$("overlayImageSpinner").css("visibility","visible");
				$("overlayImageImg").css("opacity","0.1");
				$scope.showSiteMapOverlay = restaurant != null;
				$scope.selectedAttractionNg = restaurant;
			},to);
			
			if (isTablet()) {
				var zindex = restaurant != null ? "0" : "1";
				$("#itinerary-left-pane").css("z-index",zindex);
			}
			if (restaurant != null) {
				$rootScope.$broadcast("itineraryFireEvent","restaurant overlay open",from,true);
				$q.all(new Array($scope.itineraryService.getReviewsForRestaurants(restaurant))).then(
					function(results) {
						angular.element("#large-restaurant-overlay-container").on('scroll',handleRestOverlayScroll);
			   	   	}
				);
			} else {
				angular.element("#large-restaurant-overlay-container").off('scroll',handleRestOverlayScroll);
			}
		}
		
		function handleRestOverlayScroll() {
			if (scrollEventTimer != null) {
				//check if process was already started and stop it of clicking zoom twice
				window.clearTimeout(scrollEventTimer); 
				scrollEventTimer = null;
			}
			scrollEventTimer = window.setInterval(function(){
				fireRestaurantScrollEvent("restaurant scroll in details");
			}, 500);
		}
		
		$scope.showLargePhoto = false;
		$scope.showLargeRestPhoto = function(restaurant) {
			if (restaurant != null) {
				$scope.showLargePhoto = restaurant != null;
				$("#largeRestPhotoDiv").animate({width: '100%'},500);
				$rootScope.$broadcast("itineraryFireEvent","restaurant enlarge photo",null,false);
			} else {
				$scope.showLargePhoto = restaurant != null;
				$("#largeRestPhotoDiv").animate({width: '0px'},500, function() {
					$scope.showLargePhoto = false;
				})
			}
			
		}
		
		$scope.getMyIndex = function(id) {
			//get current site index (to show set start time for first site
			return $("#divDrawerActionIcon_"+id).attr("itr-site-qtip-index");
		}	
		
		//NEW GEN CODE
		$scope.showSite = function(site) {
			$("#mapDetailsPane").animate({
				scrollTop:  0
			},0);
			if (site != null && site.site == null) {
				//TEMPORARY FIX FOR SITES VS ITR SITES (CONVERT TO ITR SITE)
				var ns = new Object();
				ns.site = site;
				ns.id = site.id;
				site = ns;
			}
			
			
	    	if (site != null && site.site != null && site.site.activitiesArr == null) {
	    		site.site.activitiesArr = activitiesService.getSitePaidActivities(site.site.id,2);	
	    	}
	    	
	    	var newSite = null;
			/*if (site != null) {
				$timeout(function() {
					$("#titleMapImg_" + site.id).addClass("map_name_wrapper-hover map_name_wrapper_inverted")
				},1000);
				
			}*/
			/*if ($scope.selectedAttractionNg != null) {
				$("#titleMapImg_" + $scope.selectedAttractionNg.id).removeClass("map_name_wrapper-hover map_name_wrapper_inverted")
			}*/
			
			if (site == null || ($scope.selectedAttractionNg != null && site.id == $scope.selectedAttractionNg.id)) {
				//when closing - x is clicked or same attraction clicked on the left
				$timeout(function() {
					$("#mapDetailsPane").animate({
						right: '-450px'
					},350,function() {
						$scope.selectedAttractionNg = null;
					});
				},10);
				return;
				//$("#mapDetailsPane").animate({left:'-420px'},350, function() {
					//$("#itinerary-left-pane").toggleClass('hover');
					
					
				//});
			} else if (($scope.selectedAttractionNg == null || $scope.selectedAttractionNg.id == null) && site != null) {
				//open panel after it was closed
				newSite = site;
				//$("#itinerary-left-pane").toggleClass('hover');
				$timeout(function() {
					$("#mapDetailsPane").animate({
						right: '-14px'
					},350,function() {
					});
				},10);
			} else {
				//change attraction, animation - close open
				//$("#mapDetailsPane").animate({left:'-420px'},350, function() {
				newSite = site;
				//	$timeout(function() {
				//		$("#mapDetailsPane").animate({left:'270px'},350);
	    		//	},100);
					
				//});
				/*$("#itinerary-left-pane").toggleClass('hover');
				$timeout(function() {
					$("#itinerary-left-pane").toggleClass('hover');
		    	},500);*/
				
			}
			
						
			$scope.selectedAttractionNg = null;
			$timeout(function() {
				$scope.selectedAttractionNg = newSite;
	    	},0);
	    	
	    }
		
		$scope.wishlistRemoveFromWishlist = function (itrSite) {
			$scope.removeWishlistRunning = itrSite.id;
			$timeout(function() {
				$scope.removeWishlistRunning = null;
				$rootScope.$broadcast("addToWishlist",'{"itrSiteId":"'+itrSite.id+'","from":"wishlist tab"}');
			}, 1200);
		}

		$scope.$on('mapsitehoverin-ng', function (event, args, element) {
			if ($scope.isMobile) {
				return;
			}
			var curSiteId = args[1];
			var element = args[0];
			var openTarget = element;
			
			
			var curSite = $filter('filter')($scope.allRests,{id:curSiteId},true)[0];
			var templateUrl =  "/itinerary-ng/modals/map-overlay-restaurant.html"
			
			$(element).one('mouseover',function() {
				//unbind after qtip created so it want be recreated on every click
				$scope.createQtip(element,openTarget,templateUrl,curSite);
		    });
			
			
	   });
		
		$scope.createQtip = function(element,openTarget,templateUrl,curSite) {
			$http.get(appWebRoot + templateUrl, {cache: $templateCache}).
	       	success(function(content) {
	       		var restEventTxt = "restaurant";
	       		var additionalClass = "qtip-visit-rest";
	       		var tmpScope = $scope.$new(true);
	       		var compiledContent = $compile(content)(tmpScope);
	       		tmpScope.selectedAttractionNg = curSite;
	       		tmpScope.imagesCdn = $scope.imagesCdn;
	       		tmpScope.appRoot = $scope.appRoot;
	       		tmpScope.cityObj = $scope.cityObj;
	       		//tmpScope.lang = getActiveLang(true);
	       		tmpScope.lang = $scope.lang;
	       		tmpScope.changeTab = function(tabName) {
	    			$('.qtip').qtip('hide'); //hide qtip
	    			$location.hash("tab=" + tabName).replace();
	    		}
	       		
	       		$(element).qtip({
	       			content: {
	                	text:compiledContent,
	                	button: 'Close'
	                },
	                position: {
	                  my: 'top center',
	                  at: 'middle right',
	                  target: $(openTarget),
	                  viewport: $(window)
	                },
	                style: {
	                	classes: 'qtip-rounded qtip-bootstrap qtip-shadow qtip-overflow ' + additionalClass,
	                	tip: true
	                },
	                hide: {
	                  fixed : true,
	                  delay : 200,
	                  event:'mouseout unfocus',
	                  effect: function() { 
	                      $(this).animate({ opacity: 0 }, { duration: 150 });
	                }
	                }, 
	                show : {
	                	solo: true,
	                	delay : 350,
	                	event:'mouseover focus',
	                	effect: function() {
	                        $(this).show().css({ opacity: 0 }).animate({ opacity: 1 }, { duration: 350 });
	                	},
	                	ready: true
	                }, 
	                events: {
	                	show: function(event, api) {
	                		fireEvent("Itinerary-2.0", "map " + restEventTxt + "overlay open");
	                	}, 
	                	hide: function(event, api) {
	                		fireEvent("Itinerary-2.0", "map " + restEventTxt + "overlay close");
	                	}
	                }
	            });
	
	         });
			to13 = $timeout(function() {
				//don't remove this, it's causing $digest to run 
				$(element).qtip('api');
			}, 700);
			
			
		}
		
		
	}]);
	
	
});	
define('ngApp/website/itinerary/itineraryDetailsController',["ngApp/website/main/main"],
    function(main) {
	var app = angular.module('visitacity');
	
	
	app.controller('itineraryDetailsController',['$scope','$rootScope','$q','GlobalDefs','GlobalDefsNew','CityService','$routeParams','$location','itineraryService',
	                                             function($scope,$rootScope,$q,GlobalDefs,GlobalDefsNew,CityService,$routeParams,$location,itineraryService) {
		
		$scope.curItinerarySites = new Array();
		$scope.cityService = CityService;
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.cityObj = null;
		$scope.attractions = new Array();
		$scope.itinerary;
		$scope.isMyPlaces = false;
		$scope.transitModeChange = false;
		
		//$scope.showTripOverview = false;
		$scope.itineraryService = itineraryService;
		
		$scope.lang = $routeParams.lang;
		if ($scope.lang == null) {
			//in the itinerary page, there is no route param
			$scope.lang = getActiveLang(true);
		}
		
		$scope.interestingCountry = isInterestingCountry($scope.lang);
		
		var w1 = $scope.$watch(function(){
	        return itineraryService.curItinerarySites;
	      }, function(newVal, oldVal){
	    	  if (newVal != null) {
	    		$scope.curItinerarySites = new Array();
	    		$scope.curItinerarySites = itineraryService.getCurItinerarySites();
	  			$scope.itinerary = itineraryService.getItinerary();
	  			$scope.attractions = itineraryService.getAllAttractions();
	  			if ($location.hash() != "" && $location.hash().indexOf("myPlaces") >= 0) {
	  				$scope.isMyPlaces = true;
	  			} else {
	  				$scope.isMyPlaces = false;
	  				
	  			}
	    	  }
	      });
		
		
		/*var tripOverviewWatch = $scope.$watch(function(){
			return itineraryService.showTripOverview;
		}, function(newVal, oldVal){
			if (newVal != oldVal) {
				$scope.showTripOverview = 
			}
	    });*/
		
		/*$scope.$on('hide_trip_overview', function (event, args) {
			$scope.showTripOverview = false;
		});

		$scope.$on('load_trip_overview', function (event, args, from) {
			$scope.showTripOverview = true;
		});*/
		
		
		
		$scope.$on('itr_site_changed', function (event,itrSite) {
			for (var i=0;i<$scope.curItinerarySites.length;i++) {
				if ($scope.curItinerarySites[i].id == itrSite.id) {
					$scope.curItinerarySites[i] = itrSite;
					break;
				}
			}
	   });
		
		var w2 = $scope.$watch('cityService.getCurCity()', function(newVal, oldVal) {
			if (newVal != null && $scope.activitySvc == null) {
				$scope.cityObj = CityService.getCurCity();
			}	
    	});
		
		$scope.openShareCenter = function() {
			//window.location.href = appRoot + "/itinerary/share-center?id=" + $scope.itinerary.id 
			$location.path("/itinerary/share-center?id=" + $scope.itinerary.id);
			if(!$scope.$$phase) $scope.$apply();
		}
		
		$scope.showDirections = function(site, type) {
			site.showDirections = true;
			if (type == "Walking" && site.routeDetailsWalking != null) {
				itineraryService.calculateTransit(site.routeDetailsWalking.steps,"transitdirections" + site.id);
			} else if (type == "Driving" && site.routeDetailsDriving != null) {
				itineraryService.calculateTransit(site.routeDetailsDriving.steps,"transitdirections" + site.id);
			} else if (type == "Transit" && site.routeDetails != null) {
				itineraryService.calculateTransit(site.routeDetails.steps,"transitdirections" + site.id);
			} else {
				itineraryService.showDirections(site,type,true);
			}
			
			$rootScope.$broadcast("itineraryFireEvent","show directions",null,false);
		}
		

		
		 $scope.navigateTo = function(url) {
			//window.location = url;
			$loaction.path(url);
		 }
		 
		 $scope.setTransitMode = function(itrSite,mode) {
			 if (itrSite.curSiteTransitType != mode) {
				 $scope.transitModeChange = true;
				 itrSite.showDirections=false;
				 itrSite.transitType = mode;
				 itineraryService.processDay();
				 if (itineraryService.getItinerary().clientUniqueItrId != null) {
					 //don't save if it's not an editable itinerary
					 $q.all(new Array(itineraryService.saveItinerary())).then(
						function(results) {
							$scope.transitModeChange = false;
			   	   		}
			   	   	);
				 } else {
					 $scope.transitModeChange = false;
				 }
			 }
			 
		 }
		 
		 //clear watchers
		 $scope.$on('$destroy', function(){
			w1();
			w2();
		 });
		
	}]);
	
});	

define('ngApp/website/itinerary/itineraryAdsController',["ngApp/website/main/main"],
    function(main) {
	var app = angular.module('visitacity');
	
	
	app.controller('itineraryAdsController',['$scope','$rootScope','$q','GlobalDefs','activitiesService','CityService','redirectPaScv','lastModService','$routeParams',
	                                         function($scope,$rootScope,$q,GlobalDefs,activitiesService,CityService,redirectPaScv,lastModService,$routeParams) {
		
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.redirectPaSvc = redirectPaScv;
		$scope.activitySvc = null;
		$scope.activityCategory1 = new Array();
		$scope.activityCategory2 = new Array();
		$scope.promotedActivities = new Array();
		$scope.currentPromotedActivities = new Array();
		$scope.cityService = CityService;
		$scope.cityObj = null;
		$scope.curDay = 1;
		//$scope.lang = getActiveLang(true);
		$scope.lang = $routeParams.lang;
		if ($scope.lang == null) {
			//in the itinerary page, there is no route param
			$scope.lang = getActiveLang(true);
		}
		
		var cityWatch = $scope.$watch('cityService.getCurCity()', function(newVal, oldVal) {
			if (newVal != null && $scope.activitySvc == null) {
				$scope.cityObj = CityService.getCurCity();
				prepareLastMod();
				
			}	
    	});
		
		function prepareLastMod() {
			lastModService.setLastMod($scope.cityObj.legalName).then(
		   			 function(results) {
		   				$scope.loadData();
		   			 }, function(errors) {
		   			 
		   			 }
		   	);
		} 
		
		$scope.loadData = function() {
			
			$q.all(new Array(activitiesService.init($scope.cityObj.legalName))).then(
  					 function(results) {
  						$scope.activitiesSvc = activitiesService;
  						$scope.activityCategory1 = activitiesService.getCategoryPaidActivities(2,null,5);
   						$scope.activityCategory2 = activitiesService.getCategoryPaidActivities(3,null,5);
   						$scope.activityCategory1Name = $scope.activitiesSvc.cityPaidActivityCategories[2].name;
   						if ($scope.activitiesSvc.cityPaidActivityCategories[2].shortName) {
   							$scope.activityCategory1Name = $scope.activitiesSvc.cityPaidActivityCategories[2].shortName;
   						}
   						$scope.activityCategory2Name = $scope.activitiesSvc.cityPaidActivityCategories[3].name;
   						if ($scope.activitiesSvc.cityPaidActivityCategories[3].shortName) {
   							$scope.activityCategory2Name = $scope.activitiesSvc.cityPaidActivityCategories[3].shortName;
   						}
   						while ($scope.promotedActivities.length < 50) {
   							$scope.promotedActivities = $scope.promotedActivities.concat(activitiesService.getAllPromotedActivities());
   						}
  					 
  					 }, function(errors) {
	   		   			 
	   	   			}
  				);
		}
		
		
		
		$scope.$on('itinerary_day_changed', function (event, args) {
			$scope.curDay =  args.no;
	   });
		
		
		$scope.getPaForLine = function() {
			var end = $scope.curDay*5;
			$scope.currentPromotedActivities = $scope.promotedActivities.slice(end-5,end);
			return $scope.currentPromotedActivities;
		}
		
		$scope.$on('$destroy', function(){
			cityWatch();
		});
		
	}]);
	
});
define('ngApp/website/itinerary/tripOverviewController',["ngApp/website/main/main","app/itinerary/itineraryDataMgr"],
    function(main,ItineraryDataMgr) {
	var app = angular.module('visitacity');
	
	app.filter('withDate', ['$filter', function($filter){
	   	 return function(day,itin) {
	   		var res = day;
	   		if (itin.startDate) {
	   			var startDate = new Date(itin.startDate);
	   			var endDate = new Date(startDate);
	   			endDate.setDate(endDate.getDate() + (day-1));
	   			res += ", " + $filter('date')(endDate, "longDate");
	   		}
	   		return res;
	   	 }
	   }]);
	
	
	app.controller('tripOverviewController',['$scope','$rootScope','$q','$filter','GlobalDefs','activitiesService','CityService','redirectPaScv','itineraryService','lastModService','$routeParams',
	                                         function($scope,$rootScope,$q,$filter,GlobalDefs,activitiesService,CityService,redirectPaScv,itineraryService,lastModService,$routeParams) {
		
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.redirectPaSvc = redirectPaScv;
		$scope.activitySvc = null;
		$scope.activityCategory1 = new Array();
		$scope.activityCategory2 = new Array();
		$scope.promotedActivities = new Array();
		$scope.currentPromotedActivities = new Array();
		$scope.cityService = CityService;
		$scope.cityObj = null;
		$scope.itinerary = null;
		var tmpData = null;
		$scope.lang = $routeParams.lang;
		if ($scope.lang == null) {
			//in the itinerary page, there is no route param
			$scope.lang = getActiveLang(true);
		}
		var cityWatch = $scope.$watch('cityService.getCurCity()', function(newVal, oldVal) {
			if (newVal != null && $scope.activitySvc == null) {
				$scope.cityObj = CityService.getCurCity();
				prepareLastMod();
				cityWatch();
			}	
    	});
		
		function prepareLastMod() {
			lastModService.setLastMod($scope.cityObj.legalName).then(
		   			 function(results) {
		   				$scope.loadData();
		   			 }, function(errors) {
		   			 
		   			 }
		   	);
		} 
		
		$scope.loadData = function() {
			
			$q.all(new Array(activitiesService.init($scope.cityObj.legalName))).then(
  					 function(results) {
  						if (tmpData != null) {
  							$scope.itinerary = tmpData;
  						
  						}
  					 
  					 }, function(errors) {
	   		   			 
	   	   			}
  				);
			
			//$scope.activitySvc = 
			
		}
		
		/*$scope.$on('all_attractions', function (event, attractions) {
			$scope.allAttractions = new Array();
			$scope.allAttractions = attractions;
	   });*/
		
		var w1 = $scope.$watch(function(){
			return itineraryService.allAttractions;
		}, function(newVal, oldVal){
			if (newVal != oldVal) {
				$scope.allAttractions = itineraryService.getAllAttractions();
			}
	    });
		
		 $scope.$on("$destroy",function() {
			 w1();
		 });    
		
		$scope.$on('load_trip_overview', function (event, args) {
			if (activitiesService == null) {
				//if trip overview is loaded first, need to wait for data to load
				//tmpData = angular.copy(args);
				tmpData = JSON.parse(JSON.stringify(args));
			} else {
				//$scope.itinerary =  angular.copy(args);
				$scope.itinerary = JSON.parse(JSON.stringify(args));
				$scope.itineraryDataMgr = new ItineraryDataMgr($scope.itinerary);
			}
			
	   });
		
		
		$scope.tripOverviewNewDay = function(itSite,toAdd) {
			for (var i=0;i<$scope.itinerary.itinerarySites.length;i++) {
				//new ItinerarySite($scope.itinerary.itinerarySites[i]);
				if ($scope.itinerary.itinerarySites[i].id == itSite.id) {
					var curCheck = $scope.itinerary.itinerarySites[i];
					var prevCheck = $scope.itinerary.itinerarySites[(i+toAdd)];
					if (prevCheck == null || (prevCheck.dayInTrip != curCheck.dayInTrip)) {
						return true;
					} else {
						return false
					}
				}
			}
		}
		
		$scope.getPaForDay = function(itDayInTrip) {
			var curDaySites = $filter('filter')($scope.itinerary.itinerarySites, {dayInTrip: itDayInTrip}, true);
			var paForDay = new Array();
			for (var i=0;i<curDaySites.length;i++) {
				if (curDaySites[i].site != null && curDaySites[i].site.mainPaidActivity != null) {
					paForDay.push(curDaySites[i].site.mainPaidActivity);
				}
			}
			paForDay = $filter('orderBy')(paForDay, 'reviewersNum', true);
			return $filter('unique')(paForDay,"id");
		}
		
	
		$scope.updateLocationHash = function() {
			$rootScope.$broadcast('itinerary_change_tab',"itinerary");
		}
		
	}]);
	
});	
define('ngApp/website/itinerary/itineraryTicktesController',["ngApp/website/main/main"],
    function(main) {
	var app = angular.module('visitacity');
	
	
	app.controller('itineraryTicktesController',['$scope','$q','$filter','redirectPaScv','CityService','activitiesService','itineraryService','lastModService','$routeParams',
	                                             function($scope,$q,$filter,redirectPaScv,CityService,activitiesService,itineraryService,lastModService,$routeParams) {
		
		var runOnce = true;
		$scope.cityService = CityService;
		$scope.itinerary = new Object();
		$scope.mainPaidArr = new Array();
		$scope.allTicketsArr = new Array();
		$scope.redirectPaSvc = redirectPaScv;
		$scope.cityObj = null;
		$scope.appRoot = appRoot;
		var deferred = $q.defer();
		$scope.lang = $routeParams.lang;
		if ($scope.lang == null) {
			//in the itinerary page, there is no route param
			$scope.lang = getActiveLang(true);
		}
		var cityWatch = $scope.$watch('cityService.getCurCity()', function(newVal, oldVal) {
			if (newVal != null && $scope.activitySvc == null) {
				cityWatch();
				$scope.cityObj = CityService.getCurCity();
				prepareLastMod();
			}	
    	});
		
		function prepareLastMod() {
			lastModService.setLastMod($scope.cityObj.legalName).then(
		   			 function(results) {
		   				loadData();
		   			 }, function(errors) {
		   			 
		   			 }
		   	);
		} 
		
		function loadData() {
			var callA = activitiesService.init($scope.cityObj.legalName);
			var callB = getItinerary();
			$q.all(new Array(callA,callB)).then(
					function(results) {
						generateMainPaidArr();
					 }, function(errors) {
			   			 
		   			 }
		   	);
		}
		
		function getItinerary() {
			return deferred.promise;
		}

		var w1 = $scope.$watch(function(){
	        return itineraryService.curItinerarySites;
	      }, function(newVal, oldVal){
	    	  if (newVal != oldVal) {
	    		  if (runOnce) {
	  				runOnce = false;
	  				//angular.copy(itinerary,$scope.itinerary);
	  				$scope.itinerary = itineraryService.getItinerary();
	  				deferred.resolve();
	  				
	  			}
	    	  }
		});
		
		 $scope.$on("$destroy",function() {
			 w1();
		 });    
		 
		/*$scope.$on('itinerary_sites_changed', function (event,itinerary,sites,days,selectedDay) {
			if (runOnce) {
				runOnce = false;
				//angular.copy(itinerary,$scope.itinerary);
				$scope.itinerary = JSON.parse(JSON.stringify(itinerary));
				deferred.resolve();
				
			}
	   });*/
		
		/**
		 * Get the main paid activities as follows:
		 * Tickets = anything with site name in the PA title
		 * If there are no tickets just show the first 2 paid activities
		 */
		function generateMainPaidArr() {
			angular.forEach($scope.itinerary.itinerarySites, function (attraction) {
					if (attraction.site != null && attraction.site.mainPaidActivity != null && attraction.site.mainType.name != "Square" 
						&& attraction.site.mainType.name != "River" && attraction.site.mainType.name != "Bridge" && 
						attraction.site.mainType.name != "Neighborhoods" &&	attraction.site.mainType.name != "Parks & Gardens") {
						var attractionName = attraction.site.shortTitle.replace("The ","");
						var paName = attraction.site.mainPaidActivity.title;
						if (paName.indexOf(attractionName) >=0) {
							$scope.mainPaidArr.push(attraction.site);
						}
						$scope.allTicketsArr.push(attraction.site.mainPaidActivity);
						
					}
			});
			
			$scope.mainPaidArr = $filter('orderBy')($scope.mainPaidArr, 'mainPaidActivity.reviewersNum', true);
			$scope.mainPaidArr = $filter('limitTo')($scope.mainPaidArr,3);
			
			$scope.allTicketsArr = $filter('orderBy')($scope.allTicketsArr, 'mainPaidActivity.reviewersNum', true);
			if ($scope.allTicketsArr.length == 0) {
				$scope.allTicketsArr = activitiesService.getAllPromotedActivities();
			}
			$scope.allTicketsArr = $filter('limitTo')($scope.allTicketsArr,2);
		}
		
		
	}]);
	
});
define('ngApp/website/itinerary-share/itineraryShareController',[ "app/core/login",
        "ngApp/website/main/main"],
    function(LoginMgr,main) {
	var app = angular.module('visitacity');
	
	app.controller('itineraryShareController',['$scope','$rootScope','$http','$q','$filter','$routeParams','$timeout','GlobalDefs','blockUI',
	                                       function($scope,$rootScope,$http,$q,$filter,$routeParams,$timeout,GlobalDefs,blockUI) {
		
		blockUI.start("Loading...");
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.itinerary = null;
		$scope.curUsr = new Object();
		$scope.badEmail = null;
		$scope.userDisplay = "";
		$scope.itineraryUrl = null;
		$scope.regionalUrl = "";
		require(["app/core/login"], function(LoginMgr) {
			//$scope.curUsr = LoginMgr.getInstance().getLoggedInUserObject();
			//$scope.userDisplay = $filter('filterUserDisplayName')($scope.curUsr);
			LoginMgr.getInstance().getLoggedInUserObject().then(function(data){
				$scope.curUsr = data;
				$scope.userDisplay = $filter('filterUserDisplayName')($scope.curUsr);
			});
		});
		
		var callA = $http.get(appRoot + '/api/itineraries-user?id=' + $routeParams.id + "&rnd="+new Date().getTime());
		//var callB = LoginMgr.getInstance().loadAccountIds();
		//var callC = LoginMgr.getInstance().addFacebookScript();
		var callB = prepareFb();
		$q.all(new Array(callA,callB)).then(
	   			 function(results) {
	   				$scope.itinerary = results[0].data.itinerary;
	   				$scope.cityObj = results[0].data.city;
	   				$scope.regionalUrl = $scope.itinerary.isRegional ? "-r" : "";
	   				$scope.itineraryUrl =   $scope.appRoot + "/itineraries-user" + $scope.regionalUrl + "?id=" + $scope.itinerary.clientUniqueItrId + "&day=1";
	   				updateShareMsg();
	   				
	   				var bc = [{
		   						name: $scope.itinerary.name,
		   						url:  $scope.itineraryUrl
		   	   				},{
		   						name: "Share"
		   	   				}]

	   				$rootScope.$broadcast("update_breadcrumb",bc);
	   				$rootScope.$broadcast("update_main_header_width","itineraryShare");
	   				blockUI.reset();
	   			 }, function(errors) {
	   			 
	   			 }
	   	);

		/**
		 * Load FB account ID and FB script
		 */
		function prepareFb() {
			var deferred = $q.defer();
			$.when(LoginMgr.getInstance().loadAccountIds()).done(function () {
				$.when(LoginMgr.getInstance().addFacebookScript()).done(function () {
					deferred.resolve();
				}); 
			});   	
			return deferred.promise;
		}
		
		/**
		 * Run this when user changes the name or email
		 */
		function updateShareMsg() {
			try {
				var str = "You just got";
				if ($scope.userDisplay != null && $scope.userDisplay.length > 0) {
					str = $scope.userDisplay + " just sent you";
				}
				$scope.shareMessage = "Hi,\n\n" +
				str + " an invitation to view a trip plan to " + $scope.cityObj.name + ":\n" +
				$scope.itineraryUrl + "\n\n" +
				"Visit A City";
			} catch (err) {}
			
		}
		
		
		var w1 = $scope.$watch("curUsr", function(newVal, oldVal) {
			 if (newVal != oldVal) {
				 $scope.userDisplay = $filter('filterUserDisplayName')($scope.curUsr);
				 updateShareMsg();
			 }
		},true);
		
		 $scope.$on("$destroy",function() {
			 w1();
		 });    
		
		$scope.isShareDisabled = function() {
			if ($scope.submitted && !$scope.submittedOk) {
				return true;
			}
			if ($scope.emailAddressSend == null || $scope.emailAddressSend.length == 0) {
				return true;
			}
			if (($scope.curUsr.name == null || $scope.curUsr.name.length == 0) && ($scope.curUsr.email == null || $scope.curUsr.email.length == 0)) {
				return true;
			}
			return false;
		}
		
		$scope.shareEmail = function(subject) {
			$scope.badEmail = null;
			var addressFieldVal = $("#emailAddressSend").val(); //Get the value using jquery to avoid angular autofil issue
			addressFieldVal = addressFieldVal.replace(/\s+|;/g,",");
        	var addressArr = addressFieldVal.split(",");
        	var doSetIsShared = true;
        	var emailList = "";
        	if (addressFieldVal.length == 0) {
        		 $scope.badEmail = "";
        		return;
        	}
        	for (var i=0;i<addressArr.length;i++) {
        		var emailAddress = addressArr[i];
        		if (emailAddress.length == 0) {
        			//skip white spaces
        			continue;
        		}
        		if (isEmail(emailAddress)) {
   				  $scope.submitted = true;
   				  var msg = $scope.shareMessage;
   				  //add user src email
   				  var itrIdStr = "itineraries-user?id=" + $scope.itinerary.clientUniqueItrId;
   				  var replaceStr = itrIdStr;// + "&srcEmail=" + emailAddress;
   				  msg = msg.replace(itrIdStr,replaceStr);
   				  
   				  //handle CRLF replacement
   				  msg = msg.replace(/(\r\n|\n|\r)/g,"<br />");
   				  $http.post(appRoot + '/ws/shareItinerary', {
   					  subject : "A trip plan to " + $scope.cityObj.name + " was shared with you",
   					  body: msg,
   					  to: emailAddress,
   					  fromName: "Visit A City",
   					  itineraryId:$scope.itinerary.id}).
   					  success(function(data, status, headers, config) {
   						  
   						  if (doSetIsShared) {
   							//set as shared only once
	   			        	setIsShared(addressFieldVal);
	   			        	fireEvent("Itinerary share", "email ok");
   						  }
   						doSetIsShared = false;
		  
   			   				/* require(["app/core/login"], function(LoginMgr) {
   			   					LoginMgr.getInstance().modifyLoginData(emailAddress, true);
   			   				});*/
   							$timeout(function() {
   							  	$scope.submittedOk = true;
   							  	$scope.submitted = false;
   							}, 2000);
   						  }).
   					  error(function(data, status, headers, config) {
   						  console.log('sent fail');  
   					    
   					  });
   			  
   			  } else {
   				  $("#invalidEmail").css("visibility","visible");
   				  $scope.badEmail = emailAddress;
   			  }
        	}
        	
        	
			
        }
		
		function setIsShared(emailList) {
			  $http.post(appRoot + '/api/setItineraryShared', {id : $routeParams.id, emailList: emailList}).
					  success(function(data, status, headers, config) {
						  //console.log('marked as shared');
					  }).
					  error(function(data, status, headers, config) {
						  //console.log('marked as shared FAILED');
					    
					  });
		}
		
		try {
			twttr.ready(function (twttr) {
				  twttr.events.bind('tweet', tweetCompleted);
				  twttr.events.bind('click', tweetLoaded);
			});
		} catch (err) {
			
		}
		

		
		function tweetCompleted() {
			setIsShared('');
			fireEvent("Itinerary share", "twitter ok");
		}
		
		function tweetLoaded() {
			fireEvent("Itinerary share", "twitter open");
		}
		
		$scope.shareFb = function() {
			FB.ui(
						{
						  method: 'feed',
						  name: $scope.itinerary.name,
						  link: $scope.itineraryUrl,
						  picture: $scope.appRoot + '/images/uploaded-new/' + $scope.itinerary.imageOpt.id,
						  description: 'My trip plans to ' + $scope.cityObj.name
						},
						function(response) {
						  if (response && response.post_id) {
							 setIsShared('');
							 fireEvent("Itinerary share", "facebook ok");
						  } else {
							  fireEvent("Itinerary share", "facebook cancel");
						  }
						}
						);
				
		}
	
		
	}]);
	
});	
define(
    'ngApp/website/itinerary/mapSiteOverlay',["jquery.qtip.min"],
    function(qTip) {
    	
    	MapSiteOverlay.prototype = new google.maps.OverlayView();
    	
        function MapSiteOverlay(mapMgr, itrSite, imgSize, divContainerId, noEvents, siteRoot, number,disableRouting) {
        	this._mapMgr = mapMgr;
            this.map = this._mapMgr._map;
            this.itrSite = itrSite;
        	this.imgSize = 30;
        	if (itrSite.isAttractionContainer()) {
        		this.imgSize = 60;
        	}
        	this.noEvents = noEvents;
        	this.siteRoot = siteRoot;
        	this.number = number;
        	this.disableRouting = disableRouting;
        	
        	this.divContainerId = divContainerId;
        	this.mapWidth = $("#" + divContainerId).width();
        	this.mapHeight = $("#" + divContainerId).height();
            
            this.div = null;
            this.infoDiv = null;
            this.marker = null;
            
            this.infoWindowWidth = 300;
            this.infoWindowHeight = 95;
            
            this.previousDivBorder = null;

            // Explicitly call setMap on this overlay
            this.setMap(this.map);  
            
            this.textBoxHeight = 25;
            this.textBoxRelativeRect = null;
            this.textBoxShown = true;
            
            this.overlayLoaded = new $.Deferred();
            
            this.mapOffset = null;
        	
            return( this );
        }
        
        MapSiteOverlay.prototype.repositionText = function(overlayArr, hideIfCantFindPosition, doRedraw) {
        	if (doRedraw) {
        		//in case of drag, the draw is not beeing executed and the map bounds are not beeing claculated
        		this.draw();
        	}

        	var positionOptions = this.getAllPositionOptions();
        	var textBox = this.div.find("[name=divSiteName]");
        	var textBoxArrow = this.div.find("[name=divSiteNameArrow]");
        	
        	var textBoxWidth = textBox.width();
        	var textBoxPositionLeftTop = this.div.position();  
        	var selectedPosition = positionOptions[0];
        	var curItrSiteName = this.itrSite.getName();
        	var relativeRect = null;
        	var isIntersect = false;
        	var debugFunc = false;
        	var mapRect = {
        		left: this.mapOffset.x,
        		top: this.mapOffset.y,
        		right: this.mapOffset.x + this.mapWidth,
        		bottom: this.mapOffset.y +  this.mapHeight       			
        	}
        	
        	var mapActionsAreaRect = {
        		left: this.mapOffset.x,
        		top: this.mapOffset.y,
        		right: this.mapOffset.x + 500,
        		bottom: this.mapOffset.y + 50
            };
        	
        	debugFunc ? console.log("mapOffset", this.mapWidth, this.mapHeight, this.mapOffset) : null;
        	
        	for (var j=0;j<positionOptions.length;j++) {
        		var currentPosition = positionOptions[j];
        		isIntersect = false;
        		
        		relativeRect = {
        			top: textBoxPositionLeftTop.top  + currentPosition.top - 2,
        			left: textBoxPositionLeftTop.left + currentPosition.left - 2,
        			bottom: textBoxPositionLeftTop.top + currentPosition.top + this.textBoxHeight + 2,
        			right: textBoxPositionLeftTop.left + currentPosition.left + textBoxWidth + 2
        		}
        		
        		// continue if out of map bounds
    			if (! this.fullIntersectRect(mapRect, relativeRect) ) {
    				debugFunc ? console.log(curItrSiteName, currentPosition.name, "not intersect mapRect", mapRect, relativeRect) : null;
    				isIntersect = true;
    				continue;
    			}
        		
        		// continue if on actions button
    			if (this.intersectRect(relativeRect, mapActionsAreaRect, 0, 5) ) {
    				debugFunc ? console.log(curItrSiteName, currentPosition.name, "intersect mapActionsAreaRect") : null;
    				isIntersect = true;
    				continue;
    			}
        		
        		for (var i=0;i<overlayArr.length;i++) {
        			var curOverlay = overlayArr[i];
        			var curOverlayName = curOverlay.itrSite.getName();
        			
        			if (curOverlay.itrSite._clientUniqueId == this.itrSite._clientUniqueId) {
        				continue;
        			}
        			
        			if (curOverlay.itrSite.isVisitRestaurant()) {
        				continue;
        			}
        			
        			// check intersect with overlay rectangle	
        			if (this.intersectRect(relativeRect, curOverlay.getCurrentRect(), 5, 5 ) ) {
        				debugFunc ? console.log(curItrSiteName, currentPosition.name, "intersect overlay image " + curOverlay.itrSite.getName()) : null;        				
        				isIntersect = true;
        				break;
        			}
        			
        			// check intersect with text box
        			if (curOverlay.textBoxShown && curOverlay.textBoxRelativeRect != null && 
        					this.intersectRect(relativeRect, curOverlay.textBoxRelativeRect, 5, 5) ) {
        				debugFunc ? console.log(curItrSiteName, currentPosition.name, "intersect overlay text " + curOverlay.itrSite.getName()) : null;
        				isIntersect = true;
        				break;
        			}
        		}
        		
        		if (! isIntersect) {
        			selectedPosition = currentPosition;
        			break;
        		}
        	}        	
        	
        	// check if we stayed at default position due to intersect all, keep the current rect
        	if (isIntersect) {
        		//console.log(curItrSiteName, "could not find position ");
        		
        		relativeRect = {
        			top: textBoxPositionLeftTop.top + selectedPosition.top - 2,
        			left: textBoxPositionLeftTop.left + selectedPosition.left - 2,
        			bottom: textBoxPositionLeftTop.top + selectedPosition.top + this.textBoxHeight + 2,
        			right: textBoxPositionLeftTop.left + selectedPosition.left + textBoxWidth + 2
            	}
        	}
        	else {
        		debugFunc ? console.log(curItrSiteName, "found position " + selectedPosition.name) : null;
        	}
        	
        	// store relative position
        	this.textBoxRelativeRect = relativeRect;
        	
        	// set textbox position and padding
        	var paddingLeft = selectedPosition.name == "posRight" ? "5px" : "0px";
        	
        	this.textBoxShown = ! (hideIfCantFindPosition && isIntersect);
        	if (hideIfCantFindPosition) {
        		if (this.textBoxShown) {
        			textBox.css("visibility", "");
        			textBox.css("padding-left", paddingLeft);
        			
            		textBox.animate({
            			"top": selectedPosition.top,
            			"left": selectedPosition.left
            		}, 500);
        		}
        		else {
        			textBox.css("visibility", "hidden");
        		}
        	} 
        	
        	// set arrow         	
        	if (selectedPosition.arrowTop) {
        		textBoxArrow
        		.css("top", selectedPosition.arrowTop)
        		.css("bottom", "");
        	}
        	if (selectedPosition.arrowBottom) {
        		textBoxArrow
        		.css("bottom", selectedPosition.arrowBottom)
        		.css("top", "");
        	}
        	if (selectedPosition.arrowLeft) {
        		textBoxArrow
        		.css("left", selectedPosition.arrowLeft)
        		.css("right", "");
        	}
        	if (selectedPosition.arrowRight) {
        		textBoxArrow
        		.css("right", selectedPosition.arrowRight)
        		.css("left", "");
        	}
        }
        
        MapSiteOverlay.prototype.intersectRect = function(r1, r2, gracex, gracey) {
        	gracex = gracex == null ? 0 : gracex;
        	gracey = gracey == null ? 0 : gracey;
        	
        	return !
        		(
        			( (r2.left - r1.right ) > (gracex * -1) ) || 
        			( (r2.right - r1.left) < gracex ) ||        				
        			( (r2.top - r1.bottom ) > (gracey * -1) ) ||
        			( (r1.top - r2.bottom ) > (gracey * -1) )
        		);
        }
        
        MapSiteOverlay.prototype.fullIntersectRect = function(r1, r2) {
        	var gracex = 10;
        	var gracey = 10;
        	
        	var b1 = ( (r2.left - r1.left ) > (gracex * -1) );
        	var b2 = ( (r1.right - r2.right) > (gracex * -1) );
        	var b3 = ( (r2.top - r1.top ) > (gracey * -1) );
        	var b4 = ( (r1.bottom - r2.bottom ) > (gracey * -1) )
        	var res = b1 && b2 && b3 && b4;
        	
        	return res;
        }
        
        MapSiteOverlay.prototype.getAllPositionOptions = function() {
        	//var divPositionLeftTop = this.div.position();
        	var textWidth = this.div.find("[name=divSiteName]")[0].scrollWidth;
        	var textHeight = this.textBoxHeight;
        	var allPositions = [];
        	
        	// top left
        	allPositions.push({
        		name: "topleft",
        		left: (0 - textWidth + 10),
        		top: (0 - textHeight + 10),
        		arrowBottom: '0px',
        		arrowRight: '0px'
        	}); 
        	
        	// top center
        	allPositions.push({
        		name: "posTopCenter",
            	left: (0 +  (this.imgSize/2) - (textWidth / 2)),
            	top: (0 - textHeight),
            	arrowBottom: '0px',
        		arrowLeft: '50%'
        	}); 
        	
        	// top right
        	allPositions.push({
        		name: "posTopRight",
            	left: (0 + this.imgSize - 12),
            	top: (0 - textHeight + 9),
            	arrowBottom: '0px',
        		arrowLeft: '0px'
        	});
        	
        	// right
        	allPositions.push({
        		name: "posRight",
            	left: (0 + this.imgSize),
            	top: (0 +  (this.imgSize/2) - (textHeight / 2)),
            	arrowTop: '50%',
        		arrowLeft: '0px'
        	});        	
        	
        	// bottom right
        	allPositions.push({
        		name: "posBottomRight",        			
            	left: (0 + this.imgSize - 10),
            	top: (0 + this.imgSize - 10),
            	arrowTop: '0px',
        		arrowLeft: '0px'            	
        	});
        	
        	// bottom center
        	allPositions.push({
        		name: "posBottomCenter",
            	left: (0 +  (this.imgSize/2) - (textWidth / 2)),
            	top: (0 + this.imgSize),
            	arrowTop: '0px',
        		arrowLeft: '50%'
        	}); 
        	
        	// bottom left
        	allPositions.push({
        		name: "posBottomLeft",
        		left: (0 - textWidth + 10),
        		top: (0 + this.imgSize - 10),
        		arrowTop: '0px',
        		arrowRight: '0px'
        	}); 
        	
        	// left
        	allPositions.push({
        		name: "posLeft",
        		left: (0 - textWidth),
            	top: (0 +  (this.imgSize/2) - (textHeight / 2)),
            	arrowTop: '50%',
            	arrowRight: '0px'      	
        	}); 
        	
        	//console.log(allPositions);
        	return allPositions;
        }
        
        MapSiteOverlay.prototype.getCurrentRect = function() {
        	var rect = null;
        	try {
        		var positionLeftTop = this.div.position();        	
            	rect = {
            		left: positionLeftTop.left,
            		top: positionLeftTop.top,
            		right: (positionLeftTop.left + this.imgSize),
            		bottom: (positionLeftTop.top + this.imgSize)
            	}
        	} catch (e) {
        		console.log("Failed to get position " + e);
        	}
        	
        	
        	//console.log(this.itrSite.getName(), rect);
        	return rect;
        }
        
        MapSiteOverlay.prototype.onAdd = function() {
        	var _self = this;
        	
        	// create site img div  
        	var imageSrc = this.itrSite.getImagePath();
        	var borderColor = this.itrSite.isAttractionContainer() ? "white" : "rgba(255, 255, 255, 0)";
        	var numberRightPosition  = this.itrSite.isAttractionContainer() ? "2" : "-14";
        	var cursor = "cursor:pointer"; 	          	
        	var name = this.itrSite.getName();
        	var myPlaceClass = "visit_place_overlay";
        	if (this.itrSite.isVisitRestaurant()) {
        		myPlaceClass = " visit_restaurant_overlay"; 
        	}
        	var classMyPlace = this.itrSite.isPersonalActivity() || this.itrSite.isRestaurant() ? "itin-map-site-wrapper-my-place" : "";
        	var visibility = this.itrSite.isVisitRestaurant() && !$("#show_rests_checkbox").is(":checked") ? "visibility:hidden" : "";
        	var restClass = ""; 
        	var zIndex = "z-index:auto";
        	if (this.itrSite.isVisitRestaurant()) {
        		restClass += " itinerary_map_name_wrapper_rest itin-map-site-wrapper-my-place-visit-rest"; 
        		zIndex = "z-index:-1";
        	}
        		
        	var hourText = "&nbsp;";
        	if (!_self.disableRouting) {
	    		if (readCookie("us_timeformat") == "true") {
	    			hourText += timeFormatter(this.itrSite.visitHour._d);
	    		} else if (this.itrSite.hourText != null) {
	    			hourText += this.itrSite.hourText;
	    		}
        	}
        	
            var html = "";			
        	html += "<div class='itin-map-site-wrapper " + classMyPlace + "' id='divMapImg_" + this.itrSite.id + "' itrSiteNo='" + this.itrSite.noInTrip + "'  " + 
        		"' style='"+zIndex+";width:" + this.imgSize + "px;height:" + this.imgSize + "px;" +  visibility + ";position: absolute;" + cursor + "'>";
        	if (imageSrc != null) {
        		html += "	<img site-id='"+this.itrSite.id+"' id='imgMapImg_" + this.itrSite.id + "' src='" + imageSrc + "' class='img-circle itin-site-img zoom'></img>";
        	} else {
        		html += " <div id='imgMapImg_" + this.itrSite.id + "' class='zoom "+myPlaceClass+"' style='height:25px;width:25px;border-radius:50% !important;margin:5px;'><i style='font-size: 14px;padding:4px;' class='material-icons " + this.itrSite.getDesignIconClass() + "'>" + this.itrSite.getDesignIconCode() + ";</i></div>";
        	}
        	
    		var width = "15px";
    		
    		if (this.itrSite.noTitle != null && this.itrSite.noTitle.length > 1) {
    			width = (6 * this.itrSite.noTitle.length) + "px";
    		}
    		
    		var displayError = "none";
    		if (this.itrSite.openHoursError != null) {
    			displayError = "inline";
    		}
    		
    		html += "<div site-id='"+this.itrSite.id+"'  class='itinerary_map_name_wrapper " + restClass + "' id='divSiteNameWrapper_"+this.itrSite.id+"' name='divSiteName'>";
    		
    		html += "<div name='divSiteNameArrow' class='divSiteNameArrow'></div>";
    		
    		html += "	<div id='divSiteNameText_"+this.itrSite.id+"' name='divSiteNameText' style='white-space:nowrap;border-radius:10px'>" + 
    			"<i id='siteHourViolation_"+this.itrSite.id+"'  class='fal fa-minus-circle itinerary-open-hours-violation' style='padding:0px 2px 0px 2px;display:"+displayError+"'></i>" + 
    			hourText + " " + this.itrSite.getName() + "</div>"; 
    		
    		html += "</div>";

        	html += "</div>";
        	
        	var $newDiv = $(html);
        	this.div = $newDiv;
        	$newDiv.appendTo($("body"));
        	
        	var divSiteNameText = $newDiv.find("[name=divSiteNameText]");
        	var textWidth = divSiteNameText[0].scrollWidth;
        	divSiteNameText.parent().css("width", (textWidth + 10) + "px");        	
        	
        	var panes = this.getPanes();			
        	
        	// create info div
        	panes.overlayMouseTarget.appendChild($newDiv[0]);
        	
        	// in no events is set that means that this overlay is tmp. mainly to highlight existing overlay
        	if (this.noEvents) {
        		return;
        	}
        	
        	$("#imgMapImg_" + this.itrSite.id).hover(
					function () {
						$("#itin-drawer-"+$(this).attr("site-id")).addClass("itinerary-drawer-hover-map");
						$("#divSiteNameWrapper_"+$(this).attr("site-id")).addClass("itin_action_icon_selected");
						if (!isTablet()) {
							$("#divDrawerActionIcon_"+$(this).attr("site-id")).addClass("drawer-icon-mouseover");
						}
						
						
					},
					function () {
						$("#itin-drawer-"+$(this).attr("site-id")).removeClass("itinerary-drawer-hover-map");
						$("#divSiteNameWrapper_"+$(this).attr("site-id")).removeClass("itin_action_icon_selected");
						if (!isTablet()) {
							$("#divDrawerActionIcon_"+$(this).attr("site-id")).removeClass("drawer-icon-mouseover");
						}
					}
			);
        	
        	$("#divSiteNameWrapper_" + this.itrSite.id).hover(
					function () {
						$("#imgMapImg_"+$(this).attr("site-id")).addClass("zoomed");
						$(this).addClass("itin_action_icon_selected");
					},
					function () {
						$("#imgMapImg_"+$(this).attr("site-id")).removeClass("zoomed");
						$(this).removeClass("itin_action_icon_selected");
					}
			);
        	
        	// trigger events
        /*	$newDiv.hover(
					function () {
						$( "body" ).trigger( "mapsitehoverin", [_self.itrSite.noInTrip] );						
					},
					function () {
						$( "body" ).trigger( "mapsitehoverout", [_self.itrSite.noInTrip] );
					}
			);*/
        	
        	// tips
        	_self.addContextTip($newDiv);
        	
        	/*$newDiv.click(function() {
        		$newDiv.qtip('api').show();
        	});    */   	
      	
        	
        	// highlight
        	/*$( "body" ).on( "sitehoverin", function( event, itrSiteNo, color, isEffect ) {
        		if (itrSiteNo != null && parseFloat(itrSiteNo) == parseFloat(_self.itrSite.noInTrip)) {
 		
        			if ( _self.newOverlay == null) {
        				 _self.newOverlay = new MapSiteOverlay(_self._mapMgr, _self.itrSite, _self.imgSize, _self.divContainerId, true, _self.siteRoot, _self.number);
        				 
        				 _self.highlightInterval = window.setInterval(function() {
            				if (_self.newOverlay.div != null) {            				
            					_self.div.hide();
            					_self.newOverlay.highlightSite(color, isEffect);	
            				}
    	        		}, 100);
        			}
        		}
        	});
        	
        	$( "body" ).on( "sitehoverout", function( event, itrSiteNo ) {
        		if (itrSiteNo != null && parseFloat(itrSiteNo) == parseFloat(_self.itrSite.noInTrip)) {
        			if (_self.highlightInterval) {
        				clearInterval(_self.highlightInterval);
        			}
        			
        			if ( _self.newOverlay != null) {
        				if (_self.newOverlay.div != null) {
        					_self.newOverlay.div.remove();
        				}
        				
        				_self.newOverlay.setMap(null);
        				_self.newOverlay = null;
        			}
        			
        			_self.div.show();
        		}
        	});  */
        	
        	
        	
          };  
          
          function timeFormatter(date){
        	 // var date = new Date(dateTime);
        	  if (date.getHours()>=12){
        	      var hour = parseInt(date.getHours()) - 12;
        	      var amPm = "pm";
        	      if (hour == 0) {
        	    	  hour = 12;
        	      }
        	  } else {
        	      var hour = date.getHours(); 
        	      var amPm = "am";
        	  }
        	  var min = date.getMinutes();
        	  if (min < 10) {
        		  min = "0" + min;
        	  }
        	 
        	  var time = hour + ":" + min + amPm;
        	  return time;
        }
          
          MapSiteOverlay.prototype.addContextTip = function(curDiv) {
        	  var _self = this;
        	 //$(curDiv).attr("itr-site-qtip",_self.itrSite);
        	 //$(curDiv ).hover(function() {
        		 //trigger angular event to generate qtip
        		 
        	  //});
        	  	//connect the qtip to the map image
        	  	//allow a short delay so map is loaded without interuption
       			setTimeout( function() {
       				var $body = angular.element(document.body);
       				var $rootScope = $body.scope().$root;
          			$rootScope.$broadcast("mapsitehoverin-ng",[curDiv,_self.itrSite.id]);
       			}, 200 );
       			
       			
          }
          
            
         
          MapSiteOverlay.prototype.draw = function() {
        	    var overlayProjection = this.getProjection();
        	    var latLng = this.itrSite.getLatLng();        	    
        	    var centerPoint = overlayProjection.fromLatLngToDivPixel(latLng);
        	    var northEastPoint = overlayProjection.fromLatLngToDivPixel(this.map.getBounds().getNorthEast());
        	    
        	    // calc map offset
        	    this.mapOffset = {
        	    	y: northEastPoint.y,
        	    	x: (northEastPoint.x - this.mapWidth)
        	    };
        	    
        	    // place image div
        	    var $div = this.div;
        	    $div.css("left", (centerPoint.x - this.imgSize/2) + 'px');
        	    $div.css("top", (centerPoint.y- this.imgSize/2) + 'px');        	    
 
        	    //console.log(this.itrSite.getName(), centerPoint, this.mapOffset);
        	    
        	    this.overlayLoaded.resolve();
          };
          
          MapSiteOverlay.prototype.removePx = function(val) {
        	  val = val.replace("px", "");
        	  return parseInt(val);
          }
          
          MapSiteOverlay.prototype.highlightSite = function(color, isEffect) {
        	  var _self = this;
        	  
        	 color = color != null ? color : "rgb(23,63,214)";
        	 // color = "rgb(23,63,214)";
        	  
        	  if (isEffect) {        		  
        		  if (this._blinkInterval == null) {
        			  var curColor = "white";
        			  var overallTime = 0;
        			  
            		  this._blinkInterval = setInterval(function(){
            			  curColor = curColor == "white" ? color : "white";            			  
            			 _self.div.animate({"border-color": curColor}, "fast");
            			 overallTime += 1000;
            			 
            			 // remove
            			 if (overallTime > 8000) {
            				 clearInterval(_self._blinkInterval);
            			 }
            		  }
            		  ,1000);
        		  }
        		  //this.div.effect("shake", {distance: 5}, 3000);  
        	  }
        	  else {
        		  this.div.css("border", "3px solid " + color);  
        	  }
        	  
          };
          
          MapSiteOverlay.prototype.unhighlightSite = function() {
        	  this.div.css("border", "3px solid white");
          }; 

          MapSiteOverlay.prototype.onRemove = function() {
        	  var _self = this;
        	  
        	  if (_self.div.qtip('api')) {
        		  _self.div.qtip('api').destroy();
        	  }     
        	  
        	  if (_self._blinkInterval != null) {
        		  clearInterval(_self._blinkInterval);
        	  }
        	  
        	  if (_self.highlightInterval) {
				clearInterval(_self.highlightInterval);
        	  }        	  
			
        	  if ( _self.newOverlay != null) {
				if (_self.newOverlay.div != null) {
					_self.newOverlay.div.remove();
				}
				
				_self.newOverlay.setMap(null);
				_self.newOverlay = null;
        	  }			
			  
        	  this.div.remove();
          };
 
        return(MapSiteOverlay);
    }    

);

define(
    'ngApp/website/itinerary/mapMgr',["app/mobile/core/mapLoader",
     "ngApp/website/map/mapMgr"],
    function(MapLoader,GlobalMapLoader) {
 
        function MapMgr(){ 
        	this._map = null;
        	this._overlayArr =null;
        	this._directionsDisplayAr = [];
        	this._mapLoadedDeffered = new $.Deferred();
        	this._mapIdle = new $.Deferred();
        	this._overlaysBounds = null;
        	this._overlayForLatLng = null;
        	this._ignoreFirstZoomEvent = null;
        	this._restArr = null;
        	this._restOverlayArr = [];
        	this._mapDivContainerId = null;
        	this._restMarkersArr = [];
        	
        	//this._showHotelOnMap = localStorage.getItem("showHotelOnMap") != null ? (localStorage.getItem("showHotelOnMap") == "1") : true;
        	this._showHotelOnMap = wrapGetLocalStorage("showHotelOnMap") != null ? (wrapGetLocalStorage("showHotelOnMap") == "1") : true;
        	
            return( this );
        }
        
        MapMgr.prototype.setGoogleMapsLoaded = function() {
        	var _self = this;
        	
			require(["ngApp/website/itinerary/mapSiteOverlay"],
				    function(MapSiteOverlay){
						_self._mapLoadedDeffered.resolve();
				    }
			);	        
        }
        
        MapMgr.prototype.getGoogleMapsLoaded = function() {
        	return this._mapLoadedDeffered;
        }

        MapMgr.prototype.initializeMapFromItrSites = function(mapDivContainerId,siteArr,restArr,siteForEmptyMap,disableRouting) {
        	var _self = this;
        	
        	_self._restArr = restArr;
        	_self._mapDivContainerId = mapDivContainerId;
        		
        	MapLoader.getInstance().load().done(function() {
        	//this._mapLoadedDeffered.done(function() {
        		if (_self._map == null) {
        			var bounds = new google.maps.LatLngBounds();
        			// init map
                  	var mapOptions = {
                  	  center : bounds.getCenter(),
                      zoom: 14,
                      mapTypeId: google.maps.MapTypeId.ROADMAP,
                      scrollwheel: false,
                      panControl: false,
                      streetViewControl: false,
                      mapTypeControlOptions: {
                          mapTypeIds: []
                      },
                      zoomControlOptions: {
                          position: google.maps.ControlPosition.LEFT_BOTTOM 
                      },               
                      draggable: true
                      //draggable: (! isTablet())
                    };			
        			_self._map = GlobalMapLoader.getInstance().initMapObject(mapOptions,false);
        		
	    			var el1 = google.maps.event.addListener(_self._map, 'zoom_changed', function() { 
	                 	//if (! _self._ignoreFirstZoomEvent) {
	                 		setTimeout(function() {
	                 			_self.handleSiteOverlayTextPosition();	
	                 			_self.drawRestaurants();
	                 		}, 1000);                		
	                 	//}
	             		
	             		_self._ignoreFirstZoomEvent = false;
	                 });
	    			 GlobalMapLoader.getInstance().addEventListener(el1);
	                 
	    			 var el2 = google.maps.event.addListener(_self._map, 'dragend', function() { 
	                 	//if (! _self._ignoreFirstZoomEvent) {
	                 		setTimeout(function() {
	                 			_self.handleSiteOverlayTextPosition(true);
	                 			_self.drawRestaurants();
	                 		}, 1000);                		
	                 	//}
	             		
	             		//_self._ignoreFirstZoomEvent = false;
	                 });
	                 GlobalMapLoader.getInstance().addEventListener(el2);
	                 
	                 var el3 = google.maps.event.addListenerOnce(_self._map, 'idle', function() {
	                 	_self.createUtilityOverlay();
	                 });
	                 GlobalMapLoader.getInstance().addEventListener(el3);
        		}
        		 
        		_self.initializeMapFromItrSitesReady(mapDivContainerId,siteArr,restArr,siteForEmptyMap,disableRouting);
        		google.maps.event.trigger(_self._map, "resize");
        		/*setTimeout( function() {
          			google.maps.event.trigger(_self._map, 'resize'); 
    			}, 500 );*/
        	});
        }
        
        MapMgr.prototype.initializeMapFromItrSitesReady = function(mapDivContainerId,siteArr,restArr,siteForEmptyMap,disableRouting) {
        	var _self = this;
        	var bounds = new google.maps.LatLngBounds();
        	//var isFirstMapUsage = false;
        	
        	// ignore first zoom event because setting the textbox position will be taken care of by the overlay creation part.
        	this._ignoreFirstZoomEvent = true;
        	
        	// clone and remove last hotel element if its there
        	siteArr = siteArr.clone();
       	
        	if (siteArr.length > 0 && siteArr[0].getType() == "hotel" && ! this.isShowHotelOnMap()) {
        		siteArr.shift();
        	}
        	
        	// remove last element if that's an hotel (only if there are other sites on that day)
        	if (siteArr.length > 1 && siteArr[0].getType() == "hotel" &&  siteArr[siteArr.length -1].getType() == "hotel") {
        		siteArr.pop();
        	}
        	
        	if (siteArr == null || siteArr.length == 0) {
        		this.initEmptyMap(mapDivContainerId, siteForEmptyMap);
        		return;
        	}        	
        	
        	var idx = 1;
        	for (var i=0;i<siteArr.length;i++) {
        		// for later use directions display
        		if (siteArr[i].getType() != "hotel") {
        			siteArr[i].noIdx = (idx++);	
        		}
        		else {
        			siteArr[i].noIdx = -1;
        		}
        		
        		bounds.extend(siteArr[i].getLatLng());
        	}	 

        	
        	
            
          	/*if (this._map == null) {
          		isFirstMapUsage = true;
          		this._map = new google.maps.Map($("#" + mapDivContainerId).get(0), mapOptions);	
          		this._map.setOptions({styles: this.getMapStyleOptions()});
                
                google.maps.event.addListener(this._map, 'zoom_changed', function() { 
                	//if (! _self._ignoreFirstZoomEvent) {
                		setTimeout(function() {
                			_self.handleSiteOverlayTextPosition();	
                			_self.drawRestaurants();
                		}, 1000);                		
                	//}
            		
            		_self._ignoreFirstZoomEvent = false;
                }); 
                google.maps.event.addListener(this._map, 'dragend', function() { 
                	//if (! _self._ignoreFirstZoomEvent) {
                		setTimeout(function() {
                			_self.handleSiteOverlayTextPosition(true);
                			_self.drawRestaurants();
                		}, 1000);                		
                	//}
            		
            		//_self._ignoreFirstZoomEvent = false;
                });
                
                google.maps.event.addListenerOnce(this._map, 'idle', function() {
                	_self.createUtilityOverlay();
                });
          	}*/

          	// show route
          	this.clearDirections();
          	
          	if (!disableRouting) {
          	
	          	if (siteArr.length > 7) {
	          		this.addWayPoints(siteArr, 0, 7);
	          		this.addWayPoints(siteArr, 7, siteArr.length-1);
	          	}
	          	else {
	          		if (siteArr.length > 1) {
	          			this.addWayPoints(siteArr, 0, siteArr.length-1);	
	          		}          			
	          	}
          	}
          
          

          	//for 1 site, set zoom manually otherwise zoom is too large
          	if (siteArr.length <= 1) {
          		this._map.setZoom(13); 
          	}
          		
          	// group personal activities per attractions
          	var attractionsAr = [];
          	var personalActAr = [];
          	
            for (var i=0;i<siteArr.length;i++) {
            	if (siteArr[i].isAttractionContainer() ) {
            		attractionsAr.push(siteArr[i]);
            	}
            	else {
            		personalActAr.push(siteArr[i]);
            	}
            }
            
            for (var i=0;i<siteArr.length;i++) {
            	var noTitleArr = [siteArr[i].noIdx];
            	var commonLocationWithAttraction = false;
            	
            	for (var j=0;j<siteArr.length;j++) {
            		if (i != j && siteArr[i].getLatLng().lat() == siteArr[j].getLatLng().lat() && siteArr[i].getLatLng().lng() == siteArr[j].getLatLng().lng()) {            			
            			noTitleArr.push(siteArr[j].noIdx);
            			
            			if (siteArr[j].isAttractionContainer()) {
            				commonLocationWithAttraction = true;
            			}
            		}
            	}
            	
            	// clean title if it's personal activity which has common location with attraction
            	if (! siteArr[i].isAttractionContainer() && commonLocationWithAttraction) {
            		siteArr[i].noTitle = "";
            	}
            	else {
                	// create title
                	noTitleArr.sort();
                	siteArr[i].noTitle = noTitleArr.join(", ");  
                	
                	// don't show hotel number
                	if (siteArr[i].noTitle == "-1") {
                		siteArr[i].noTitle = "";
                	}
            	}           	

            }
          	
          	// sort array so northeast elements will be drawn first
            attractionsAr.sort(function(a, b)	{ 	
          		// northeast elements will be drawn first
          		return (a.getLatLng().lat() > b.getLatLng().lat() ? -1 : 1);	  	  	
          	});
          	
            // clear overlays
            this.clearOverlays();
            
          	// add attraction overlays so it will be on front of personal activities
			require(["ngApp/website/itinerary/mapSiteOverlay"],
				    function(MapSiteOverlay){
						_self.drawRestaurants();
						
						
			            // first add personal activities so it will be behind attractions
			            for (var i=0;i<personalActAr.length;i++) {
			            	var overlay = new MapSiteOverlay(_self, personalActAr[i], 25, 
			            			mapDivContainerId, false, appRoot, personalActAr[i].noIdx, disableRouting);
			            	
			            	_self._overlayArr.push(overlay); 
			            }				
				
			            // add attractions
			            for (var i=0;i<attractionsAr.length;i++) {
			            	var overlay = new MapSiteOverlay(_self, attractionsAr[i], 25, 
			            			mapDivContainerId, false, appRoot, attractionsAr[i].noIdx);
			            	
			            	_self._overlayArr.push(overlay); 
			            }
			            
			            _self._mapIdle.then(function() {
			            	// if we have at least 3 items see if we can get better zoom
			            	// fit bounds
			              	_self._map.fitBounds(bounds);
			              	_self._overlaysBounds = bounds;
			              	_self._map.setCenter(bounds.getCenter());
			              	setTimeout(function() {
			              		if (siteArr.length > 2) {
				                	if (! _self.handleMapFitToBounds(mapDivContainerId) ) {
				                		_self.handleSiteOverlayTextPosition();	
				                	} 			            				            		
				            	}
				            	else {
				            		_self.handleSiteOverlayTextPosition();
				            	}
	                 		}, 800);   
			            	
			            });
				    }
			);	
        };	
        
        MapMgr.prototype.getMapStyleOptions = function() {
          	//Remove google places
          	var noPoi = [{
			    featureType: "road",
			    elementType: "all",
			    stylers: [
			              { visibility: 'simplifed', weight:0 }
			            ]
			},{
				featureType: "poi",
				elementType: 'labels.text',
			    stylers: [
			              { visibility: 'off' }
			            ]
			},{
				featureType: "poi",
				elementType: 'labels.icon',
			    stylers: [
			              { visibility: 'off' }
			            ]
			},{
				featureType: "transit",
				elementType: "labels.text",
			    stylers: [
			              { visibility: 'off' }
			            ]
			}, {
          	    "featureType": "water",
          	    "stylers": [
          	      { "saturation": 48 },
          	      { "hue": "#00ff4d" },
          	      { "lightness": 26 },
          	      { "gamma": 0.85 },
          	      { "color": "#3fb3de" }
          	    ]
          	  },{
          	    "featureType": "road.highway",
          	    "elementType": "geometry",
          	    "stylers": [
          	      { "color": "#BBBBBB" },
          	      { "weight": 0.4 }
          	    ]
          	  },{
          	    "featureType": "road",
          	    "elementType": "labels.icon",
          	    "stylers": [
          	            { "hue": "#fff700" },
          	            { "lightness": 37 },
          	            { "saturation": -26 },
          	            { "visibility": "simplified" }
          	     ]
          	  }];
         	
          	return noPoi;
        }
        
        MapMgr.prototype.createUtilityOverlay = function() {
        	var _self = this;
        	
        	// create overlay for lat lng calc and resolve
        	if (this._overlayForLatLng == null) {
            	var overlayForLatLng = new google.maps.OverlayView();
            	
            	overlayForLatLng.loadedDefered = new $.Deferred();
            	overlayForLatLng.draw = function() {
            		_self._mapIdle.resolve();
            	};
            	
            	overlayForLatLng.setMap(_self._map);        	
            	this._overlayForLatLng = overlayForLatLng;        		
        	}
        }
        
      
        
        MapMgr.prototype.handleMapFitToBounds = function(mapDivContainerId) {
        	var _self = this;
        	if (this._map == null) {
        		return false;
        	}
        	var mapBounds = this._map.getBounds();
        	var overlayBounds = this._overlaysBounds;
        	var mapNorthEastInPixels = _self.getLatLngToPix(mapBounds.getNorthEast());
        	if (mapNorthEastInPixels == null) {
        		return false;
        	}
        	var overlaysNorthEastInPixels = _self.getLatLngToPix(overlayBounds.getNorthEast());
        	var mapContainer = $("#" + mapDivContainerId);
        	var divWidthAllowedDiff = mapContainer.width() * 0.3;
        	var divHeightAllowedDiff = mapContainer.height() * 0.25;
        	var diffXRight = mapNorthEastInPixels.x - overlaysNorthEastInPixels.x;
        	var diffYRight = overlaysNorthEastInPixels.y - mapNorthEastInPixels.y;
        	
        	//console.log(divWidthAllowedDiff, divHeightAllowedDiff, diffXRight, diffYRight, overlaysNorthEastInPixels.y, mapNorthEastInPixels.y);
        	
        	if (diffXRight > divWidthAllowedDiff && diffYRight > divHeightAllowedDiff) {
        		var zoom = _self._map.getZoom();
        		_self._map.setZoom(zoom + 1);
        		
        		return true;
        	}
        	
        	return false;
        }
        
        MapMgr.prototype.handleSiteOverlayTextPosition = function(doRedraw) {
        	
        	var _self = this;
        	var arrDefered = [];
        	
        	_self.createUtilityOverlay();
        	
            for (var i=0;i<this._overlayArr.length;i++) { 	
            	arrDefered.push(this._overlayArr[i].overlayLoaded);
            }
        	
        	$.when.apply($, arrDefered).done(function() {
            	// zero textBoxRelativeRect
                for (var i=0;i<_self._overlayArr.length;i++) { 	
                	_self._overlayArr[i].textBoxRelativeRect = null;
                }         	

            	// draw text with respect to images only
                for (var i=0;i<_self._overlayArr.length;i++) { 	
                	_self._overlayArr[i].repositionText(_self._overlayArr);
                }
                
                // final, hide texts that still intersect. give priority to more important places
                var overlaysAr = _self._overlayArr;
                overlaysAr.sort(function(a, b)	{
                	// give priority to first site in day                	
                	if (a.itrSite.idx == 1) {
                		return -1;
                	}
                	
                	if (b.itrSite.idx == 1) {
                		return 1;
                	}
                	
                	if (a.itrSite.idx == null) {
                		return 1;
                	}
                	
                	if (b.itrSite.idx == null) {
                		return 1;
                	}
                	
                	var aNoPerUsers = a.itrSite.site != null && a.itrSite.site.noPerUsers != null ? a.itrSite.site.noPerUsers : 0;
                	var bNoPerUsers = b.itrSite.site != null && b.itrSite.site.noPerUsers != null ? b.itrSite.site.noPerUsers : 0;
              		return (aNoPerUsers - bNoPerUsers);	  	  	
              	});

  
                for (var i=0;i<_self._overlayArr.length;i++) { 	
                	_self._overlayArr[i].textBoxShown = false;
                }                

            	// draw text with respect to images and existing textboxes
                for (var i=0;i<_self._overlayArr.length;i++) { 	
                	_self._overlayArr[i].repositionText(_self._overlayArr, true, doRedraw);
                }
        	});
            
        }
        
        /**
         * Draw restaurants
         */
        MapMgr.prototype.drawRestaurants = function() {
        	
        	var iconImage = imagesCdn + "/icons/rest-icon.png" 
        	var _self = this;
        	if (_self.isShowRests()) {
        		_self.clearRestOverlays();
		        for (var i=0;i<_self._restArr.length;i++) {
		        	if (_self.isInBounds(_self._restArr[i])) {
			        	var latLng = {lat: _self._restArr[i].latitude, lng: _self._restArr[i].longitude};
			        	this._marker = new google.maps.Marker({
			                position: latLng,
			                map: _self._map,
			                icon: {
			                	url: iconImage
			                },
			                id: _self._restArr[i].id
			              });
			        	_self._restMarkersArr.push(this._marker);
		        		var marker = this._marker;
		        		var curDiv = $("#divMapImg_" + marker.id);
		        		if (curDiv.length == 0)	{
		        			var pixel = _self._overlayForLatLng.getProjection().fromLatLngToContainerPixel(marker.getPosition());
		        			var divMap = document.getElementById("divMap");
		        			curDiv = document.createElement("div");
		        			curDiv.setAttribute("style",'position:absolute;top:'+(pixel.y-24)+'px;left:'+(pixel.x-15)+'px;width:30px;height:30px;z-index:22');
		        			curDiv.setAttribute("id","divMapImg_" + marker.id);
		        			curDiv.setAttribute("class","itin-map-rest-wrapper mouse_hover");
		        			divMap.appendChild(curDiv);
		        	    	var $body = angular.element(document.body);
			       			var $rootScope = $body.scope().$root;
			          		$rootScope.$broadcast("mapsitehoverin-ng",[curDiv,marker.id]);
		        		} else {
		        			var pixel = _self._overlayForLatLng.getProjection().fromLatLngToContainerPixel(marker.getPosition());
		        			curDiv.css("top",(pixel.y-24)+"px").css("left",(pixel.x-15)+"px").css("display","block");
		        		}
		        	}
		        }
        	}
        	
        	
        }
        
        /**
         * Clear restaurants
         */
        MapMgr.prototype.clearRestOverlays = function() {
        	var _self = this;
        	for (var i=0;i<_self._restMarkersArr.length;i++) {
        		_self._restMarkersArr[i].setMap(null);
        		$("#divMapImg_" + _self._restMarkersArr[i].id).css("display","none");
        	}
        	
            this._restMarkersArr = [];
        }
        
        MapMgr.prototype.getLatLngToPix = function(pos) {
        	var p = null;
        	var overlay = this._overlayForLatLng;
        	if (overlay == null) {
        		return p;
        	}
        	var proj = overlay.getProjection();
        	if (proj != null) {
        		p = proj.fromLatLngToContainerPixel(pos);
        	}
        	return p;
        }
        
        MapMgr.prototype.clearOverlays = function() {
            if (this._overlayArr != null) {
                for (var i=0;i<this._overlayArr.length;i++) {
                	this._overlayArr[i].setMap(null);
                	this._overlayArr[i].itrSite = {noInTrip : -1};
                	this._overlayArr[i] = null;
                }    
                
                this._overlayArr = null;
            } 	
            
            this._overlayArr = [];
        }
        
        MapMgr.prototype.initEmptyMap = function(mapDivContainerId, siteForEmptyMap) {
         	var mapOptions = {
         			center: new google.maps.LatLng(siteForEmptyMap.latitude, siteForEmptyMap.longitude),
                    zoom: 12,
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    scrollwheel: false,
                    draggable: true,
                    fullscreenControl: false
                    //draggable: (! isTablet())
                  };
                  
        	//if (this._map == null) {
        		//this._map = new google.maps.Map($("#" + mapDivContainerId).get(0), mapOptions);
        		//this._map.setOptions({styles: this.getMapStyleOptions()mapOptions);
        		this._map = GlobalMapLoader.getInstance().initMapObject(mapOptions,false);
        	//}      

        	this.clearOverlays();
        	this.clearDirections();
        }
        
        MapMgr.prototype.addWayPoints = function (siteArr, fromIdx, toIdx) {
	      	var directionsService = new google.maps.DirectionsService();
      	  
	      	var lineSymbol = {
	      		  path: google.maps.SymbolPath.CIRCLE,
	      		  scale: 2,
	      		  strokeColor: '#00b3fd',
	      		  fillColor:'#00b3fd',
	      		  fillOpacity:1.0 
	      	 };
      	   
	      	var polylineOptionsActual = {	    
      		    icons: [{
      		        icon: lineSymbol,
      		        repeat: '10px'
      		     }],
      		    strokeWeight:0
	      	};  
	      	
	      	// avoid putting special line on safari. causing safari to crash 
	      	if (navigator.userAgent.indexOf('Mac OS X') != -1) {
	      		polylineOptionsActual = null;
	      	} 
      		
	      	var rendererOptions = {
      			polylineOptions: polylineOptionsActual,
      			suppressMarkers:true,
      			preserveViewport:true
	      	};
	      	
	      	var directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
	      	this._directionsDisplayAr.push(directionsDisplay);
	      	directionsDisplay.setMap(this._map);
      	  
	      	var start = siteArr[fromIdx].getLatLng();
	      	var end = siteArr[toIdx].getLatLng();
	      	var waypts = [];
      	  
	      	for (var i=(fromIdx + 1);i<(toIdx);i++) {
	      		waypts.push({
	      			location:  siteArr[i].getLatLng(),
      	            stopover:true}
	      		);	          	  		  
	      	}
      	  
	      	var request = {
	      			origin: start,
	      			destination: end,
	      			waypoints: waypts,
	      			optimizeWaypoints: false,
	      			travelMode: google.maps.TravelMode.WALKING
	      	};
      	  
	      	directionsService.route(request, function(response, status) {
	      		if (status == google.maps.DirectionsStatus.OK) {
	      			directionsDisplay.setDirections(response);
	      			var distanceMeters = response.routes[0].legs[0].distance.value;
	      			var duration = response.routes[0].legs[0].duration.value;
	      		}
	      	});
      	};  
      	
      	MapMgr.prototype.clearDirections = function() {
          	for (var i=0;i<this._directionsDisplayAr.length;i++) {
          		this._directionsDisplayAr[i].setMap(null);
          		this._directionsDisplayAr[i] = null;
          	}
          	this._directionsDisplayAr = [];
      	}
      	
      	MapMgr.prototype.isShowHotelOnMap = function() {
      		return this._showHotelOnMap;
      	};
      	
      	MapMgr.prototype.isShowRests = function() {
      		return $("#show_rests_checkbox").is(":checked")
      	};
      
      	
      	MapMgr.prototype.changeShowHotelOnMap =  function(isShow) {
      		this._showHotelOnMap = isShow;      		
      	};
      	
      	MapMgr.prototype.destroyMap =  function(isShow) {
      		this._map = null;
      		this._overlayForLatLng = null;
      		this._mapIdle = new $.Deferred();
      	};
      	
      	MapMgr.prototype.isInBounds =  function(site) {
      		if (this._map != null && this._map.getBounds() != null) {
      			return this._map.getBounds().contains(site.getLatLng());
      		}
      	}
        
        var instance = new MapMgr();
        
        MapMgr.getInstance = function() {
        	return instance;
        }; 
        
        MapMgr.newInstance = function() {
        	instance = new MapMgr();
        	return instance;
        }; 
 
        return(MapMgr);
    }

);

define('ngApp/website/itinerary-share/itineraryShareCenterController',[ "app/core/login",
        "ngApp/website/main/main",
        "app/extensions/core/paidActivityRedirect",
        "app/core/mapServices",
        "ngApp/website/itinerary/mapMgr",
        "app/mobile/core/mapLoader",
        "app/itinerary/itineraryDataMgr",
        "app/itinerary/userItineraryDao",
        "keepinview"],
    function(LoginMgr,main,PaidActivityRedirect,MapServices,MapMgr,MapLoader,ItineraryDataMgr,UserItineraryDao,Sortable) {
	var app = angular.module('visitacity');
	
	
	app.filter('filterUserDisplayName', function() {
		  return function(user) {
			  var result = "";
			  if (user != null) {
				  if (user.name != null && user.name.length > 0) {
					  result = user.name;
				  } else if ((user.firstName != null && user.firstName.length > 0) || (user.lastName != null && user.lastName.length > 0)) {
					  result = user.firstName + " " + user.lastName;
				  } else if (user.email != null){
					  result = user.email;
				  }
			  }
			  return result;
		  }
	});
	
	app.filter('handleCr', function() {
		  return function(txt) {
			 return txt.replace(/(?:\r\n|\r|\n)/g, '<br />');
		  }
	});
	
	
	app.controller('itineraryShareCenterController',['$scope','$rootScope','$http','$q','$filter','$routeParams','$timeout','GlobalDefs','activitiesService','$location','blockUI',
	                                       function($scope,$rootScope,$http,$q,$filter,$routeParams,$timeout,GlobalDefs,activitiesService,$location,blockUI) {
		
		if ($location.url().indexOf("share-center") >=0) {
			blockUI.start("Preparing Share Center...");
		}
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.messages = new Array();
		$scope.loginMgr = null;
		$scope.uniqueUsers = new Array();
		$scope.newMessage = "";
		$scope.loc = encodeURIComponent($location.url());
		$scope.requireName = false;
		$scope.submitted = false;
		$scope.submittedReply = false;
		
		
		require(["app/core/login"], function(LoginMgr) {
			$scope.loginMgr = LoginMgr.getInstance();
			$scope.curUsr = LoginMgr.getInstance().getLoggedInUserObject();
			var usrDisplay = $filter('filterUserDisplayName')($scope.curUsr);
			if (usrDisplay.length == 0) {
				$scope.requireName = true;
			} 
		});
		
		
	
		var callUrl = appRoot + '/api/itinerary-share?id=' + $routeParams.id + "&rnd="+new Date().getTime();
		if ($routeParams.srcEmail) {
			callUrl += "&srcEmail=" + $routeParams.srcEmail;
		}
		var callA = $http.get(callUrl);
		var callsArr = new Array(callA);
		if ($scope.itinerary == null) {
			//get itinerary if we don't have it
			callB = $http.get(appRoot + '/api/itineraries-user?id=' + $routeParams.id + "&rnd="+new Date().getTime());
			callsArr.push(callB);
		}
		
		$q.all(callsArr).then(
	   			 function(results) {
	   				$scope.msgLength = 0;
	   				$scope.messages = results[0].data.msgList;
	   				if ($scope.itinerary == null) {
	   					$scope.itinerary = results[1].data.itinerary;
	   				}
	   				//Get the count of unique users that commented
	   				for (var i=0;i<$scope.messages.length;i++) {
	   					$scope.msgLength += 1;
	   					$scope.msgLength += $scope.messages[i].childMsgs.length;
	   					$scope.uniqueUsers.push($scope.messages[i].user);
	   				}
	   				$scope.uniqueUsers = $filter('unique')($scope.uniqueUsers,"id");

	   				var bc = [{
   						name: $scope.itinerary.name,
   						url:  $scope.appRoot + "/itineraries-user?id=" + $scope.itinerary.clientUniqueItrId + "&day=1"
   	   				},{
   						name: "Share Center"
   	   				}];
	   				
	   				
	   				if ($location.url().indexOf("share-center") >=0) {
	   					//update breadcrumb only on share center page
	   					$rootScope.$broadcast("update_breadcrumb",bc);
	   				}
	   				$rootScope.$broadcast("update_main_header_width","itineraryShare");
	   				blockUI.reset();
	   			 }, function(errors) {
	   			 
	   			 }
	   	);
		
		$scope.addComment = function(msgId) {
			
			var messageObj = new Object();
			messageObj.itineraryId = $routeParams.id;
			messageObj.message = $scope.newMessage;
			var tmpName = $scope.userTmpName;
			
			if (msgId != null) {
				fireEvent("Itinerary share center", "reply message");
				$scope.submittedReply = true;
				messageObj.message = $('#reply_' + msgId).val();
				tmpName = $('#tmpName_' + msgId).val();
				messageObj.childOf = msgId;
			} else {
				$scope.submitted = true;
				fireEvent("Itinerary share center", "send message");
			}
			
			if ($scope.requireName) {
				$scope.loginMgr.setDisplayName(tmpName).then(
			   			 function(results) {
			   				doPostMsg(messageObj)
			   				$scope.requireName = false;
			   				
			   			 }
			   	);
				
			} else {
				doPostMsg(messageObj);
			}
			
		}
		
		
		function doPostMsg(messageObj) {
			$scope.msgLength++;
			var msgSubject = "A new comment was provided for \"" + $scope.itinerary.name + "\"";
			var msgBody = "Hi, <br/><br/>" + "A new comment was provided<br/><br/>" + "\"" + messageObj.message + "\"<br/><br/>" + "See all comments here: " + appRoot + "/itinerary/share-center?id=" + $routeParams.id;
			msgBody += "<br/><br/>Visit A City";
			var unsubscribeLink = appRoot + "/itinerary/share-center-unsubscribe?id=" + $routeParams.id;
			$http.post(appRoot + '/ws/addItineraryComment', {
						msgObj: angular.toJson(messageObj),
						itineraryId: $routeParams.id,
						msgSubject: msgSubject,
						msgBody: msgBody,
						unsubscribeLink: unsubscribeLink}).
				  success(function(data, status, headers, config) {
					  $scope.messages = data.msgList;
					  $scope.newMessage = "";	
					  $scope.submitted = false;
					  $scope.submittedReply = false;
				  }).
				  error(function(data, status, headers, config) {
					  console.log('sent fail');  
					  $scope.submitted = false;
					  $scope.submittedReply = false;
				  });
		}
		
		$scope.openReply = function(id) {
			var h = $scope.requireName ? "190px" : "170px";
			$( "#replyDiv_" + id ).animate({
				opacity: "1",
			    height: h
			  },500);
			$( "#replyClick_" + id ).css("display","none");
		}
		
		
		$scope.isDisabled = function(msgId) {
			if($scope.submittedReply) {
				return true;
			}
			if ($scope.requireName && $('#tmpName_' + msgId).val() == 0 ) {
				return true;
			}
			return $( "#reply_" + msgId ).val().length > 0 ? false : true;
		}
	
		
	}]);
	
});	
define(
    'ngApp/website/itinerary-regional/mapSiteOverlay',["jquery.qtip.min", "app/core/mapServices"],
    function(qTip,MapServices) {
    	
    	MapSiteOverlay.prototype = new google.maps.OverlayView();
    	
        function MapSiteOverlay(mapMgr, itrSite, imgSize, divContainerId, noEvents, siteRoot, number,disableRouting) {
        	this._mapMgr = mapMgr;
            this.map = this._mapMgr._map;
            this.itrSite = itrSite;
       		this.imgSize = 15;
        	this.noEvents = noEvents;
        	this.siteRoot = siteRoot;
        	this.number = number;
        	this.disableRouting = disableRouting;
        	
        	this.divContainerId = divContainerId;
        	this.mapWidth = $("#" + divContainerId).width();
        	this.mapHeight = $("#" + divContainerId).height();
            
            this.div = null;
            this.infoDiv = null;
            this.marker = null;
            
            this.infoWindowWidth = 300;
            this.infoWindowHeight = 95;
            
            this.previousDivBorder = null;

            // Explicitly call setMap on this overlay
            this.setMap(this.map);  
            
            this.textBoxHeight = 25;
            this.textBoxRelativeRect = null;
            this.textBoxShown = true;
            
            this.overlayLoaded = new $.Deferred();
            
            this.mapOffset = null;
        	
            return( this );
        }
        
        MapSiteOverlay.prototype.repositionText = function(overlayArr, hideIfCantFindPosition, doRedraw) {
        	if (doRedraw) {
        		//in case of drag, the draw is not beeing executed and the map bounds are not beeing claculated
        		this.draw();
        	}

        	var positionOptions = this.getAllPositionOptions();
        	var textBox = this.div.find("[name=divSiteName]");
        	var textBoxArrow = this.div.find("[name=divSiteNameArrow]");
        	
        	var textBoxWidth = textBox.width();
        	var textBoxPositionLeftTop = this.div.position();  
        	var selectedPosition = positionOptions[0];
        	var curItrSiteName = this.itrSite.name;
        	var relativeRect = null;
        	var isIntersect = false;
        	var debugFunc = false;
        	var mapRect = {
        		left: this.mapOffset.x,
        		top: this.mapOffset.y,
        		right: this.mapOffset.x + this.mapWidth,
        		bottom: this.mapOffset.y +  this.mapHeight       			
        	}
        	
        	var mapActionsAreaRect = {
        		left: this.mapOffset.x,
        		top: this.mapOffset.y,
        		right: this.mapOffset.x + 500,
        		bottom: this.mapOffset.y + 50
            };
        	
        	debugFunc ? console.log("mapOffset", this.mapWidth, this.mapHeight, this.mapOffset) : null;
        	
        	for (var j=0;j<positionOptions.length;j++) {
        		var currentPosition = positionOptions[j];
        		isIntersect = false;
        		
        		relativeRect = {
        			top: textBoxPositionLeftTop.top  + currentPosition.top - 2,
        			left: textBoxPositionLeftTop.left + currentPosition.left - 2,
        			bottom: textBoxPositionLeftTop.top + currentPosition.top + this.textBoxHeight + 2,
        			right: textBoxPositionLeftTop.left + currentPosition.left + textBoxWidth + 2
        		}
        		
        		// continue if out of map bounds
    			if (! this.fullIntersectRect(mapRect, relativeRect) ) {
    				debugFunc ? console.log(curItrSiteName, currentPosition.name, "not intersect mapRect", mapRect, relativeRect) : null;
    				isIntersect = true;
    				continue;
    			}
        		
        		// continue if on actions button
    			if (this.intersectRect(relativeRect, mapActionsAreaRect, 0, 5) ) {
    				debugFunc ? console.log(curItrSiteName, currentPosition.name, "intersect mapActionsAreaRect") : null;
    				isIntersect = true;
    				continue;
    			}
        		
        		for (var i=0;i<overlayArr.length;i++) {
        			var curOverlay = overlayArr[i];
        			var curOverlayName = curOverlay.itrSite.name;
        			
        			if (curOverlay.itrSite._clientUniqueId == this.itrSite._clientUniqueId) {
        				continue;
        			}
        			
        			if (curOverlay.itrSite.isVisitRestaurant()) {
        				continue;
        			}
        			
        			// check intersect with overlay rectangle	
        			if (this.intersectRect(relativeRect, curOverlay.getCurrentRect(), 5, 5 ) ) {
        				debugFunc ? console.log(curItrSiteName, currentPosition.name, "intersect overlay image " + curOverlay.itrSite.getName()) : null;        				
        				isIntersect = true;
        				break;
        			}
        			
        			// check intersect with text box
        			if (curOverlay.textBoxShown && curOverlay.textBoxRelativeRect != null && 
        					this.intersectRect(relativeRect, curOverlay.textBoxRelativeRect, 5, 5) ) {
        				debugFunc ? console.log(curItrSiteName, currentPosition.name, "intersect overlay text " + curOverlay.itrSite.getName()) : null;
        				isIntersect = true;
        				break;
        			}
        		}
        		
        		if (! isIntersect) {
        			selectedPosition = currentPosition;
        			break;
        		}
        	}        	
        	
        	// check if we stayed at default position due to intersect all, keep the current rect
        	if (isIntersect) {
        		//console.log(curItrSiteName, "could not find position ");
        		
        		relativeRect = {
        			top: textBoxPositionLeftTop.top + selectedPosition.top - 2,
        			left: textBoxPositionLeftTop.left + selectedPosition.left - 2,
        			bottom: textBoxPositionLeftTop.top + selectedPosition.top + this.textBoxHeight + 2,
        			right: textBoxPositionLeftTop.left + selectedPosition.left + textBoxWidth + 2
            	}
        	}
        	else {
        		debugFunc ? console.log(curItrSiteName, "found position " + selectedPosition.name) : null;
        	}
        	
        	// store relative position
        	this.textBoxRelativeRect = relativeRect;
        	
        	// set textbox position and padding
        	var paddingLeft = selectedPosition.name == "posRight" ? "5px" : "0px";
        	
        	this.textBoxShown = ! (hideIfCantFindPosition && isIntersect);
        	if (hideIfCantFindPosition) {
        		if (this.textBoxShown) {
        			textBox.css("visibility", "");
        			textBox.css("padding-left", paddingLeft);
        			
            		textBox.animate({
            			"top": selectedPosition.top,
            			"left": selectedPosition.left
            		}, 500);
        		}
        		else {
        			textBox.css("visibility", "hidden");
        		}
        	} 
        	
        	// set arrow         	
        	if (selectedPosition.arrowTop) {
        		textBoxArrow
        		.css("top", selectedPosition.arrowTop)
        		.css("bottom", "");
        	}
        	if (selectedPosition.arrowBottom) {
        		textBoxArrow
        		.css("bottom", selectedPosition.arrowBottom)
        		.css("top", "");
        	}
        	if (selectedPosition.arrowLeft) {
        		textBoxArrow
        		.css("left", selectedPosition.arrowLeft)
        		.css("right", "");
        	}
        	if (selectedPosition.arrowRight) {
        		textBoxArrow
        		.css("right", selectedPosition.arrowRight)
        		.css("left", "");
        	}
        }
        
        MapSiteOverlay.prototype.intersectRect = function(r1, r2, gracex, gracey) {
        	gracex = gracex == null ? 0 : gracex;
        	gracey = gracey == null ? 0 : gracey;
        	
        	return !
        		(
        			( (r2.left - r1.right ) > (gracex * -1) ) || 
        			( (r2.right - r1.left) < gracex ) ||        				
        			( (r2.top - r1.bottom ) > (gracey * -1) ) ||
        			( (r1.top - r2.bottom ) > (gracey * -1) )
        		);
        }
        
        MapSiteOverlay.prototype.fullIntersectRect = function(r1, r2) {
        	var gracex = 10;
        	var gracey = 10;
        	
        	var b1 = ( (r2.left - r1.left ) > (gracex * -1) );
        	var b2 = ( (r1.right - r2.right) > (gracex * -1) );
        	var b3 = ( (r2.top - r1.top ) > (gracey * -1) );
        	var b4 = ( (r1.bottom - r2.bottom ) > (gracey * -1) )
        	var res = b1 && b2 && b3 && b4;
        	
        	return res;
        }
        
        MapSiteOverlay.prototype.getAllPositionOptions = function() {
        	//var divPositionLeftTop = this.div.position();
        	var textWidth = this.div.find("[name=divSiteName]")[0].scrollWidth;
        	var textHeight = this.textBoxHeight;
        	var allPositions = [];
        	
        	// top left
        	allPositions.push({
        		name: "topleft",
        		left: (0 - textWidth + 10),
        		top: (0 - textHeight + 10),
        		arrowBottom: '0px',
        		arrowRight: '0px'
        	}); 
        	
        	// top center
        	allPositions.push({
        		name: "posTopCenter",
            	left: (0 +  (this.imgSize/2) - (textWidth / 2)),
            	top: (0 - textHeight),
            	arrowBottom: '0px',
        		arrowLeft: '50%'
        	}); 
        	
        	// top right
        	allPositions.push({
        		name: "posTopRight",
            	left: (0 + this.imgSize - 12),
            	top: (0 - textHeight + 9),
            	arrowBottom: '0px',
        		arrowLeft: '0px'
        	});
        	
        	// right
        	allPositions.push({
        		name: "posRight",
            	left: (0 + this.imgSize),
            	top: (0 +  (this.imgSize/2) - (textHeight / 2)),
            	arrowTop: '50%',
        		arrowLeft: '0px'
        	});        	
        	
        	// bottom right
        	allPositions.push({
        		name: "posBottomRight",        			
            	left: (0 + this.imgSize - 10),
            	top: (0 + this.imgSize - 10),
            	arrowTop: '0px',
        		arrowLeft: '0px'            	
        	});
        	
        	// bottom center
        	allPositions.push({
        		name: "posBottomCenter",
            	left: (0 +  (this.imgSize/2) - (textWidth / 2)),
            	top: (0 + this.imgSize),
            	arrowTop: '0px',
        		arrowLeft: '50%'
        	}); 
        	
        	// bottom left
        	allPositions.push({
        		name: "posBottomLeft",
        		left: (0 - textWidth + 10),
        		top: (0 + this.imgSize - 10),
        		arrowTop: '0px',
        		arrowRight: '0px'
        	}); 
        	
        	// left
        	allPositions.push({
        		name: "posLeft",
        		left: (0 - textWidth),
            	top: (0 +  (this.imgSize/2) - (textHeight / 2)),
            	arrowTop: '50%',
            	arrowRight: '0px'      	
        	}); 
        	
        	//console.log(allPositions);
        	return allPositions;
        }
        
        MapSiteOverlay.prototype.getCurrentRect = function() {
        	var rect = null;
        	try {
        		var positionLeftTop = this.div.position();        	
            	rect = {
            		left: positionLeftTop.left,
            		top: positionLeftTop.top,
            		right: (positionLeftTop.left + this.imgSize),
            		bottom: (positionLeftTop.top + this.imgSize)
            	}
        	} catch (e) {
        		console.log("Failed to get position " + e);
        	}
        	
        	
        	//console.log(this.itrSite.getName(), rect);
        	return rect;
        }
        
        MapSiteOverlay.prototype.onAdd = function() {
        	var _self = this;
        	
        	// create site img div  
        	var imageSrc = this.itrSite.getImagePath();
        	var borderColor = "white";
        	var numberRightPosition  = "2";
        	var cursor = "cursor:pointer"; 	          	
        	var name = this.itrSite.name;
        	var days = " - day";
        	if (this.itrSite.numOfDays > 1) {
        		days += "s";
        	} 
        	days += " " + this.itrSite.startDay;
        	if (this.itrSite.numOfDays > 1) {
        		days += " - " + (this.itrSite.startDay+this.itrSite.numOfDays-1);
        	} 

        	var myPlaceClass = "visit_place_overlay";
        	
        	var visibility = "";
        	var zIndex = "z-index:auto";

        	var html = "";			
        	html += "<div class='itin-map-destination-wrapper " + "' id='divMapImg_" + this.itrSite.id + "' itrSiteNo='" + this.itrSite.noInTrip + "'  " + 
        		"' style='"+zIndex+";width:" + this.imgSize + "px;height:" + this.imgSize + "px;" +  visibility + ";position: absolute;" + cursor + "'>";
        	if (imageSrc != null) {
        		html += "	<img site-id='"+this.itrSite.id+"' id='imgMapImg_" + this.itrSite.id + "' src='" + imageSrc + "' class='img-circle region-itin-site-img zoom'></img>";
        	} else {
        		html += " <div id='imgMapImg_" + this.itrSite.id + "' class='zoom "+myPlaceClass+"' style='height:25px;width:25px;border-radius:50% !important;margin:5px;'><i style='font-size: 14px;padding:4px;' class='material-icons " + this.itrSite.getDesignIconClass() + "'>" + this.itrSite.getDesignIconCode() + ";</i></div>";
        	}
        	
    		var width = "15px";
    		
    		if (this.itrSite.noTitle != null && this.itrSite.noTitle.length > 1) {
    			width = (6 * this.itrSite.noTitle.length) + "px";
    		}
    		
    		var displayError = "none";
    		if (this.itrSite.openHoursError != null) {
    			displayError = "inline";
    		}
    		
    		html += "<div site-id='"+this.itrSite.id+"'  class='itinerary_map_name_wrapper' id='divSiteNameWrapper_"+this.itrSite.id+"' name='divSiteName'>";
    		
    		html += "<div name='divSiteNameArrow' class='divSiteNameArrow'></div>";
    		
    		html += "	<div id='divSiteNameText_"+this.itrSite.id+"' name='divSiteNameText' style='white-space:nowrap;border-radius:10px;padding-left:4px'>"  + this.itrSite.name + days +"</div>"; 
    		
    		html += "</div>";

        	html += "</div>";
        	
        	var $newDiv = $(html);
        	this.div = $newDiv;
        	$newDiv.appendTo($("body"));
        	
        	var divSiteNameText = $newDiv.find("[name=divSiteNameText]");
        	var textWidth = divSiteNameText[0].scrollWidth;
        	divSiteNameText.parent().css("width", (textWidth + 10) + "px");        	
        	
        	var panes = this.getPanes();			
        	
        	// create info div
        	panes.overlayMouseTarget.appendChild($newDiv[0]);
        	
        	// in no events is set that means that this overlay is tmp. mainly to highlight existing overlay
        	if (this.noEvents) {
        		return;
        	}
        	
        	$("#imgMapImg_" + this.itrSite.id).hover(
					function () {
						$("#itin-drawer-"+$(this).attr("site-id")).addClass("itinerary-drawer-hover-map");
						$("#divSiteNameWrapper_"+$(this).attr("site-id")).addClass("itin_action_icon_selected");
						if (!isTablet()) {
							$("#divDrawerActionIcon_"+$(this).attr("site-id")).addClass("drawer-icon-mouseover");
						}
						
						
					},
					function () {
						$("#itin-drawer-"+$(this).attr("site-id")).removeClass("itinerary-drawer-hover-map");
						$("#divSiteNameWrapper_"+$(this).attr("site-id")).removeClass("itin_action_icon_selected");
						if (!isTablet()) {
							$("#divDrawerActionIcon_"+$(this).attr("site-id")).removeClass("drawer-icon-mouseover");
						}
					}
			);
        	
        	$("#divSiteNameWrapper_" + this.itrSite.id).hover(
					function () {
						$("#imgMapImg_"+$(this).attr("site-id")).addClass("zoomed");
						$(this).addClass("itin_action_icon_selected");
					},
					function () {
						$("#imgMapImg_"+$(this).attr("site-id")).removeClass("zoomed");
						$(this).removeClass("itin_action_icon_selected");
					}
			);
        	
        	// trigger events
        /*	$newDiv.hover(
					function () {
						$( "body" ).trigger( "mapsitehoverin", [_self.itrSite.noInTrip] );						
					},
					function () {
						$( "body" ).trigger( "mapsitehoverout", [_self.itrSite.noInTrip] );
					}
			);*/
        	
        	// tips
        	_self.addContextTip($newDiv);
        	
        	/*if (_self.itrSite.city != null) {
        		$newDiv.click(function() {
            		$( "body" ).trigger( "regional_read_more", [_self.itrSite.id] );
            	});      
        	}*/
        	 	
      	
        	
        	// highlight
        	/*$( "body" ).on( "sitehoverin", function( event, itrSiteNo, color, isEffect ) {
        		if (itrSiteNo != null && parseFloat(itrSiteNo) == parseFloat(_self.itrSite.noInTrip)) {
 		
        			if ( _self.newOverlay == null) {
        				 _self.newOverlay = new MapSiteOverlay(_self._mapMgr, _self.itrSite, _self.imgSize, _self.divContainerId, true, _self.siteRoot, _self.number);
        				 
        				 _self.highlightInterval = window.setInterval(function() {
            				if (_self.newOverlay.div != null) {            				
            					_self.div.hide();
            					_self.newOverlay.highlightSite(color, isEffect);	
            				}
    	        		}, 100);
        			}
        		}
        	});
        	
        	$( "body" ).on( "sitehoverout", function( event, itrSiteNo ) {
        		if (itrSiteNo != null && parseFloat(itrSiteNo) == parseFloat(_self.itrSite.noInTrip)) {
        			if (_self.highlightInterval) {
        				clearInterval(_self.highlightInterval);
        			}
        			
        			if ( _self.newOverlay != null) {
        				if (_self.newOverlay.div != null) {
        					_self.newOverlay.div.remove();
        				}
        				
        				_self.newOverlay.setMap(null);
        				_self.newOverlay = null;
        			}
        			
        			_self.div.show();
        		}
        	});  */
        	
        	
        	
          };  
          
          function timeFormatter(date){
        	 // var date = new Date(dateTime);
        	  if (date.getHours()>=12){
        	      var hour = parseInt(date.getHours()) - 12;
        	      var amPm = "pm";
        	      if (hour == 0) {
        	    	  hour = 12;
        	      }
        	  } else {
        	      var hour = date.getHours(); 
        	      var amPm = "am";
        	  }
        	  var min = date.getMinutes();
        	  if (min < 10) {
        		  min = "0" + min;
        	  }
        	 
        	  var time = hour + ":" + min + amPm;
        	  return time;
        }
          
          MapSiteOverlay.prototype.addContextTip = function(curDiv) {
        	  var _self = this;
        	 //$(curDiv).attr("itr-site-qtip",_self.itrSite);
        	 //$(curDiv ).hover(function() {
        		 //trigger angular event to generate qtip
        		 
        	  //});
        	  	//connect the qtip to the map image
        	  	//allow a short delay so map is loaded without interuption
       			setTimeout( function() {
       				var $body = angular.element(document.body);
       				var $rootScope = $body.scope().$root;
          			$rootScope.$broadcast("mapsitehoverin-ng-regional",[curDiv,_self.itrSite.id]);
       			}, 200 );
       			
       			
          }
          
            
         
          MapSiteOverlay.prototype.draw = function() {
        	    var overlayProjection = this.getProjection();
        	    var latLng = MapServices.getLatLng(this.itrSite.latitude,this.itrSite.longitude);        	    
        	    var centerPoint = overlayProjection.fromLatLngToDivPixel(latLng);
        	    var northEastPoint = overlayProjection.fromLatLngToDivPixel(this.map.getBounds().getNorthEast());
        	    
        	    // calc map offset
        	    this.mapOffset = {
        	    	y: northEastPoint.y,
        	    	x: (northEastPoint.x - this.mapWidth)
        	    };
        	    
        	    // place image div
        	    var $div = this.div;
        	    $div.css("left", (centerPoint.x - this.imgSize/2) + 'px');
        	    $div.css("top", (centerPoint.y- this.imgSize/2) + 'px');        	    
 
        	    //console.log(this.itrSite.getName(), centerPoint, this.mapOffset);
        	    
        	    this.overlayLoaded.resolve();
          };
          
          MapSiteOverlay.prototype.removePx = function(val) {
        	  val = val.replace("px", "");
        	  return parseInt(val);
          }
          
          MapSiteOverlay.prototype.highlightSite = function(color, isEffect) {
        	  var _self = this;
        	  
        	 color = color != null ? color : "rgb(23,63,214)";
        	 // color = "rgb(23,63,214)";
        	  
        	  if (isEffect) {        		  
        		  if (this._blinkInterval == null) {
        			  var curColor = "white";
        			  var overallTime = 0;
        			  
            		  this._blinkInterval = setInterval(function(){
            			  curColor = curColor == "white" ? color : "white";            			  
            			 _self.div.animate({"border-color": curColor}, "fast");
            			 overallTime += 1000;
            			 
            			 // remove
            			 if (overallTime > 8000) {
            				 clearInterval(_self._blinkInterval);
            			 }
            		  }
            		  ,1000);
        		  }
        		  //this.div.effect("shake", {distance: 5}, 3000);  
        	  }
        	  else {
        		  this.div.css("border", "3px solid " + color);  
        	  }
        	  
          };
          
          MapSiteOverlay.prototype.unhighlightSite = function() {
        	  this.div.css("border", "3px solid white");
          }; 

          MapSiteOverlay.prototype.onRemove = function() {
        	  var _self = this;
        	  
        	  if (_self.div.qtip('api')) {
        		  _self.div.qtip('api').destroy();
        	  }     
        	  
        	  if (_self._blinkInterval != null) {
        		  clearInterval(_self._blinkInterval);
        	  }
        	  
        	  if (_self.highlightInterval) {
				clearInterval(_self.highlightInterval);
        	  }        	  
			
        	  if ( _self.newOverlay != null) {
				if (_self.newOverlay.div != null) {
					_self.newOverlay.div.remove();
				}
				
				_self.newOverlay.setMap(null);
				_self.newOverlay = null;
        	  }			
			  
        	  this.div.remove();
          };
 
        return(MapSiteOverlay);
    }    

);

define(
    'ngApp/website/itinerary-regional/mapMgr',["app/mobile/core/mapLoader",
     "ngApp/website/map/mapMgr",
     "app/core/mapServices"],
    function(MapLoader,GlobalMapLoader,MapServices) {
 
        function MapMgr(){ 
        	this._map = null;
        	this._overlayArr =null;
        	this._directionsDisplayAr = [];
        	this._mapLoadedDeffered = new $.Deferred();
        	this._mapIdle = new $.Deferred();
        	this._overlaysBounds = null;
        	this._overlayForLatLng = null;
        	this._ignoreFirstZoomEvent = null;
        	this._restArr = null;
        	this._restOverlayArr = [];
        	this._mapDivContainerId = null;
        	this._restMarkersArr = [];
        	this._polylineAr = [];
        	
        	//this._showHotelOnMap = localStorage.getItem("showHotelOnMap") != null ? (localStorage.getItem("showHotelOnMap") == "1") : true;
        	this._showHotelOnMap = wrapGetLocalStorage("showHotelOnMap") != null ? (wrapGetLocalStorage("showHotelOnMap") == "1") : true;
            return( this );
        }
        
        MapMgr.prototype.setGoogleMapsLoaded = function() {
        	var _self = this;
        	
			require(["ngApp/website/itinerary-regional/mapSiteOverlay"],
				    function(MapSiteOverlay){
						_self._mapLoadedDeffered.resolve();
				    }
			);	        
        }
        
        MapMgr.prototype.getGoogleMapsLoaded = function() {
        	return this._mapLoadedDeffered;
        }

        MapMgr.prototype.initializeMapFromItrSites = function(mapDivContainerId,siteArr,siteForEmptyMap,disableRouting) {
        	var _self = this;
        	
        	_self._mapDivContainerId = mapDivContainerId;
        		
        	MapLoader.getInstance().load().done(function() {
        	//this._mapLoadedDeffered.done(function() {
        		if (_self._map == null) {
        			var bounds = new google.maps.LatLngBounds();
        			// init map
                  	var mapOptions = {
                  	  center : bounds.getCenter(),
                      zoom: 14,
                      mapTypeId: google.maps.MapTypeId.ROADMAP,
                      scrollwheel: false,
                      panControl: false,
                      streetViewControl: false,
                      mapTypeControlOptions: {
                          mapTypeIds: []
                      },
                      zoomControlOptions: {
                          position: google.maps.ControlPosition.LEFT_BOTTOM 
                      },               
                      draggable: true
                      //draggable: (! isTablet())
                    };			
        			_self._map = GlobalMapLoader.getInstance().initMapObject(mapOptions,true,true,mapDivContainerId);
                  	//_self._map = gml.initMapObject(mapOptions,false,true,mapDivContainerId);
        		
	    			var el1 = google.maps.event.addListener(_self._map, 'zoom_changed', function() { 
	                 		setTimeout(function() {
	                 			_self.handleSiteOverlayTextPosition();	
	                 		}, 1000);                		
	             		
	                 });
	    			 GlobalMapLoader.getInstance().addEventListener(el1);
	                 
	    			 var el2 = google.maps.event.addListener(_self._map, 'dragend', function() { 
	                 		setTimeout(function() {
	                 			_self.handleSiteOverlayTextPosition(true);
	                 		}, 1000);                		
	                 });
	                 GlobalMapLoader.getInstance().addEventListener(el2);
	                 
	                 var el3 = google.maps.event.addListenerOnce(_self._map, 'idle', function() {
	                	 _self.createUtilityOverlay();
	                	 setTimeout(function() {
	                		 _self._map.setZoom(_self._map.getZoom()+1);
	                 	}, 200);   
	                	 setTimeout(function() {
	                		 _self._map.setZoom(_self._map.getZoom()-1);
	                 	}, 800); 
	                	 
	                 });
	                 GlobalMapLoader.getInstance().addEventListener(el3);
	                 var el4 = google.maps.event.addListenerOnce(_self._map, 'resize', function() {
		                	setTimeout(function() {
		                		var padeft = $("#itinerary-map-wrapper").css("padding-left").replace("px","");
		                		var padLeftInt = parseInt(padeft);
		                		$("#itinerary-map-wrapper").animate({ 
		     					   'padding-left' : (padLeftInt+1) + "px"
		     					}, 200);
		                 	}, 1500);   
		                	
						});
        		}
        		 _self.clearOverlays();
        		_self.initializeMapFromItrSitesReady(mapDivContainerId,siteArr,siteForEmptyMap,disableRouting);
        		google.maps.event.trigger(_self._map, "resize");
        		/*setTimeout( function() {
          			google.maps.event.trigger(_self._map, 'resize'); 
    			}, 500 );*/
        	});
        }
        
        MapMgr.prototype.initializeMapFromItrSitesReady = function(mapDivContainerId,siteArr,siteForEmptyMap,disableRouting) {
        	var _self = this;
        	var bounds = new google.maps.LatLngBounds();
        	//var isFirstMapUsage = false;
        	
        	// ignore first zoom event because setting the textbox position will be taken care of by the overlay creation part.
        	this._ignoreFirstZoomEvent = true;
        	
        	// clone and remove last hotel element if its there
        	siteArr = siteArr.clone();
       	
        	
        	if (siteArr == null || siteArr.length == 0) {
        		this.initEmptyMap(mapDivContainerId, siteForEmptyMap);
        		return;
        	}        	
        	
        	var idx = 1;
        	for (var i=0;i<siteArr.length;i++) {
        		// for later use directions display
        			siteArr[i].noIdx = -1;

        		
        		bounds.extend(MapServices.getLatLng(siteArr[i].latitude,siteArr[i].longitude));
        	}	 

        	
        	
            

          	// show route
          	this.clearDirections();
          	
          	if (!disableRouting) {
          		if (siteArr.length > 1) {
          			var arrays = [], size = 23;
          			var siteArrClone = siteArr.slice(0);
                	//handle arrays with more than the allowed num of waypoints
          			while (siteArrClone.length > 0) {
                	    arrays.push(siteArrClone.splice(0, size));
                	}
                	
                	for (var k=0;k<arrays.length;k++) {
                		var curArr = arrays[k];
              			this.addWayPoints(curArr, 0, curArr.length-1);
                	}
          			
          		}    
          	} else {
          		if (siteArr.length > 1) {
          			this.addSimpleLine(siteArr, 0, siteArr.length-1);	
	          	}
          	}
          
          

          	//for 1 site, set zoom manually otherwise zoom is too large
          	if (siteArr.length <= 1) {
          		this._map.setZoom(13); 
          	}
          		
          	// group personal activities per attractions
          	var attractionsAr = [];
          	var personalActAr = [];
          	
            for (var i=0;i<siteArr.length;i++) {
            	
            		attractionsAr.push(siteArr[i]);
            	
            }
            
          	
          	// sort array so northeast elements will be drawn first
            attractionsAr.sort(function(a, b)	{ 	
          		// northeast elements will be drawn first
          		return (a.longitude > b.longitude ? -1 : 1);	  	  	
          		
          	});
          	
            // clear overlays
            this.clearOverlays();
            
          	// add attraction overlays so it will be on front of personal activities
			require(["ngApp/website/itinerary-regional/mapSiteOverlay"],
				    function(MapSiteOverlay){
						
						
			            // first add personal activities so it will be behind attractions
			            for (var i=0;i<personalActAr.length;i++) {
			            	var overlay = new MapSiteOverlay(_self, personalActAr[i], 25, 
			            			mapDivContainerId, false, appRoot, personalActAr[i].noIdx, disableRouting);
			            	
			            	_self._overlayArr.push(overlay); 
			            }				
				
			            // add attractions
			            for (var i=0;i<attractionsAr.length;i++) {
			            	var overlay = new MapSiteOverlay(_self, attractionsAr[i], 25, 
			            			mapDivContainerId, false, appRoot, attractionsAr[i].noIdx);
			            	
			            	_self._overlayArr.push(overlay); 
			            }
			            
			            _self._mapIdle.then(function() {
			            	// if we have at least 3 items see if we can get better zoom
			            	// fit bounds
			              	_self._map.fitBounds(bounds);
			              	_self._overlaysBounds = bounds;
			              	_self._map.setCenter(bounds.getCenter());
			              	setTimeout(function() {
			              		if (siteArr.length > 2) {
				                	if (! _self.handleMapFitToBounds(mapDivContainerId) ) {
				                		_self.handleSiteOverlayTextPosition();	
				                	} 			            				            		
				            	}
				            	else {
				            		_self.handleSiteOverlayTextPosition();
				            	}
	                 		}, 500);   
			            	
			            });
				    }
			);	
        };	
        
        MapMgr.prototype.getMapStyleOptions = function() {
          	//Remove google places
          	var noPoi = [{
			    featureType: "road",
			    elementType: "all",
			    stylers: [
			              { visibility: 'simplifed', weight:0 }
			            ]
			},{
				featureType: "poi",
				elementType: 'labels.text',
			    stylers: [
			              { visibility: 'off' }
			            ]
			},{
				featureType: "poi",
				elementType: 'labels.icon',
			    stylers: [
			              { visibility: 'off' }
			            ]
			},{
				featureType: "transit",
				elementType: "labels.text",
			    stylers: [
			              { visibility: 'off' }
			            ]
			}, {
          	    "featureType": "water",
          	    "stylers": [
          	      { "saturation": 48 },
          	      { "hue": "#00ff4d" },
          	      { "lightness": 26 },
          	      { "gamma": 0.85 },
          	      { "color": "#3fb3de" }
          	    ]
          	  },{
          	    "featureType": "road.highway",
          	    "elementType": "geometry",
          	    "stylers": [
          	      { "color": "#BBBBBB" },
          	      { "weight": 0.4 }
          	    ]
          	  },{
          	    "featureType": "road",
          	    "elementType": "labels.icon",
          	    "stylers": [
          	            { "hue": "#fff700" },
          	            { "lightness": 37 },
          	            { "saturation": -26 },
          	            { "visibility": "simplified" }
          	     ]
          	  }];
         	
          	return noPoi;
        }
        
        MapMgr.prototype.createUtilityOverlay = function() {
        	var _self = this;
        	
        	// create overlay for lat lng calc and resolve
        	if (this._overlayForLatLng == null) {
            	var overlayForLatLng = new google.maps.OverlayView();
            	
            	overlayForLatLng.loadedDefered = new $.Deferred();
            	overlayForLatLng.draw = function() {
            		_self._mapIdle.resolve();
            	};
            	
            	overlayForLatLng.setMap(_self._map);        	
            	this._overlayForLatLng = overlayForLatLng;        		
        	}
        }
        
      
        
        MapMgr.prototype.handleMapFitToBounds = function(mapDivContainerId) {
        	var _self = this;
        	if (_self._map == null) {
        		return false;
        	}
        	var mapBounds = _self._map.getBounds();
        	var overlayBounds = _self._overlaysBounds;
        	var mapNorthEastInPixels = _self.getLatLngToPix(mapBounds.getNorthEast());
        	if (mapNorthEastInPixels == null) {
        		return false;
        	}
        	var overlaysNorthEastInPixels = _self.getLatLngToPix(overlayBounds.getNorthEast());
        	var mapContainer = $("#" + mapDivContainerId);
        	var divWidthAllowedDiff = mapContainer.width() * 0.3;
        	var divHeightAllowedDiff = mapContainer.height() * 0.25;
        	var diffXRight = mapNorthEastInPixels.x - overlaysNorthEastInPixels.x;
        	var diffYRight = overlaysNorthEastInPixels.y - mapNorthEastInPixels.y;
        	
        	//console.log(divWidthAllowedDiff, divHeightAllowedDiff, diffXRight, diffYRight, overlaysNorthEastInPixels.y, mapNorthEastInPixels.y);
        	
        	if (diffXRight > divWidthAllowedDiff && diffYRight > divHeightAllowedDiff) {
        		var zoom = _self._map.getZoom();
        		_self._map.setZoom(zoom + 1);
        		
        		return true;
        	}
        	
        	return false;
        }
        
        MapMgr.prototype.handleSiteOverlayTextPosition = function(doRedraw) {
        	
        	var _self = this;
        	var arrDefered = [];
        	
        	_self.createUtilityOverlay();
        	
            for (var i=0;i<this._overlayArr.length;i++) { 	
            	arrDefered.push(this._overlayArr[i].overlayLoaded);
            }
        	
        	$.when.apply($, arrDefered).done(function() {
            	// zero textBoxRelativeRect
                for (var i=0;i<_self._overlayArr.length;i++) { 	
                	_self._overlayArr[i].textBoxRelativeRect = null;
                }         	

            	// draw text with respect to images only
                for (var i=0;i<_self._overlayArr.length;i++) { 	
                	_self._overlayArr[i].repositionText(_self._overlayArr);
                }
                
                // final, hide texts that still intersect. give priority to more important places
                var overlaysAr = _self._overlayArr;
                overlaysAr.sort(function(a, b)	{
                	// give priority to first site in day                	
                	if (a.itrSite.idx == 1) {
                		return -1;
                	}
                	
                	if (b.itrSite.idx == 1) {
                		return 1;
                	}
                	
                	if (a.itrSite.idx == null) {
                		return 1;
                	}
                	
                	if (b.itrSite.idx == null) {
                		return 1;
                	}
                	
                	var aNoPerUsers = a.itrSite.site != null && a.itrSite.site.noPerUsers != null ? a.itrSite.site.noPerUsers : 0;
                	var bNoPerUsers = b.itrSite.site != null && b.itrSite.site.noPerUsers != null ? b.itrSite.site.noPerUsers : 0;
              		return (aNoPerUsers - bNoPerUsers);	  	  	
              	});

  
                for (var i=0;i<_self._overlayArr.length;i++) { 	
                	_self._overlayArr[i].textBoxShown = false;
                }                

            	// draw text with respect to images and existing textboxes
                for (var i=0;i<_self._overlayArr.length;i++) { 	
                	_self._overlayArr[i].repositionText(_self._overlayArr, true, doRedraw);
                }
        	});
            
        }
        
        
        MapMgr.prototype.getLatLngToPix = function(pos) {
        	var p = null;
        	var overlay = this._overlayForLatLng;
        	if (overlay == null) {
        		return p;
        	}
        	var proj = overlay.getProjection();
        	if (proj != null) {
        		p = proj.fromLatLngToContainerPixel(pos);
        	}
        	return p;
        }
        
        MapMgr.prototype.clearOverlays = function() {
            if (this._overlayArr != null) {
                for (var i=0;i<this._overlayArr.length;i++) {
                	this._overlayArr[i].setMap(null);
                	this._overlayArr[i].itrSite = {noInTrip : -1};
                	this._overlayArr[i] = null;
                }    
                
                this._overlayArr = null;
            } 	
            
            this._overlayArr = [];
        }
        
        MapMgr.prototype.initEmptyMap = function(mapDivContainerId, siteForEmptyMap) {
         	var mapOptions = {
         			center: new google.maps.LatLng(siteForEmptyMap.latitude, siteForEmptyMap.longitude),
                    zoom: 8,
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    scrollwheel: false,
                    draggable: true
                    //draggable: (! isTablet())
                  };
                  
       		this._map = GlobalMapLoader.getInstance().initMapObject(mapOptions,false,true,mapDivContainerId);
        	this.clearOverlays();
        	this.clearDirections();
        }
        
        MapMgr.prototype.addSimpleLine = function (siteArr,fromIdx,toIdx) {
      		var _self = this;
      		
      		var path = new Array();
	      	for (var i=fromIdx;i<=toIdx;i++) {
	      		path.push(siteArr[i].getLatLng());
	      	}
      		var lineColor = "#00b3fd";
	      	 
	      	var lineSymbol = {
	      		  path: google.maps.SymbolPath.CIRCLE,
	      		  scale: 2,
	      		  strokeColor: lineColor,
	      		  fillColor: lineColor,
	      		  fillOpacity:1.0 
	      	 };
      	   
	      
	      	var renderOpts = null;
	      	
	      	// avoid putting special line on safari. causing safari to crash 
	      	if (navigator.userAgent.indexOf('Mac OS X') != -1) {
	      		renderOpts = {
	      			map: _self._map,
	    	   	    path: path,
	    	   	    strokeColor: lineColor,
	    	   	    strokeWeight: 3
	      		}
	      	} else {
	      		renderOpts = {
	    	      		map: _self._map,
	    	   	      	path: path,
	    	   	      	icons: [{
	    	      	 		icon: lineSymbol,
	    	      	 		repeat: "10px"
	    	      	 	}],
	    	      	 	strokeWeight:0
	      		}
	      	} 
	      	_self._polylineAr.push(new google.maps.Polyline(renderOpts));

      	}
        
        MapMgr.prototype.addWayPoints = function (siteArr, fromIdx, toIdx) {
        	var _self = this;
	      	//var directionsService = new google.maps.DirectionsService();
      	  
	      	var lineSymbol = {
	      		  path: google.maps.SymbolPath.CIRCLE,
	      		  scale: 2,
	      		  strokeColor: '#00b3fd',
	      		  fillColor:'#00b3fd',
	      		  fillOpacity:1.0 
	      	 };
      	   
	      	var polylineOptionsActual = {	    
      		    icons: [{
      		        icon: lineSymbol,
      		        repeat: '10px'
      		     }],
      		    strokeWeight:0
	      	};  
	      	
	      	// avoid putting special line on safari. causing safari to crash 
	      	if (navigator.userAgent.indexOf('Mac OS X') != -1) {
	      		polylineOptionsActual = null;
	      	} 
      		
	      	var rendererOptions = {
      			polylineOptions: polylineOptionsActual,
      			suppressMarkers:true,
      			preserveViewport:true
	      	};
	      	
	      	var directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
	      	this._directionsDisplayAr.push(directionsDisplay);
	      	directionsDisplay.setMap(this._map);
      	  
	      	var start = MapServices.getLatLng(siteArr[fromIdx].latitude,siteArr[fromIdx].longitude);//siteArr[fromIdx].getLatLng();
	      	var end = MapServices.getLatLng(siteArr[toIdx].latitude,siteArr[toIdx].longitude);//siteArr[toIdx].getLatLng();
	      	var waypts = [];
	      	var wayPointsStr = "";
	      	for (var i=(fromIdx + 1);i<(toIdx);i++) {
	      		var location = MapServices.getLatLng(siteArr[i].latitude,siteArr[i].longitude);
	      		waypts.push({
	      			location: location,
      	            stopover:true}
	      		);
	      		if (wayPointsStr.length >0) {
	      			wayPointsStr += "|";
	      		}
	      		wayPointsStr += location.lat() + "," + location.lng();
	      	}
      	  
	      	var request = {
	      			origin: start,
	      			destination: end,
	      			waypoints: waypts,
	      			optimizeWaypoints: false,
	      			travelMode: google.maps.TravelMode.DRIVING
	      	};
      	  
	      	var originStr =  start.lat() + "," + start.lng();
	      	var destinationStr =  end.lat() + "," + end.lng();
      	  
	      	_self.getRouteFromServer(originStr,destinationStr,wayPointsStr,"driving").then(function(results) {
	      		var obj = new Object();
		      	try {
		      		obj = JSON.parse(results);
		      	} catch (ex) {
		      		//console.log(ex);
		      	}
		      	if (obj.status != null && obj.status == "OK") {
		      		obj.request = request;
			      	var tcr = typecastRoutes(obj.routes)
			      	directionsDisplay.setOptions({
			            directions : {
			            	routes : tcr,
			            	request: request
			            },
			            draggable : false,
			            polylineOptions: polylineOptionsActual,
			      		suppressMarkers:true,
			      		preserveViewport:true,
			      		suppressInfoWindows: true,
			      		map : _self._map
			         });
			      	directionsDisplay.setDirections(obj);
		      	} else {
		      		/*directionsService.route(request, function(response, status) {
			      		if (status == google.maps.DirectionsStatus.OK) {
			      			directionsDisplay.setDirections(response);
			      			var distanceMeters = response.routes[0].legs[0].distance.value;
			      			var duration = response.routes[0].legs[0].duration.value;
			      		}
		      		});*/
		      		//log sentry
		      		var status = "empty";
		      		if (obj.status != null) {
		      			status = obj.status;
		      		}
		      		Raven.captureException(new Error('Failed to get directions from server: ' + status), {
		      		  logger: status
		      		});
		      		
		      	}
	      	}); 	
      	};  
      	
      	MapMgr.prototype.getRouteFromServer = function(origin,destination,wayPointsStr,travelMode) {
      		var deffered = new $.Deferred();
      		var url = globExprWeb["google-photos-cloudfront"] + "/api/getRoute?travelMode="+travelMode.toLowerCase()+"&origin="+origin+"&destination=" + destination + "&waypoints=" + wayPointsStr;
      		$.ajax({
    			  url: url,
    			  type: "GET",
    			  cache: true
	     	}).done(function(results) {
	  	      	deffered.resolve(results); 	      		
	  	    }).fail(function() {
	  	    	deffered.resolve("");
	  	    });
      		return deffered;
      	}
      	
      	MapMgr.prototype.clearDirections = function() {
          	for (var i=0;i<this._directionsDisplayAr.length;i++) {
          		this._directionsDisplayAr[i].setMap(null);
          		this._directionsDisplayAr[i] = null;
          	}
          	this._directionsDisplayAr = [];
          	
        	for (var i=0;i<this._polylineAr.length;i++) {
          		this._polylineAr[i].setMap(null);
          		this._polylineAr[i] = null;
          	}
          	this._polylineAr = [];
      	}
      	
      	MapMgr.prototype.isShowHotelOnMap = function() {
      		return this._showHotelOnMap;
      	};
      	
      	MapMgr.prototype.isShowRests = function() {
      		return $("#show_rests_checkbox").is(":checked")
      	};
      
      	
      	MapMgr.prototype.changeShowHotelOnMap =  function(isShow) {
      		this._showHotelOnMap = isShow;      		
      	};
      	
      	MapMgr.prototype.destroyMap =  function(isShow) {
      		this._map = null;
      		this._overlayForLatLng = null;
      		this._mapIdle = new $.Deferred();
      	};
      	
      	MapMgr.prototype.isInBounds =  function(site) {
      		if (this._map != null && this._map.getBounds() != null) {
      			return this._map.getBounds().contains(site.getLatLng());
      		}
      	}
        
        var instance = new MapMgr();
        
        MapMgr.getInstance = function() {
        	return instance;
        }; 
        
        MapMgr.newInstance = function() {
        	instance = new MapMgr();
        	return instance;
        }; 
 
        return(MapMgr);
    }

);

define('ngApp/website/itinerary-regional/regionalController',[ "app/core/login",
        "ngApp/website/main/main",
        "app/extensions/core/paidActivityRedirect",
        "app/core/mapServices",
        "app/mobile/core/mapLoader",
        "app/itinerary/itineraryDataMgr",
        "app/itinerary/userItineraryDao",
        "app/itinerary/itinerarySite",
        "keepinview",
        "ngApp/website/itinerary-regional/mapMgr",
        "ngApp/website/map/mapMgr"],
    function(LoginMgr,main,PaidActivityRedirect,MapServices,MapLoader,ItineraryDataMgr,UserItineraryDao,ItinerarySite,Sortable,MapMgr,GlobalMapMgr) {
	var app = angular.module('visitacity');
	
	 /**
     * Generate qtip context menu for drawer
     */
    app.directive('itrSiteQtipRegional', ['$http','$compile','$templateCache','$filter',function($http,$compile,$templateCache,$filter) {
        return {
        	restrict: 'A',
            link: function(scope, element, attrs) {
            	  scope.curItSite = $filter('filter')(scope.citiesArr,{id:parseInt(attrs.itrSiteQtipRegional)},true)[0];
    	          scope.curSiteIdx = attrs.itrSiteQtipIndex;
    	          scope.getMyIndex = function(id) {
    	        	  //get current site index (to show set start time for first site
    	        	 return $("#divDrawerActionIcon_"+id).attr("itr-site-qtip-index");
  	    		  }	
    	          $http.get(appWebRoot + '/itinerary-regional/modals/site-overlay-menu.html', {cache: $templateCache}).
    	            success(function(content) {
    	              var compiledContent = $compile(content)(scope);

    	              $(element).qtip({
    	                content: compiledContent,
    	                position: {
    	                  my: 'middle left',
    	                  at: 'middle right',
    	                  target: $(element)
    	                },
    	                style: {
    	                	classes: 'qtip-rounded qtip-bootstrap qtip-shadow',
    	                	tip: true
    	                },
    	                hide: {
    	                  fixed : true,
    	                  delay : 200,
    	                  event: 'mouseleave unfocus click'
    	                }, 
    	                show : {
    	                	solo: true,
    	                	delay : 200,
    	                	event: 'mouseover focus click'
    	                }, 
    	                events: {
    	                	show: function(event, api) {
    	                		//if notes was visible, hide it
    	                		/*if (scope.curItSite && $("div[notes-popover-body='" + scope.curItSite.id +"']").parent().parent().parent().attr("is-open") == "isOpen") {
    	                			$("#popoverElem_" + scope.curItSite.id).trigger("click");
    	                		}*/
    	                		fireEvent("Itinerary-Regional", "drawer menu open");
    	                	},
    	                	hide: function(event, api) {
    	                		try {
    	                			$("#imgMapImg_" + scope.curItSite.id).removeClass("zoomed");
        	                		$("#divSiteNameText_" + scope.curItSite.id).removeClass("itin_action_icon_selected");
        	                		$("#divMapImg_" + scope.curItSite.id).removeClass("map-info-icon");
    	                		} catch (ex) {
    	                			//don't fail here
    	                		}
    	                		
    	                	}
    	                }
    	            });

    	          });
            }
        }
    }]);
	

	

	var exisitingMessageShown;

	app.controller('regionalController',['$scope','$rootScope','$http','$q','$filter','$routeParams','$timeout','$uibModal','$templateCache','$compile','GlobalDefs',
	                                     'CityService','activitiesService','$location','blockUI','anchorSmoothScroll','itineraryRegionalService','dataWearhouseService',
	                                     '$window','GlobalDefsNew','redirectPaScv','MyPlansService','itinerarySitesService','scrollKeeper','attractionsService',
	                                     'CurrenciesService','lastModService','GetCitiesService','CitySearch','hotelService','emailConsentService','sharedItineraryService',
	                                       function($scope,$rootScope,$http,$q,$filter,$routeParams,$timeout,$uibModal,$templateCache,$compile,GlobalDefs,
	                                    		   CityService,activitiesService,$location,blockUI,anchorSmoothScroll,itineraryRegionalService,dataWearhouseService,
	                                    		   $window,GlobalDefsNew,redirectPaScv,MyPlansService,itinerarySitesService,scrollKeeper,attractionsService,
	                                    		   CurrenciesService,lastModService,GetCitiesService,CitySearch,hotelService,emailConsentService,sharedItineraryService) {
		
		var to1,to2,to3,to4,to5,to6,to7,to8,to9,to10,to11,to12,to13,to14,
			to15,to16,to17,to18,to19,to20,to21,to22,to23,to24,to25;
		
		
		$scope.$on('$destroy', function(){
			myPlansWatch();
			modalInstanceWatch();
			locationWatch();
			$( "body" ).unbind( "user_itinerary_post_save");
			$( "body" ).unbind( "user_itinerary_post_save_failed");
			$( "body" ).unbind( "mapCreate");
			$( "body" ).unbind( "handleOpeningHoursTip");
			$( "body" ).unbind( "regional_read_more");
			
			window.angular.element($window).off('scroll');
			MapMgr.getInstance().clearDirections();
			GlobalMapMgr.getInstance().hideMap();
			MapMgr.getInstance().clearOverlays();
			MapMgr.getInstance().destroyMap();
			GlobalMapMgr.getInstance().clearEventListeners();
			$('.qtip').each(function(){
				$(this).data('qtip').destroy();
			})
		});
		
		$( "body" ).on( "mapCreate", function() {
			 $("#divMapParent").css("border","none");
			 $("#divMapParent").css("margin-bottom","0px");
			 $("#divMapParent").css("height","100%");
		});
		
		blockUI.start("Loading Itinerary...");
		var retainedScroll = scrollKeeper.getScroll($location.path());
		$scope.timeFormat = getTimeFormat();
	
		require(["app/core/login"], function(LoginMgr) {
			$scope.loginMgr = LoginMgr;
			$scope.loginMgr = $scope.loginMgr.getInstance();
			if ($scope.loginMgr != null) {
    			$scope.loginMgr.getLoggedInUserObject().then(function(data) {
   				 $scope.emailAddress = data != null && data.email != null ? data.email : null;
          	 });
    		}
		});
		
		UserItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
			MyPlansService.setMyPlans(userItineraries);
		});
		
		emailConsentService.consentRequired().then(function(data) {
			$scope.requireEmailConsent = data;
		});
		$scope.citySearch = CitySearch;;
		$scope.paPassLabel = "itinerary tips pass";
		//$scope.itineraryLoading = true;
		var reportScrollToDetails = true;
		$scope.isMobile = isTablet();
		$scope.redirectPaSvc = redirectPaScv;
		$scope.searchRunning = true;
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.appRootSecure = $scope.appRoot.replace("http:","https:"); 
		var itinId = $routeParams.id;
		//$scope.selectedDay = $location.search().day;
		var selectedDay = $location.search().day;
		if ($routeParams.itineraryName != null) {
			var name = $routeParams.itineraryName;
			var dayIdx = name.lastIndexOf("-day-");
			itinId = name.substring(0, dayIdx);
			if ($location.search().day == null) {
				//$scope.selectedDay = name.substring(dayIdx + 5, name.length);
				selectedDay = name.substring(dayIdx + 5, name.length);
			} 
			
			//itinId = $routeParams.itineraryName.split("-day-")[0];
			//$scope.selectedDay = $routeParams.itineraryName.split("-day-")[1];
		}
		if ($routeParams.userItineraryId) {
			itinId = $routeParams.userItineraryId;
		}
		$scope.itinerary = null;
		$scope.cityObj = null;
		$scope.curItinerarySites = new Array();
		$scope.paPass = null;
		$scope.allAttractions = new Array();
		
		$scope.daysArr = new Array();
		$scope.userItinArr = new Array();
		$scope.showTripOverview = false;
		$scope.showMyPlaces = false;
		$scope.newSiteRes = null;
		$scope.bestNewSite = null;
		$scope.attractionsTab = true;
		$scope.activityCategory1Name = "";
		$scope.activityCategory2Name = "";
		$scope.activityCategory1Legal = "";
		$scope.activityCategory2Legal = "";
		$scope.lang = $routeParams.lang;
		if ($scope.lang == null) {
			//in the itinerary page, there is no route param
			$scope.lang = getActiveLang(true);
		}
		$scope.citiesArr = new Array();
		$scope.productionCitiesArr = new Array();
		$scope.newAddedAttraction = null;
		
		$scope.loc = encodeURIComponent($location.url());
		$scope.itineraryLoaded = false;
		$scope.newItineraryName = "";
		var requireReload = false;
		var lastTimeShowedMakeTheMost;
		$scope.topAd = null;
		$scope.highlightsLimit = $(window).width() >= 1280 ? 5 : 3;
		
		var wasChanged = readCookie("units_changed") != null ? "-changed" : "";
		fireEvent("Itinerary-Regional","measure units", getIsMeter() ? "metric"+wasChanged : "non-metric" + wasChanged);
		var sessionToken1 = null;
		
		$scope.tabs = [
		               {active: true,name: "itinerary"},
		               {active: false,name: "destinations"},
		               {active: false,name: "activities"},
		               {active: false,name: "activities1"},
		               {active: false,name: "activities2"}
		              ];
		
		$scope.activeUnit = getLocalDistanceUnit();
		$scope.currencies = CurrenciesService.getCurrencies();
		$scope.activeCurrency = "USD ($)"; //Default currency
		/*if (window.localStorage['currencyText'] != null) {
			$scope.activeCurrency = window.localStorage['currencyText'];
		}*/
		if (wrapGetLocalStorage('currencyText') != null) {
			//$scope.activeCurrency = window.localStorage['currencyText'];
			$scope.activeCurrency = wrapGetLocalStorage('currencyText');
		}
		
		var langUrl = "";
		if ($scope.lang != "en") {
			langUrl = "/" + $scope.lang;
		}
		var ajaxCall = appRoot + '/api/itineraries-user' + langUrl + '?id=' + itinId + "&rnd="+new Date().getTime();
		if ($routeParams.srcEmail) {
			ajaxCall += "&srcEmail=" + $routeParams.srcEmail;
		}
		if ($routeParams.city && !$routeParams.userItineraryId) {
			ajaxCall =  "/jsonws/" + $routeParams.city + "/itineraries/" + itinId;
			if ($routeParams.lang != "en") {
				ajaxCall += "/" + $routeParams.lang;
			}
		}
		
		
		var callA = $http.get(ajaxCall);
		var callB = MapLoader.getInstance().load();
		var callC = GetCitiesService.async();
		var ajaxLoadTiming = new TrackTiming("PageCoreLoadNew", "ajax_data_time");
		$q.all(new Array(callA,callB,callC)).then(
	   			 function(resultsA) {
	   				ajaxLoadTiming.send();
	   				$scope.citiesArr = resultsA[2];
	   				$scope.productionCitiesArr = $filter('filter')($scope.citiesArr, {status:'production'}, true);
	   				$scope.cityObj = hotelService.isShowHotel(resultsA[0].data.city,"itinerary regional");
	   				CityService.setCurCity($scope.cityObj);
	   				lastModService.setLastMod($scope.cityObj.legalName).then(
	   		   			 function(results) {
	   		   				 loadItinerary(resultsA);
	   		   			 }, function(errors) {
	   		   			 
	   		   			 }
	   				);

					
	   			 }, function(errors) {
	   			 
	   			 }
	   	);
		
		var disableRouting = false;
		function loadItinerary(resultsA) {
			var callAttractions = attractionsService.init($scope.cityObj.legalName,true);
   			$q.all(new Array(callAttractions)).then(
   	   			 function(attrResults) {
   	   				//longDistanceMethod = resultsA[0].data.longDistanceMethod;
	   	   			$scope.countItineraryUsedBy = resultsA[0].data.countItineraryUsedBy;
	   	   			if (attractionsService.getItinUsedBy(resultsA[0].data.itinerary) != null) {
	   	   				$scope.countItineraryUsedBy = attractionsService.getItinUsedBy(resultsA[0].data.itinerary);
	   	   			}
		   	   		if (!resultsA[0].data.itinerary.isEditable) {
		   	   			//not my itinerary
		   	   			resultsA[0].data.itinerary.clientUniqueItrId = null;
		   			//} else if (!isInterestingCountry($scope.lang)) {
		   	   		} else {
		   				disableRouting = true;
		   			}
   	   			
	   	   			itineraryRegionalService.init(resultsA[0].data.itinerary,disableRouting).then(
     					 function(itr) {
     						$scope.itinerary = itr;
     		   	   			MapMgr.getInstance().initializeMapFromItrSites("divMapParent", $scope.itinerary.itinerarySites,$scope.cityObj,disableRouting);
	     		   	   		if ($scope.itinerary.noOfDays == 0) {
	    	   					//handle itinerary from scratch
	    	   					$scope.itinerary.noOfDays = 1;
	    	   				}
	    	   				$scope.newItineraryName = $scope.itinerary.name;
	    		   			
	    	   				
	    	   				//handle check if user already has this itinerary
	    					if ($scope.itinerary.baseItineraryId == null) {
	    		   				var tmpArr = new Array();
	    			   			for (var i=0;i<$scope.userItinArr.length;i++) {
	    			   				if ($scope.userItinArr[i][2] == $scope.itinerary.id) {
	    			   					tmpArr.push($scope.userItinArr[i]);
	    			   				}
	    			   			}
	    			   			if (tmpArr.length > 0 && !exisitingMessageShown) {
	    			   				openExistingItineraryDialog(tmpArr);
	    			   				exisitingMessageShown = true;
	    			   			}
	    	   			 	}
	    					
	    					
	    	   				
	    					var bc = new Array();
	    	   				if ($scope.itinerary.clientUniqueItrId == null) {
	    	   					var daysTxt =  $scope.itinerary.noOfDays > 1 ? " Days" : " Day";
	    	   					daysTxt = $filter('translateFilter')(daysTxt);
	    	   					bc.push({name: "In " + $scope.itinerary.noOfDays + daysTxt,url: $scope.appRoot + "/"+ $scope.lang +"/" + $scope.cityObj.legalName + "/itinerary-by-day/" + $scope.itinerary.noOfDays});
	    	   				}
	    	   				bc.push({name: $scope.itinerary.name});
	       	   				$rootScope.$broadcast("update_breadcrumb",bc, $scope.cityObj, $scope.lang);
	    	   				$rootScope.$broadcast("update_main_header_width","itineraryController");
	    	   				$window.document.title = $scope.itinerary.name + " | Visit A City";
	    	   				
	    	   				if ($( window ).width() > 1380) {
	    	   		    		$( "#divHelp" ).css("left","0px");
	    	   		    	}
	    	   		    	if (ieVersion == null || ieVersion > 9) {
	    	   		    		$( "#divHelp" ).keepInView( {fixed: true, zindex: 1200, edgeOffset: 300} );
	    	   		    	}
	    	   		    	if ($location.hash() != "" && $location.hash().indexOf("itinerary") < 0) {
	    	   					//change tab only for non-itinerary
	    	   					var tabName = $location.hash().split("=");
	    	   					$scope.changeTab(tabName[1],null,true);
	    	   				} else {
	    	   					angular.element($window).on("scroll", function() {
	    	   						//bind scroll 
	    	   						handleScroll();
	    	   			        });
	    	   				}
	    	   		    	
	    					$scope.itineraryLoaded = true;
	    					blockUI.reset();
     					 }
	     			);
	   	   			
	   	   			$q.all(new Array(activitiesService.init($scope.cityObj.legalName))).then(
	   					 function(results) {
	   						if ($scope.paPass == null) {
	   							//get ad for top in case there is no city pass
	   							$scope.topAd = activitiesService.getItineraryRelatedAd($scope.itinerary.itinerarySites);
	   						}
	   						$rootScope.$broadcast("top_ad_populated");
	   						$scope.activityCategory1Name = activitiesService.cityPaidActivityCategories[2].name;
	   						if (activitiesService.cityPaidActivityCategories[2].shortName) {
	   							$scope.activityCategory1Name = activitiesService.cityPaidActivityCategories[2].shortName;
	   						}
	   						$scope.activityCategory2Name = activitiesService.cityPaidActivityCategories[3].name;
	   						if (activitiesService.cityPaidActivityCategories[3].shortName) {
	   							$scope.activityCategory2Name = activitiesService.cityPaidActivityCategories[3].shortName;
	   						}
	   						$("#itinerary_blue_bar").css("width",$("#itineraryController").css("width"));
	   						individualPageLoadTiming.send();
	   					}, function(errors) {
	   		   			 
	   	   			 });
	   				
	   	   			
   	   			 }, function(errors) {
   		   			 console.err(errors);
	   			 }
   			);
		}
		
		$scope.$on('updateItrSite', function (event,itrSite) {
			var imageId = itrSite.googleImgUrl;
			for (var i=0;i<itineraryRegionalService.getItinerary().itinerarySites.length;i++) {
				if (itineraryRegionalService.getItinerary().itinerarySites[i].id == itrSite.id) {
					//console.log('bad image: ' + itineraryRegionalService.getItinerary().itinerarySites[i].googleImgUrl);
					//itineraryRegionalService.getItinerary().itinerarySites[i] = itrSite;
					$scope.itinerary = itineraryRegionalService.getItinerary();
					
					//this is needed otherwise dom is not properly refreshed
					$timeout(function() {
						//force a refresh of the image in the UI
						$scope.itinerary.itinerarySites[i].googleImgUrl = null;
			   		}, 1000);
					$timeout(function() {
						//force a refresh of the image in the UI
						//console.log('replaceing the bad image with:' + imageId);
						$scope.itinerary.itinerarySites[i].googleImgUrl = imageId;
			   		}, 2000);
					
					break;
				}
			}
			
		});
		
		$(window).on("resize.doResize", function (){
			$rootScope.$broadcast("update_main_header_width","itineraryController");
			$("#itinerary_blue_bar").css("width",$("#itineraryController").css("width"));
			$("#tabsMain").find("ul:first").css("width","100%");
			$scope.highlightsLimit = $( window ).width() >= 1280 ? 5 : 3;
		});
		
		var toVar;
		function loadingIndicatorAnimation() {
			var counter = 1
			var lastCounter = 1;
			$("#loading"+counter).addClass("loading_indicator_selected");
			counter++;
			toVar = window.setInterval(function(){
				$("#loading"+counter).addClass("loading_indicator_selected");
				$("#loading"+lastCounter).removeClass("loading_indicator_selected");
				lastCounter = counter;
				counter++;
				if (counter > 4) {
					counter = 1;
				}

			},1000);
		}
		
		$scope.openShareCenter = function() {

			var shareObj = new Object();
			shareObj.id = $scope.itinerary.clientUniqueItrId;
			if ($routeParams.srcEmail) {
				shareObj.srcEmail= $routeParams.srcEmail;
			}
			$location.path("/itinerary/share").search(shareObj);
			if(!$scope.$$phase) $scope.$apply();
		}
		
		
		
		$scope.refresh = function() {
			var langStr = "";
			if ($scope.lang != "en") {
				langStr = "&lang=" + $scope.lang 
			}
			var callA = $http.get(appRoot + '/api/itineraries-user-refresh?id=' +  $scope.itinerary.clientUniqueItrId + "&rnd="+new Date().getTime() + langStr);
			$q.all(new Array(callA)).then(
  					 function(results) {
 						itineraryRegionalService.init(results[0].data.itinerary,true).then(
  		     					 function(itr) {
  		     						$scope.itinerary = itr;
  		     						MapMgr.getInstance().initializeMapFromItrSites("divMapParent", itineraryRegionalService.getItinerary().itinerarySites,$scope.cityObj,disableRouting);
  		     						if ($scope.newAddedAttraction != null) {
  		     							res = $filter('filter')($scope.itinerary.itinerarySites,function(value, index){
  		     								if (value.latitude == $scope.newAddedAttraction.latitude && value.longitude == $scope.newAddedAttraction.longitude) {
  		     									return true;
  		     								}
  		     							})[0];
  	  									doHighlightNewSite(res.id);
  	  									$scope.newAddedAttraction = null;
  		     						}
  		     						
  		     					 }
  		     			);
  						
  					}, function(errors) {
  		   			 
  	   			 });
		}
		var ohInterval = null;

	
		var myPlansWatch = $scope.$watch(MyPlansService.getMyPlans, function(newVal, oldVal) {
			 if (newVal && newVal.length > 0) {
				 $scope.userItinArr = newVal;
			 }
		  });

		$scope.getTopAd = function() {
			var deferred = $q.defer();
			$scope.$on('top_ad_populated', function () {
				if ($scope.topAd == null) {
					deferred.reject();
					return;
				}
				var res = "tours";
				if ($scope.topAd.activity.name.toLowerCase().indexOf("walking") >=0) {
					res = "walking";
				} else if ($scope.topAd.activity.name.toLowerCase().indexOf("cultur") >=0) {
					res = "culture";
				} else if ($scope.topAd.activity.name.toLowerCase().indexOf("food") >=0) {
					res = "food";
				} else if ($scope.topAd.activity.name.toLowerCase().indexOf("night") >=0) {
					res = "night";
				}
				deferred.resolve(res);
		   });
			return deferred.promise;
		}
		

	
		
		
	
		$scope.changeTab = function(tabName,forceMapRefresh,skipEvent) {

			//reset search field
			$location.search("attractionSearchByName",null);
			if (tabName == null) {
				tabName = "itinerary"; //default
				if ($location.hash()) {
					tabName = $location.hash().split("=")[1];
				}
			}
			for (var i=0;i<$scope.tabs.length;i++) {
				var isActive = false;
				if ($scope.tabs[i].name == tabName) {
					isActive = true;
					$scope.active = i;
					$scope.activeTab =  tabName;
					
					if (tabName.indexOf("activities") >= 0) {
						$q.all(new Array(activitiesService.init($scope.cityObj.legalName))).then(
			   					 function(results) {
			   						//$timeout(function() {
				   						if (tabName == "activities") {
				   							//$rootScope.$broadcast("processAttractions",activitiesService.cityPaidActivityCategories[0].legalName);
				   						} else if (tabName == "activities1") {
				   							$scope.activityCategory1Legal = activitiesService.cityPaidActivityCategories[2].legalName;
				   							//$rootScope.$broadcast("processAttractions",activitiesService.cityPaidActivityCategories[2].legalName);
				   						} else if (tabName == "activities2") {
				   							$scope.activityCategory2Legal = activitiesService.cityPaidActivityCategories[3].legalName;
				   							//$rootScope.$broadcast("processAttractions",activitiesService.cityPaidActivityCategories[3].legalName);
				   						}
			   						//}, 500);
			   					 }
						);
					}
					
				}
				$scope.tabs[i].active = isActive;
			}
			if ($scope.activeTab == "itinerary") {
				angular.element($window).on("scroll", function() {
					//rebind scroll in case it was turned off by attractions
					handleScroll();
		        });
				$("#divMapParent").animate({
					height: "540px"
				},200, function() {
					if (!isAddDestinaton) {
						//don't refresh map when adding a destination, save will take care of this
						MapMgr.getInstance().initializeMapFromItrSites("divMapParent", itineraryRegionalService.getItinerary().itinerarySites,$scope.cityObj,disableRouting);
					}
					isAddDestinaton = false;
				  });
			}
		};
		
		var tabStartTime = new Date().getTime();
		var tabEndTime = null;
		var lastTab = "itinerary";
		$scope.fireTabEvent = function(tabName) {
			fireEvent("Itinerary-Regional", "change tab - " + tabName);
			var tabEndTime = new Date().getTime();
			if (tabStartTime != null) {
				var time = (tabEndTime - tabStartTime)/1000;
				fireEvent("Itinerary-Regional", "exit tab time - " + lastTab,"",Math.round(time));
			}
			tabStartTime = new Date().getTime();
			lastTab = tabName;
		}
		
		$scope.updateLocationHash = function(tabName) {
			if (tabName == "activities") {
				createCookie("activitiesTipShown",1,365);
			}
			if (tabName == "hotel") {
				window.open($scope.cityObj.hotelUrl, "_blank");
				$scope.changeTab(null,false,false);
				hotelService.fireHotelClicked("itinerary regional");
				return;
			}
			if ($location.hash() == "tab=" + tabName) {
				return;
			} else if (tabName == "itinerary" && $location.hash() == "") {
				return
			} else {
				//change tab only if it's really a different tab
				$location.hash("tab=" + tabName);
			}
			scrollToMap();
		}
		

		function showTipsDialog(element,templateUrl,positionMy,positionAt,timerVar,cookieName,ignoreLastTipShown) {
			if (miOpened || $('.qtip:visible').length > 0) {
				//wait for all modals to be closed before opening this dialog
				return;
			}
			if ($location.hash() != "" && $location.hash().indexOf("itinerary") < 0) {
				//open only when user is in the itinerary tab
				return;
			}
			if ($location.url().indexOf("itinerar") < 0) {
				//don't show when not in itinerary page
				return;
			}
			var lastShowTime = readCookie(cookieName + "Time");
			var intervalFromLastShow = new Date().valueOf() - lastShowTime;
			if (intervalFromLastShow < 90000) {
				return;
			}
			var lastTipShown = readCookie("lastTipShown");
			intervalFromLastShow = new Date().valueOf() - lastTipShown;
			if (!ignoreLastTipShown && intervalFromLastShow < 90000) {
				return;
			}
			createCookie("lastTipShown",new Date().valueOf(),365)
			
			clearInterval(timerVar); //stop the timer after first show
			var cookieVal = readCookie(cookieName);
			if (cookieVal != null) {
				//don't run if cookie already created (could be from another controller
				return;
			}
			fireEvent("Itinerary-Regional", "tip shown " + cookieName);
			createCookie(cookieName,1,365);
			var fixedClass = isTablet() ? "" : "tooltip-fixed";
			$http.get(appWebRoot + templateUrl, {cache: $templateCache}).
				success(function(content) {
		       		var tmpScope = $scope.$new(true);
		       		mapOverlaySite.city = $scope.cityObj;
		       		tmpScope.registerNow = function() {
		       			window.location.href = $scope.appRootSecure + "/login?from=" + encodeURIComponent($location.url());
		    		}
		       		var compiledContent = $compile(content)(tmpScope);
		              $(element).qtip({
		                content: {
		                	text:compiledContent,
		                	button: 'Close'
		                },
		                position: {
		                  my: positionMy,
		                  at: positionAt,
		                  target: $(element),
		                  viewport: $(window)
		                },
		                style: {
		                	classes: 'qtip-rounded qtip-bootstrap qtip-shadow qtip-close-black ' + fixedClass,
		                	tip: {
		          	          width: 15,
		          	          height: 15
		          	      	}
		                },
		                hide: {
		                  delay : 300,
		                  event : 'click unfocus'
		                }, 
		                show : {
		                	solo: true,
		                	delay : 0,
		                	event : '',
		                    effect: function() {
		                    	var animationSpeed = 300;
		                    	if (element == "#helpsignin") {
		                    		 $(this).show().animate({left:"+=10"},100).animate({left:"-=10"},animationSpeed).
			                        	animate({left:"+=10"},animationSpeed).animate({left:"-=10"},animationSpeed).
			                        	animate({left:"+=10"},animationSpeed).animate({left:"-=10"},animationSpeed);
		                    	} else {
		                    		 $(this).show().animate({top:"+=10"},100).animate({top:"-=10"},animationSpeed).
			                        	animate({top:"+=10"},animationSpeed).animate({top:"-=10"},animationSpeed).
			                        	animate({top:"+=10"},animationSpeed).animate({top:"-=10"},animationSpeed);
		                    	}
		                       
		                    }
		                } 
		            }).qtip('show');
		         });
         
		//show qtip once created	
        to3 = $timeout(function() {
       	  $(element).qtip('show');
           }, 0);
		}
		
		
		$( "body" ).on( "handleOpeningHoursTip", function( event) {
			handleOpeningHoursTip();
		});
		
		function handleOpeningHoursTip() {
			var isShown = readCookie("openHoursTipShown");
			if (isShown != null) {
				return;
			}
			
			to4 = $timeout(function() {
				var element = "#openingHoursConflictNum";
				var templateUrl = "/itinerary/modals/help-tips/opening_hours.html"
				var positionMy = 'top center';
					var positionAt = 'bottom middle';
					showTipsDialog(element,templateUrl,positionMy,positionAt,daysMenuTipTimer,"openHoursTipShown",true);
			}, 5000);
			
		}
		
		var daysMenuTipTimer;
		function handleDaysMenuTip() {
			var lastTipShown = readCookie("lastTipShown");
			if (lastTipShown == null) {
				createCookie("lastTipShown",new Date().valueOf(),365)
			}
			var isShown = readCookie("daysMenuShown");
			if (isShown != null) {
				return;
			}
			var lastShowTime = readCookie("daysMenuShownTime");
			var actionInterval = 10 * 1000;
			if (lastShowTime == null) {
				createCookie("daysMenuShownTime",new Date().valueOf(),365)
				actionInterval = 60 * 1000;
			}
			
			to5 = $timeout(function() {
				daysMenuTipTimer = window.setInterval(function() {
						var element = "#daysMenuDiv";
						var templateUrl = "/itinerary/modals/help-tips/days.html"
						var positionMy = 'top center';
						var positionAt = 'bottom middle';
						showTipsDialog(element,templateUrl,positionMy,positionAt,daysMenuTipTimer,"daysMenuShown");
		        	}, 3000);
					
			}, actionInterval);
		}
		
		var loginTipTimer;
		function handleLoginTip() {
			var isShown = readCookie("loginTipShown");
			if (isShown != null) {
				return;
			}
			if ($scope.loginMgr.isLogin()) {
				//don't show if used logged in
				return;
			}
			var actionInterval = 60 * 1000;
			to7 = $timeout(function() {
				loginTipTimer = window.setInterval(function() {
   					var element = "#helpsignin";
   					var templateUrl = "/itinerary/modals/help-tips/signin.html"
   					 var positionMy = 'middle left';
	                 var positionAt = 'center right';
					showTipsDialog(element,templateUrl,positionMy,positionAt,loginTipTimer,"loginTipShown");
		        	}, 5000);
					
			}, actionInterval);
		}
		
		var activitiesTipTimer;
		function handleActivitiesTip() {
			var isShown = readCookie("activitiesTipShown");
			if (isShown != null) {
				return;
			}
			var lastShowTime = readCookie("activitiesTipShownTime");
			var actionInterval = 30 * 1000;
			if (lastShowTime == null) {
				createCookie("activitiesTipShownTime",new Date().valueOf(),365)
				actionInterval = 180 * 1000;
			}
			to8 = $timeout(function() {
				activitiesTipTimer = window.setInterval(function() {
   					var element = "#activitiesTab";
   					var templateUrl = "/itinerary/modals/help-tips/activities.html"
   					var positionMy = 'top center';
	                var positionAt = 'bottom middle';
					showTipsDialog(element,templateUrl,positionMy,positionAt,activitiesTipTimer,"activitiesTipShown");
		        	}, 3000);
					
			}, actionInterval);
		}
		
	
		
		var makeMostTimer;
		function handleMakeMost() {
			// start makeTheMost deamon
        	lastTimeShowedMakeTheMost = wrapGetLocalStorage("lastTimeShowedMakeTheMost");
        	if (lastTimeShowedMakeTheMost == null) {
        			wrapSetLocalStorage("lastTimeShowedMakeTheMost", new Date().valueOf());
					lastTimeShowedMakeTheMost = new Date().valueOf();        		
        	}
        	
        	makeMostTimer = window.setInterval(function() {
        		showMakeTheMostDialog();
        	}, 5000);
		}
		
		
        function showMakeTheMostDialog() {
        	var disabledShow = wrapGetLocalStorage("dont_show_makethemost_tips");
        	disabledShow = disabledShow != null && disabledShow == "1";
        	
        	// indication for process disabled
        	if (disabledShow || lastTimeShowedMakeTheMost == null) {
        		clearInterval(makeMostTimer);
        		return;
        	}
        	
        	// done proceed if there is other dialog open
        	//if ($('div.qtip:visible').length > 0) {
        	//	return;
        	//}
        	
        	var intervalFromLastShow = new Date().valueOf() - lastTimeShowedMakeTheMost;
        	var actionInterval = 240 * 1000;
        	var savedEmail =  $scope.emailAddress;//LoginMgr.getInstance().getUserEmail();
        	
        	
        	if ( (intervalFromLastShow > actionInterval) && 
        			(savedEmail == null || savedEmail.length == 0) ) {
        		lastTimeShowedMakeTheMost = null;
        		
        		showMakeMost();
        	}
        }
		
		//IN USE REGIONAL
        $scope.drawerMouseOver = function(siteId,isAdd) {
			if (isAdd) {
				$scope.mouseOverSiteId=siteId;
				
		    	$("#divSiteNameWrapper_" + siteId).addClass("itin_action_icon_selected");
		    	$("#itin-drawer-"+$(this).attr("site-id")).addClass("itinerary-drawer-hover-map");
				$("#imgMapImg_" + siteId).addClass("zoomed");
	    		//$("#divMapImg_" + siteId).addClass("map-info-icon");
	    		
			} else {
				$scope.mouseOverSiteId=null;
				$("#imgMapImg_" + siteId).removeClass("zoomed");
        		$("#divSiteNameWrapper_" + siteId).removeClass("itin_action_icon_selected");
        		//$("#divMapImg_" + siteId).removeClass("map-info-icon");
			}
			
		}
        
		$scope.deleteItinerary = function(itin) {
			$rootScope.$broadcast("itineraryFireEvent","delete itinerary","",true);
			UserItineraryDao.getInstance().deleteItinerary(itin.clientUniqueItrId).then(function(userItineraries) {
				//window.location.href = appRoot;
				$location.search({});
				$location.hash("");
				$location.path("/en/" + $scope.cityObj.legalName);
				$scope.$apply();
			});
		}
		
		
		$scope.renameItinerary = function() {
			$rootScope.$broadcast("itineraryFireEvent","rename itinerary","",true);
			itineraryRegionalService.getItineraryDataMgr().setAvoidCreatingNewName();
			itineraryRegionalService.getItineraryDataMgr().save($scope.newItineraryName).then(function() {
				UserItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
					MyPlansService.setMyPlans(userItineraries);
				});
			});
			
		}
		
		$( "body" ).on( "user_itinerary_post_save_failed", function( event, userItineraries, name, noOfChanges, moreData) {
			$scope.$apply(function(){
				blockUI.reset();
			});
			$("#changesSavedFailMsg").fadeIn('slow').animate({opacity: 0.95}, 3000).fadeOut('slow'); 
			
		});
		
		var newItineraryCreatedTimeOut;
		$( "body" ).unbind( "user_itinerary_post_save");
		$( "body" ).on( "user_itinerary_post_save", function( event, userItineraries, name, noOfChanges, moreData) {
			$("#changesSavedMsg").fadeIn('slow').animate({opacity: 0.95}, 3000).fadeOut('slow'); 
			$scope.$apply(function(){
				blockUI.reset();
			});
			
			if (!$scope.itinerary.isEditable) {
					
					if (shareRedirect) {
						shareRedirect = false;
						//window.location.href = appRoot + "/itinerary/share?id=" + $scope.itinerary.clientUniqueItrId;
						//$location.path("/itinerary/share?id=" + $scope.itinerary.clientUniqueItrId);
						$location.path("/itinerary/share").search({"id":$scope.itinerary.clientUniqueItrId});
						if(!$scope.$$phase) $scope.$apply();
					} else {
						newItineraryCreatedTimeOut = window.setInterval(function(){
							newIntineraryCreated();
						}, 1000);
					}
					
					
					$scope.itinerary.isEditable = true;
					//if (!isInterestingCountry($scope.lang)) {
		   				disableRouting = true;
		   			//}
					require(["app/core/login","app/itinerary/userItineraryDao"], function(LoginMgr,UserItineraryDao) {
						UserItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
							MyPlansService.setMyPlans(userItineraries);
							$scope.$apply();
						});
					});
					handleLoginTip();
					$rootScope.$broadcast("itineraryFireEvent","Itinerary Modified",null,false);
					requireReload = true;
			}
			if (requireReload) {
				$scope.refresh();
			} 

		});
		
		var tmpId;
		
		//after reorder using drag, handle itinerary sites
		/*$scope.$on('itinerary_sites_changed_details', function (event, itin,itinSites) {
			//if (!isPlaces) {
				$scope.curItinerarySites = JSON.parse(JSON.stringify(itinSites));
				$scope.curItinerarySites = $scope.itineraryDataMgr.processDay($scope.selectedDay.no);
			//}
	   });*/
		
		$scope.$on('doSignIn', function (event, args) {
			$rootScope.$broadcast("itineraryFireEvent","redirect signin",args,true);
			to9 = $timeout(function() {
				window.location.href = $scope.appRootSecure + "/login?from=" + encodeURIComponent($location.url());
	   		}, 200);
			
	   });
		

		$scope.$on('attractions_controller_loaded', function (event, args) {
			if ($scope.showNearBy) {
				$rootScope.$broadcast("nearBySitesAttractionsController",tmpId);
				
			}

		});
		
		$scope.$on('activities_controller_loaded', function (event, args) {
			anchorSmoothScroll.scrollTo("tabsMain");
		});
		
		function openExistingItineraryDialog(curUserItins) {
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary/modals/open_existing_itinerary.html',
		        controller: ReuseableModalController,
		        scope: $scope
		    });
			
			$scope.modalInstance.result.then(function (result) {
				var url;
				if (curUserItins.length > 1) {
					//url = "/my-plans";
					$location.path("/my-plans");
				} else {
					//url = "/itineraries-user?id=" + curUserItins[0][0] + "&day=1";
					$location.path("/itineraries-user-r").search({"id":curUserItins[0][0],"day":"1"});
				}
				//window.location.href= url;
				//$location.path(url);
			}, function () {
			});
			
		}
		
		function newIntineraryCreated() {
			if (miOpened) {
				//wait for all modals to be closed before opening this dialog
				return;
			}
			//open dialog and clear timeout
			clearTimeout(newItineraryCreatedTimeOut);
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary/modals/new_itinerary_created.html',
		        controller: ReuseableModalController ,
		        scope: $scope,
		        windowClass : 'make-the-most'
		    });
			$scope.modalInstance.result.then(function (result) {
					$location.search("userItineraryId",$scope.itinerary.clientUniqueItrId);
					if (result == 'signup') {
						$rootScope.$broadcast("itineraryFireEvent","redirect signin","new itinerary created",false);
						to10 = $timeout(function() {
							window.location.href = $scope.appRootSecure + "/signup?from=" + encodeURIComponent($location.url());
				   		}, 200);
					} else if (result == 'downloadGuide') {
						$rootScope.$broadcast("downloadGuide",'{"htmlFile":"download-guide.html","from":"new itinerary created","type":"download"}');
					} else if (result == 'getApp') {
						$rootScope.$broadcast("downloadApp",'{"from":"make the most"}');
					} else if (result == 'shareEmail') {
						$rootScope.$broadcast("shareEmail",'{"from":"new itinerary created"}');
					}
					
			    }, function () {
			    	$location.search("userItineraryId",$scope.itinerary.clientUniqueItrId);
			    });
		}
		
		function showMakeMost() {
			if (miOpened || $('.qtip:visible').length > 0) {
				//wait for all modals to be closed before opening this dialog
				return;
			}
			fireEvent("Itinerary-Regional", "make most open");
			$scope.modalInstance = $uibModal.open({
				 templateUrl: 'ngApp/website/itinerary/modals/make-the-most.html',
				 controller: ReuseableModalController ,
			     scope: $scope,
			     windowClass : 'make-the-most'
			});
			$scope.modalInstance.result.then(function (result) {
				fireEvent("Itinerary-Regional", "make most ok");
				if (result == 'signup') {
					$rootScope.$broadcast("itineraryFireEvent","redirect signin","make the most",false);
					to11 = $timeout(function() {
						window.location.href = $scope.appRootSecure + "/signup?from=" + encodeURIComponent($location.url());
			   		}, 200);
				} else if (result == 'downloadGuide') {
					$rootScope.$broadcast("downloadGuide",'{"htmlFile":"download-guide.html","from":"make the most","type":"download"}');
				} else if (result == 'printGuide') {
					$rootScope.$broadcast("downloadGuide",'{"htmlFile":"print-guide.html","from":"make the most","type":"print"}');
				} else if (result == 'shareEmail') {
					$rootScope.$broadcast("shareEmail",'{"from":"make the most"}');
				}
				wrapSetLocalStorage("lastTimeShowedMakeTheMost", new Date().valueOf());
				lastTimeShowedMakeTheMost = new Date().valueOf();
				wrapSetLocalStorage("dont_show_makethemost_tips", 1);
		    }, function () {
		    	wrapSetLocalStorage("lastTimeShowedMakeTheMost", new Date().valueOf());
				lastTimeShowedMakeTheMost = new Date().valueOf();
				wrapSetLocalStorage("dont_show_makethemost_tips", 1);
				
				fireEvent("Itinerary-Regional", "make most cancel");
		    });
		}
		
		$scope.$on('helpDialog', function (event, args) {
			tempModal();
			$rootScope.$broadcast("itineraryFireEvent","help dialog open","",true);
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary/modals/get-help.html',
		        controller: ReuseableModalController ,
		        scope: $scope
		    });
			
			$scope.modalInstance.result.then(function (result) {
				$rootScope.$broadcast("itineraryFireEvent","help dialog ok","",true);
			    }, function () {
			    	$rootScope.$broadcast("itineraryFireEvent","help dialog cancel","",true);
			    });
	   });
		
		/**
		 * Watch when modal is open or closed and set variable
		 */
		$scope.modalInstance = null;
		var modalInstanceWatch = $scope.$watch('modalInstance', function(newVal, oldVal) {
			if ($scope.modalInstance != null) {
				$scope.modalInstance.opened.then(function() {
					$("#itinerary-backdrop").removeClass("modal-backdrop");
				    miOpened = true;
				});
				$scope.modalInstance.result.then(function() {
			   		miOpened = false;
			   		$("#itinerary-backdrop").removeClass("modal-backdrop");
				}, function () {
					miOpened = false;
					$("#itinerary-backdrop").removeClass("modal-backdrop");
			    });
			}
	    });
		
		
		$scope.$on('itineraryFireEvent', function (event,name,value,isAction) {
			try {
				var nameArgs = angular.fromJson(name);
				if (nameArgs.eventName) {
					name = nameArgs.eventName;
					value = nameArgs.eventValue;
					isAction = nameArgs.eventIsAction;
				}
			} catch (err) {}
			
			try {
				var argsObj = angular.fromJson(value);
				if (argsObj.from) {
					value = argsObj.from;
				}
			} catch (err) {}
			
			fireEvent("Itinerary-Regional", name, value);
			
			var firstActionCookie = readCookie("itineraryRegionalFirstAction");
			if (!firstActionCookie) {
				createCookie("itineraryRegionalFirstAction","1",365);
				fireEvent("Itinerary-Regional", "first action - " + name, value);
			}
			
			
		});
		
		
		
		
		//IN USE REGIONAL
		var isAddDestinaton = false;
		$scope.$on('addDestination', function (event, args) {
			$('.qtip').qtip('hide'); //hide qtip
			tempModal();
			var argsObj = angular.fromJson(args);
			var findId = argsObj != null && argsObj.id != null ? argsObj.id : null;
			var afterSite = null;
			if (findId != null) {
				afterSite = $filter('filter')(itineraryRegionalService.getItinerary().itinerarySites,{id:findId},true)[0];
			}
			var newDestination = null;
			var modalPath = '/itinerary-regional/modals/add-destination-personal.html';
			var windowClass = ''
			if (argsObj.city) {
				newDestination = $filter('filter')($scope.citiesArr,{id:argsObj.city},true)[0];
				modalPath = '/itinerary-regional/modals/add-destination.html';
				windowClass = 'add-day-dialog';
			}
			$scope.curItrSite = itineraryRegionalService.createNewSiteObj(afterSite,newDestination);
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + modalPath,
		        controller: ReuseableModalController ,
		        scope: $scope,
		        windowClass : windowClass
		    });
			
			$scope.modalInstance.result.then(function (result) {
				isAddDestinaton = true;
				$scope.updateLocationHash('itinerary');
				if (result != null) {
					result.numOfDays = parseInt(result.numOfDays);
					if (result.city != null) {
						result.latitude = result.city.latitude;
						result.longitude = result.city.longitude;
						result.name = result.city.name
					}
					itineraryRegionalService.addDestination(result);
					requireReload = $scope.curItrSite.city != null;
					scrollToMap();
					itineraryRegionalService.saveItinerary(true).then(function(itr) {
						if (!requireReload) {
							MapMgr.getInstance().initializeMapFromItrSites("divMapParent", itineraryRegionalService.getItinerary().itinerarySites,$scope.cityObj,disableRouting);
							doHighlightNewSite($scope.curItrSite.id);
						} else {
							$scope.newAddedAttraction =  $scope.curItrSite;
						}
						
					});
					
				}
			});
			
		});
		
		/**
		 * Highlight a new added site
		 */
		var highlightSightTo = null;
		function doHighlightNewSite(siteId) {
			var doShow = true;
			var counter = 0;
			
			highlightSightTo = window.setInterval(function(){
				$("#divMapImg_" + siteId).addClass("highlight-new-itinerary-site-map-container");
				if (miOpened || $('.qtip:visible').length > 0) {
					//wait for all modals to be closed before opening this dialog
					return;
				}
				if (doShow) {
					makePulseIn(siteId);
				} else {
					makePulseOut(siteId);
				}
				doShow = !doShow;
				if (counter == 16) {
					clearAction(siteId);
				}
				counter++;
			}, 600);
		}
		
		function clearAction(siteId) {
			window.clearInterval(highlightSightTo);
			to4 = $timeout(function() {
				//make the site unselected after last pulse finished
				$("#imgMapImg_" + siteId).removeClass( "unhighlight-new-itinerary-site-map");
				$("#imgMapImg_" + siteId).removeClass( "highlight-new-itinerary-site-map");
				$("#divSiteNameWrapper_" + siteId).removeClass("itin_action_icon_selected");
				$("#divMapImg_" + siteId).removeClass("highlight-new-itinerary-site-map-container");
			}, 700);
		}
		
		function makePulseIn(siteId) {
			$("#imgMapImg_" + siteId).removeClass( "unhighlight-new-itinerary-site-map")
			$("#imgMapImg_" + siteId).addClass( "highlight-new-itinerary-site-map")
		}
		
		function makePulseOut(siteId) {
			$("#imgMapImg_" + siteId).removeClass( "highlight-new-itinerary-site-map")
			$("#imgMapImg_" + siteId).addClass( "unhighlight-new-itinerary-site-map")
		}
		
		/**
		 * Remove itinerary
		 */
		
		//IN USE REGIONAL
		$scope.$on('removeSiteFromItinerary', function (event, args) {
			tempModal();
			$rootScope.$broadcast("itineraryFireEvent","remove attraction open",args,true);
			var argsObj = angular.fromJson(args);
			var findId = argsObj.id != null ? argsObj.id : argsObj.siteId;
			if (findId != null) {
				$scope.selectedAttraction = $filter('filter')(itineraryRegionalService.getItinerary().itinerarySites,{id:findId},true)[0];
			}
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-regional/modals/remove-destination.html',
		        controller: ReuseableModalController ,
		        scope: $scope
		    });
			
			$scope.modalInstance.result.then(function (result) {
					$rootScope.$broadcast("itineraryFireEvent","remove attraction ok",args,true);
					itineraryRegionalService.removeDestination($scope.selectedAttraction);
					itineraryRegionalService.saveItinerary(true).then(function(itr) {
	    				$scope.itinerary = itr;
	    				MapMgr.getInstance().initializeMapFromItrSites("divMapParent", itineraryRegionalService.getItinerary().itinerarySites,$scope.cityObj,disableRouting);
	    				//check if need to update my plans
	    				require(["app/core/login","app/itinerary/userItineraryDao"], function(LoginMgr,UserItineraryDao) {
							UserItineraryDao.getInstance().getUserItineraries().then(function(userItineraries) {
								MyPlansService.setMyPlans(userItineraries);
								$scope.$apply();
							});
						});
					});
			    }, function () {
			    	$rootScope.$broadcast("itineraryFireEvent","remove attraction cancel",args,true);
			    });
	   });
		
		//IN USE REGIONAL
		$scope.$on('changeDestinationDay', function (event, args) {
			//blockUI.start("Updating start day...");
			$rootScope.$broadcast("itineraryFireEvent","change start day open",args,true);
			var argsObj = angular.fromJson(args);
			var findId = argsObj.id != null ? argsObj.id : argsObj.siteId;
			if (findId != null) {
				$scope.selectedAttraction = $filter('filter')(itineraryRegionalService.getItinerary().itinerarySites,{id:findId},true)[0];
			}
			
			/*//set the options:
			if ($scope.selectedAttraction.isStartSameDay) {
				$scope.selectedAttraction.startDay = $scope.selectedAttraction.startDay + 1;
			} else {
				$scope.selectedAttraction.startDay = $scope.selectedAttraction.startDay - 1;
			}*/
			
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-regional/modals/change-day.html',
		        controller: ReuseableModalController ,
		        scope: $scope
		    });
			
			$scope.modalInstance.result.then(function (result) {
				$rootScope.$broadcast("itineraryFireEvent","change start day ok",args,true);
				if ($scope.selectedAttraction.isStartSameDay) {
					$scope.selectedAttraction.startDay = $scope.selectedAttraction.startDay + 1;
				} else {
					$scope.selectedAttraction.startDay = $scope.selectedAttraction.startDay - 1;
				}
				itineraryRegionalService.fixStartDay($scope.selectedAttraction);
				itineraryRegionalService.processRegionalItr();
				itineraryRegionalService.saveItinerary().then(function(itr) {
    				$scope.itinerary = itr;
    				MapMgr.getInstance().initializeMapFromItrSites("divMapParent", itineraryRegionalService.getItinerary().itinerarySites,$scope.cityObj,disableRouting);
    				$scope.$apply(function() {
    					blockUI.reset();
    				});
    				
				});
		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","change start day cancel",args,true);
		    });
		
	   });
		
		//IN USE REGIONAL
		$scope.$on('destinationReadMore', function (event, args) {
			$rootScope.$broadcast("itineraryFireEvent","destination read more",args,true);
			var argsObj = angular.fromJson(args);
			$scope.isAddDestination = argsObj.from == "add destination"
			if ($scope.isAddDestination) {
				$scope.readMoreCity = $filter('filter')($scope.citiesArr,{id:argsObj.city},true)[0];
				$scope.readMoreItrSite = null;
			}  else {
				$scope.readMoreItrSite = $filter('filter')(itineraryRegionalService.getItinerary().itinerarySites,{id:argsObj.city},true)[0];
				$scope.readMoreCity = $scope.readMoreItrSite.city != null ? $scope.readMoreItrSite.city : null; 
				
			}	 
			

			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-regional/modals/destination-read-more.html',
		        controller: ReuseableModalController,
		        scope: $scope,
		        windowClass: 'add-day-dialog'
		    });
			
	   });
		
		$( "body" ).on( "regional_read_more", function( event, cityid) {
			$rootScope.$broadcast("destinationReadMore",'{"from":"map","city":'+cityid+'}');
		});
		
		///IN USE REGIONAL
		var requireAr = isTablet() ? ["jquery.ui.touch-punch.min"] : [];
		require(requireAr,
				function(TouchPunch) {  
			 		$( "#sortable" ).sortable({
			 			items: 'li[id!=addDestinationDrawer]', 
			 			disabled: isTablet(),
			 			start: function(e, ui) {
							wasUpdated = false;
							$('.qtip').qtip('hide'); //hide qtip while dragging
							$(ui.item).css("list-style","none"); //hide bullet if it appears
						},
						update: function(e, ui) {
							wasUpdated = true;
						},
		        		stop: function( e, ui ) {
		        			if (wasUpdated) {
		        				var moovedSiteId = ui.item[0].getAttribute("siteId");
			        			$rootScope.$broadcast("itineraryFireEvent","change attractions order drawer","",true);
			        			var noInTrip = 1;
			        			$("#sortable").children().each(function () {
			        				var siteId = this.getAttribute("siteId");
			        				if (siteId != null) {
			        					var curSite = $filter('filter')(itineraryRegionalService.getItinerary().itinerarySites,{id:parseInt(siteId)},true)[0];
			        					curSite.noInTrip = noInTrip;
			        					noInTrip++;
			        					if (moovedSiteId == siteId) {
			        						curSite.isStartSameDay = false;//clean start same day for dragged site
			        					}
			        				}
			        			});
			        			itineraryRegionalService.fixNoInTrip();
			        			itineraryRegionalService.fixStartDay();
			        			itineraryRegionalService.processRegionalItr();
			        			itineraryRegionalService.saveItinerary(true).then(function(itr) {
			        				$scope.itinerary = itr;
			        				$scope.$apply();
				        			MapMgr.getInstance().initializeMapFromItrSites("divMapParent", itineraryRegionalService.getItinerary().itinerarySites,$scope.cityObj,disableRouting);
								});
			        			
		        			}
		        		}
	        		});
				}
		);   
		
		
		
		
		/**
		 * Support for back button when hash changes
		*/ 
		
		var locationWatch = $scope.$watch(function () {
		    return location.hash
		}, function (newVal, oldVal) {
			
			if (newVal != oldVal) {
				var tabName = $location.hash().split("=")[1];
				if (tabName != null) {
					GlobalDefsNew.setGlobal("tmpNearBy", null); //reset show near by in attractions controller
				}
				var doForce = false;
				if ($("#divMapParent").children().length == 0) {
					//Check if maop was destroyed and force recreate (happens on back button)
					doForce = true;
				}
				$scope.changeTab(tabName,doForce);
				
				
			} else if (newVal == "#tab=itinerary") {
				$scope.changeTab(tabName);
			}
		});

		function scrollToMap() {
			if (!$("#divTopTabIndicator").isOnScreen()) {
				$("html, body").animate({
					scrollTop:  $("#divTopTabIndicator").offset().top -10
				}, 1000);
			}
		}
		
		/**
		 * Prevent modal delay, open temporary modal
		 */
		function tempModal() {
			$("#itinerary-backdrop").addClass("modal-backdrop fade in");
		}
		

		
	   
		
		
	   
	  /* $scope.$on('addNotes', function (event, args) {
		   tempModal();
		   $scope.selectedAttraction = getItinerarySite(args);
		   $scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary/modals/add-notes.html',
				controller: ReuseableModalController ,
		        scope: $scope
		    });
		   $rootScope.$broadcast("itineraryFireEvent","add notes open",args,true);
		   $scope.modalInstance.result.then(function (result) {
			   $rootScope.$broadcast("itineraryFireEvent","add notes ok",args,true);
			   	requireReload = false
				itineraryService.getItineraryDataMgr().addNotes($scope.selectedAttraction);
				$rootScope.$broadcast("itr_site_changed",$scope.selectedAttraction);
		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","add notes cancel",args,true);
		    });
		   	

	   });*/
		
		
		
		
		
		

		var shareRedirect = false;
		$scope.$on('shareEmail', function (event, args) {
			$rootScope.$broadcast("itineraryFireEvent","share",args,true);
			if ($scope.itinerary.clientUniqueItrId != null) {
				$location.path("/itinerary/share").search({"id":$scope.itinerary.clientUniqueItrId});
				if(!$scope.$$phase) $scope.$apply();
			} else {
				shareRedirect = true;
				itineraryRegionalService.saveItinerary();
			}
	   });
		
		
		//IN USE REGIONAL
		$scope.$on('changeDestinationsOrder', function (event, args) {
			tempModal();
			$scope.tmpItinerarySites = angular.copy($scope.itinerary.itinerarySites);
			$scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary-regional/modals/change-destinations-order.html',
		        controller: ReuseableModalController ,
		        scope: $scope
		    });
			$rootScope.$broadcast("itineraryFireEvent","change attractions order open",args,true);
			$scope.modalInstance.result.then(function (result) {
				$rootScope.$broadcast("itineraryFireEvent","change attractions order ok",args,true);
				/**
				 * Get the start time and noInTrip of the previous first item
				 */
				to19 = $timeout(function() {
					blockUI.start("Changing Order...");
   	   			}, 0);
   	   			
				to20 = $timeout(function() {
					itineraryRegionalService.fixNoInTrip();
        			itineraryRegionalService.fixStartDay();
        			itineraryRegionalService.processRegionalItr();
        			itineraryRegionalService.saveItinerary(true).then(function(itr) {
        				$scope.itinerary = itr;
        				blockUI.reset();
					});
				}, 500);
		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","change attractions order cancel",args,true);
		    });

	   });

		
		//Sort attractions (cancel sort for hotels)
		$scope.sortableOptions = {
				cancel: ".unsortable"
		}
		
		
		
		//IN USE REGIONAL
		$scope.mapExpended = false;
		$scope.expandTitle = "Expand Map";
		var leftPad;
		$scope.toggleMap = function() {
			$rootScope.$broadcast("itineraryFireEvent","expand/collapse map");
			if ($scope.mapExpended) {
				$scope.expandTitle = "Expand Map";
				 $("#itinerary-map-wrapper").animate({ 
					    'padding-left' : leftPad
					  }, "slow", function() {
						  $("#itinerary-drawer-wrapper").removeClass("col-offset-0");
						  $("#my-places-wrapper").removeClass("col-offset-0");
						  
						  MapMgr.getInstance().initializeMapFromItrSites("divMapParent", $scope.itinerary.itinerarySites,$scope.cityObj,disableRouting);
					  });
				
			} else {
				leftPad = $("#itinerary-map-wrapper").css("padding-left");
				$("#itinerary-drawer-wrapper").addClass("col-offset-0");
				$("#my-places-wrapper").addClass("col-offset-0");
				$("#itinerary-drawer-wrapper").css("display","");
				$scope.expandTitle = "Collapse Map";
				 $("#itinerary-map-wrapper").animate({ 
					    'padding-left' : '15px'
					  }, "slow", function() {
						  MapMgr.getInstance().initializeMapFromItrSites("divMapParent", $scope.itinerary.itinerarySites,$scope.cityObj,disableRouting);
					  });
			}
			$scope.mapExpended = !$scope.mapExpended;
		}
		
		
		
		//	
		$scope.$on('itinerarySettings', function (event, args) {
			tempModal();
			$scope.modalInstance = $uibModal.open({
				 templateUrl: 'ngApp/website/itinerary/modals/settings.html',
				 controller: ReuseableModalController ,
			     scope: $scope
			});
			$rootScope.$broadcast("itineraryFireEvent","itinerary settings open",null,true);
			
			$scope.modalInstance.result.then(function (result) {
				var changed = null;
	        	if (result.maxWalkTime != $scope.itinerary.maxWalkTime || result.defaultTransit != $scope.itinerary.defaultTransit) {
	        		//transit settings changed
	        		$scope.itinerary.maxWalkTime = result.maxWalkTime;
	        		$scope.itinerary.defaultTransit = result.defaultTransit;
	        		itineraryService.getItineraryDataMgr()._maxWalkTimeMins = $scope.itinerary.maxWalkTime;
		        	itineraryService.getItineraryDataMgr()._itineraryObj.defaultTransit = $scope.itinerary.defaultTransit;
		        	itineraryService.processDay();
		        	itineraryService.saveItinerary();
		        	changed = true;
	        	}
	        	
	        	if (result.activeUnit != $scope.activeUnit) {
	        		//units changed
	        		createCookie("is_metric", result.activeUnit == "KM" ? true : false);
	    			createCookie("us_timeformat", result.activeUnit == "KM" ? false : true);
	    			createCookie("units_changed", true);
	    			fireEvent("General","ChangeUnits", result.activeUnit == "KM" ? "metric" : "non-metric");
	    			$scope.activeUnit = result.activeUnit;
	    			try {
	    				//force itinerary details refresh
	    				var curDay = itineraryService.getSelectedDay();
		    			$scope.changeDay(itineraryService.getSelectedDay()+1,"change units", false);
		    			$scope.changeDay(curDay,"change units", false);
	    			} catch (err) {}
	    			
	    			changed = true;
	        	}
	        	
	        	if (result.activeCurrency != $scope.activeCurrency) {
	        		//currency changed
	        		var selctedCurrency = $filter('filter')($scope.currencies,{displayName:result.activeCurrency},true)[0];
	        		//window.localStorage['currencyAbb'] = selctedCurrency.name;
	    			//window.localStorage['currencyText'] = selctedCurrency.displayName;
	        		wrapSetLocalStorage('currencyAbb',selctedCurrency.name);
	        		wrapSetLocalStorage('currencyText',selctedCurrency.displayName);
	    			createCookie("currencyAbb", selctedCurrency.name);
	    			$scope.activeCurrency = result.activeCurrency;
	    			changed = true;
	        	}
	        	if (changed) {
	        		$rootScope.$broadcast("itineraryFireEvent","itinerary settings changed",null,true);
	        	}
		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","itinerary settings cancel",null,true);
		    });
		});
		
		//IN USE REGIONAL
		$scope.$on('downloadGuide', function (event, args) {
			tempModal();
			var argsObj = angular.fromJson(args);
			$scope.argsObj = argsObj;
			$scope.downloadType = argsObj.type;
			$scope.modalInstance = $uibModal.open({
				 templateUrl: 'ngApp/website/itinerary/modals/' + argsObj.htmlFile,
				 controller: ReuseableModalController ,
				 windowClass : "itinerary-download-black",
			     scope: $scope
			});
			//$rootScope.$broadcast("itineraryFireEvent",argsObj.type + " guide open",args,true);
			$scope.abNum = $scope.requireEmailConsent ? "100" : "1"; 
			fireEvent("Download",argsObj.type + "_regional_" + $scope.abNum + "_open",argsObj.from);
			
			$scope.modalInstance.result.then(function (result) {
				//$rootScope.$broadcast("itineraryFireEvent",argsObj.type + " guide ok",args,true);
			
		    }, function () {
		    	//$rootScope.$broadcast("itineraryFireEvent",argsObj.type + " guide cancel",args,true);
		    	fireEvent("Download",argsObj.type + "_regional_" + $scope.abNum + "_cancel",argsObj.from);
		    });
		});
		
		//IN USE REGIONAL
		$scope.$on('downloadApp', function (event, args) {
			tempModal();
			$scope.argsObj = angular.fromJson(args);
			$scope.modalInstance = $uibModal.open({
				 templateUrl: 'ngApp/website/itinerary/modals/download-app.html',
				 controller: ReuseableModalController ,
				 windowClass : 'itinerary-download-black',
			     scope: $scope
			});
			//$rootScope.$broadcast("itineraryFireEvent","download app open",args,true);
			$scope.abNum = $scope.requireEmailConsent ? "100" : "1"; 
			fireEvent("Download","download_app_" + $scope.abNum + "_open",args.from);
			$scope.modalInstance.result.then(function (result) {
				
				//$rootScope.$broadcast("itineraryFireEvent","download app ok",args,true);
				
		    }, function () {
		    	//$rootScope.$broadcast("itineraryFireEvent","download app cancel",args,true);
		    	fireEvent("Download","download_app_" + $scope.abNum + "_cancel",args.from);
		    });
		});
	   
	   $scope.$on('addTripDates', function (event, args) {
		   tempModal();
		   //console.log("IS EMAIL: " + $scope.loginMgr.getUserEmail() == null || ($scope.loginMgr.getUserEmail() != null && $scope.loginMgr.getUserEmail().length == 0));
		   var argsObj = angular.fromJson(args);
		   var from = argsObj.from;
		   $scope.setTripDates = argsObj.addTripDates;
		   $scope.modalInstance = $uibModal.open({
				templateUrl: appWebRoot + '/itinerary/modals/add-trip-dates.html',
		        controller: ReuseableModalController ,
		        //windowClass : ($scope.loginMgr.getUserEmail() == null || $scope.loginMgr.getUserEmail().length == 0) ? '' : 'itr-small-date',
		        scope: $scope
		    });
			$rootScope.$broadcast("itineraryFireEvent","add trip dates open",from,true);
			$scope.modalInstance.result.then(function (result) {
				$rootScope.$broadcast("itineraryFireEvent","add trip dates ok",from,true);
				itineraryRegionalService.fixStartDay();
				$scope.doSetTripDates(moment(result,'YYYY-MM-DD',true).toDate());
	   			$scope.emailAddress = $("#emailAddressSend").val();
	   			if ($scope.emailAddress) {
	   				if ($scope.emailAddress == null || ($scope.emailAddress != null && $scope.emailAddress.length == 0)) {
	   					$rootScope.$broadcast("itineraryFireEvent","add trip dates new email",null,true);
	   				}
	   				
	   				/*require(["app/core/login"], function(LoginMgr) {
						LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
					})*/
	   			}

		    }, function () {
		    	$rootScope.$broadcast("itineraryFireEvent","add trip dates cancel",from,true);
		    });
	   });
	   
	   //IN USE REGIONAL
	   $scope.doSetTripDates = function(result) {
		   itineraryRegionalService.getItineraryDataMgr().setStartDate(result);
		   itineraryRegionalService.saveItinerary().then(function(itr) {
				$scope.itinerary = itr;
			});
	   }
	   
	   
		$scope.$on('mapsitehoverin-ng-regional', function (event, args, element) {
			
			var curSiteId = args[1];
			var element = args[0];
			var openTarget = element;
			var curSite = $filter('filter')(itineraryRegionalService.getItinerary().itinerarySites,{id:curSiteId},true)[0];
			var templateUrl = "";
			
			if (curSite.city != null) {
				templateUrl = "/itinerary-regional/modals/map-overlay.html"
			} else {
				templateUrl = "/itinerary-regional/modals/map-overlay-personal.html"
			}
			
			
			$(element).bind('mouseover click',function() {
				$scope.createQtip(element,openTarget,templateUrl,curSite);
				//unbind after qtip created so it want be recreated on every click
				$(element).unbind('mouseenter mouseleave mouseover click');
		    });
			
			
	   });
		
		$scope.createQtip = function(element,openTarget,templateUrl,curSite) {
			$http.get(appWebRoot + templateUrl, {cache: $templateCache}).
	       	success(function(content) {
	       		var restEventTxt = "";
	       		var additionalClass = "";
	       		var tmpScope = $scope.$new(true);
	       		var compiledContent = $compile(content)(tmpScope);
	       		tmpScope.mapOverlaySite = curSite;
	       		tmpScope.imagesCdn = $scope.imagesCdn;
	       		tmpScope.appRoot = $scope.appRoot;
	       		tmpScope.cityObj = $scope.cityObj;
	       		tmpScope.itinerary = $scope.itinerary;
	       		//tmpScope.lang = getActiveLang(true);
	       		tmpScope.lang = $scope.lang;
	       		tmpScope.showMore = false;
	       		var len = tmpScope.mapOverlaySite.subItinerary != null ? 480 : 580;
	       		if (tmpScope.mapOverlaySite.city != null && tmpScope.mapOverlaySite.city.description != null && tmpScope.mapOverlaySite.city.description.length > 0) {
   					var tmpArr = $filter('cut')(tmpScope.mapOverlaySite.city.description,true,len,'',null,true);
   	   				if (tmpArr[1] != null && tmpArr[1].length < 100) {
   	   					tmpScope.descMain = tmpScope.mapOverlaySite.city.description;
   	   				} else {
   	   					tmpScope.descMain = tmpArr[0];
   	   					tmpScope.descMore = tmpArr[1];
   	   				}
   				}
	       		$(element).qtip({
	       			content: {
	                	text:compiledContent,
	                	button: 'Close'
	                },
	                position: {
	                  my: 'top center',
	                  at: 'middle right',
	                  target: $(openTarget),
	                  viewport: $(window)
	                },
	                style: {
	                	classes: 'qtip-rounded qtip-bootstrap qtip-shadow qtip-overflow ' + additionalClass,
	                	tip: true
	                },
	                hide: {
	                  fixed : true,
	                  delay : 300,
	                  event:'mouseout click unfocus',
	                  effect: function() { 
	                      $(this).animate({ opacity: 0 }, { duration: 150 });
	                }
	                }, 
	                show : {
	                	solo: true,
	                	delay : 500,
	                	event:'mouseover click focus',
	                	effect: function() {
	                        $(this).show().css({ opacity: 0 }).animate({ opacity: 1 }, { duration: 350 });
	                	},
	                	ready: true
	                }, 
	                events: {
	                	show: function(event, api) {
	                		tmpScope.$apply(function() { 
	                			tmpScope.showMore = false;
			   				});
	                		fireEvent("Itinerary-Regional", "map " + restEventTxt + "overlay open");
                			$("#divMapImg_" + curSite.id).removeClass("itin-map-destination-wrapper");
	                	},
	                	hide: function(event, api) {
	                		fireEvent("Itinerary-Regional", "map " + restEventTxt + "overlay close");
	                		$("#divMapImg_" + curSite.id).addClass("itin-map-destination-wrapper");
	                	}
	                }
	            });
	
	         });
			to13 = $timeout(function() {
				//don't remove this, it's causing $digest to run 
				$(element).qtip('api');
			}, 700);
			
			
		}
	   
	   
	   
	   
	   
	   ReuseableModalController = function($scope){
		   $('.qtip').qtip('hide'); //hide qtip
			$scope.progressVal = 0;
			$scope.runProgress = false;
			$scope.daysArray = Array;
			$scope.userQuestion = "";
			$scope.hasEmailConset = false;
			
			
			$scope.loadGoogleAutocomplete = function() {
				$scope.showPlaceNameField = false;
				$scope.interestingCountry = true;
				if (sessionToken1 == null) {
					sessionToken1 = createGuid();
				}
			}
			
			$scope.getSuggestionsFromServer = function(input) {
				var deferred = $q.defer();
				if (input.length < 3) {
					return;
				}
				var baseUrl = appRoot + "/api/app/googleAutocompleteForWebsite?location="+ $scope.cityObj.latitude + ","+ $scope.cityObj.longitude+ "&radius=3500000&type=locality&sessiontoken="+sessionToken1+"&input="+input;
				$http.get(baseUrl).then(function 
						successCallback(response) {
						if (response.data.predictions != null && response.data.predictions.length > 0) {
							response.data.predictions[0].isFirst = true;
							response.data.predictions[response.data.predictions.length-1].isLast = true;
						}
						for (var i=0;i<response.data.predictions.length;i++) {
							var curPrediction = response.data.predictions[i];
							var title = curPrediction.structured_formatting.main_text;
							var re = new RegExp(input,"gi");
							title = title.replace(re, "<b style='text-transform: capitalize;'>"+input+"</b>");
							curPrediction.title = title;
							curPrediction.imagesCdn = imagesCdn;
						}
						deferred.resolve(response.data.predictions);
				});
				
				return deferred.promise;
			 } 
			
			$scope.myPlaceOnSelect = function(selectedItem) {
				
				var baseUrl = appRoot + "/api/app/googlePlaceFullDataForWebsite/"+selectedItem.place_id+"/default?sessiontoken=" + sessionToken1;
				$http.get(baseUrl).then(function 
						successCallback(response) {
						sessionToken1 = createGuid(); //reset session token
	   					$scope.maxRange = 5;
		   				var place = response.data.result;
		   				$scope.curItrSite.city = null; //reset if previous city was selected
						$scope.curItrSite.name = place.name
						$scope.curItrSite.address = place.formatted_address;
		        		$scope.curItrSite.latitude = place.geometry.location.lat;
			        	$scope.curItrSite.longitude = place.geometry.location.lng;
			        	var additionalDataObj = new Object();
						additionalDataObj.website = place.website;
						additionalDataObj.googlePlaceId = place.place_id;	
						additionalDataObj.phone = place.formatted_phone_number;
						$scope.curItrSite.additionalData = additionalDataObj;
			        	if (place.photos != null && place.photos.length > 0) {
			        		//get the photo reference
							var photoRef = place.photos[0].photo_reference;
			        		$scope.curItrSite.googleImgUrl =  globExprWeb["google-photos-cloudfront"] + "/googleplaceimage/" + $scope.curItrSite.additionalData.googlePlaceId + "/350/350/pic.jpg"
			        		if (photoRef != null && photoRef.length > 0) {
			        			$scope.curItrSite.googleImgUrl += "?photoreference=" + photoRef;
							}
							if (place.photos[0].html_attributions != null && place.photos[0].html_attributions.length > 0) {
								$scope.curItrSite.googleImgCredit = place.photos[0].html_attributions[0];
							}
						}
				});
			}
			
			
			$scope.destinationSelected = function(destination) {
				$scope.runProgress = true;
				$scope.maxRange = 5;
				if (destination.city != null) {
					//visit destinations
					$scope.curItrSite.cityId = destination.city.id
					$scope.maxRange = destination.city.maxItrDays;
					$scope.curItrSite.numOfDays = $scope.curItrSite.city.popularNoOfDays != null ? $scope.curItrSite.city.popularNoOfDays : 1;
					$scope.updateDaysItrs($scope.curItrSite);
				} 
			}
			
			$scope.updateDaysItrs = function(curItrSite) {
				if (curItrSite.city == null || curItrSite.city.maxItrDays == null || curItrSite.city.maxItrDays == 0) {
					$scope.maxRange = 5;
					return;
				}
				if (curItrSite.itrsPerDayArrMap == null) {
					curItrSite.itrsPerDayArrMap = new Object();
				} else if (curItrSite.itrsPerDayArrMap[curItrSite.numOfDays] != null) {
					curItrSite.itrsPerDayArr = curItrSite.itrsPerDayArrMap[curItrSite.numOfDays];
					return;
				}
				$scope.progressVal = 1;
				$scope.runProgress = true;

				var callA = $http.get(appRoot + '/api/my-plans?rnd='+new Date().getTime());
				$scope.lang
				var langStr = "";
				if ($scope.lang != "en") {
					langStr = "/" + $scope.lang 
				}
				var callB = $http.get('/jsonws/'+curItrSite.city.legalName + '/itinerary-by-day/' + curItrSite.numOfDays + langStr);
				$q.all(new Array(callA,callB,delay(1500))).then(
					function(results) {
						//$( ".modal-content" ).css("display","inline-block");
						$( ".modal-content" ).css("max-height","1000px");
						curItrSite.itrsPerDayArr = results[1].data.lstItineraries;
						for (var i=0;i<results[0].data.lstItineraries.length;i++) {
							var curItr = results[0].data.lstItineraries[i];
							
							if (curItr.cityId == curItrSite.city.id && curItr.noOfDays == curItrSite.numOfDays && curItr.parentItineraryId == null) {
								curItr.isEditable = true; //needed for redirect to itinerary
								curItrSite.itrsPerDayArr.unshift(curItr);
							}
						}
						curItrSite.itrsPerDayArrMap[curItrSite.numOfDays] = curItrSite.itrsPerDayArr;
						$scope.runProgress = false;
						if (curItrSite.itrsPerDayArr.length == 0) {
							$scope.maxRange = 5;
						}
					}
				);
			}
			
			function delay(mili) {
				var deffered = new $.Deferred();
				$timeout(function() {
					deffered.resolve();
				}, mili);
				return deffered.promise();
			}
			
			
			 var runProgressWatch = $scope.$watch('runProgress', function(newVal, oldVal) {
					if (newVal) {
						$( ".modal-content" ).css("max-height","500px");
						$("#customProgressBar").removeClass("progress-bar-full");
						$timeout(function() {
							$scope.progressVal = 1;
							$("#customProgressBar").addClass("progress-bar-full");
							//
						}, 500);
						
						$timeout(function() {
							$scope.runProgress = false;
							$scope.progressVal = 100;
							$( ".modal-content" ).css("max-height","1000px");
						}, 5000);
						
					}	
			 	});
				 
				 $scope.$on('$destroy', function(){
					 runProgressWatch();
				 });
			
			
			
			$scope.checkValid = function() {
				if ($scope.curItrSite.name == null || $scope.curItrSite.name.length == 0) {
					$scope.errorFieldTxt = "Please type a name";
				} else if ($scope.curItrSite.latitude == null || $scope.curItrSite.longitude == null) {
					$scope.errorFieldTxt = "Could not find location"
				} else if ($scope.curItrSite.numOfDays == null) {
					$scope.errorFieldTxt = "Please select number of days"
				} else {
					$scope.confirm($scope.curItrSite);
				}
			}
			
			
			
			$scope.loadCityReadMore = function() {
				$scope.runProgress = true;
				if ($scope.readMoreCity.topAttractions == null) {
					var callA = $http.get('/jsonws/' + $scope.readMoreCity.legalName + '/city-data');
					$q.all(new Array(callA)).then(
			   			 function(results) {
			   				$( ".modal-content" ).css("max-height","1000px");
			   				$( ".modal-content" ).css("display","inline-block");
			   				$scope.readMoreCity = results[0].data.city;
			   				$scope.readMoreCity.topAttractions = results[0].data.attractionJson;
			   				$scope.runProgress = false;
			   			 });
				} else {
					$timeout(function() {
						$scope.runProgress = false;
						$( ".modal-content" ).css("display","inline-block");
						$( ".modal-content" ).css("max-height","1000px");
					}, 1000);
				}
				
			}
			
			$scope.doAddItinerary = function(cityId) {
				$scope.confirm("OK");
				$rootScope.$broadcast("addDestination",'{"city":'+cityId+',"from":"read more"}');
			}
			
			
			
			
			 $scope.today = function() {
			        $scope.newPersonalAttraction.additionalData.date = new Date();
			 };

			 $scope.clear = function () {
				 $scope.newPersonalAttraction.additionalData.date = null;
			 };


			 $scope.open1 = function($event) {
			        $event.preventDefault();
			        $event.stopPropagation();

			        $scope.opened = {
			          value: true
			        };
			    };

			    $scope.dateOptions = {
			        formatYear: 'yy',
			        startingDay: 1
			    };
		
			
			
			
			
			if ($scope.itinerary.startDate) {
				//set start date in date dialogs if itinerary has a date
				$scope.startDate = new Date($scope.itinerary.startDate);
			}
			$timeout(function() {
				$("#addNotesTxtArea").focus();
			}, 1000);

			$scope.loadSortable = function(id) {
				$("#" + id).sortable({
					items: "div:not(.unsortable)"
				});
				
			}

			
			$scope.changeAddSitesTab = function(idx) {
				for (var i=0;i<$scope.newSiteRes.length;i++) {
   					 if ($scope.newSiteRes[i].day==idx) {
   						 $scope.newSiteRes[i].isActive = true;
   					 } else {
   						 $scope.newSiteRes[i].isActive = false;
   					 }
   				 }
			}
			
			$scope.setShowBestFalse = function() {
				$scope.showBest = false;
			}
			
			/**
			 * Handles the date dropdown opener
			 */
			$scope.open = function($event) {
			    $event.preventDefault();
			    $event.stopPropagation();

			    $scope.opened = true;
			};
			
		
			 
	        $scope.confirm = function(res) {
	        	if (res) {
	        		$scope.modalInstance.close(res);
	        	} else {
	        		$scope.modalInstance.dismiss();
	        	}
	        }
	        
	        $scope.initSettings = function() {
	        	$scope.settings = new Object();
	        	$scope.settings.maxWalkTime = $scope.itinerary.maxWalkTime;
	        	$scope.settings.defaultTransit = $scope.itinerary.defaultTransit;
	        	$scope.settings.activeUnit = $scope.activeUnit;
	        	$scope.settings.activeCurrency = $scope.activeCurrency;
	        }
	        
	        $scope.updateSettings = function() {
	        	$scope.confirm($scope.settings);
	        }
	        
	        /**
	         * Open my places from the select type popover
	         */
	        $scope.doAddMyPlace = function(siteId,personalPlace,from,title,type) {
	        	$timeout(function() {
	        		var str = '"personalPlace":'+personalPlace+',"from":"'+$scope.myPlaceFrom+'","title":"'+title+'","type":"'+type + '"';
	        		if (siteId != null) {
	        			str += ',"siteId":'+siteId
	        		}
	        		$rootScope.$broadcast("addBreak",'{'+str+'}');
				}, 0);
	        	 $scope.confirm("ok");
	        	
	        }
	        
	        $scope.doDownloadComplete = function(startDate,andClose) {
	        	var doSave = false;
	        	var isd = new Date($scope.itinerary.startDate);
	        	if (startDate == null || isd.getTime() == startDate.getTime()) {
	        		if (andClose) {
	        			/*var consent = "ok";
	        			if ($scope.requireEmailConsent) {
	        				consent = $scope.hasEmailConset ? "ok_with_consent" : "ok_no_consent";
	        			}*/
	        			$scope.modalInstance.close("ok");
	        			//$scope.modalInstance.close("ok");
	        		}
	        		
	        	} else {
	        		doSave = true;
	        		//save date only if it has changed\
	        		if (andClose) {
	        			$scope.modalInstance.close(startDate);
	        		}
	        	}
	        	return doSave;
	        }
	        
	        /**
	         * Sort attractions in overlay
	         */
	        //IN USE REGIONAL
	        $scope.changeDestinationsOrder = function() {
	        	var noInTrip = 1;
    			$("#destinationsReorder").children().each(function () {
    				var siteId = this.getAttribute("siteId");
    				if (siteId != null) {
    					var curSite = $filter('filter')(itineraryRegionalService.getItinerary().itinerarySites,{id:parseInt(siteId)},true)[0];
    					curSite.noInTrip = noInTrip;
    					noInTrip++;
    				}
    			});
	        	$scope.modalInstance.close("ok");
	        }
	        
	        /**
	         * Sort days
	         */
	        $scope.sortDays = function() {
	        	var arr = new Array();
	        	$('#sortableDays').children().each(function () {
	        	    arr.push(parseInt($(this).attr("dayno")));
	        	});
	        	$scope.modalInstance.close(arr);
	        }
	        
	        
		
			$scope.askQuestion = function() {
	        	 $scope.emailAddress = $("#emailAddressSend").val(); //Get the value using jquery to avoid angular autofil issue
				 if (isEmail($scope.emailAddress) && $scope.userQuestion.length > 0) {
					  $scope.submitted = true;
					  $http.post(appRoot + '/jsp/contactus.jsp', {
						  txtSubject : "Question on: " + window.location.href,
						  txtDesc:  $scope.userQuestion,
						  txtEmail:  $scope.emailAddress}).
					  success(function(data, status, headers, config) {
						  /*require(["app/core/login"], function(LoginMgr) {
								LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
							})*/
						  	$scope.submittedOk = true;
						  	$scope.submitted = false;
						  	//$scope.confirm('ok');
						  }).
						  error(function(data, status, headers, config) {
							  console.log('sent fail');  
						    
						  });

					  
					  //$$scope.modalInstance.close();
				  } else {
					  if ($scope.userQuestion.length == 0) {
						  $("#invalidQuestion").css("visibility","visible");
					  } else {
						  $("#invalidEmail").css("visibility","visible");						  
					  }
				  }
	        }
	        
	        $scope.downloadGuide = function(type,hasEmailConsent) {
	        	 $scope.emailAddress = $("#emailAddressSend").val(); //Get the value using jquery to avoid angular autofil issue
				 if (isEmail($scope.emailAddress)) {
					 if ($scope.requireEmailConsent) {
	        			var consent = hasEmailConsent ? "ok_with_consent" : "ok_no_consent";
						//if consent is required fire OK and also ok_consent/ok_no_consent
						fireEvent("Download",$scope.argsObj.type + "_regional_" + $scope.abNum + "_" + consent,$scope.argsObj.from);
					}
					fireEvent("Download",$scope.argsObj.type + "_regional_" + $scope.abNum + "_ok",$scope.argsObj.from);
					 var waitFor = 2000;
					 if ($scope.doDownloadComplete($scope.startDate,false)) {
						 itineraryRegionalService.getItineraryDataMgr().setStartDate($scope.startDate);
						 itineraryRegionalService.saveItinerary();
					 } 
				 
					  $scope.submitted = true;
					  $timeout(function(hasEmailConsent) {
						  $http.post(appRoot + '/itineraries/send', {
							  downloadType: type,
							  emailTo : $scope.emailAddress, 
							  itrId : $scope.itinerary.id,
							  itrName: $scope.itinerary.name,
							  isMeter: getIsMeter() ? 1 : 0,
							  lang: $scope.lang != "en" ? $scope.lang : null,
							  itrConflicts: false,
							  itrLegalName: $scope.itinerary.legalName,
							  itrLink: window.location.href}).
						  success(function(data, status, headers, config) {
							  emailConsentService.updateUserConsent(hasEmailConsent,$scope.emailAddress);
							  /*require(["app/core/login"], function(LoginMgr) {
									LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
								})*/
								
								$timeout(function() {
								  	$scope.submittedOk = true;
								  	$scope.submitted = false;
								  	/*if ($scope.emailAddress.toLowerCase().indexOf("yahoo.") > 0 || $scope.emailAddress.toLowerCase().indexOf("aol.") > 0 || $scope.emailAddress.toLowerCase().indexOf("verizon.") > 0) {
								  		fireEvent("Download", "Itinerary - Yahoo mail try again show");
								  		$scope.yahooMail = true;
								  	}*/
								}, 2000);
								
		
							  }).
							  error(function(data, status, headers, config) {
								  //console.log('sent fail');
								  throw "download regional itinerary failed " + data;
							  });
					  }, waitFor);
					  
				  } else {
					  $("#invalidEmail").css("visibility","visible");
					  fireEvent("Download",$scope.argsObj.type + "_regional_" + $scope.abNum + "_invalid_email",$scope.emailAddress);
				  }
	        }
	        
	        $scope.yahooTryAgain = function() {
	        	$scope.yahooMail=false;
	        	$scope.submittedOk=false;
	        	fireEvent("Download", "Yahoo mail try again clicked");
	        }
	        
	        $scope.shareEmail = function(subject) {
	        	$scope.emailAddress = $("#emailAddressSend").val(); //Get the value using jquery to avoid angular autofil issue
				 if (isEmail($scope.emailAddress)) {
					  $scope.submitted = true;
					  var msg = $scope.shareMessage;
					  msg = msg.replace(/(\r\n|\n|\r)/g,"<br />");
					  $http.post(appRoot + '/ws/shareItinerary', {
						  subject : "",
						  body: msg,
						  to: $scope.emailAddress,
						  fromName: ""}).
						  success(function(data, status, headers, config) {
							  /*require(["app/core/login"], function(LoginMgr) {
									LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
								})*/
								
								$timeout(function() {
								  	$scope.submittedOk = true;
								  	$scope.submitted = false;
								}, 2000);
							  }).
						  error(function(data, status, headers, config) {
							  console.log('sent fail');  
						    
						  });
				  
				  } else {
					  $("#invalidEmail").css("visibility","visible");
					  console.log("Please enter a valid email address");
				  }
	        }
		
	        /**
	         * Share the app and handle register user
	         */
		 $scope.shareApp= function(hasEmailConsent) {
	        	$scope.emailAddress = $("#emailAddressSend").val(); //Get the value using jquery to avoid angular autofil issue
				 if (isEmail($scope.emailAddress)) {
					if ($scope.requireEmailConsent) {
						 var consent = hasEmailConsent ? "ok_with_consent" : "ok_no_consent";
						 fireEvent("Download","download_app_" + $scope.abNum + "_" + consent,$scope.argsObj.from);
					}
					fireEvent("Download","download_app_" + $scope.abNum + "_ok",$scope.argsObj.from);
					$("#invalidEmail").css("visibility","hidden");
					$scope.submitted = true;
					$http.post(appRoot + '/itineraries/send', {
						  downloadType: "app",
						  emailTo : $scope.emailAddress, 
						  itrId : $scope.itinerary.id,
						  itrName: $scope.itinerary.name,
						  isMeter: 1,
						  itrLegalName: $scope.itinerary.legalName,
						  itrLink: window.location.href}).
						  success(function(data, status, headers, config) {
			
								$timeout(function() {
								  	$scope.submittedOk = true;
								  	$scope.submitted = false;
								  	if (!$scope.loginMgr.isLogin()) {
								  		 $http.post(appRoot + '/ws/login/clientonly', {
											  clientUniqueId: getUserUniqueId(),
											  email: $scope.emailAddress}).
											  	success(function(data, status, headers, config) {	
											  		if (data.isNewEmail) {
											  			$scope.askPasswd = true;
														$scope.submittedOk = false;
											  		}
											  		emailConsentService.updateUserConsent(hasEmailConsent,$scope.emailAddress);
											  		/*require(["app/core/login"], function(LoginMgr) {
														LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
													});*/
											  	}).error(function(data, status, headers, config) {
													//console.log('sent fail');
											  		throw "share app failed " + data;
												});
										
									} else {
										/*require(["app/core/login"], function(LoginMgr) {
											LoginMgr.getInstance().modifyLoginData($scope.emailAddress, true);
										});*/
									}
								  	
								}, 2000);
							  }).error(function(data, status, headers, config) {
								  //console.log('sent fail');
								  throw "share app failed " + data;
							  });
					  //$$scope.modalInstance.close();
				  } else {
					  $("#invalidEmail").css("visibility","visible");
					  fireEvent("Download","download_app_" + $scope.abNum + "_invalid_email",$scope.emailAddress);
				  }
	        }
		 
		var LOGIN_ERROR_USER_EMAIL_EXISTS = 10;
	    var LOGIN_ERROR_USER_NOT_FOUND = 11;
		 $scope.doRegister = function() {
			
			if (! $scope.password.match(/^([a-zA-Z0-9]{6,})$/)) {
				fireEvent("login", "signup invalid password");
				$scope.badPassword = true;
				return;
			}
			$scope.badPassword = false;
			$scope.submitted = true;
			LoginMgr.getInstance().signup($scope.emailAddress, $scope.password, "", "").then(function(loginResult) {
				if (loginResult.errorId > 0) {
					if (loginResult.errorId == LOGIN_ERROR_USER_EMAIL_EXISTS) {
						fireEvent("login", "signup user email exists");
						$scope.alreadyRegistered = true;
						$scope.submitted = false;
					}
					else {
						fireEvent("Error", "login-signup-exception", null, loginResult.errorMessage);
					}
					$scope.loginRuinning = false;
				}
				else  {
					$scope.submittedOk = true;
				  	$scope.submitted = false;
				  	$( "body" ).trigger( "login_done", [] );
				}
				
				$scope.$apply();
			}, function(e) {
				$scope.loginRuinning = false;
				fireEvent("Error", "login-signup unknown error");
			});	
		 }
	        

		};
		
		
		
		
        function handleScroll() {
        	if ($location.url().indexOf("itinerar") < 0) {
				//don't show when not in itinerary page
				return;
			}
        	var mapWrapper = $("#map-drawer-wrapper");
        	var indicator = $("#divTopTabIndicator");
        	var topTab = $("#tabsMain").find("ul:first");
        	var daysMenuDiv = $("#itinerary_blue_bar");
        	if ($location.hash().indexOf("attraction") >= 0) {
        		daysMenuDiv = $("#attractions_blue_bar");
        		mapWrapper = $("#attractions-list-wrapper");
        	} else if ($location.hash().indexOf("activities") >= 0) {
        		daysMenuDiv = $("#activities_blue_bar");
        		mapWrapper = $("#activities-list-wrapper");
        	}
	    	var scrollTop = $(window).scrollTop();
	    	var curElementTop = 	indicator.offset().top; 
	    	
	    	var width = $("#itineraryController").css("width").replace("px","");
	    	var widthInt = parseInt(width);
	    	if (reportScrollToDetails && $("#belowMap").offset()) {
	    		var viewableOffset = $("#belowMap").offset().top - scrollTop;
	    		if (viewableOffset < 100) {
	    			reportScrollToDetails = false;
	    			fireEvent("Itinerary-Regional", "scrolled to itinerary details");
	    		}
	    	}
	    	
	    	
        	if (scrollTop > (curElementTop - 10) ) {
        		topTab
    			.css("position", "fixed")
    			.css("top", "0px")
    			.css("width", widthInt-30 + "px")
    			.css("z-index", "999")
    			.css("background-color", "#FFFFFF");
       			mapWrapper.css('margin-top','100px');
        		if ($location.hash().indexOf("attraction") >= 0 || $location.hash().indexOf("activities") >= 0) {
        			daysMenuDiv
	        		.css("position", "fixed")
	    			.css("top", "56px")
	    			.css("width", widthInt -30 + "px")
	    			.css("z-index", "999");
        		} else {
        			daysMenuDiv
	        		.css("position", "fixed")
	    			.css("top", "56px")
	    			.css("width", widthInt+ "px")
	    			.css("z-index", "999")
	    			.css("background-color", "#FFFFFF");
        		}
        		
        		
        		indicator.css("height", "10px");
        		
        		//$("#divTopSummaryContainer").css("padding-top", "100px");
        		
        		//topTab.find(".toptab").css("padding", "10px 0px 10px 0px");
        	}
        	else {
        		topTab
    			.css("position", "relative")
    			.css("top", "");
        		
        		daysMenuDiv
    			.css("position", "relative")
    			.css("padding-top", "")
    			.css("top", "");
        		 mapWrapper.css('margin-top','0px');
        		//topTab.find(".toptab").css("padding", "");
        		indicator.css("height", "0px");
        		//$("#divTopSummaryContainer").css("padding-top", "");
        	}
        }
	   

	
		
	}]);
	
});	
define('ngApp/website/itinerary-regional/directives/add-destinations/addDestinationsController',[ "app/core/login",
        "ngApp/website/main/main",
        "app/extensions/core/paidActivityRedirect",
        "app/core/mapServices",
        "app/mobile/core/mapLoader",
        "app/itinerary/itineraryDataMgr",
        "app/itinerary/userItineraryDao",
        "app/itinerary/itinerarySite",
        "keepinview",
        "ngApp/website/itinerary-regional/mapMgr",
        "ngApp/website/map/mapMgr"],
    function(LoginMgr,main,PaidActivityRedirect,MapServices,MapLoader,ItineraryDataMgr,UserItineraryDao,ItinerarySite,Sortable,MapMgr,GlobalMapMgr) {
	var app = angular.module('visitacity');
	
	

	app.controller('addDestinationsController',['$scope','$rootScope','$http','$q','$filter','$routeParams','$timeout','$uibModal','$templateCache','$compile',
	                                      'GlobalDefs','CityService','activitiesService','$location','blockUI','anchorSmoothScroll','itineraryRegionalService',
	                                      'dataWearhouseService','$window','GlobalDefsNew','redirectPaScv','MyPlansService','scrollKeeper',
	                                      'attractionsService','CurrenciesService','lastModService','GetCitiesService','CitySearch',
	                                       function($scope,$rootScope,$http,$q,$filter,$routeParams,$timeout,$uibModal,$templateCache,$compile,
	                                    		   GlobalDefs,CityService,activitiesService,$location,blockUI,anchorSmoothScroll,itineraryRegionalService,
	                                    		   dataWearhouseService,$window,GlobalDefsNew,redirectPaScv,MyPlansService,scrollKeeper,
	                                    		   attractionsService,CurrenciesService,lastModService,GetCitiesService,CitySearch) {
		
		var curItr = null;
		$scope.cityObj = null;
		$scope.cityService = CityService;
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.orderField = "bestFit";
		$scope.filterRes = null;
		var descriptions = null;
		$scope.lang = $routeParams.lang != null ? $routeParams.lang : getActiveLang(true); 
		var w1 = $scope.$watch('cityService.getCurCity()', function(newVal, oldVal) {
			if (newVal != null && $scope.activitySvc == null) {
				$scope.cityObj = CityService.getCurCity();
				prepareLastMod();
			}	
    	});
		
		function prepareLastMod() {
			lastModService.setLastMod($scope.cityObj.legalName).then(
		   			 function(results) {
		   				$scope.loadData();
		   			 }, function(errors) {
		   			 
		   			 }
		   	);
		}
		
		
		$scope.loadData = function() {
			
			var callUrl = '/jsonws/' + $scope.cityObj.legalName + '/cityDescriptions';
			if ($scope.lang != "en") {
				callUrl += "/" + $scope.lang;
			}
			var callA = GetCitiesService.async();
			var callB = dataWearhouseService.getData(callUrl,"cityDescriptions" + $scope.cityObj.legalName + $scope.lang);
			var ajaxLoadTiming = new TrackTiming("PageCoreLoadNew", "ajax_data_time");
			$q.all(new Array(callA,callB)).then(
		   			 function(results) {
		   				ajaxLoadTiming.send();
		   				$scope.citiesArr = results[0];
		   				descriptions = results[1];
		   				
		   				$scope.init();
				
		   			 }, function(errors) {
		   			 
		   			 }
		   	);
		}
		
		$scope.init = function() {
			var mapSvc = new MapServices();
			var cityCount = 0;
			$scope.productionCountryCitiesArr = $filter('filter')($scope.citiesArr,
						function(value, index){ 
							value.description = descriptions.data[value.id]
							if (value.status == "production" &&
									(value.cityType == null || value.cityType == "city") &&
									value.country.id == $scope.cityObj.country.id) {
								cityCount++;
								for (var i=0;i<curItr.itinerarySites.length;i++) {
									var curDest = curItr.itinerarySites[i];
									if (curDest.city != null && curDest.city.id == value.id) {
										//exclude destinations already in the itinerary
										return false;
									}
									var curDest = curItr.itinerarySites[i];
									var distance = mapSvc.calcDistanceBetween(curDest.latitude,curDest.longitude,value.latitude,value.longitude);
									if (value.nearest == null || value.nearest > distance) {
										value.nearest = distance;
										value.nearestTxt = $filter('createRouteString')(1,distance,null,true) + " " + $filter('translateFilter')('from') + " " + curDest.name + " (" + $filter('translateFilter')('day') + " "+ curDest.startDay +")";
									}
								}
								return true
							}
							return false;
						});
				$scope.productionCountryCitiesArr = $filter('orderBy')($scope.productionCountryCitiesArr, "numOfUserPlans", true); //sort by popularity
				var tenPer = (cityCount/100) * 10;
				var twenPer = (cityCount/100) * 20;
				for (var i=0;i<$scope.productionCountryCitiesArr.length;i++) {
					if (i<=tenPer) {
						$scope.productionCountryCitiesArr[i].popularity = "Highly Popular";
					} else if (i<=twenPer) {
						$scope.productionCountryCitiesArr[i].popularity = "Popular";
					} else {
						break;
					}
				}
				$scope.changeOrder($scope.orderField); 
		}
		
		var w2 = $scope.$watch(function(){
			return itineraryRegionalService.itinerary;
		}, function(newVal, oldVal){
			if (newVal != oldVal || curItr == null) {
				curItr = newVal;
				
			}
	    });
		
		$scope.changeOrder = function(field, isDesc) {
			$scope.orderField = field;
			if (field == "bestFit") {
				var outOfBoundsArr = new Array();
				var bounds = calculateCorners();
				$scope.filterRes = $filter('filter')($scope.productionCountryCitiesArr,
   						function(value, index){ 
   							if (value.latitude < bounds.topLat && value.latitude > bounds.bottomLat &&
   									value.longitude < bounds.rightLng && value.longitude > bounds.leftLng) {
   								return true
   							}
   							outOfBoundsArr.push(value);
   							return false;
   						});
				$scope.filterRes = $filter('orderBy')($scope.filterRes, "numOfUserPlans", true); //sort by popularity
				$scope.filterRes = $scope.filterRes.concat(outOfBoundsArr); //add other places to the end of the list
			} else {
				$scope.filterRes = $filter('orderBy')($scope.productionCountryCitiesArr, $scope.orderField, isDesc);
			}
		}
		
		/**
		 * Get the bounds of the existing itinerary (extended by 50km)
		 */
		function calculateCorners() {
			var latTopLeft = 0.0;// heights
			var latBottomRight = 0.0;//lowest
			var lngTopLeft = 0.0;//lowest
			var lngBottomRight = 0.0; //highest
			
			var earthRadius = 6378137;
			var offset = 50000; //extend by 50 km

			for (var i=0;i<curItr.itinerarySites.length;i++) {
				var curDest = curItr.itinerarySites[i];
				if (latTopLeft == 0.0) {
					latTopLeft = curDest.latitude;
					latBottomRight = curDest.latitude;
					lngTopLeft = curDest.longitude;
					lngBottomRight = curDest.longitude;
				} else {
					if (curDest.latitude > latTopLeft) {
						latTopLeft = curDest.latitude;
					} 
					if (curDest.latitude < latBottomRight) {
						latBottomRight = curDest.latitude;
					}
					if (curDest.longitude < lngTopLeft) {
						lngTopLeft = curDest.longitude;
					} 
					if (curDest.longitude > lngBottomRight) {
						lngBottomRight = curDest.longitude;
					}
				}
			}
			//log.info("TopRight: " + latTopLeft + "," + lngTopLeft + "::BottomLeft:" + latBottomRight+"," + lngBottomRight);
			var topRightRadLat = offset/earthRadius;
			var topRightRadLon = -offset/(earthRadius*Math.cos(Math.PI*latTopLeft/180));
			var topLeftlatOffset = latTopLeft + topRightRadLat * 180/Math.PI;
			var topLeftlonOffest = lngTopLeft + topRightRadLon * 180/Math.PI; 
			
			var bottomLeftRadLat = -offset/earthRadius;
			var bottomLeftRadLon = offset/(earthRadius*Math.cos(Math.PI*bottomLeftRadLat/180));
			var bottomRightlatOffset = latBottomRight + bottomLeftRadLat * 180/Math.PI;
			var bottomRighttlonOffest = lngBottomRight + bottomLeftRadLon * 180/Math.PI; 
			
			var obj = new Object();
			obj.topLat = topLeftlatOffset;
			obj.bottomLat = bottomRightlatOffset;
			obj.leftLng = topLeftlonOffest;
			obj.rightLng = bottomRighttlonOffest;
			return obj;
		}
		
		var txtSearchWatch = $scope.$watch('searchTxt', function (txtSearch) {
			$scope.noResults = false;
			if (txtSearch == null) {
				return;
			}
		    if (txtSearch != null && txtSearch.length > 0) {
		    	$scope.searchRunning = true;
				to5 = $timeout(function() {
					$scope.doSearchTxt(txtSearch);
				},500);
		    } else {
		    	$scope.init();
		    }
		 })
		 
		$scope.doSearchTxt = function(input) {
			input = $filter('latinize')(input);
			var resArr = new Array();
			var fuzzy = FuzzySet();
			var foundExact = false;
			
			for(var i=0;i<$scope.productionCountryCitiesArr.length;i++) {
	   	    	var cityName = $scope.productionCountryCitiesArr[i].name;
	   	    	cityName = $filter('latinize')(cityName);
	   	    	if (cityName.toLowerCase() == input.toLowerCase()) {
	   	    		resArr.unshift($scope.productionCountryCitiesArr[i]);
	   	    	} else if (cityName.toLowerCase().indexOf(input.toLowerCase()) >= 0) {
	   	    		resArr.push($scope.productionCountryCitiesArr[i]);
	   	    	} else {
	   	    		//try fuzzy search
	   	    		fuzzy.add(cityName);
    	   	    	fuzzyRes = fuzzy.get(input);
	   	    	}
	   	    }
	   	    
	   	    //fuzzy results
	   	    if (!foundExact && fuzzyRes != null) {
    	   	    for (var j=0;j<fuzzyRes.length;j++) {
    	   	    	var curRes =  fuzzyRes[j];
    	   	    	if (curRes.length == 2 && curRes[0] > 0.6) {
    	   	    		var city = $filter('filter')($scope.productionCountryCitiesArr , {name: curRes[1]},true)[0];
    	   	    		if (city != null) {
    		   	    		resArr.push(city);
    	   	    		}
    	   	    		
    	   	    	}
    	   	    }
	   	    }
	   	    $scope.filterRes = resArr;
		 }

	
		
	}]);
	
});	
define('ngApp/website/guides/guidesController',["ngApp/website/main/main"],
    function() {
	var app = angular.module('visitacity');

	app.controller('guidesController',['$scope','$rootScope','$http','$q','$filter','$routeParams','GlobalDefs','GetCitiesService','activitiesService','blockUI','lastModService','$window','hotelService',
	                                 function($scope,$rootScope,$http,$q, $filter, $routeParams,GlobalDefs,GetCitiesService,activitiesService,blockUI,lastModService,$window,hotelService) {
		
		blockUI.start("Loading...");
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.cityLegal = $routeParams.city;
		$scope.cityObj = null;
		$scope.guidesArr = new Array();
		$scope.paArr = new Array();
		$scope.pageName = "tips";
		$scope.lang = $routeParams.lang;
		var ajaxLoadTiming = new TrackTiming("PageCoreLoadNew", "ajax_data_time"); 
		
		lastModService.setLastMod($scope.cityLegal).then(
	   			 function(results) {
	   				loadData();
	   			 }, function(errors) {
	   			 
	   			 }
	   	);
 
		function loadData() {
			var callA = '/jsonws/' + $scope.cityLegal + '/guides-list/all';
			if ($routeParams.lang != "en") {
				callA += "/" + $routeParams.lang;
			}
			
			var callA = $http.get(callA);
			var callB = GetCitiesService.async();
			var callC = activitiesService.init($scope.cityLegal);
			$q.all(new Array(callA,callB,callC)).then(
	   			 function(results) {
	   				ajaxLoadTiming.send();
	   				$scope.cityObj = hotelService.isShowHotel(results[0].data.city,"guides");
	   				$scope.guidesArr = results[0].data.guides;
	   				$scope.paArr = activitiesService.getAllPromotedActivities();
	   				
	   				
	   				var bc = new Array();
   	  				bc.push({name: $filter('translateFilter')('Travel Tips')});
   	   				$rootScope.$broadcast("update_breadcrumb",bc, $scope.cityObj, $routeParams.lang);
   	   				
	   				$rootScope.$broadcast("update_main_header_width","guidesMain");	
	   				$window.document.title = $scope.cityObj.name + " Guides | Visit A City";
	   				individualPageLoadTiming.send();
	   				blockUI.reset();
	   				
	   			 }, function(errors) {
	   			 
	   			 }
			);
		}
		
		
	}]);
	
});	

define('ngApp/website/guide/guideController',["ngApp/website/main/main"],
    function() {
	var app = angular.module('visitacity');

	//Return the pass attraction text
	app.filter('removeGuideStyles', function(){
	   	 return function(str) {
	   		if (str) {
	   			str = str.replace(/<span/g, "<span class='forceFontSizeGuide'");
	   			str = str.replace(/<p/g, "<p class='forceFontSize'");
	   			str = str.replace(/cityPassClicked\('text'\)/g, "cityPassClickedNg(\'text\',globalCityPass)");
	   			str = str.replace(/@tag@itinerary::([a-zA-Z0-9\\-]+)@tag@/g, "<div itinerary-directive=$1></div>");
	   		}
	   		return str;
	   	 }
	});
	
	
	 app.directive('guideContentDirective',['$compile', function ($compile) {
    	 return function(scope, element, attrs) {
    		 scope.$watch(attrs.guideContentDirective, function(html) {
    			 element.html(html);
    		        $compile(element.contents())(scope);
    		 });
    	 }
    }]);
	 
	 app.directive('link',['$filter','$location', '$routeParams', function ($filter,$location,$routeParams) {
    	 return function(scope, element, attrs) {
    		 element.bind('click', function() {
    			var siteId = attrs.link.replace("site-","");
    			var site = $filter('filter')(scope.allAttractions,{id:parseInt(siteId)},true)[0];
    			//window.location.href = scope.appRoot + "/"+ $routeParams.lang +"/" + scope.cityObj.legalName + "/attractions/" + site.legalName;
    			$location.path("/"+ $routeParams.lang +"/" + scope.cityObj.legalName + "/attractions/" + site.legalName);
    			if(!scope.$$phase) scope.$apply();
    		 });
    	 }
    }]);
	 
	 app.directive('itineraryDirective',['$compile','$http','$templateCache','$filter','$timeout','$routeParams', function ($compile,$http,$templateCache,$filter,$timeout,$routeParams) {
    	 return function(scope, element, attrs) {
    		 $http.get(appWebRoot + '/directives/itinerary/itinerary-in-guide.html', {cache: $templateCache}).
	            success(function(content) {
	            	var tmpScope = scope.$new(true);
	            	tmpScope.imagesCdn = scope.imagesCdn;
	            	tmpScope.cityObj = scope.cityObj;
	            	var itineraryInt = null;
	            	//tmpScope.lang = getActiveLang(true);
	            	tmpScope.lang = $routeParams.lang;
	            	tmpScope.appRoot = appRoot;
	            	try {
	            		itineraryInt = parseInt(attrs.itineraryDirective);
	            	} catch (err) {}
	            	if (itineraryInt != null && !isNaN(itineraryInt)) {
	            		tmpScope.itinerary = $filter('filter')(scope.itinArr,{id:itineraryInt},true)[0];
	            	} else {
	            		tmpScope.itinerary = $filter('filter')(scope.itinArr,{legalName:attrs.itineraryDirective},true)[0];
	            	}
	            	
	            	var compiledContent = $compile(content)(tmpScope);
	            	$(element).html(compiledContent);
	            	
	            	$timeout(function() {
	            		//fix height based on the image so that read more will be at the bottom
	            		$("#" + tmpScope.itinerary.id  +"-text").css('height',$("#" + tmpScope.itinerary.id  +"-image").css("height"));
	            		$("#" + tmpScope.itinerary.id  +"-image").load(function() {
	            			//if image hasn't loaded wait for it
		    				$("#" + tmpScope.itinerary.id  +"-text").css('height',$(this).css("height"));
		    			});
		   			}, 500);
	            	
	            });
    		
    	 }

    }]);
	
	
	app.controller('guideController',['$scope','$rootScope','$http','$q','$filter','$routeParams','$timeout','CitySearch','GlobalDefs','GetCitiesService','activitiesService',
	                                  'dataWearhouseService','blockUI','attractionsService','lastModService','$window','hotelService',
	                                 function($scope,$rootScope,$http,$q, $filter, $routeParams,$timeout,CitySearch,GlobalDefs,GetCitiesService,activitiesService,
	                                		 dataWearhouseService,blockUI,attractionsService,lastModService,$window,hotelService) {
		
		blockUI.start("Loading...");
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.appRoot = GlobalDefs.getAppRoot();
		$scope.cityLegal = $routeParams.city;
		if (!$scope.cityLegal) {
			$scope.cityLegal = "tips";
		}
		$scope.cityObj = null;
		$scope.guide = null
		$scope.paArr = new Array();
		$scope.itinArr = new Array();
		$scope.allAttractions = new Array();
		$scope.pageName = "tips";
		$scope.numOfAds = 4;
		$scope.lang = $routeParams.lang;
		
		lastModService.setLastMod($scope.cityLegal).then(
	   			 function(results) {
	   				loadGuides();
	   			 }, function(errors) {
	   			 
	   			 }
	   	);
		
		function loadGuides() {
			var ajaxLoadTiming = new TrackTiming("PageCoreLoadNew", "ajax_data_time"); 
			var callA = '/jsonws/' + $scope.cityLegal + '/guide/' + $routeParams.guideLegal;
			var userSelectedPath = "";
			if ($routeParams.lang != "en") {
				callA += "/" + $routeParams.lang;
				userSelectedPath = "?lang=" + $routeParams.lang;
			}
			var callA = $http.get(callA);
			var callB = GetCitiesService.async();
			var callsArr = new Array(callA,callB);
			var skipValidation = false;
			if ($scope.cityLegal == "tips") {
				//get Activities for tips
				var callE = $http.get(appRoot + '/api/user/getUserSelectedActivities' + userSelectedPath);
				callsArr.push(callE);
				skipValidation = true;
			}
			//don't validate attractions/paid activities for tips city
			var callC = activitiesService.init($scope.cityLegal,false,false,skipValidation);
			var callD = attractionsService.init($scope.cityLegal,skipValidation);
			callsArr.push(callC);
			callsArr.push(callD);
			$q.all(callsArr).then(
	   			 function(results) {
	   				ajaxLoadTiming.send();
	   				$scope.cityObj = hotelService.isShowHotel(results[0].data.city,"guide");
	   				$scope.guide = results[0].data.guideJson;
	   				$scope.guide.description = $filter('removeGuideStyles')($scope.guide.description);
	   				$scope.itinArr = results[0].data.itinsJson;
	   				$scope.paArr = activitiesService.getAllPromotedActivities();
	   				globalCityPass = results[0].data.paPass;
	   				$scope.allAttractions = attractionsService.allAttractionsData.lstSites;
	   				
	   				if (results[4] != null) {
	   					$scope.paArr = results[4].data.lstPaidActivity;
	   				}
	   				
	   				var bc = new Array();
	   				if ($scope.cityLegal != "tips") {
	   					bc.push({name: $filter('translateFilter')('Travel Tips'),url: $scope.appRoot + "/"+ $routeParams.lang +"/" + $scope.cityObj.legalName + "/guides-list/all"});
	   				}
	   				bc.push({name: $scope.guide.name});
   	   				$rootScope.$broadcast("update_breadcrumb",bc, $scope.cityObj, $routeParams.lang);
   	   				
	   				$rootScope.$broadcast("update_main_header_width","guidesMain");	
	   				$window.document.title = $scope.guide.name + " | Visit A City";
	   				
	   				individualPageLoadTiming.send();
	   				blockUI.reset();
	   				/**
	   				 * Calculate the number of ads required on the right side
	   				 */
	   				$timeout(function() {
	   					var h = $("#guideDescColumn").css("height").replace("px","");
	   			    	var hInt = parseInt(h);
	   			    	$scope.numOfAds = Math.floor(h/400);
		   			}, 500);
	   				
	   			 }, function(errors) {
	   			 
	   			 }
			);
		}
		
	}]);
	
});	

define('ngApp/website/services/activitiesService',[mainPath],
    function(main) {
    var app = angular.module('visitacity');

	app.service('activitiesService', ['$http','$q','$filter','$location','dataWearhouseService','$routeParams','validateJsonService','visitDebugSvc','exprService',
	                                  function($http, $q, $filter,$location,dataWearhouseService,$routeParams,validateJsonService,visitDebugSvc,exprService) {
		
		this.cityPaidActivities = null;
		this.cityPaidActivitiesPrices = null;
		this.allActivities = null;
		this.basicSeedArray = null;
		this.cityPaidActivityCategories = null;
		this.lstPaidActivitySec = null;
		this.mostCommonKeyword = null;
		this.userClickedActivities = null;
		this.arClickedItemsPositions = null;
		
		/**
		 * Make sure experiment variables are loaded
		 */
		this.init = function(cityId,doReset,doIgnoreOverride,skipValidation) {
			var _self = this;
			var deferred = $q.defer();
			exprService.getExprPromise().then(function() {
				_self.postInit(cityId,doReset,doIgnoreOverride,skipValidation).then(function () {
					deferred.resolve();
				});
			});
			return deferred.promise;
		}
		
		this.postInit = function(cityId,doReset,doIgnoreOverride,skipValidation) {
			var _self = this;
			
			_self.arClickedItemsPositions = globExprVars != null && globExprVars["activities-sort-pos"] != null ? globExprVars["activities-sort-pos"] : [0,2,6,13,19];
			var deferred = $q.defer();
			var wearhouseId = "activitiesServiceData" + cityId;
			var callA = '/jsonws/' + cityId + '/city-paid-activities-v3' + getActivitiesVendorPath(); 
			if (doIgnoreOverride) {
				callA = '/jsonws/' + cityId + '/city-paid-activities-v3-no-override' + getActivitiesVendorPath();
			}
			//if ($location.url().indexOf("/activities/") >=0) {
			var lang = $routeParams.lang != null ? $routeParams.lang : getActiveLang(true);
			if (lang != "en") {
				callA += "/" + lang;
				wearhouseId += lang;
			}
			//}
			if (doReset) {
				dataWearhouseService.put(wearhouseId,null,true); //reset data
			}
			
			var callB = dataWearhouseService.getData(callA,wearhouseId);
			var callC = dataWearhouseService.getData('/jsonws/' + cityId + '/paid-activities-prices' + getActivitiesVendorPath(),"activitiesServicePriceData" + cityId);
			
			var callsArr = new Array(callB,callC);
			
			var enableActivitiesSort = visitDebugSvc.getValue(globExprVars["activities-sort-2"] == "sort",true);
			if (enableActivitiesSort) {
				var callD = dataWearhouseService.getData(appRoot + '/api/user/getUserClickedActivitiesNew?city=' + cityId,"userClicedActivities"+cityId);
				callsArr.push(callD);
			}
			
			
			//var callB = dataWearhouseService.getData(new Array(callA),"activitiesServiceData");
			
			$q.all(callsArr).then(
					function(response) {
						if (!skipValidation) {
							validateJsonService.validateJsonObject(response[0].data.lstPaidActivity, "city-paid-activities-v3", "array", 1, "id,title");
						}
						if (enableActivitiesSort) {
							_self.setUserClickedActivities(response[2].data);
						}
						_self.cityPaidActivities = response[0].data.cityPaidActivities;
						_self.cityPaidActivitiesPrices = response[1].data;
						_self.allActivities = response[0].data.lstPaidActivity;
						_self.cityPaidActivityCategories = response[0].data.lstPaidActivityCategory;
						_self.lstPaidActivitySec = response[0].data.lstPaidActivitySec;
						_self.mostCommonKeyword = response[0].data.mostCommonKeyword;
						var maxPromotedActivities = 15;
						if (_self.cityPaidActivities.promotedActivitiesList.length > maxPromotedActivities) {
							_self.cityPaidActivities.promotedActivitiesList = _self.cityPaidActivities.promotedActivitiesList.slice(0, maxPromotedActivities);
						}
						
						_self.setPrices();
						_self.createBasicSeedArray();
						deferred.resolve();
					},
					function(e) {
						validateJsonService.validateJsonObject(null, "city-paid-activities-v3", null, null, null);
						deferred.reject(e);
					}
			)
			
			return deferred.promise;
		}	
		
		this.setUserClickedActivities = function(userClickedActivities) {
			var _self = this;
			var arr = new Array();
			for (row in userClickedActivities) {
				var clickedActId = userClickedActivities[row][0];
				var clickedDate = new Date(userClickedActivities[row][1]);
				var dateDiff = _self.dateDiffInDays(clickedDate,new Date());
				if (dateDiff > 30) {
					//disregard clickes older than 30 days
					continue;
				}
				//console.log(clickedDate+":"+dateDiff);
				var foundAct = null;
				for (var i=0;i<arr.length;i++) {
					if (clickedActId == arr[i].id) {
						foundAct = arr[i];
						break;
					}
				}
				if (foundAct != null) {
					foundAct.clickedCount += 1;
					
				} else {
					foundAct = new Object();
					foundAct.id = clickedActId;
					foundAct.clickedCount = 1;
					foundAct.lastDateClick = dateDiff;
					arr.push(foundAct);
				}
				
			}
			
			//calculate the score
			for (var i=0;i<arr.length;i++) {
				var cur = arr[i];
				cur.score = 2.5 * cur.clickedCount > 10 ? 10 : 2.5 * cur.clickedCount;
				//console.log(cur.id+"(clicks)::" + cur.clickedCount + " ["+cur.score+"]")
				var dateScore = 2;
				if (cur.lastDateClick <=1) {
					dateScore = 10;
				} else if (cur.lastDateClick <=3) {
					dateScore = 8;
				} else if (cur.lastDateClick <=7) {
					dateScore = 6;
				} else if (cur.lastDateClick <=15) {
					dateScore = 4;
				}
				//console.log(cur.id+"(date)::" + cur.lastDateClick + " ["+dateScore+"]")
				cur.score += dateScore;
				//console.log(cur.id+"(total):: ["+cur.score+"]")
			}
			
			arr = $filter('orderBy')(arr, 'score', true);
			arr = $filter('limitTo')(arr,5);
			this.userClickedActivities = arr;
		}
		
		this.dateDiffInDays = function (a, b) {
			var _MS_PER_DAY = 1000 * 60 * 60 * 24;
			// Discard the time and time-zone information.
			var utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());
			var utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());
			return Math.floor((utc2 - utc1) / _MS_PER_DAY);
		}


		this.mapActivitiesSortIdx = {};
		this.sortByPopularity = function(arActivities) {
			var origArr = angular.copy(arActivities);
			var _self = this;
			
			/*arActivities = arActivities.sort(function(act1, act2) {
				var act1Idx = _self.mapActivitiesSortIdx[act1.id];
				var act2Idx = _self.mapActivitiesSortIdx[act2.id];
				return act1Idx - act2Idx;
			});*/
			
			// add clicked activities
			var mapClickedActivities = {};
			
			
			for (var i=0;i<_self.arClickedItemsPositions.length;i++) {
				var curClickedItemRequiredIdx = parseInt(_self.arClickedItemsPositions[i]);
				
				
					
				//for (curViewedActivityId in _self.userClickedActivities) {
				for (var j=0;j<_self.userClickedActivities.length;j++) {					
					// get clicked activity id and verify its not been promoted yet 
					var curViewedActivityId = _self.userClickedActivities[j].id
					if (mapClickedActivities[curViewedActivityId] != null) {
						continue;
					}					
					
					mapClickedActivities[curViewedActivityId] = "";
					
					var idxInArr = this.getActivityIdxByVendorId(arActivities, curViewedActivityId);					
					if (idxInArr > -1) {
						//console.log("curClickedItemRequiredIdx", curClickedItemRequiredIdx, "idxInArr", idxInArr);
						var curActivity = arActivities[idxInArr];
						curActivity.highlight = true; //set the activity to be highlighted
						if (idxInArr > curClickedItemRequiredIdx) {
							// remove and add item at required index
							arActivities.splice(idxInArr, 1);
							arActivities.splice(curClickedItemRequiredIdx, 0, curActivity);
						}
						
						break;
					}
				}				
				
			}
			
			return origArr; //test by returning the original array and not the sorted array
			//return arActivities;
		}
		
		//update prices
		this.setPrices = function() {
			for (var i=0;i<this.allActivities.length;i++) {
				var priceArr = this.cityPaidActivitiesPrices[this.allActivities[i].id];
				if (priceArr) {
					this.allActivities[i].price = priceArr[0]; 		
					this.allActivities[i].priceBeforeDiscount = priceArr[1];
				} 
			}
		}
		
		this.createBasicSeedArray = function() {
			this.basicSeedArray = [];
			var sessionSeedData;
			//var sessionSeedData = sessionStorage.getItem("activities_seeds");
			if (hasStorage) {
				sessionSeedData =  localStorage.getItem("activities_seeds");
			} else {
				sessionSeedData =  readCookie("activities_seeds");
			}
			if (sessionSeedData != null) {
				this.basicSeedArray = sessionSeedData.split(",");
				for (var i=0;i<this.basicSeedArray.length;i++) {
					this.basicSeedArray[i] = parseFloat(this.basicSeedArray[i]);
				}
			}
			else {
				var str = "";
				for (var i=0;i<200;i++) {
					var curSeed = Math.random();
					this.basicSeedArray.push(curSeed);
					
					if (i > 0) {
						str += ",";						
					}
					str += curSeed;
				}
				
				try {
					//sessionStorage.setItem("activities_seeds", str);
					if (hasStorage) {
						sessionStorage.setItem("activities_seeds", str);
					} else {
						createCookie("activities_seeds",str);
					}
				}
				catch(e) {
					// nothing
				}				
			}
		}
		
		this.getAllPromotedActivities = function() {
			var promotedActivites = this.cityPaidActivities.promotedActivitiesList.clone();	
			promotedActivites = this.getPaidActivityFromIds(promotedActivites);
			promotedActivites = promotedActivites.concat(this.allActivities);
			promotedActivites = this.removeDoubles(promotedActivites);
			return promotedActivites;
		}

		this.getSitePaidActivitiesV2 = function(siteId, maxCount) {
			var site = $filter('filter')(this.cityPaidActivities.sitesList,{id : siteId}, true)[0];
			var res = new Array();
			if (site == null) {
				return res;
			}
			var siteAttachedPaidActivities = $filter('filter')(site.paidActivityList, 
					function(value, index) {
						if (value.matchLevel > 0 && value.matchLevel < 2500){
							return true;
						}
					}
			, true);
			for (var i=0;i<siteAttachedPaidActivities.length;i++) {
				var pa = $filter('filter')(this.allActivities,{id : siteAttachedPaidActivities[i].id}, true);
				if (pa.length > 0) {
					res.push(pa[0]);
				}
			}
			res = $filter('limitTo')(res,maxCount);
			if (res.length < maxCount) {
				//fill from list
				for (var i=0;i<this.allActivities.length;i++) {
					if (!this.allActivities[i].attachedToSite) {
						this.allActivities[i].attachedToSite = true;
						res.push(this.allActivities[i]);
						if (res.length >= maxCount) {
							break;
						}
					}
				}
			}
			return res;
		}
		
		this.getSitePaidActivities = function(siteId, maxCount) {
			maxCount = (maxCount != null) ? maxCount : this.cityPaidActivities.promotedActivitiesList.length;
			 
			// get site
			var site = $filter('filter')(this.cityPaidActivities.sitesList, 
					function(value, index){if (value.id == siteId){return true}}, true)[0];
			
			if (site == null) {
				return new Array();
			}
			// scramble promoted activities
			var siteSeed = site.noPerUsers < this.basicSeedArray.length ? site.noPerUsers : (site.no % this.basicSeedArray.length);
			var promotedActivites = this.cityPaidActivities.promotedActivitiesList.clone();	
			promotedActivites = this.getPaidActivityFromIds(promotedActivites);
			
			// remove top two
			promotedActivites = promotedActivites.slice(2, promotedActivites.length);
			promotedActivites = this.shuffle(promotedActivites, siteSeed);
			
			//console.log(siteId);
			//var doubleActivities = this.getDoubleActivities(promotedActivites);
			
			// add attached paid activities
			var siteAttachedPaidActivities = this.getPaidActivityFromIds(site.paidActivityList); 
			siteAttachedPaidActivities = $filter('filter')(siteAttachedPaidActivities, 
					function(value, index) {
						if (value.matchLevel > 0 && value.matchLevel < 2500){
							return true;
						}
					}
			, true);

			var isAttachedFirst = false;
			var firstPushToIdx = -1;
			
			for (var i=0;i<siteAttachedPaidActivities.length;i++) {
				var curAttachedPa = siteAttachedPaidActivities[i];
				
				if (i == 0) {
					if (curAttachedPa.reviewersNum >= 50) {
						// if reviewers greater than 50, take the first place
						firstPushToIdx = 0;
						promotedActivites.splice(0, 0, curAttachedPa);
					}
					else {
						// otherwise take index 2
						firstPushToIdx = 2;
						promotedActivites.splice(2, 0, curAttachedPa);
					}
				}
				else {
					for (var j=0;j<promotedActivites.length;j++){	
						// check for every attached activity is it has greater reviewers num than current.
						// if so, replace
						// don't replace activities on firstPushToIdx
						if (j != firstPushToIdx && 
								curAttachedPa.reviewersNum > promotedActivites[j].reviewersNum) {
							//promotedActivites.splice(j, 0, curAttachedPa);
							promotedActivites[j] = curAttachedPa;
							break;
						} 
					}
				}
			}
			
			// enter top two paid activities back
			var twoTopPaidActivities = this.cityPaidActivities.promotedActivitiesList.slice(0, 2); 
			
			// shuffle top activities (only on map page)
			if (window.location.href.indexOf("attractions-map") > -1 && this.basicSeedArray[siteSeed] > 0.5) {
				var tmp = twoTopPaidActivities[0];
				twoTopPaidActivities[0] = twoTopPaidActivities[1];
				twoTopPaidActivities[1] = tmp;
			}
				
			var top1Pos = (parseInt(this.basicSeedArray[siteSeed] * 10) % 2);
			
			if (firstPushToIdx == 2) {				
				// move idx 1 to idx 3 so the attached site will remain on idx 2
				promotedActivites.move(1, 3);
			}	
			else {
				top1Pos += 1; 
			}
			
			var top2Pos = (parseInt(this.basicSeedArray[siteSeed + 1] * 10) % 3) + 3;  
			
			promotedActivites.splice(top1Pos, 0, twoTopPaidActivities[0]);
			promotedActivites = this.removeDoubles(promotedActivites);			 
			promotedActivites.splice(top2Pos, 0, twoTopPaidActivities[1]);
			
			// remoe double and return
			promotedActivites = this.removeDoubles(promotedActivites);
			var activitiesAr = this.getPaidActivityFromIds(promotedActivites);
			activitiesAr = $filter('limitTo')(activitiesAr,maxCount);
			return activitiesAr;
		}
		
		this.getCategoryPaidActivities = function(catIndex, catName, limit) {
			var activitiesAr = new Array();
			if (catIndex != null) {
				catName =  this.cityPaidActivityCategories[catIndex].name;
			}
			if (catName != null) {
				activitiesAr = $filter('filter')(this.allActivities, 
					function(value, index) {
						for (var i=0;i<value.paidActivityCatergoryList.length;i++) {
							if (value.paidActivityCatergoryList[i].name == catName) {
								return true;
							}
						}
					}
				, true);
			} 
			
			if (limit) {
				activitiesAr = $filter('limitTo')(activitiesAr,limit);
			}
			
			return activitiesAr;
		}
		
		this.getAttractionAdForText = function(attraction) {
			var activitiesArr = this.getSitePaidActivities(attraction.id);
			var attractionName = attraction.shortTitle.replace("The ","");
			attractionName = attractionName.toLowerCase();
			var foundArr = new Array();
			for (var i=0;i<activitiesArr.length;i++) {
				var paName = activitiesArr[i].title.toLowerCase();
				var paDesc = activitiesArr[i].descriptionNoHtml.toLowerCase();
				if (paName.indexOf(attractionName) >=0 || paDesc.indexOf(attractionName) >=0) {
					//console.log("MATCH: " + attraction.shortTitle + " :: " + activitiesArr[i].title);
					foundArr.push(activitiesArr[i]);
				}
			}
			foundArr = $filter('orderBy')(foundArr, 'reviewersNum', true);
			return foundArr;
		}
		
		this.getItineraryRelatedAd = function(attractionsArr) {
			var activitiesObjectsArr = new Array();
			var catObjectsArr = new Array()
			for (var j=0;j<attractionsArr.length;j++) {
				if (attractionsArr[j].site != null) {
					var site =  attractionsArr[j].site;
					var activitiesArr = this.getSitePaidActivities(site.id,5);
					for (var i=0;i<activitiesArr.length;i++) {
						var curAct = activitiesArr[i];
						var okToProcess = true;
						//exclude categories
						for (var k=0;k<curAct.paidActivityCatergoryList.length;k++) {
							var name = curAct.paidActivityCatergoryList[k].name;
							if (name.toLowerCase().indexOf("day trip") >= 0 || name.toLowerCase().indexOf("multi-day") >= 0) {
								okToProcess = false;
								break;
							}
						}
						
						if (okToProcess) {
							activitiesObjectsArr = this.updateObjArr(activitiesObjectsArr,curAct,curAct.id,site);
						}
						
					}
				}
			}
			activitiesObjectsArr = $filter('orderBy')(activitiesObjectsArr, 'count', true);
			//activitiesObjectsArr = $filter('limitTo')(activitiesObjectsArr);
			for (var i=0;i<activitiesObjectsArr.length;i++) {
				//console.log(activitiesObjectsArr[i].activity.title + " :: " + activitiesObjectsArr[i].count + " attractions");
				for (var j=0;j<activitiesObjectsArr[i].activity.paidActivityCatergoryList.length;j++) {
					var name = activitiesObjectsArr[i].activity.paidActivityCatergoryList[j].name;
					if (name != "Top Activities" && name != "All Activities" && name != "Tours & Sightseeing") {
						var id = activitiesObjectsArr[i].activity.paidActivityCatergoryList[j].id;
						if (name.toLowerCase().indexOf("walking") >= 0) {
							id = "Walking Tours";
						}
						catObjectsArr = this.updateObjArr(catObjectsArr,activitiesObjectsArr[i].activity.paidActivityCatergoryList[j],id,null,activitiesObjectsArr[i].activity);
						//console.log("\t" + activitiesObjectsArr[i].activity.paidActivityCatergoryList[j].name);
					}
					
				}
			}
			
			catObjectsArr = $filter('orderBy')(catObjectsArr, 'count', true);
			catObjectsArr = $filter('limitTo')(catObjectsArr,1);
			for (var i=0;i<catObjectsArr.length;i++) {
				//console.log("\n\n" +  catObjectsArr[i].activity.name);
				catObjectsArr[i].activitiesArr = $filter('unique')(catObjectsArr[i].activitiesArr,"id");
				catObjectsArr[i].activitiesArr = $filter('orderBy')(catObjectsArr[i].activitiesArr, 'reviewersNum', true);
				for (var j=0;j<catObjectsArr[i].activitiesArr.length;j++) {
					//console.log("\t" +  catObjectsArr[i].activitiesArr[j].title);
				}
			}
			
			return catObjectsArr[0];
		}
		
		this.updateObjArr = function(objArr,activity, activityId ,site,actForList) {
			var found = null;
			
			for (var i=0;i<objArr.length;i++) {
				if (objArr[i].activityId == activityId) {
					found = objArr[i];
					found.sitesArr.push(site);
					if (actForList) {
						found.activitiesArr.push(actForList);
					}
					found.count += 1;
					break;
				}
			}
			if (found == null) {
				found = new Object();
				found.activityId = activityId ;
				found.activity = activity;
				found.sitesArr = new Array(site);
				if (actForList) {
					found.activitiesArr = new Array(actForList);
				}
				found.count = 1;
				objArr.push(found)
			}
			
			return objArr;
		}
		
		this.shuffle = function(o, seed) { 
		  var m = o.length, t, i;

		  // While there remain elements to shuffle…
		  while (m) {

		    // Pick a remaining element…
		    i = Math.floor(this.basicSeedArray[m+seed] * m--);

		    // And swap it with the current element.
		    t = o[m];
		    o[m] = o[i];
		    o[i] = t;
		  }

		  return o;
		}
		
		
		this.removeDoubles = function(ar) {
			var arUnique = [];
			var foundIds = {};
		
			for (var i=0;i<ar.length;i++) {
				if (ar[i] != null && foundIds[ar[i].id] == null) {
					foundIds[ar[i].id] = "";
					arUnique.push(ar[i]);
				}
			}
			
			return arUnique;
		}
		
		this.getActivityIdxById = function(ar, id) {
			var idx = -1;
			
			for (var i=0;i<ar.length;i++) {
				if (ar[i].id == id) {
					return i;
				}
			}
			
			return idx;
		}
		
		this.getActivityIdxByVendorId = function(ar, id) {
			var idx = -1;
			
			for (var i=0;i<ar.length;i++) {
				if (ar[i].vendorProductId == id) {
					return i;
				}
			}
			
			return idx;
		}
		
		this.getDoubleActivities = function(ar) {
			var foundIds = {};
			var doubleActivities = [];
			
			for (var i=0;i<ar.length;i++) {
				if (foundIds[ar[i].id] != null) {
					doubleActivities.push(ar[i].id);
				}
				else {
					foundIds[ar[i].id] = "";
				}
			}
			
			return doubleActivities;
		}
		
		this.getPaidActivityFromIds = function(arrIds) {
			var arrPas = [];
			
			for (var i=0;i<arrIds.length;i++) {
				var pa = this.getPaidActivityForId(arrIds[i].id);
				//pa = $.extend({}, pa);
				arrPas.push(pa);
				
				if (pa != null && arrIds[i].matchLevel != null) {
					pa.matchLevel = arrIds[i].matchLevel;
				}				
			}
			
			return arrPas;
		}
		
		this.getPaidActivityForId = function(id) {
			var pa = $filter('filter')(this.allActivities, 
					function(value, index){if (value.id == id){return true}}, true)[0];
			return pa;
		}

		
	}]);       
});	

    	

define('ngApp/website/services/attractionsService',[mainPath],
    function(main) {
    var app = angular.module('visitacity');

	app.service('attractionsService', ['$http','$q','dataWearhouseService','$filter','$routeParams','validateJsonService', 
	                                  function($http,$q,dataWearhouseService,$filter,$routeParams,validateJsonService) {
		
		this.allAttractionsData = null;
		this.allRestData = null;
		this.openingHours = null;
		this.itrsUsedBy = null;
		this.wasFliped = new Object();
		this.deferred;	
		this.cleanup = function() {
			var _self = this;
			_self.allAttractionsData = null;
			_self.openingHours = null;
			_self.itrsUsedBy = null;
			_self.wasFliped = new Object();
		}
		
		this.init = function(cityId,skipValidation) {
			var _self = this;
			var deferred = $q.defer();

			var langStr = ""; 
			var langWearhouse = "";
			var lang = $routeParams.lang != null ? $routeParams.lang : getActiveLang(true);
			
			if (lang != "en") {
				langStr = "/" + lang;
				langWearhouse = lang;
			}
			
			var callA = dataWearhouseService.getData('/jsonws/' + cityId  + '/attractions/all' + getActivitiesVendorPath() + getWebsiteSuffix() + langStr ,"attractionsData" + cityId + langWearhouse);
			var callB = dataWearhouseService.getData('/jsonws/' + cityId  + '/city-weekly-update',"cityWeeklyUpdtae" + cityId);
			//var callC = dataWearhouseService.getData('/jsonws/' + cityId  + '/attractions/restaurant' + langStr,"restaurantData" + cityId + langWearhouse);
			$q.all(new Array(callA,callB)).then(
					function(response) {
						//validate unless it's without attractions or country/region or skip is requested
						if (response[0].data.city.numOfPlans > 0 &&  response[0].data.city.cityType == "city" && response[0].data.city.legalName != "tips") {
							validateJsonService.validateJsonObject(response[0].data.lstSites, "attractions/all", "array", 3, "id,shortTitle");
						} 
						_self.allAttractionsData = response[0].data;
						_self.setAttractionsContactInformation();
						//_self.allRestData = response[2].data.lstSites;
						_self.openingHours = response[1].data.lstOpeningHours;
						_self.itrsUsedBy = response[1].data.itrUsedBy;
						if (_self.wasFliped[cityId] == null) {
							_self.allAttractionsData.lstSites = _self.flipCords(_self.allAttractionsData.lstSites);
							//_self.allRestData = _self.flipCords(_self.allRestData);
							_self.wasFliped[cityId] = true;
						}
						_self.setOpeningHours();
						deferred.resolve();
					},
					function(e) {
						validateJsonService.validateJsonObject(null, "attractions/all", null, null, null);
						deferred.reject(e);
					}
			)
			
			return deferred.promise;
		}
		
		
		this.flipCords = function(arr) {
			for (var i=0;i<arr.length;i++) {
				var lat = arr[i].longitude;
				var long = arr[i].latitude;
				arr[i].latitude = lat;
				arr[i].longitude = long;
			}
			return arr;
		}
		
		//update prices
		this.setOpeningHours = function() {
			for (var i=0;i<this.allAttractionsData.lstSites.length;i++) {
				var curSite = this.allAttractionsData.lstSites[i];
				var siteOpeningHours = this.getOpeningHoursForSite(curSite.id);
				if (siteOpeningHours != null) {
					curSite.openHoursList = siteOpeningHours.openHoursList;
					curSite.openingHoursText = siteOpeningHours.openingHoursText
				}
				
			}
		}
		
		this.getOpeningHoursForSite = function(id) {
			for (var i=0;i<this.openingHours.length;i++) {
				if (this.openingHours[i].id == id) {
					return this.openingHours[i]; 
				}
			}
		}
		
		this.getItinUsedBy = function(itin) {
			var id = itin.baseItineraryId == null ? itin.id : itin.baseItineraryId;
			return this.itrsUsedBy[id];
		}
		
		this.setAttractionsContactInformation = function() {
			var _self = this;
			angular.forEach(_self.allAttractionsData.lstSites, function (attraction) {
				attraction.address = $filter('getSiteInfo')(attraction.contactInformation,"Address");
				attraction.phoneNum = $filter('getSiteInfo')(attraction.contactInformation,"Phone Number"); 
				attraction.admission = $filter('getSiteInfo')(attraction.contactInformation,"Admission");
				attraction.website = $filter('getSiteInfo')(attraction.contactInformation,"Website");
				attraction.website = attraction.website != null ? attraction.website.replace(/\s/g, "") : null;
				attraction.openingHours = $filter('getSiteInfo')(attraction.contactInformation,"Opening Hours");
				if ((attraction.openingHours == null || attraction.openingHours.length <=0) && attraction.openingHoursText != null && attraction.openingHoursText.length > 0) {
					attraction.openingHours = attraction.openingHoursText;
				}

			});
		}
		
		this.setAttractionsReadMore = function(lstAttractions,txtLen,cssClass,wordWise,shortLen) {
			angular.forEach(lstAttractions, function (attraction) {
				attraction.descriptionNoHtml = $filter('removeStyles')(attraction.descriptionNoHtml,cssClass);
				//if ($scope.attraction.description.length > 1500 && ieVersion != 8) {
				var tmpArr = $filter('cut')(attraction.descriptionNoHtml,wordWise,txtLen,null,' ',true);
				if (tmpArr[1] != null && tmpArr[1].length < 100) {
					attraction.descMain = attraction.descriptionNoHtml;
				} else {
					attraction.descMain = tmpArr[0];
					attraction.descMore = tmpArr[1];
				}
				
				if (shortLen != null) {
					var tmpArr = $filter('cut')(attraction.descriptionNoHtml,wordWise,shortLen,null,' ',true);
					if (tmpArr[1] != null && tmpArr[1].length < 100) {
						attraction.descMainShort = attraction.descriptionNoHtml;
					} else {
						attraction.descMainShort = tmpArr[0];
						attraction.descMoreShort = tmpArr[1];
					}
				}
				
			});
			return lstAttractions;
		}
		
	}]);       
});	

    	

define('ngApp/website/services/itineraryService',[mainPath,"app/itinerary/itineraryDataMgr",
        "app/itinerary/itinerarySite"],
    function(main,ItineraryDataMgr,ItinerarySite) {
    var app = angular.module('visitacity');

	app.service('itineraryService', ['$http','$q','$filter','$location','$rootScope','$timeout','dataWearhouseService','sharedItineraryService','exprService',
	                                  function($http, $q, $filter,$location,$rootScope,$timeout,dataWearhouseService,sharedItineraryService,exprService) {
		
		this.itinerary = null;
		this.itineraryDataMgr = null;
		this.curItinerarySites = null;
		this.daysArr = null;
		this.selectedDay = null;
		this.allAttractions = null;
		this.allRestaurants = new Array();
		this.filteredRestaurants = null;
		this.restaurantsInBounds = new Array();
		this.additionalRestPoints = new Array();
		this.newAddedAttraction = null;
		this.countItineraryUsedBy = null;
		this.noScroll = true;
		this.selectedTab = "itinerary";
		this.newGen = false;
		this.showTripOverview = false;
		this.NOTES_TXT_LEN = 500;
		this.NOTES_TXT_LEN_SHORT = 150;
		this.showWishlistSpinner = null;
		this.relatedPaExperiment = true; //experiment closed as true on 3/3/2019
		this.exprReadMoreSamePage = null;
		this.disableRouting = false;
		
		
		this.reset = function() {
			this.itinerary = null;
			this.itineraryDataMgr = null;
			this.curItinerarySites = null;
			this.daysArr = null;
			this.selectedDay = null;
			this.allAttractions = null;
			this.allRestaurants = new Array();
			this.filteredRestaurants = null;
			this.restaurantsInBounds = new Array();
			this.additionalRestPoints = new Array();
			this.newAddedAttraction = null;
			this.countItineraryUsedBy = null;
			this.noScroll = true;
			this.selectedTab = "itinerary";
			this.newGen = false;
			this.showTripOverview = false;
			this.NOTES_TXT_LEN = 500;
			this.NOTES_TXT_LEN_SHORT = 150;
			this.showWishlistSpinner = null;
			this.relatedPaExperiment = true; //experiment closed as true on 3/3/2019
			this.exprReadMoreSamePage = null;
			this.disableRouting = false;
		}
		
		this.init = function(itinerary,allAttractions,allRestaurants,selectedDay,isTripOverview) {
			var _self = this;
			_self.setItinerary(itinerary);
			_self.setItineraryDataMgr();
			_self.setNotesReadMore();
			if (allAttractions) {
				_self.initItinerarySites(allAttractions);
				_self.setAllAttractions(allAttractions);
			}
			if (isTripOverview) {
				_self.curItinerarySites = _self.itinerary.itinerarySites;
			} else if (_self.selectedTab == "myPlaces") {
				_self.curItinerarySites = $filter('filter')(_self.itinerary.itinerarySites,function(value, index){ if (value.dayInTrip == -1) {return true} });
			} else if (selectedDay) {
				if (_self.getSelectedDay() == null) {
					_self.setSelectedDay(selectedDay);
				}
				var selectedDayNo = selectedDay.no != null ? selectedDay.no : selectedDay;
				var itrSites = $filter('filter')(_self.itinerary.itinerarySites,function(value, index){ if (value.dayInTrip == selectedDayNo) {return true} });
				_self.curItinerarySites = itrSites;
				//sharedItineraryService.setGooglePhotos(itrSites,_self.itinerary.itinerarySites);
			}
			/*if (countItineraryUsedBy) {
				_self.countItineraryUsedBy = countItineraryUsedBy;
			}*/
			
			_self.showTripOverview = isTripOverview;
			
			_self.allRestaurants = new Array();
			_self.filteredRestaurants = null;
			_self.restaurantsInBounds = new Array();
			_self.additionalRestPoints = new Array();
			
		/*	_self.relatedPaExperiment = exprService.isInExperiment("itinerary-related-pa",50);
			if (_self.relatedPaExperiment) {
				exprService.fireExperimentEvent("itinerary-related-pa","new-5");
			} else {
				exprService.fireExperimentEvent("itinerary-related-pa","old-3");
			}*/
			
			_self.exprReadMoreSamePage = exprService.isInExperiment("experiment-itinerary-read-more",50);
			if (_self.exprReadMoreSamePage) {
				exprService.fireExperimentEvent("itinerary-read-more","itinerary-read-more-same-page");
			} else {
				exprService.fireExperimentEvent("itinerary-read-more","itinerary-read-more-new-page");
			}
		}		
		
		
		
		/**
		 * Setters and Getters
		 */
		
		
		this.setItinerary = function(itr) {
			var _self = this;
			_self.itinerary = itr;
		}
		
		this.getItinerary = function() {
			var _self = this;
			return _self.itinerary;
		}
		
		this.setItineraryDataMgr = function() {
			var _self = this;
			_self.itineraryDataMgr = new ItineraryDataMgr(_self.getItinerary());
		}
		
		this.getItineraryDataMgr = function() {
			var _self = this;
			return _self.itineraryDataMgr;
		}
		
		this.setCurItinerarySites = function(curItinerarySites) {
			var _self = this;
			_self.curItinerarySites = curItinerarySites;
		}
		
		this.getCurItinerarySites = function() {
			var _self = this;
			return _self.curItinerarySites;
		}
		
		this.setDaysArr = function(daysArr) {
			var _self = this;
			_self.daysArr = daysArr;
		}
		
		this.getDaysArr = function() {
			var _self = this;
			return _self.daysArr;
		}
		
		this.setSelectedDay = function(selectedDay) {
			var _self = this;
			_self.selectedDay = selectedDay;
		}
		
		this.getSelectedDay = function() {
			var _self = this;
			return _self.selectedDay;
		}
		
		this.setAllAttractions = function(allAttractions) {
			var _self = this;
			_self.allAttractions = allAttractions;
		}
		
		this.getAllAttractions = function() {
			var _self = this;
			return _self.allAttractions;
		}
		
		this.setAllRestaurants = function(allRestaurants) {
			var _self = this;
			_self.allRestaurants = allRestaurants;
		}
		
		this.appendRestaurants = function(newRestsArr,zoom,cuisine,price) {
			var _self = this;
			for (var i=0;i<newRestsArr.length;i++) {
				var curNewRest = newRestsArr[i];
				var isExist = $filter('filter')(_self.allRestaurants,function(value, index){ if (value.locationId == curNewRest.locationId) {return true}});
				if (isExist.length == 0) {
					//check if restaurant is in itinerary and use that Itinerary Site
					var isInItinerary = $filter('filter')(_self.itinerary.itinerarySites,function(value, index){ if (value.additionalData != null && value.additionalData.taLocationId == curNewRest.locationId) {return true}});
					if (isInItinerary.length > 0) {
						curNewRest.dayInTrip = isInItinerary[0].dayInTrip;
						curNewRest.id = isInItinerary[0].id;
						curNewRest.isInItinerary = true;
						curNewRest.type = "restaurant";
					} else if (curNewRest.isInItinerary) {
						curNewRest.dayInTrip = null;
						curNewRest.isInItinerary = false;
					}
					
					curNewRest.restMatchArr = new Array();
					var obj = new Object();
					obj.zoom = zoom;
					obj.cuisine = cuisine;
					obj.price = price;
					obj.isNew = false;
					curNewRest.restMatchArr.push(obj);
					if (curNewRest.awards != null) {
						curNewRest.awards = angular.fromJson(curNewRest.awards);
					}
					
					_self.allRestaurants.push(curNewRest);
				} else if (!_self.isMatchRestFilter(isExist[0],zoom,cuisine,price)) {
					var obj = new Object();
					obj.zoom = zoom;
					obj.cuisine = cuisine;
					obj.price = price;
					obj.isNew = false;
					isExist[0].restMatchArr.push(obj);
				}
			}
		}
		
		this.restaurantInItinerary = function(rest,isAdd) {
			var _self = this;
			var isInItinerary = $filter('filter')(_self.allRestaurants,function(value, index){ if (value.locationId == rest.additionalData.taLocationId) {return true}});
			if (isInItinerary.length > 0) {
				if (isAdd) {
					isInItinerary[0].dayInTrip = rest.dayInTrip;
					isInItinerary[0].id = rest.id;
				} else {
					isInItinerary[0].dayInTrip = null;
					isInItinerary[0].isInItinerary = false;
				}
			}
		}
		
		this.isMatchRestFilter = function(curRest,zoom,cuisine,price) {
			for (var j=0;j<curRest.restMatchArr.length;j++) {
				if (curRest.restMatchArr[j].zoom == zoom &&
					curRest.restMatchArr[j].price == price &&
					curRest.restMatchArr[j].cuisine == cuisine) {
						return true;
				}
			}
			return false;
		}
		
		this.getFilteredRestaurants = function(zoom,cuisine,price,excludeInItinerary) {
			var _self = this;
			_self.filteredRestaurants = new Array();
			for (var i=0;i<_self.allRestaurants.length;i++) {
				var curRest = _self.allRestaurants[i];
				if (_self.isMatchRestFilter(curRest,zoom,cuisine,price)) {
					_self.filteredRestaurants.push(curRest);
					//console.log("filter match " + curRest.location_id);
				}
			}
			//console.log("all restaurants " + _self.allRestaurants.length);
			//console.log("filtered list " + _self.filteredRestaurants.length);
			return _self.filteredRestaurants;
		}
		
		this.getRestaurantsInBounds = function() {
			var _self = this;
			_self.restaurantsInBounds = $filter('filter')(_self.allRestaurants, {isInBounds: true}, true);
		}
		
		this.getAllRestaurants = function() {
			var _self = this;
			return _self.allRestaurants;
		}
		
		this.setNewAddedAttraction = function(newAddedAttraction) {
			var _self = this;
			_self.newAddedAttraction = newAddedAttraction;
		}
		
		this.getNewAddedAttraction = function() {
			var _self = this;
			return _self.newAddedAttraction;
		}
		
		this.setNoScroll = function (noScroll) {
			var _self = this;
			_self.noScroll = noScroll;
		}
		
		this.getNoScroll = function() {
			var _self = this;
			return _self.noScroll;
		}
		
		this.setShowTripOverview = function (status) {
			var _self = this;
			_self.showTripOverview = status;
		}
		
		this.getTripOverview = function() {
			var _self = this;
			return _self.showTripOverview;
		}
		
		this.setSelectedTab = function (tab) {
			var _self = this;
			_self.selectedTab = tab;
		}
		
		this.getSelectedTab = function() {
			var _self = this;
			return _self.selectedTab;
		}
		
		this.appendAdditionalPoints = function(point,zoom,cuisine,price) {
			var _self = this;
			var isFound =  $filter('filter')(_self.additionalRestPoints,function(value, index){ 
				if (value.lat == point.lat() && value.lng == point.lng()) {
					return true
				} 
			});
			if (isFound.length == 0) {
				var obj = new Object();
				obj.lat = point.lat();
				obj.lng = point.lng();
				
				obj.restMatchArr = new Array();
				var matchObj = new Object();
				matchObj.zoom = zoom;
				matchObj.cuisine = cuisine;
				matchObj.price = price;
				matchObj.isNew = true;
				obj.restMatchArr.push(matchObj);
				_self.additionalRestPoints.push(obj);
			} else {
				var matchPoints = $filter('filter')(isFound[0].restMatchArr,function(value, index){ 
					if (value.zoom == zoom && 
							value.price == price && 
							value.cuisine == cuisine) {
						return true; 
					} else {
						return false;
					} 
				});
				
				if (matchPoints.length == 0) {
					var obj = new Object();
					obj.zoom = zoom;
					obj.cuisine = cuisine;
					obj.price = price;
					obj.isNew = true;
					isFound[0].restMatchArr.push(obj);
				}
				//console.log("append restaurant " + isExist[0].location_id);
			}
			
		}
		
		this.getAdditionalPoints = function() {
			var _self = this;
			return _self.additionalRestPoints;
		}
	
		this.processDay = function() {
			var _self = this;
			var itrSites = _self.getItineraryDataMgr().processDay(_self.getSelectedDay().no);
			
			//set days descriptions
			for (var i=1;i<=_self.itinerary.noOfDays;i++) {
				_self.setDayDescription(i);
			}
			//sharedItineraryService.setGooglePhotos(itrSites);
			//_self.setCurItinerarySites(itrSites);
			return itrSites;
		}
		
		
		
		this.setDayDescription = function(dayNo) {
			var _self = this;
			var totalLen = 0;
			var itrSites = $filter('filter')(_self.itinerary.itinerarySites,function(value, index){ if (value.dayInTrip == dayNo && value.site != null && value.site.mainType.legalName != 'restaurant') {return true} });
			var curDay =  $filter('filter')(_self.daysArr,function(value, index){ if (value.no == dayNo) {return true} })[0];
			
			var longDescStr = "";
			var longDescStrMobile = "<span class='itinerary-day-desc-site'>Day " + dayNo + " including </span>";
			var descStr = "";
			var firstSite = null;
			var topSite = null;
			var lastSite = null
			//get first
			for (var i=0;i<itrSites.length;i++) {
				var curSite = itrSites[i].site;
				firstSite = curSite;
				break;
			}
			//get last
			for (var i=itrSites.length-1;i>=0;i--) {
				var curSite = itrSites[i].site;
				if (firstSite != null && curSite.id != firstSite.id) {
					lastSite = curSite;
					break;
				}
			}
			//get top
			for (var i=0;i<itrSites.length;i++) {
				var curSite = itrSites[i].site;
				if (firstSite != null && lastSite != null && curSite.id != firstSite.id && curSite.id != lastSite.id) {
					if (topSite == null) {
						topSite = curSite;
					} else if (curSite.noPerUsers < topSite.noPerUsers){
						topSite = curSite;
					}
				}
			}
			if (firstSite != null && (topSite != null || lastSite != null)) {
				descStr = firstSite.shortTitle;
				longDescStr += "Starting from <span class='itinerary-day-desc-site'>" + firstSite.shortTitle + "</span>";
				longDescStrMobile += "<span class='itinerary-day-desc-site'>" + firstSite.shortTitle + ", </span>";
				totalLen += firstSite.shortTitle.length;
				if (topSite != null) {
					descStr += "..." + topSite.shortTitle 
					longDescStr += " through the <span class='itinerary-day-desc-site'>" + topSite.shortTitle + "</span>";
					longDescStrMobile += "<span class='itinerary-day-desc-site'>" + topSite.shortTitle + " &amp; </span>";
					totalLen += topSite.shortTitle.length;
				}
				if (lastSite != null) {
					descStr += "..." + lastSite.shortTitle
					longDescStr += " and ending at the <span class='itinerary-day-desc-site'>" + lastSite.shortTitle + "</span>";
					longDescStrMobile += "<span class='itinerary-day-desc-site'>" + lastSite.shortTitle + "</span>";
					totalLen += lastSite.shortTitle.length;
				}
				
				curDay.description = descStr;
			} else if (firstSite != null) {
				curDay.description = firstSite.shortTitle;
				longDescStr = firstSite.shortTitle;
				totalLen += firstSite.shortTitle.length;
			} else if (firstSite == null) {
				var itrSites = $filter('filter')(_self.itinerary.itinerarySites,function(value, index){ if (value.dayInTrip == dayNo && value.site == null && value.type != 'hotel' && value.type != 'transit' && value.type != 'restaurant') {return true} });
				for (var i=0;i<itrSites.length;i++) {
					if (firstSite == null) {
						firstSite = itrSites[i].name;
						firstSite = $filter('cut')(firstSite,false, 25,'');
					} else {
						lastSite = itrSites[i].name;;
						lastSite = $filter('cut')(lastSite,false, 25,'');
					}
				}
				if (firstSite != null) {
					curDay.description = firstSite;
				}
				if (lastSite != null) {
					curDay.description += "..." + lastSite;
				}
			}
			
			if (totalLen > 52) {
				longDescStr = longDescStr.replace(/itinerary-day-desc-site/g,"itinerary-day-desc-site-22");
			} else if (totalLen > 45) {
				longDescStr = longDescStr.replace(/itinerary-day-desc-site/g,"itinerary-day-desc-site-24");
			}
			
			curDay.longDescription = longDescStr;
		}
		
		
		this.saveItinerary = function() {
			var deffered = new $.Deferred();
			var _self = this;
			_self.getItineraryDataMgr().save().then(function() {
				_self.setItinerary(_self.getItineraryDataMgr().getItineraryObj());
				deffered.resolve();
			});
			return deffered;
		}
		
		this.initItinerarySites = function(allAttractions) {
			var _self = this;
			angular.forEach(_self.getItinerary().itinerarySites, function (attraction) {
					if (attraction.siteId != null) {
						attraction.site = $filter('filter')(allAttractions, {id: attraction.siteId}, true)[0];
						//try restaurants
						if (attraction.site == null) { 
							attraction.site = $filter('filter')(_self.getAllRestaurants(), {id: attraction.siteId}, true)[0];
						}
					}
					/*if (attraction.site != null) { //skip hotel
						attraction.site.isInItinerary = true;
						attraction.site.address = $filter('getSiteInfo')(attraction.site.contactInformation,"Address");
						attraction.site.phoneNum = $filter('getSiteInfo')(attraction.site.contactInformation,"Phone Number"); 
						attraction.site.admission = $filter('getSiteInfo')(attraction.site.contactInformation,"Admission");
						attraction.site.openingHours = $filter('getSiteInfo')(attraction.site.contactInformation,"Opening Hours");
						if (attraction.site.mainPaidActivity != null) {
							attraction.site.topAd = attraction.site.mainPaidActivity;
						}
						attraction.site.weibsite = $filter('getSiteInfo')(attraction.site.contactInformation,"Website");
						attraction.site.weibsite = attraction.site.weibsite.replace(/\s/g, "");
					}*/
					if (attraction.additionalData != null) {
						attraction.phoneNum = attraction.additionalData.phone != null ? attraction.additionalData.phone : null;
						attraction.website = attraction.additionalData != null && attraction.additionalData.website != null ? attraction.additionalData.website.replace(/\s/g, "") : null;
						attraction.restRating = attraction.additionalData.rating != null ? attraction.additionalData.rating : null;
						attraction.numReviews = attraction.additionalData.numReviews != null ? attraction.additionalData.numReviews : null;
						attraction.cuisine = attraction.additionalData.cuisine != null ? attraction.additionalData.cuisine : null;
						attraction.priceLevel = attraction.additionalData.priceLevel != null ? attraction.additionalData.priceLevel : null;
					}
					
			});
		}
		
		this.initRests = function(allRestaurants) {
			var _self = this;
			var restSiteArr = new Array();
			angular.forEach(allRestaurants, function (rest) {
				rest.additionalData = angular.fromJson(rest.additionalData);
				rest.address = $filter('getSiteInfo')(rest.contactInformation,"Address");
				rest.phoneNum = $filter('getSiteInfo')(rest.contactInformation,"Phone Number"); 
				restSiteArr.push(new ItinerarySite(rest));
			});
			
			_self.setAllRestaurants(restSiteArr);
		}
		
		this.setRestInBound = function(restLocationId) {
			var _self = this;
			var foundRest = $filter('filter')(_self.allRestaurants, {locationId: restLocationId}, true);
			if (foundRest.length > 0) {
				foundRest[0].isInBounds = true;
			}
		};
		
		
		this.resetRestaurantsInBounds = function() {
			var _self = this;
			angular.forEach(_self.allRestaurants, function (rest) {
				rest.isInBounds = false;
			});
		}
		
		this.getLatLangStr = function(zoom,cuisine,price) {
			var _self = this;
			var latLngStr = "";
			_self.resetRestaurantsInBounds();
			
			//handle points
			for (var i=0;i<_self.getAdditionalPoints().length;i++) {
				var curPoint = _self.getAdditionalPoints()[i];

				var matchPoints = $filter('filter')(curPoint.restMatchArr,function(value, index){ 
					if (value.zoom == zoom && 
							value.price == price && 
							value.cuisine == cuisine && 
							value.isNew) {
						value.isNew = false;
						return true; 
					} else {
						return false;
					} 
				});
				
				if (matchPoints.length > 0) {
					if (latLngStr.length > 0) {
						latLngStr += ",";
					}
					latLngStr += curPoint.lat + "::" + curPoint.lng;
				}
			}
			return latLngStr;
		}
		
		this.getRestaurantsForItinerary = function(zoom,cuisine,price) {
			var deffered = $q.defer();
			var _self = this;
			var latLngStr = "";
			_self.resetRestaurantsInBounds();
			
			/*angular.forEach(_self.getItinerary().itinerarySites, function (itrSite) {
				if (!itrSite.gotRestaurant) {
					itrSite.gotRestaurant = true;
					var latLng = itrSite.getLatLng();
					if (latLngStr.length > 0) {
						latLngStr += ",";
					}
					latLngStr += itrSite.getLatLng().lat() + "::" + itrSite.getLatLng().lng();
				}
				
			});*/
			
			//handle points
			for (var i=0;i<_self.getAdditionalPoints().length;i++) {
				var curPoint = _self.getAdditionalPoints()[i];

				var matchPoints = $filter('filter')(curPoint.restMatchArr,function(value, index){ 
					if (value.zoom == zoom && 
							value.price == price && 
							value.cuisine == cuisine && 
							value.isNew) {
						value.isNew = false;
						return true; 
					} else {
						return false;
					} 
				});
				
				if (matchPoints.length > 0) {
					if (latLngStr.length > 0) {
						latLngStr += ",";
					}
					latLngStr += curPoint.lat + "::" + curPoint.lng;
				}
			}
			
			if (latLngStr.length > 0) {
				//get restaurants from server
				var baseUrl = appRoot + "/api/restaurants/" + _self.itinerary.cityId + "/radius?latLng="+latLngStr+"&zoom=" + zoom;
				if (cuisine != "All Cuisines") {
					baseUrl += "&cuisine=" + cuisine;
				}
				if (price != "Any Price") {
					baseUrl += "&priceLevel=" + price; //use length becatse we need a number 1-4
				}
				
				$http.get(baseUrl).then(function 
						successCallback(response) {

						var restArr = response.data;
						var restSiteArr = new Array();
						for (var i=0;i<restArr.length;i++) {
							if (restArr[i] != null) {
								//console.log(i + ": " + restArr[i]);
								restArr[i].taRestaurant = true;
								restSiteArr.push(new ItinerarySite(restArr[i]));
							}
						}
						_self.appendRestaurants(restSiteArr,zoom,cuisine,price);
						deffered.resolve('done');
						return;
				  });
			} else {
				deffered.resolve();
			}
			return deffered.promise;
		}
		
		this.processItrRests = function(response,zoom,cuisine,price) {
			var _self = this;
			var restArr = response.data;
			var restSiteArr = new Array();
			for (var i=0;i<restArr.length;i++) {
				if (restArr[i] != null) {
					//console.log(i + ": " + restArr[i]);
					restArr[i].taRestaurant = true;
					if (restArr[i].cuisine) {
						restArr[i].cuisine = restArr[i].cuisine.replace(/,/g,', ');
					}
					restSiteArr.push(new ItinerarySite(restArr[i]));
				}
			}
			_self.appendRestaurants(restSiteArr,zoom,cuisine,price);
		}
		
		this.getReviewsForRestaurants = function(restaurant) {
			var _self = this;
			var deffered = new $.Deferred();
			
			if (restaurant.gotReviews) {
				deffered.resolve();
			} else {
				var baseUrl = appRoot + "/api/restaurants/" + restaurant.locationId + "/details";
				$http.get(baseUrl).then(function 
						successCallback(response) {
						if (response.data != null && response.data.data != null) {
							restaurant.reviews = response.data.data;
						}
						restaurant.gotReviews = true;
						deffered.resolve();
				  });
			}
			
			return deffered;
		}
		
		this.addRestaurantToItinerary = function(rest,from) {
			var _self= this;
			if (rest.dayInTrip > 0) {
				//remove from itinerary
				$rootScope.$broadcast("removeSiteFromItinerary",'{"siteId":'+rest.id+',"from":"restaurants tab"}');
			} else {
				//add to itinerary
				if (rest.dayInTrip == -1) {
					from = '{"siteId":'+rest.id+',"from":"restaurants tab wishlist"}'
					$rootScope.$broadcast("changeDay",from,null,null);
				} else {
					rest.dayInTrip = -1;
					rest.visitTimeMinutes = 60;
					rest.noInTrip = 1000;
					rest.bestFitPlan = true;
					rest.type = "restaurant";
					rest.googleImgUrl = rest.largePhoto;
					rest.additionalData = _self.createRestAdditionalData(rest);
					$rootScope.$broadcast("changeDay",from,null,rest);
				}
			}
		}
		
		this.addRestaurantToWishlist = function(rest,from) {
			var _self= this;
			_self.showWishlistSpinner = rest.id;
			$timeout(function() {
				if (rest.isInItinerary) {
					//remove
					var restItrSite = $filter('filter')(_self.itinerary.itinerarySites,function(value, index){ if (value.additionalData != null && value.additionalData.taLocationId == rest.locationId) {return true}});
					_self.getItineraryDataMgr().removeSite(restItrSite[0],false);
					rest.isInItinerary = false;
					$rootScope.$broadcast("itineraryFireEvent","remove from wishlist",from,true);
				} else {
					//add
					rest.additionalData = _self.createRestAdditionalData(rest);
					rest.dayInTrip = -1;
					rest.noInTrip = 1000;
					rest.visitTimeMinutes = 60;
					rest.type = "restaurant";
					rest.googleImgUrl = rest.largePhoto;
					rest.isInItinerary = true;
					_self.itinerary.itinerarySites.push(rest);
					_self.getItineraryDataMgr().setNoInTrip();
					_self.saveItinerary();
					$rootScope.$broadcast("itineraryFireEvent","add to wishlist",from,true);
				}
				$rootScope.$broadcast("updateWishlist");
				_self.showWishlistSpinner = null;
			}, 800);
		}
		
		this.createRestAdditionalData = function(rest) {
			var additionalDataObj = new Object();
			additionalDataObj.website = rest.website;
			additionalDataObj.taLocationId = rest.locationId;
			additionalDataObj.bookingUrl = rest.bookingUrl;
			additionalDataObj.address = rest.address;
			additionalDataObj.priceLevel = rest.priceLevel;
			additionalDataObj.phone = rest.phone;
			additionalDataObj.rating = rest.rating;
			additionalDataObj.cuisine = rest.cuisine;
			additionalDataObj.numReviews = rest.numReviews;
			additionalDataObj.smallPhoto = rest.smallPhoto;
			additionalDataObj.largePhoto = rest.largePhoto;
			return additionalDataObj;
		}
		
		
		this.generateDays = function() {
			var _self = this;
			var itinerary = _self.getItinerary();
			var curSelected = null;
			var daysArr = new Array();
			var selectedDay = _self.getSelectedDay();
			for (var i=1;i<=itinerary.noOfDays;i++) {
				
				var d = new Object();
				d.name = $filter('translateFilter')("Day") + " " + i;
				d.no = i;
				if (itinerary.startDate != null) {
					//var startDate = new Date(itinerary.startDate);
					//use moment to ignore timezone offset
					var startDate = new Date(moment.utc(itinerary.startDate).format('LLL'));
					startDate.setDate(startDate.getDate() + (i-1)); 
			        d.date = startDate;
			        d.dateStr = $filter('date')(startDate, 'dd-MMM-yy');
				}
				//var daySites = $filter('filter')(itinerary.itinerarySites,function(value, index){ if (value.dayInTrip == i && value.type != 'hotel') {return true} });
				var daySites = $filter('filter')(itinerary.itinerarySites,function(value, index){ if (value.dayInTrip == i) {return true} });
				d.daySites = daySites;
				daysArr.push(d);
				if (selectedDay != null && (selectedDay == i || selectedDay.no == i)) {
					curSelected = d;
				}
				_self.getItineraryDataMgr().processDay(i);
				
				
			}
			if (curSelected == null) {
				curSelected = daysArr[0];
				_self.setCurItinerarySites = itinerary.itinerarySites; //trip overview
			} else {
				_self.setCurItinerarySites = $filter('filter')(itinerary.itinerarySites, {dayInTrip: curSelected.no}, true);
			}
			_self.setSelectedDay(curSelected);
			_self.setDaysArr(daysArr);
			
			
			//set days descriptions
			for (var i=1;i<=itinerary.noOfDays;i++) {
				_self.setDayDescription(i);
			}
		}
		
		
		this.showDirections = function(site,type,isFull,supressPlaceId) {
			var deferred = $q.defer();
			var _self = this;
			var prevSite = null;
			for (var i=0;i<_self.curItinerarySites.length;i++) {
				if (site == _self.curItinerarySites[i]) {
					break;
				}
				var prevSite = _self.curItinerarySites[i];
			}
			var str = "to " + (site.site != null ? site.site.shortTitle : site.name);
			if (prevSite) {
				str += " from " + (prevSite.site != null ? prevSite.site.shortTitle : prevSite.name);
			}
			
			var originLocation;
			var destLocation;
			if (prevSite.site) {
				if (prevSite.site.googlePlaceId != null && prevSite.site.googlePlaceId.length > 0 && !supressPlaceId) {
					originLocation = new Object();
					originLocation.placeId = prevSite.site.googlePlaceId;
				} else {
					originLocation = new google.maps.LatLng(prevSite.site.latitude,prevSite.site.longitude);
				}
				
			} else {
				originLocation = new google.maps.LatLng(prevSite.latitude,prevSite.longitude);
			}
			if (site.site) {
				if (site.site.googlePlaceId != null && site.site.googlePlaceId.length > 0 && !supressPlaceId) {
					destLocation = new Object();
					destLocation.placeId = site.site.googlePlaceId;
				} else {
					destLocation = new google.maps.LatLng(site.site.latitude,site.site.longitude);
				}
				
			} else {
				destLocation = new google.maps.LatLng(site.latitude,site.longitude);
			}
			
			_self.showNavigation(originLocation,destLocation,site,type,isFull,supressPlaceId).then(function(res) {
				deferred.resolve();
			});
			return deferred.promise;
			
		}
		
		//Calculate navigations
		this.showNavigation = function(originLocation, destLocation,site,type,isFull,supressPlaceId) {
			fireEvent("Itinerary-2.0", "Get transit from Google");
			var _self = this;
			var deferred = $q.defer();
			var travelMode = google.maps.TravelMode.TRANSIT;
			if (type == "Walking") {
				travelMode = google.maps.TravelMode.WALKING;
			} else if (type == "Driving") {
				travelMode = google.maps.TravelMode.DRIVING;
			}
			
			request = {
					origin: originLocation,
		      		destination: destLocation,
		      		unitSystem: getMapUnitSystem(),
		      		travelMode: travelMode
		      		
		    };
			if (type != "Walking") {
				var departureTime = new Date();
				if (_self.getItinerary().startDate != null) {
					departureTime = new Date(_self.getItinerary().startDate);
					departureTime.setDate(departureTime.getDate() + site.dayInTrip - 1);
				}
				
				var siteTime = new Date(site.visitHour);
				departureTime.setHours(siteTime.getHours());
				departureTime.setMinutes(siteTime.getMinutes());
				var userTimezoneOffset = departureTime.getTimezoneOffset() * 60000;
				request.transitOptions = {
						departureTime: new Date(departureTime.getTime() + userTimezoneOffset),
						routingPreference: 'LESS_WALKING'
				}
			}
			
			var originStr = originLocation.placeId != null ? "place_id:" + originLocation.placeId : originLocation.lat().toFixed(3) + "," + originLocation.lng().toFixed(3);
			var destnStr = destLocation.placeId != null ? "place_id:" + destLocation.placeId : destLocation.lat().toFixed(3) + "," + destLocation.lng().toFixed(3);
			if (supressPlaceId) {
				originStr = originLocation.lat().toFixed(3) + "," + originLocation.lng().toFixed(3);
				destnStr = destLocation.lat().toFixed(3) + "," + destLocation.lng().toFixed(3);
			}
			
			_self.getRouteFromServer(originStr,destnStr,travelMode.toLowerCase()).then(function(results) {
	      		var response = new Object();
		      	try {
		      		response = JSON.parse(results);
		      	} catch (ex) {
		      		//console.log(ex);
		      	}
		      	var obj = null;
		      	if (response.status != null && response.status == "OK") {
		      		if (response.routes != null && response.routes.length > 0 && 
					response.routes[0].legs != null && response.routes[0].legs.length > 0 && 
						response.routes[0].legs[0].steps != null && response.routes[0].legs[0].steps.length > 0) {
							
							obj = new Object();
							obj.steps = response.routes[0].legs[0].steps;
							if (response.routes[0].summary != null && response.routes[0].summary.length > 0) {
								obj.summary = response.routes[0].summary;
							}
							if (isFull) {
								_self.calculateTransit(obj.steps,"transitdirections" + site.id);
								$("#transitdirections" + site.id).css("margin-top","15px")
							}
							
							if (type == "Walking") {
								site.routeDetailsWalking = obj;
							} else if (type == "Driving") {
								site.routeDetailsDriving = obj;
							} else if (type == "Transit") {
								site.routeDetails = obj;
							}
						} 
		      	} else if (response.status != null && response.status == "NOT_FOUND" && !supressPlaceId) {
						//handle cases where place id is not defined correctly
						_self.showDirections(site,type,isFull,true);
		      	} else {
		      		//log sentry
		      		var status = "empty";
		      		if (response.status != null) {
		      			status = response.status;
		      		}
		      		Raven.captureException(new Error('Failed to get directions from server: ' + status), {
		      		  logger: status
		      		});
		      	}
		      	return deferred.resolve();
			});
	      	  
			/*new google.maps.DirectionsService().route(request, function(response, status) {
				var obj = null;
				if (status == google.maps.DirectionsStatus.OK) {
					if (response.routes != null && response.routes.length > 0 && 
						response.routes[0].legs != null && response.routes[0].legs.length > 0 && 
						response.routes[0].legs[0].steps != null && response.routes[0].legs[0].steps.length > 0) {
							
							obj = new Object();
							obj.steps = response.routes[0].legs[0].steps;
							if (response.routes[0].summary != null && response.routes[0].summary.length > 0) {
								obj.summary = response.routes[0].summary;
							}
							if (isFull) {
								_self.calculateTransit(obj.steps,"transitdirections" + site.id);
								$("#transitdirections" + site.id).css("margin-top","15px")
							}
						} 
				} else if (status == google.maps.DirectionsStatus.NOT_FOUND && !supressPlaceId) {
					//handle cases where place id is not defined correctly
					_self.showDirections(site,type,isFull,true);
				}
				if (type == "Walking") {
					site.routeDetailsWalking = obj;
				} else if (type == "Driving") {
					site.routeDetailsDriving = obj;
				} else if (type == "Transit") {
					site.routeDetails = obj;
				}*/
				
					/*
				} else {
					$("#transitNoRouteFound").css("display","");
				}*/
			
				return deferred.promise;
			
		}
			
		this.getRouteFromServer = function(origin,destination,travelMode) {
      		var deffered = new $.Deferred();
      		var url = globExprWeb["google-photos-cloudfront"] + "/api/getRoute?travelMode="+travelMode+"&origin="+origin+"&destination=" + destination;
      		$.ajax({
    			  url: url,
    			  type: "GET",
    			  cache: true
	     	}).done(function(results) {
	  	      	deffered.resolve(results); 	      		
	  	    }).fail(function() {
	  	    	deffered.resolve("");
	  	    });
      		return deffered;
      		
      	}
		
		
		//Get transit text
		this.calculateTransit = function(steps, id) {
			var instructions = "";
			var stepNum = 1;
  			for (var i=0;i<steps.length;i++){
  				var step = steps[i];
  				if (step.html_instructions != null && step.html_instructions.length > 0){
  					if (step.steps && step.steps.length > 0) {
  						//walking leg inside transit
  						for (var j=0;j<step.steps.length;j++) {
  							if (step.steps[j].html_instructions != null && step.steps[j].html_instructions.length > 0){
  								var instructionsTxt = step.steps[j].html_instructions + " - " + step.steps[j].duration.text + "";
  								if (step.steps[j].html_instructions.match(/<\/div>$/)) {
  									instructionsTxt = step.steps[j].html_instructions.replace(/<\/div>$/, " - " + step.steps[j].duration.text + "</div>");
  								}
  								instructions += "<div>" + stepNum + ". " + instructionsTxt + "</div>";
  								stepNum++;
  							}
  						}
  					} else {
  						var instructionsTxt = step.html_instructions + " - " + step.duration.text; 
						if (step.html_instructions.match(/<\/div>$/)) {
							instructionsTxt = step.html_instructions.replace(/<\/div>$/, " - " + step.duration.text + "</div>");
						}
						instructions += "<div>" + stepNum + ". " + instructionsTxt;
  						if (step.transit && step.transit.line) {
  							var curLine = step.transit.line;
  							var iconImg = null;
  							if (curLine.vehicle && curLine.vehicle.local_icon) {
  								iconImg = curLine.vehicle.local_icon;
  							} else if (curLine.vehicle && curLine.vehicle.icon) {
  								iconImg = curLine.vehicle.icon;
  							}
  							if (iconImg) {
  								instructions += "<img style='width:16px;height:16px;margin-left:3px' title='" + curLine.vehicle.name + "' src='" + iconImg + "'/>"
  							}
  							if (curLine.short_name) {
  								var bgColor = "";
  								if (curLine.color) {
  									bgColor="background-color:" + curLine.color;
  								}
  								var color = ""
  								if (curLine.text_color) {
  									color = "color:" + curLine.text_color;
  								}
  								instructions += "<span style='border:1px solid #bebebe;padding:1px 2px 1px 2px;margin-left:3px;"+bgColor+";"+color+"'>" + curLine.short_name + "</span>";
  							}
  						}
  						instructions +=	"</div>";	
  						stepNum++;
  					}
  					
  				}
  			}
  			$("#" + id).html(instructions);
  			$("#" + id + "RouteChevron").css("visibility","visible");
		}
		
		
		this.getItinerarySite = function(args) {
			var _self = this;
			var res = null;
			var argsObj = angular.fromJson(args);
			if (argsObj.site != null || argsObj.shortTitle != null || argsObj.isSite) {
				//handle as attraction
				var findId = argsObj.site != null ? argsObj.site.id : argsObj.id;
				if (argsObj.isSite) {
					findId = argsObj.siteId;
				}
				res = $filter('filter')(_self.getItinerary().itinerarySites,function(value, index){ if (value.site && value.site.id == findId) {return true} })[0];
			} else if (argsObj.isRestaurant) {
				//handle restaurant
				var findId = argsObj.id != null ? argsObj.id : argsObj.siteId;
				if (findId != null) {
					res = $filter('filter')(_self.getAllRestaurants(),{id:findId},true)[0];
				}
			} else {
				//handle as itinerary site
				var findId = argsObj.id != null ? argsObj.id : argsObj.siteId;
				if (findId != null) {
					res = $filter('filter')(_self.getItinerary().itinerarySites,{id:findId},true)[0];
				}
			}
			return res;
		}
		
		
		this.createNewSiteObj = function(site,defaultName) {
			var _self = this;
			var newNoInTrip = 1000; 
			var newDayInTrip = null;
			var name = "";
			var notes = "";
			var address = "";
			if (site != null) {
				if (site.isRestaurant()) {
					name = site.shortTitle;
					notes = site.descriptionNoHtml;
					address = site.address;
					newDayInTrip = itineraryService.getSelectedDay().no;
				} else {
					name = defaultName;
					newNoInTrip = parseInt(site.noInTrip) + 1;
					newDayInTrip = site.dayInTrip;
				}
				
			} else {
				newDayInTrip = _self.getSelectedDay().no;
			}
			
			var newItrSite = {
					name: name,
					address: address,
					visitTimeMinutes:  60,
					notes: 	notes,
					noInTrip: newNoInTrip,
					dayInTrip:  newDayInTrip
				};
			if (site != null && site.isRestaurant()) {
				newItrSite.site = site;
			}
			newItrSite = new ItinerarySite(newItrSite);
			if (site != null) {
				if (site.isRestaurant()) {
					newItrSite.latitude = site.latitude;
					newItrSite.longitude = site.longitude;
				} else {
					newItrSite.latitude = site.site != null ? site.site.latitude : site.latitude;
					newItrSite.longitude = site.site != null ? site.site.longitude : site.longitude;
				}
				
			}
			
			return newItrSite;
		}
		
		this.setNotesReadMore = function() {
			var _self = this;
			angular.forEach(_self.getItinerary().itinerarySites, function (itrSite) {
				if (itrSite.notes != null && itrSite.notes.length > 0) {
					itrSite = _self.setNoteReadMore(itrSite);
				}
			});
		}
		
		this.setNoteReadMore = function(itrSite) {
			var _self = this;
			var tmpArr = $filter('cut')(itrSite.notes,true,_self.NOTES_TXT_LEN,null,' ',true);
			if (tmpArr[1] != null && tmpArr[1].length < 100) {
				itrSite.notesMain = itrSite.notes;
			} else {
				itrSite.notesMain = tmpArr[0];
				itrSite.notesMore = tmpArr[1];
			}
			
			if (_self.NOTES_TXT_LEN_SHORT != null) {
				var tmpArr = $filter('cut')(itrSite.notes,true,_self.NOTES_TXT_LEN_SHORT,null,' ',true);
				if (tmpArr[1] != null && tmpArr[1].length < 100) {
					itrSite.notesMainShort = itrSite.notes;
				} else {
					itrSite.notesMainShort = tmpArr[0];
					itrSite.notesMoreShort = tmpArr[1];
				}
			}
			return itrSite;
		}

		
	}]);       
});	

    	

define('ngApp/website/services/restaurantsService',[mainPath],
    function(main) {
    var app = angular.module('visitacity');

	app.service('restaurantsService', ['$http','$q','$filter','$location','$rootScope','$timeout','dataWearhouseService','sharedItineraryService',
	                                  function($http, $q, $filter,$location,$rootScope,$timeout,dataWearhouseService,sharedItineraryService) {
		
		this.searchRestaurantsInArea = function() {
			//window.clearTimeout(restaurantSerachTimer); 
			//restaurantSerachTimer = null;
			
			//$scope.showRedoSearch = false;
			restaurantsNewLoad = false;
			MapMgr.getInstance()._restTxtSearch = false;
			mapBlockUi.start("Updating Restaurant List");
			$('#itineraryRestaurantDrawersList').animate({
  				scrollTop: 0
  			}, 'slow');
			
			var centerPoint = latLng2Point(MapMgr.getInstance()._map.getCenter(),MapMgr.getInstance()._map);
				
			var arr = new Array();

			var p1 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(5*((2*centerPoint.x)/6)),2*(centerPoint.y)-(4*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			var p2 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(5*((2*centerPoint.x)/6)),2*(centerPoint.y)-(3*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			var p3 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(5*((2*centerPoint.x)/6)),2*(centerPoint.y)-(2*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			var p4 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(5*((2*centerPoint.x)/6)),2*(centerPoint.y)-(1*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			
			
			var p5 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(4*((2*centerPoint.x)/6)),2*(centerPoint.y)-(4*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			var p6 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(4*((2*centerPoint.x)/6)),2*(centerPoint.y)-(3*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			var p7 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(4*((2*centerPoint.x)/6)),2*(centerPoint.y)-(2*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			var p8 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(4*((2*centerPoint.x)/6)),2*(centerPoint.y)-(1*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			
			
			var p9 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(3*((2*centerPoint.x)/6)),2*(centerPoint.y)-(4*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			var p10 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(3*((2*centerPoint.x)/6)),2*(centerPoint.y)-(3*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			var p11 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(3*((2*centerPoint.x)/6)),2*(centerPoint.y)-(2*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			var p12 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(3*((2*centerPoint.x)/6)),2*(centerPoint.y)-(2*((1*centerPoint.y)/5))),MapMgr.getInstance()._map);
			
			var p13 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(2*((2*centerPoint.x)/6)),2*(centerPoint.y)-(4*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			var p14 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(2*((2*centerPoint.x)/6)),2*(centerPoint.y)-(3*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			var p15 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(2*((2*centerPoint.x)/6)),2*(centerPoint.y)-(2*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			var p16 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(2*((2*centerPoint.x)/6)),2*(centerPoint.y)-(2*((1*centerPoint.y)/5))),MapMgr.getInstance()._map);
			
			var p17 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(1*((2*centerPoint.x)/6)),2*(centerPoint.y)-(4*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			var p18 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(1*((2*centerPoint.x)/6)),2*(centerPoint.y)-(3*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			var p19 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(1*((2*centerPoint.x)/6)),2*(centerPoint.y)-(2*((2*centerPoint.y)/5))),MapMgr.getInstance()._map);
			var p20 = point2LatLng(new google.maps.Point(2*(centerPoint.x)-(1*((2*centerPoint.x)/6)),2*(centerPoint.y)-(2*((1*centerPoint.y)/5))),MapMgr.getInstance()._map);
				
			arr.push(p1);
			arr.push(p2);
			arr.push(p3);
			arr.push(p4);
			arr.push(p5);
			arr.push(p6);
			arr.push(p7);
			arr.push(p8);
			arr.push(p9);
			arr.push(p10);
			arr.push(p11);
			arr.push(p12);
			arr.push(p13);
			arr.push(p14);
			arr.push(p15);
			arr.push(p16);
			arr.push(p17);
			arr.push(p18);
			arr.push(p19);
			arr.push(p20);
			

				//arr.push(MapMgr.getInstance()._map.getCenter());
				
			var zoom = MapMgr.getInstance()._map.getZoom();
			var cuisine = $("#restaurantCuisineSelect" ).val();
			var price = $("#restaurantPriceSelect" ).val();
			
			
			/*for (var i = 0; i < markers.length; i++) {
		          markers[i].setMap(null);
		        }*/
			
			
			for (var i=0;i<arr.length;i++) {
				//$scope.itineraryService.appendAdditionalPoints(arr[i],zoom,cuisine,price);
				/*var marker = new google.maps.Marker({
			          position: arr[i],
			          map: MapMgr.getInstance()._map,
			          title: 'point' + i
			        });
				markers.push(marker);*/
			}
			this.getRestaurantsForItinerary();
				
		};
		
		this.getRestaurantsForItinerary = function() {
			
			var zoom = MapMgr.getInstance()._map.getZoom();
			var cuisine = $("#restaurantCuisineSelect" ).val();
			var price = $("#restaurantPriceSelect" ).val();
			var latLngStr = this.itineraryService.getLatLangStr(zoom,cuisine,price);
			var baseUrl = appRoot + "/api/restaurants/" + $scope.cityObj.id + "/radius?latLng="+latLngStr+"&zoom=" + zoom;
			if (cuisine != "All Cuisines") {
				baseUrl += "&cuisine=" + cuisine;
			}
			if (price != "Any Price") {
				baseUrl += "&priceLevel=" + price; //use length becatse we need a number 1-4
			}
			if (latLngStr.length > 0) {
				//get from server, otherwise we already have all the data on the client
				$http.get(baseUrl).then(function 
						successCallback(response) {
						this.itineraryService.processItrRests(response,zoom,cuisine,price);
						drawRestautants();
				  });
			} else {
				drawRestautants();
			}
			
		}
		
		
		function drawRestautants() {
			var zoom = MapMgr.getInstance()._map.getZoom();
			var cuisine = $("#restaurantCuisineSelect" ).val();
			var price = $("#restaurantPriceSelect" ).val();
			var filteredRests = $scope.itineraryService.getFilteredRestaurants(zoom,cuisine,price);
			if (filteredRests.length == 0) {
				$rootScope.$broadcast("itineraryFireEvent","empty restaurants for city",$scope.cityObj.name,false);
			}
			MapMgr.getInstance().drawRestaurants(filteredRests);
			mapBlockUi.reset();
		}
		
		this.latLng2Point = function(latLng, map) {
			var topRight = map.getProjection().fromLatLngToPoint(map.getBounds().getNorthEast());
			var bottomLeft = map.getProjection().fromLatLngToPoint(map.getBounds().getSouthWest());
			var scale = Math.pow(2, map.getZoom());
			var worldPoint = map.getProjection().fromLatLngToPoint(latLng);
			return new google.maps.Point((worldPoint.x - bottomLeft.x) * scale, (worldPoint.y - topRight.y) * scale);
		}

		this.point2LatLng = function(point, map) {
			var topRight = map.getProjection().fromLatLngToPoint(map.getBounds().getNorthEast());
			var bottomLeft = map.getProjection().fromLatLngToPoint(map.getBounds().getSouthWest());
			var scale = Math.pow(2, map.getZoom());
			var worldPoint = new google.maps.Point(point.x / scale + bottomLeft.x, point.y / scale + topRight.y);
			return map.getProjection().fromPointToLatLng(worldPoint);
		}

		
	}]);       
});	

    	

define('ngApp/website/services/sharedItineraryService',[mainPath],
    function(main) {
    var app = angular.module('visitacity');

    /**
     * Use this service for any function shared between itinerary and regional
     */
    
	app.service('sharedItineraryService', ['$http','$q','$filter','$rootScope',
	                                  function($http, $q, $filter,$rootScope) {
		
		this.goolePhotoMap = new Object();
		this.map = null;
		this.googlePlaces = null;
		
		/**
		 * Fix the google photos for My places by bringing a new photo for each place id
		 */
		this.setGooglePhotos = function(itrSites,allItrSites) {
			var _self = this;
			if (itrSites != null) {
				for (var i=0;i<itrSites.length;i++) {
					var curSite = itrSites[i];
					if (curSite.additionalData != null) {
						if (curSite.googleImgUrl != null && curSite.googleImgUrl.indexOf("maps.googleapis") > 0) {
							curSite.googleImgUrl = globExprWeb["google-photos-cloudfront"] + "/googleplaceimage/" + curSite.additionalData.googlePlaceId + "/350/350/pic.jpg"
						}
						/*curSite.additionalData = angular.fromJson(curSite.additionalData);
						if (curSite.additionalData != null && curSite.additionalData.googlePlaceId != null) {
							if (_self.goolePhotoMap[curSite.additionalData.googlePlaceId] != null) {
								curSite.googleImgUrl = _self.goolePhotoMap[curSite.additionalData.googlePlaceId].googleImgUrl;
								curSite.googleImgCredit = _self.goolePhotoMap[curSite.additionalData.googlePlaceId].googleImgCredit;
								continue;
							}
							_self.goolePhotoMap[curSite.additionalData.googlePlaceId] = new Object();
							_self.getPlaceDetailsFromGoogle(curSite)
							
							
						}*/
					} else if (curSite.googleImgUrl != null) {
						_self.getPlaceDetailsFromString(curSite,allItrSites);
					}
				}
			}
		}
		
		/**
		 * Get place details from google using string search
		 */
		this.getPlaceDetailsFromString = function(curSite,itrSites) {
			var _self = this;
			if (_self.map == null) {
				_self.map = new google.maps.Map(document.createElement('div'));
				_self.googlePlaces = new google.maps.places.PlacesService(_self.map);
			}
			var request = {
				location: new google.maps.LatLng(curSite.latitude,curSite.longitude),
				radius: '200',
				fields: ['name', 'formatted_address', 'formatted_phone_number', 'website', 'place_id', 'photos'],
				query: curSite.name
			};
			_self.googlePlaces.textSearch(request, function(result, status) {
				if (status == google.maps.places.PlacesServiceStatus.OK) {
					var partialMatch = null;
					for (var i=0;i<result.length;i++) {
						if (result[i].formatted_address == curSite.address && result[i].name == curSite.name) {
							_self.saveGooglePlaceDatails(result[i],curSite,true);
							if (curSite.type == 'hotel') {
								//fix all hotels at once
								_self.fixAllHotels(itrSites,curSite,result[i]);
							}
							break;
						} else if (result[i].name == curSite.name) {
							partialMatch = result[i];
						}
					}
					if (partialMatch != null) {
						//use partial match if it's the best we have
						_self.saveGooglePlaceDatails(partialMatch,curSite,true);
					}
				}
			});
		}
		
		//fix all hotels
		this.fixAllHotels = function(itrSites,origSite,result) {
			var _self = this;
			for (var i=0;i<itrSites.length;i++) {
				var curSite = itrSites[i];
				if (curSite.id != origSite.id && curSite.type == 'hotel') {
					_self.saveGooglePlaceDatails(result,curSite,true);
				}
			}
		}
		
		
		/**
		 * Get place details from google using place id
		 */
		this.getPlaceDetailsFromGoogle = function(curSite) {
			var _self = this;
			if (_self.map == null) {
				_self.map = new google.maps.Map(document.createElement('div'));
				_self.googlePlaces = new google.maps.places.PlacesService(_self.map);
			}
			var request = {placeId: curSite.additionalData.googlePlaceId,fields: ['name', 'formatted_address', 'formatted_phone_number', 'website', 'place_id', 'photos']};
			//console.log("getting details for place " + curSite.additionalData.googlePlaceId);
			_self.googlePlaces.getDetails(request, function(result, status) {
				if (status == google.maps.places.PlacesServiceStatus.OK) {
					_self.saveGooglePlaceDatails(result,curSite);
				}
			});
		}
		
		/**
		 * Save the my place details
		 */
		this.saveGooglePlaceDatails = function(result,curSite,createAdditionalDataObject) {
			var _self = this;
			if (createAdditionalDataObject) {
				//for fixing old place details, also save the place id
				var additionalDataObj = new Object();
				additionalDataObj.website = result.website;
				additionalDataObj.googlePlaceId = result.place_id;	
				additionalDataObj.phone = result.formatted_phone_number;
				curSite.additionalData = additionalDataObj;
			}
			if (result.photos != null && result.photos.length > 0) {
				//curSite.googleImgUrl =  result.photos[0].getUrl({'maxWidth': 350, 'maxHeight': 350});
				curSite.googleImgUrl =  globExprWeb["google-photos-cloudfront"] + "/googleplaceimage/" + curSite.additionalData.googlePlaceId + "/350/350/pic.jpg"
				var placeObj = new Object();
				placeObj.googleImgUrl = curSite.googleImgUrl; 
				if (result.photos[0].html_attributions != null && result.photos[0].html_attributions.length > 0) {
					curSite.googleImgCredit = result.photos[0].html_attributions[0];
					placeObj.googleImgCredit = curSite.googleImgCredit;
				}
				_self.goolePhotoMap[curSite.additionalData.googlePlaceId] = placeObj;
				$rootScope.$broadcast('updateItrSite',curSite);
			} else {
				//reset old images if the no images exists now
				curSite.googleImgUrl = null;
				curSite.googleImgCredit = null;
			}
			if (createAdditionalDataObject) {
				$rootScope.$broadcast('saveItinerary',true);
			}
		}
		
		
		this.getPhotoReference = function(imgUrl) {
			if (imgUrl != null) {
				return imgUrl.substring(imgUrl.indexOf("1s")+2, imgUrl.indexOf("&"));
			}
		}
		

		
	}]);       
});	

    	

define('ngApp/website/services/viatorService',[mainPath],
    function() {
    	
    	var app = angular.module('visitacity');

        app.service('viatorService', ['$q', '$http', 'dataWearhouseService', function($q, $http, dataWearhouseService) {

        	
        	this.getViatorTerms = function() {
            	var q = $q.defer();
            	
            	$http.get(appRoot + '/api/viator/terms').then(function (response) {
	    			if (response.data.errorMessage == null) {
	    				q.resolve(response.data.data);	
	    			}
	    			else {
	    				q.reject(response.data.errorMessage);
	    			}
      	        },
      	        function(e) {
      	        	q.reject(e);
      	        });
	    		
	    		return q.promise;      		
        	}
        	
            this.getProductData = function(productId) {
            	return dataWearhouseService.getData(appRoot + '/api/viator/product?productCode=' + productId,"viatorProductData"+productId);

            };
            
            this.getProductReviews = function(productId) {
            	var q = $q.defer();
            	
            	$http.get(appRoot + '/api/viator/product/reviews?productCode=' + productId).then(function (response) {
	    			if (response.data.errorMessage == null) {
	    				q.resolve(response.data.data);	
	    			}
	    			else {
	    				q.reject(response.data.errorMessage);
	    			}
      	        },
      	        function(e) {
      	        	q.reject(e);
      	        });
	    		
	    		return q.promise;
            };          
            
            this.getProductAvailability = function(productId) {
            	return dataWearhouseService.getData(appRoot + '/api/viator/product/availability?productCode=' + productId,"viatorProductAvailability"+productId);

            };            
            
            this.getPricingMatrix = function(productId, year, month) {
            	return dataWearhouseService.getData(appRoot + "/api/viator/availability?productCode=" + productId + 
            		"&year=" + year + 
        			"&month=" + month + 
        			"&currencyCode=USD","viatorProductAvailability"+productId+year+month);

            }
            
            this.getProductHotels = function(productId) {
            	return dataWearhouseService.getData(appRoot + '/api/viator/booking/hotels?productCode=' + productId,"viatorHotelData"+productId);

            }
            
            this.getCountryMap = function() {
            	var q = $q.defer();
            	var url = appRoot + "/api/viator/util/countrymap"; 
            		
            	$http.get(url).then(function (response) {
	    			if (response.data.errorMessage == null) {
	    				q.resolve(response.data.data);	
	    			}
	    			else {
	    				q.reject(response.data.errorMessage);
	    			}
      	        },
      	        function(e) {
      	        	q.reject(e);
      	        });
	    		
	    		return q.promise;
            }            
            
            this.calculatePricing = function(items, promoCode, currencyCode) {
            	var _self = this;
            	var q = $q.defer();
            	var url = appRoot + "/api/viator/booking/calculateprice";
            	var dataObj = {
        		    promoCode: promoCode,
        		    partnerDetail: null,
        		    currencyCode: currencyCode,
        		    items: items
            	}
            	
            	$http.post(url, {
            		jsonData: angular.toJson(dataObj)
            	}).then(function (response) {
	    			if (response.data.errorMessage == null) {
	    				q.resolve(response.data.data);	
	    			}
	    			else {
	    				q.reject({
	    					viatorError: _self.formatErrorMsg(response.data.errorMessage)
	    				});
	    			}
      	        },
      	        function(e) {
      	        	q.reject(e);
      	        });
	    		
	    		return q.promise;
            }
            
            this.book = function(bookingOrder, cityId) {
            	var _self = this;
            	var q = $q.defer();
            	var bookUrl = appRoot + "/api/viator/booking/book-website";
            	
            	/*if (bookUrl.indexOf("visitacity.com") > -1 && ! GlobalDefs.getIsMobileWeb()) {
            		bookUrl = bookUrl.replace("http", "https");
            	}*/
            	
            	$http.post(bookUrl, {
            		jsonData: angular.toJson(bookingOrder),
            		cityId: cityId
            	}).then(function (response) {
	    			if (response.data.errorMessage == null) {
	    				q.resolve(response.data);	
	    			}
	    			else {	    				
	      	        	q.reject({
	      	        		//viatorError: _self.formatErrorMsg(response.data.errorMessage)
	      	        		viatorError: response.data
	      	        	});	    				
	    			}
      	        },
      	        function(e) {
      	        	q.reject({
      	        		genericError: e
      	        	});
      	        });
	    		
	    		return q.promise;
            }
            
            
            this.getBookUrl = function() {
            	var q = $q.defer();
            	var url = appRoot + "/api/viator/booking/geturl"; 
            		
            	$http.get(url).then(function (response) {
            		q.resolve(response.data.url);	
      	        },
      	        function(e) {
      	        	q.reject(e);
      	        });
	    		
	    		return q.promise;
            }
            
            this.formatErrorMsg = function(errorMsg) {
            	if (errorMsg == null) {
            		return null;
            	}
            	
            	if (typeof(errorMsg) == "string") {
            		return errorMsg;
            	}
            	
            	var str = "";
            	for (var i=0;i<errorMsg.length;i++) {
            		str = str.length > 0 ? " " : "";
            		str += errorMsg[i];
            	}
            	
            	return str;
            }
    }]);       
});	        


define('ngApp/website/services/activityOrderService',[mainPath],
    function() {
    	
    	var app = angular.module('visitacity');

        app.service('activityOrderService', ['$q', '$http', '$filter', function($q, $http, $filter) {
        	
        	
        	this.priceMatrix = null;
        	this.product = null;
        	this.gradesDataAr = [];
        	this.selectedDate = null;
        	this.paramsObj = null;
        	this.tourNotAvailable = {forDate:false,forCount:false};
        	
        	this.init = function(priceMatrix,product,selectedDate,paramsObj) {
        		this.priceMatrix = priceMatrix;
        		this.product = product;
        		this.selectedDate = selectedDate;
        		this.paramsObj = paramsObj;
        		this.clearPricing();
        	}
        	
        	/**
        	 * Getters and setters
        	 */
        	
        	this.getProduct = function() {
        		return this.product;
        	}
        	
        	this.setProduct = function(product) {
        		this.product = product;
        	}
        	
        	this.getParamsObj = function() {
        		return this.paramsObj;
        	}
        	
        	this.setParamsObj = function(paramsObj) {
        		this.paramsObj = paramsObj;
        	}
        	
        	this.getSelectedDate = function() {
        		return this.selectedDate;
        	}
        	
        	this.setSelectedDate = function(selectedDate) {
        		this.selectedDate = selectedDate;
        	}
        	
        	this.getPriceMatrix = function() {
        		return this.priceMatrix;
        	}
        	
        	this.setPriceMatrix = function(priceMatrix) {
        		this.priceMatrix = priceMatrix;
        	}
        	
        	
        	this.getTourNotAvailable = function() {
        		return this.tourNotAvailable;
        	}
        	
        	this.setTourNotAvailable = function(tourNotAvailable) {
        		this.tourNotAvailable= tourNotAvailable;
        	}
        	
        	
        	this.doCalculations = function() {
        		var _self = this;
        		_self.updateGradesAr(_self.priceMatrix);
        		_self.populateGrade();
        		_self.populateAgeBands();
        		_self.populateTotalPrice();
        		return _self.product;
	   		}
        	
        	this.clearPricing = function() {
        		var _self = this;
    			for (var i=0;i<_self.product.tourGrades.length;i++){
    				var curGrade = _self.product.tourGrades[i];
    				delete curGrade['pricingMatrix'];
    				delete curGrade['ageBands'];
    				delete curGrade['countViolationFound'];
    				delete curGrade['maximumCountRequired'];
    				delete curGrade['minimumCountRequired'];
    				delete curGrade['countViolationName'];
    				//delete curGrade['belowMinUsers'];
    				delete curGrade['nextNa'];
    				delete curGrade['totalPrice'];
    				delete curGrade['nextDate'];
    			}
    		}
        	
        	this.updateGradesAr = function(gradesResArr) {
        		var _self = this;

    			var mDate = null;
    			var firstDate = null;
    			if (gradesResArr == null || gradesResArr.length == 0) {
    				return false;
    			}
    			
    			for (var j=0;j<gradesResArr.length;j++) {
    				if (firstDate == null) {
    					firstDate = moment(gradesResArr[j].bookingDate, "YYYY-MM-DD", true);
    				}
    				
    				_self.gradesDataAr[gradesResArr[j].bookingDate] = _self.sortTourGrades(gradesResArr[j]);
    			}
    		}
    	    
    		this.sortTourGrades= function(dateData) {
    			var _self = this;
    			var safeDateData = angular.copy(dateData);
    			
    			try {
    				if (dateData.tourGrades != null && _self.product.tourGrades != null) {
    					dateData.tourGrades.sort(function(a, b) {
    						var aIdxInActivity = _self.getGradeIndexInProduct(a.gradeCode);
    						var bIdxInActivity = _self.getGradeIndexInProduct(b.gradeCode);
    						return aIdxInActivity - bIdxInActivity;
    					})
    				}
    			}
    			catch(e) {
    				console.error(e);
    				dateData = safeDateData;
    			}
    			
    			return dateData;
    		}
    		
    		this.getGradeIndexInProduct = function(gradeCode) {
    			var _self = this;
    			for (var i=0;i<_self.product.tourGrades.length;i++) {
    				if (_self.product.tourGrades[i].gradeCode == gradeCode) {
    					return i;
    				}
    			}
    			
    			return -1;
    		}
        	
    		this.populateGrade = function() {
    			var _self = this;
    			
    	    	var gradesForCurDate = _self.getCurrentGrdades();
    	    	if (gradesForCurDate != null) {
    	    		for (var i=0;i<_self.product.tourGrades.length;i++) {
    		    		var curGrade = _self.product.tourGrades[i];
    		    		for (var j=0;j<gradesForCurDate.tourGrades.length;j++) {
    		    			var curGradeForDate = gradesForCurDate.tourGrades[j];
    		    			if (curGradeForDate.gradeCode == curGrade.gradeCode) {
    		    				curGrade.pricingMatrix = curGradeForDate.pricingMatrix;
    		    				break;
    		    			}
    		    		}
    		    		
    		    	}
    	    	} else {
    	    		var tna = _self.tourNotAvailable;
    	    		tna.forDate = true;
    	    		_self.setTourNotAvailable(tna);
    	    	}
    	    	
    	    }
    		
    		this.getCurrentGrdades = function(d) {
    			var _self = this;
    			var dateStr = $filter('date')(_self.selectedDate, "yyyy-MM-dd");
    			if (d != null) {
    				dateStr = d;
    			}
    			
    			return _self.gradesDataAr[dateStr];
    		}
        	
        	
    		this.populateAgeBands = function() {
    			var _self = this;
    			for (var i=0;i<_self.product.ageBands.length;i++) {
    				for (var j=0;j<_self.paramsObj.ageBands.length;j++) {
    					var paramsBandId = _self.paramsObj.ageBands[j].ageBandId != null ? _self.paramsObj.ageBands[j].ageBandId : _self.paramsObj.ageBands[j].bandId;
    					if (_self.product.ageBands[i].bandId == paramsBandId) {
    						_self.product.ageBands[i].count = parseInt(_self.paramsObj.ageBands[j].count);
    					}
    				}
    			}
    		}
    	    
    	    this.populateTotalPrice = function() {
    	    	var _self = this;
    	    	var noAvailabilityCount = 0;
    	    	var nextAvailGlobal = null;
    	    	var countViolationNum = 0;
    	    	//loop all tour grades to get the price
    	    	for (var i=0;i<_self.product.tourGrades.length;i++) {
    	    		var totalPrice = 0;
    	    		var curTourGrade = _self.product.tourGrades[i];
    	    		curTourGrade.ageBands = new Array();
    	    		if (curTourGrade.pricingMatrix == null) {
    	    			var nextDate = _self.getNextAvailableDateForGrade(curTourGrade);
    	    			if (nextDate == null && _self.priceMatrix.length > 0) {
    	    				curTourGrade.nextNa = _self.priceMatrix[_self.priceMatrix.length-1].bookingDate
    	    			} else if (nextDate != null) {
    	    				curTourGrade.pricingMatrix = nextDate;
    	    				curTourGrade.nextDate = nextDate[0].bookingDate;
    	    				if (nextAvailGlobal == null) {
    	    					nextAvailGlobal = curTourGrade.nextDate.bookingDate;
    	    				}
    	    			}
    	    			if (curTourGrade.pricingMatrix != null) {
    	    				noAvailabilityCount++;
    	    				continue;
    	    			}
    	    		}
    	    		if (curTourGrade.pricingMatrix != null) {
    	    			var foundMatchinPricingMatirx = null;
    	    			var activeAgeBands = $filter('filter')(_self.product.ageBands,  function(value, index){ return value.count>0});
    	    			var curTourGradeAvailable = false;
    	    			for (var j=0;j<curTourGrade.pricingMatrix.length;j++) {
        					var curPriceMatrix = curTourGrade.pricingMatrix[j];
        					foundMatchinPricingMatirx = curPriceMatrix;
        					var requiredAgeBandArrArr = $filter('filter')(curPriceMatrix.ageBandPrices,  function(value, index){ 
        						return value.maximumCountRequired != null || (value.minimumCountRequired != null && value.minimumCountRequired > 0);
        					});
        					var statusOK = true;
        					
        					if (requiredAgeBandArrArr.length > 0 && activeAgeBands.length > requiredAgeBandArrArr.length) {
        						for (var k=0;k<activeAgeBands.length;k++) {
        							var curActiveBand = activeAgeBands[k];
        							var matchingBandArr = $filter('filter')(curPriceMatrix.ageBandPrices,  function(value, index){ return value.bandId == curActiveBand.bandId});
        							if (matchingBandArr.length == 0) {
        								curTourGrade.countViolationFound = true;
        								statusOK = false;
            						}
        						}
        						
        					} else {
        						for (var k=0;k<requiredAgeBandArrArr.length;k++) {
            						var curRequireBand = requiredAgeBandArrArr[k];
            						var matchingBandArr = $filter('filter')(_self.product.ageBands,  function(value, index){ return value.bandId == curRequireBand.bandId});
            						if (matchingBandArr.length > 0) {
            							var curActiveAgeBand = matchingBandArr[0];
            							if (curRequireBand.minimumCountRequired != null && curRequireBand.minimumCountRequired > curActiveAgeBand.count) {
            		    					matchedActiveAgeBand = false;
            		    					countViolationNum += 1;
        		    						curTourGrade.countViolationFound = true;
        		    						curTourGrade.minimumCountRequired = curRequireBand.minimumCountRequired;
        		    						curTourGrade.countViolationName = curActiveAgeBand.pluralDescription;
        		    						statusOK = false;
        		    					} else if (curRequireBand.maximumCountRequired != null && curActiveAgeBand.count > curRequireBand.maximumCountRequired) {
        		    						matchedActiveAgeBand = false;
        		    						countViolationNum += 1;
        		    						curTourGrade.countViolationFound = true;
        		    						curTourGrade.maximumCountRequired = curRequireBand.maximumCountRequired;
        		    						curTourGrade.countViolationName = curActiveAgeBand.pluralDescription;
        		    						statusOK = false;
        		    					}
            						} else {
            							statusOK = false;
            						}
        						}
        					
        					}
        					if (statusOK) {
            					//for the matched metrix, populate the total price and age band prices
        						curTourGradeAvailable = true;// found some availability
            					for (var k=0;k<activeAgeBands.length;k++) {
            						var curActiveAgeBand = angular.copy(activeAgeBands[k]);
            						var matchedPriceArr = $filter('filter')(foundMatchinPricingMatirx.ageBandPrices,  function(value, index){ return value.bandId == curActiveAgeBand.bandId});
            						if (matchedPriceArr.length > 0) {
            							var curPriceMatrixAgeBand = matchedPriceArr[0];
            							var devideBy = 1;
            							/*if (curPriceMatrixAgeBand.maximumCountRequired != null && curPriceMatrixAgeBand.minimumCountRequired != null
            									&& curPriceMatrixAgeBand.maximumCountRequired != curPriceMatrixAgeBand.minimumCountRequired) {
            								devideBy = curActiveAgeBand.count;
            							}*/
            							//if (curActiveAgeBand.bandId == curPriceMatrixAgeBand.bandId) {
            								curActiveAgeBand.price = curPriceMatrixAgeBand.prices[0].price;
            								curActiveAgeBand.price = curActiveAgeBand.price/devideBy;
        		    						totalPrice += curActiveAgeBand.price * curActiveAgeBand.count;
        		    						if (curTourGrade.ageBands == null) {
        				    					curTourGrade.ageBands = new Array();
        				    				}
        		    						//reset errors found
        		    						curTourGrade.countViolationFound = false;
        		    						curTourGrade.maximumCountRequired = null;
        		    						curTourGrade.minimumCountRequired = null;
        		    						curTourGrade.ageBands.push(curActiveAgeBand);
            							//}
            						}
            					}
            					curTourGrade.totalPrice = totalPrice;
            					break;
            				} else {
            					//noAvailabilityCount++;
            				}
    	    			}
    	    			
    	    			if (!curTourGradeAvailable) {
    	    				noAvailabilityCount++;
    	    				countViolationNum++;
    	    			}
    	    			
        				//get the active age bands
/*    		    		var activeAgeBands = $filter('filter')(_self.product.ageBands,  function(value, index){ return value.count>0});
    		    		var inActiveAgeBands = $filter('filter')(_self.product.ageBands,  function(value, index){ return value.count==0});
        				
        				var foundMatchinPricingMatirx = null;
        				for (var j=0;j<curTourGrade.pricingMatrix.length;j++) {
        					var curPriceMatrix = curTourGrade.pricingMatrix[j];
        					foundMatchinPricingMatirx = curPriceMatrix;
        					
	        				//loop all active age bands
	        				for (var k=0;k<activeAgeBands.length;k++) {
	    		    			var curActiveAgeBand = activeAgeBands[k];
	    		    			var matchedActiveAgeBand = false;
	    		    			
	    		    			//loop all pricing matrix age bands
	    		    			for (var l=0;l<curPriceMatrix.ageBandPrices.length;l++) {
	        						var curPriceMatrixAgeBand = curPriceMatrix.ageBandPrices[l];
	        						
	        						if (curPriceMatrixAgeBand.bandId == curActiveAgeBand.bandId) {
	        							curPriceMatrixAgeBand.description = curActiveAgeBand.description
	        							curPriceMatrixAgeBand.pluralDescription = curActiveAgeBand.pluralDescription
	        							matchedActiveAgeBand = true;
		        							
	        							// check min/max
	        		    				if (curPriceMatrixAgeBand.minimumCountRequired != null && curPriceMatrixAgeBand.minimumCountRequired > curActiveAgeBand.count) {
	        		    					matchedActiveAgeBand = false;
	    		    						//console.log("below min count");
	        		    					countViolationNum += 1;
	    		    						curTourGrade.countViolationFound = true;
	    		    						curTourGrade.minimumCountRequired = curPriceMatrixAgeBand.minimumCountRequired;
	    		    						curTourGrade.countViolationName = curActiveAgeBand.pluralDescription;
	    		    					} else if (curPriceMatrixAgeBand.maximumCountRequired != null && curActiveAgeBand.count > curPriceMatrixAgeBand.maximumCountRequired) {
	    		    						matchedActiveAgeBand = false;
	    		    						countViolationNum += 1;
	    		    						curTourGrade.countViolationFound = true;
	    		    						curTourGrade.maximumCountRequired = curPriceMatrixAgeBand.maximumCountRequired;
	    		    						curTourGrade.countViolationName = curActiveAgeBand.pluralDescription;
	    		    					}
	        		    			}
	    		    			}
	
	    		    			if (! matchedActiveAgeBand) {
	    		    				foundMatchinPricingMatirx = null;
	    		    				//break;
	    		    			}
	        				}
	        				//loop all inactive age bands - needed to set the descriptions only for the count violation window
	        				for (var k=0;k<inActiveAgeBands.length;k++) {
	    		    			var curActiveAgeBand = inActiveAgeBands[k];
	    		    			var matchedActiveAgeBand = false;
	    		    			
	    		    			//loop all pricing matrix age bands
	    		    			for (var l=0;l<curPriceMatrix.ageBandPrices.length;l++) {
	        						var curPriceMatrixAgeBand = curPriceMatrix.ageBandPrices[l];
	        						
	        						if (curPriceMatrixAgeBand.bandId == curActiveAgeBand.bandId) {
	        							curPriceMatrixAgeBand.description = curActiveAgeBand.description
	        							curPriceMatrixAgeBand.pluralDescription = curActiveAgeBand.pluralDescription
	        						}
	    		    			}
	        				}
	        				
	        				if (foundMatchinPricingMatirx) {
	        					break;
	        				}
        				
        				}
        				
        				if (foundMatchinPricingMatirx) {
        					//for the matched metrix, populate the total price and age band prices
        					//console.log("foundMatchinPricingMatirx");
        					for (var k=0;k<activeAgeBands.length;k++) {
        						var curActiveAgeBand = angular.copy(activeAgeBands[k]);
        						for (var l=0;l<foundMatchinPricingMatirx.ageBandPrices.length;l++) {
        							var curPriceMatrixAgeBand = foundMatchinPricingMatirx.ageBandPrices[l];
        							if (curActiveAgeBand.bandId == curPriceMatrixAgeBand.bandId) {
        								curActiveAgeBand.price = curPriceMatrixAgeBand.prices[0].price;
    		    						totalPrice += curPriceMatrixAgeBand.prices[0].price * curActiveAgeBand.count;
    		    						if (curTourGrade.ageBands == null) {
    				    					curTourGrade.ageBands = new Array();
    				    				}
    		    						//reset errors found
    		    						curTourGrade.countViolationFound = false;
    		    						curTourGrade.minimumCountRequired = null;
    		    						curTourGrade.maximumCountRequired = null;
    				    				curTourGrade.ageBands.push(curActiveAgeBand);
        							}
        						}
        					}
        					curTourGrade.totalPrice = totalPrice;
        				} else if (countViolationNum > 0) {
        					//console.log('There is a Count Violation');
        					noAvailabilityCount++;
        				} else {
        					curTourGrade.countViolationFound = true;
        				}*/
        				
        				
    	    		} else {
    	    			noAvailabilityCount++;
    	    			var nextDate = _self.getNextAvailableDateForGrade(curTourGrade);
    	    			if (nextDate == null && _self.priceMatrix.length > 0) {
    	    				curTourGrade.nextNa = _self.priceMatrix[_self.priceMatrix.length-1].bookingDate
    	    			} else if (nextDate != null){
    	    				curTourGrade.pricingMatrix = nextDate;
    	    				curTourGrade.nextDate = nextDate[0].bookingDate;
    	    				if (nextAvailGlobal == null) {
    	    					nextAvailGlobal = curTourGrade.nextDate.bookingDate;
    	    				}
    	    			} else {
    	    				curTourGrade.countViolationFound = "";
    	    			}
    	    			
    	    		}
    	    		
    	    	}
    	    	if (noAvailabilityCount == _self.product.tourGrades.length) {
	    			//no tour grade available for date
	    			//if (countViolationNum == noAvailabilityCount) {
	    			if (countViolationNum > 0) {
	    				var tna = _self.tourNotAvailable;
	    	    		tna.forDate = false;
	    	    		tna.forCount = true;
	    	    		tna.firstDate = null;
	    	    		_self.setTourNotAvailable(tna);
	    	    		fireEvent("activity-booking-desktop-error","no options available for user count");
	    			} else {
	    				var tna = _self.tourNotAvailable;
	    	    		tna.forDate = true;
	    	    		tna.forCount = false;
	    	    		tna.firstDate = nextAvailGlobal;
	    	    		_self.setTourNotAvailable(tna);
	    	    		fireEvent("activity-booking-desktop-error","no options available for date");
	    			}
	    			
	    		}
    	    	
    	    }
    	    
   	    
    	    /**
    	     * Iterate price matrix to find when the next grade will be available
    	     */
    	    this.getNextAvailableDateForGrade = function(missingTourGrade) {
    	    	var _self = this;
    	    	
    	    	var dateStr = $filter('date')(_self.selectedDate, "yyyy-MM-dd");
    	    	for (var i=0;i<_self.priceMatrix.length;i++){
    	    		var curPriceMatrix = _self.priceMatrix[i];
    	    		if (curPriceMatrix.bookingDate > dateStr) {
    	    			var gradesForCurDate = _self.getCurrentGrdades(curPriceMatrix.bookingDate);
    	    			if (gradesForCurDate != null) {
    	    				for (var j=0;j<gradesForCurDate.tourGrades.length;j++) {
        		    			var curGradeForDate = gradesForCurDate.tourGrades[j];
        		    			if (curGradeForDate.gradeCode == missingTourGrade.gradeCode) {
        		    				return curGradeForDate.pricingMatrix;
        		    			}
        		    		}
    	    			}
    	    		}
    	    	}
    	    	/*var gradesForCurDate = _self.getCurrentGrdades();
    	    	if (gradesForCurDate != null) {
    	    		for (var i=0;i<_self.product.tourGrades.length;i++) {
    		    		var curGrade = _self.product.tourGrades[i];
    		    		for (var j=0;j<gradesForCurDate.tourGrades.length;j++) {
    		    			var curGradeForDate = gradesForCurDate.tourGrades[j];
    		    			if (curGradeForDate.gradeCode == curGrade.gradeCode) {
    		    				curGrade.pricingMatrix = curGradeForDate.pricingMatrix;
    		    				break;
    		    			}
    		    		}
    		    		
    		    	}
    	    	}
    	    	
    	    	for (var i=0;i<_self.priceMatrix.length;i++){
    	    		var curPriceMatrix = _self.priceMatrix[i];
    	    		if (curPriceMatrix.bookingDate > dateStr) {
    	    			for (var j=0;j<curPriceMatrix.tourGrades.length;j++) {
    	    				if (missingTourGrade.gradeCode == curPriceMatrix.tourGrades[j].gradeCode && curPriceMatrix.tourGrades[j].pricingMatrix.length > 0) {
    	    					//return curPriceMatrix.bookingDate;
    	    					return curPriceMatrix;
    	    				}
    	    			}
    	    		}
    	    	}*/
    	    }
        	
    }]);       
});	        


define('ngApp/website/services/itineraryRegionalService',[mainPath,
        "app/itinerary/itineraryDataMgr",
        "app/itinerary/itinerarySite",
        "app/core/mapServices"],
    function(main,ItineraryDataMgr,ItinerarySite,MapServices) {
    var app = angular.module('visitacity');

	app.service('itineraryRegionalService', ['$filter','blockUI','sharedItineraryService',
	                                  function($filter,blockUI,sharedItineraryService) {
		
		this.itinerary = null;
		this.itineraryDataMgr = null;
		this.noScroll = true;
		this.newItrSiteId = 0;
		this.disableRouting = true;
		
		this.init = function(itinerary,doDisableRouting) {
			var _self = this;
			_self.disableRouting = doDisableRouting;
			var deffered = new $.Deferred();
			for (var i=0;i<itinerary.itinerarySites.length;i++) {
				//handle itinerary sites
   	   			if (itinerary.itinerarySites[i].additionalData != null) {
   	   				//change additional data from jsom to object
   	   				var curItrSite = itinerary.itinerarySites[i];
   	   				curItrSite.additionalData = angular.fromJson(curItrSite.additionalData);
				}
   	   			if (i == 0) {
   	   				//reset routing for first site (if previous was deleted)
   	   				itinerary.itinerarySites[i].minutesTransitCarPrev = null;
   	   				itinerary.itinerarySites[i].metersTransitCarPrev = null;
   	   			}
	   		}
			
			_self.setItinerary(itinerary);
			_self.setItineraryDataMgr();
			_self.processRegionalItr();
			_self.setDates();
			//sharedItineraryService.setGooglePhotos(_self.getItinerary().itinerarySites);
			deffered.resolve(_self.getItinerary());
			return deffered;
		}
		
		
		/**
		 * Setters and Getters
		 */
		
		
		this.setItinerary = function(itr) {
			var _self = this;
			_self.itinerary = itr;
		}
		
		this.getItinerary = function() {
			var _self = this;
			return _self.itinerary;
		}
		
		this.setItineraryDataMgr = function() {
			var _self = this;
			_self.itineraryDataMgr = new ItineraryDataMgr(_self.getItinerary());
		}
		
		this.getItineraryDataMgr = function() {
			var _self = this;
			return _self.itineraryDataMgr;
		}
		
		this.getNewItrSiteId = function() {
			var _self = this;
			return _self.newItrSiteId++;
		}
		
	

		
		this.processRegionalItr = function() {
			var _self = this;
			for (var i=0;i<_self.getItinerary().itinerarySites.length;i++) {
				//handle itinerary sites
				var curItrSite = _self.getItinerary().itinerarySites[i];
   	   			if (i > 0) {
   	   				var prevItrSite = _self.getItinerary().itinerarySites[(i-1)];
   	   				if (curItrSite.startDay < (prevItrSite.startDay + prevItrSite.numOfDays)) {
   	   					curItrSite.isStartSameDay = true;
   	   					curItrSite.changeDayMessage = $filter("translateFilter")("the day after your **city** visit ends","**city**",prevItrSite.name);
   	   					curItrSite.changeDayMessageLong = $filter("translateFilter")("Start your **city** visit on day **x**","**city**",curItrSite.name,"**x**",(curItrSite.startDay + 1)) + ", " + $filter("translateFilter")("the day after your **city** visit ends","**city**",prevItrSite.name);
   	   					//handle startTime
   	   					if (curItrSite.subItinerary != null && curItrSite.subItinerary.clientUniqueItrId == null) {
   	   						//only change start time for system itinerary, otherwise it's handled by the server
   	   						var startHour= "12:00"; //default in case of starting in the same day
	   	   					if (prevItrSite.subItinerary != null && prevItrSite.subItinerary.itinerarySites && prevItrSite.subItinerary.itinerarySites.length > 0) {
	   	   						var visitHour = moment("2012 12 01 00 ", "YYYY MM DD HH");
	   	   						if (prevItrSite.startHour != null) {
	   	   							//more than 2 places in the same day
		   	   						var lastSiteHourAr = prevItrSite.startHour.split(":");
			   	   					if (lastSiteHourAr.length == 2) {
			   	   						visitHour.hour(lastSiteHourAr[0]);
			   	   						visitHour.minute(lastSiteHourAr[1]);
			   	   					}
	   	   							for (var j=0;j<prevItrSite.subItinerary.itinerarySites.length;j++) {
	   	   								visitHour.add(prevItrSite.subItinerary.itinerarySites[j].visitTimeMinutes,"minutes");
	   	   							}
	   	   							if (curItrSite.minutesTransitCarPrev != null) {
	   	   								//add the travel time
	   	   								visitHour.add(curItrSite.minutesTransitCarPrev,"minutes");
	   	   							}
	   	   							startHour = visitHour.format("HH:mm");
	   	   						} else {
	   	   							var lastDaySites = $filter('filter')(prevItrSite.subItinerary.itinerarySites,{dayInTrip:prevItrSite.subItinerary.noOfDays, type: '!hotel'},true);
	   	   							if (lastDaySites.length > 0) {
		   	   							var lastSite = lastDaySites[lastDaySites.length-1];
		   	   							if (lastSite.name == "Break") {
		   	   								//in case break at the end of the day, use the site before
		   	   								lastSite = lastDaySites[lastDaySites.length-2];
		   	   							}
			   	   						var lastStartHour = lastSite.hourText;
				   	   					var lastSiteHourAr = lastStartHour.split(":");
				   	   					if (lastSiteHourAr.length == 2) {
				   	   						visitHour.hour(lastSiteHourAr[0]);
				   	   						visitHour.minute(lastSiteHourAr[1]);
				   	   						visitHour.add(lastSite.visitTimeMinutes,"minutes"); //add the visit duration
				   	   						if (curItrSite.minutesTransitCarPrev != null) {
				   	   							//add the travel time
				   	   							visitHour.add(curItrSite.minutesTransitCarPrev,"minutes");
				   	   						}
				   	   						startHour = visitHour.format("HH:mm");
				   	   					}
	   	   							} else {
	   	   								startHour = null;
	   	   							}
		   	   						
	   	   						}
	   	   						
	   	   					}
	   	   					curItrSite.startHour = startHour;
   	   					}
   	   				} else {
   	   					curItrSite.isStartSameDay = false;
   	   					curItrSite.changeDayMessage = $filter("translateFilter")("the same day that your **city** visit ends","**city**",prevItrSite.name);
   	   					curItrSite.changeDayMessageLong = $filter("translateFilter")("Start your **city** visit on day **x**","**city**",curItrSite.name,"**x**",(curItrSite.startDay - 1)) + 
   	   					", " + $filter("translateFilter")("the same day that your **city** visit ends","**city**",prevItrSite.name);
   	   					curItrSite.startHour = null;
   	   				}
   	   				
				}
	   		}
		}
		
		/**
		 * Create an empty itinerary site object for add destination
		 */
		this.createNewSiteObj = function(afterSite, newDestination) {
			var _self = this;
			var newNoInTrip = 1; 
			var newStartDay = 1;
			
			var name = "";
			var notes = "";
			var address = "";
			var latitude = null;
			var longitude = null;
			var city = null;
			if (newDestination != null) {
				name = newDestination.name
				latitude = newDestination.latitude
				longitude = newDestination.longitude
				city = newDestination;
			}
			
			var newItrSite = {
					id: _self.getNewItrSiteId(),
					name: name,
					address: address,
					notes: 	notes,
					noInTrip: null,
					latitude: latitude,
					longitude: longitude,
					dayInTrip:  0,
					startDay : newStartDay,
					city: city
				};
			
			newItrSite = new ItinerarySite(newItrSite);
			newItrSite = _self.calculateBestPlace(newItrSite)
			return newItrSite;
		}
		
		this.calculateBestPlace = function(itrSite) {
			var _self = this;
			var mapSvc = new MapServices();
			var size = _self.getItinerary().itinerarySites.length + 1;
			var minDistance = null;
			var bestIndex = null
			for (var i=0;i<=size;i++){
				var sitesArr = angular.copy(_self.getItinerary().itinerarySites);
				var prevSite = null;
				var totalDistance = 0;
				sitesArr.splice(i, 0, itrSite);
				for (var j=0;j<sitesArr.length;j++) {
					var curSite = sitesArr[j];
					if (prevSite != null) {
						var distance = mapSvc.calcDistanceBetween(curSite.latitude,curSite.longitude,prevSite.latitude,prevSite.longitude);
						totalDistance += distance;
					}
					prevSite = curSite;
				}
				if (minDistance == null || minDistance > totalDistance) {
					minDistance = totalDistance;
					if (i == 0) {
						//add at the beginning
						itrSite.noInTrip = 0;
						itrSite.startDay = 1;
					} else if (i == size) {
						//add at the end
						afterSite = _self.getItinerary().itinerarySites[_self.getItinerary().itinerarySites.length-1];
						itrSite.noInTrip = afterSite.noInTrip + 0.1;
						itrSite.startDay = afterSite.startDay + afterSite.numOfDays;
					} else {
						//add in the middle
						afterSite = _self.getItinerary().itinerarySites[i-1];
						itrSite.noInTrip = afterSite.noInTrip + 0.1;
						itrSite.startDay = afterSite.startDay + afterSite.numOfDays;
					}
				}
			}
			return itrSite;
		}
		
		this.addDestination = function(itrSite) {
			var _self = this;
			if (itrSite.city == null) {
				_self.calculateBestPlace(itrSite);
			}
			_self.getItinerary().itinerarySites.push(itrSite);
			_self.fixNoInTrip();
			_self.fixStartDay();
			_self.processRegionalItr();
		}
		
		/**
		 * Fix the no in trip so it's sequential
		 */
		this.fixNoInTrip = function() {
			var _self = this;
			_self.getItinerary().itinerarySites = $filter('orderBy')(_self.getItinerary().itinerarySites, "noInTrip", false);
			for (var i=0;i<_self.getItinerary().itinerarySites.length;i++) {
				var curItrSite = _self.getItinerary().itinerarySites[i];
				curItrSite.noInTrip = (i+1);
			}
		}
		
		/**
		 * Remove a destination from the itinerary
		 */
		this.removeDestination = function(itrSiteToRemove) {
			var _self = this;
			var idx = null;
			for (var i=0;i<_self.getItinerary().itinerarySites.length;i++) {
				if (itrSiteToRemove.id == _self.getItinerary().itinerarySites[i].id) {
					idx = i;
					break;
				} 
			}
			_self.getItinerary().itinerarySites.splice(idx,1);
			_self.fixStartDay();
			_self.fixNoInTrip();
		}
		
		/**
		 * When remove or reorder
		 */
		this.fixStartDay = function(changedItrSited) {
			var _self = this;
			var startDay = 1;
			for (var i=0;i<_self.getItinerary().itinerarySites.length;i++) {
				var curItrSite = _self.getItinerary().itinerarySites[i];
				if (i > 0 && curItrSite.isStartSameDay && (changedItrSited == null || changedItrSited.id != curItrSite.id)) {
   					//in case site was started at the same day, keep it
   					startDay = startDay - 1; 
				}
				if (changedItrSited == null || changedItrSited.id != curItrSite.id) {
					//don't update the site that was change, it already has the correct data
					curItrSite.startDay = startDay;
					startDay = startDay + curItrSite.numOfDays;
				} else {
					startDay = curItrSite.startDay + curItrSite.numOfDays;
				}
			}
		}
		
		/**
		 * Set the num of days and start/end date
		 */
		this.setDates = function() {
			var _self = this;
			if (_self.getItinerary().itinerarySites.length == 0) {
				return;
			}
			var lastItrSite = _self.getItinerary().itinerarySites[_self.getItinerary().itinerarySites.length -1];
			_self.getItinerary().noOfDays = lastItrSite.startDay + lastItrSite.numOfDays - 1;
			if (_self.getItinerary().startDate != null) {
				var duration = moment.duration({'days' : _self.getItinerary().noOfDays-1}); //end date is num of days -1 
				_self.getItinerary().endDate = moment(_self.getItinerary().startDate).add(duration).toDate();
				for (var i=0;i<_self.getItinerary().itinerarySites.length;i++) {
					var curItrSite = _self.getItinerary().itinerarySites[i];
					var duration = moment.duration({'days' : curItrSite.startDay-1}); //start date
					curItrSite.startDate =  moment(_self.getItinerary().startDate).add(duration).toDate();
					if (curItrSite.numOfDays > 1) {
						duration = moment.duration({'days' : curItrSite.numOfDays-1}); //end date
						curItrSite.endDate =  moment(curItrSite.startDate).add(duration).toDate();
					}
				}
			}
		}
		
		this.saveItinerary = function(doEnsureRouting) {
			blockUI.start("Saving Itinerary...");
			var deffered = new $.Deferred();
			var _self = this;
			_self.setDates();
			_self.getItineraryDataMgr().setItineraryObj(_self.getItinerary(),true);
			if (doEnsureRouting) {
				_self.ensureRegionalRouting().then(function(mapServicesDrivingData) {
					_self.getItineraryDataMgr().save(null,null,getActiveLang(true)).then(function() {
						deffered.resolve(_self.getItinerary());
					});
				});
			} else {
				_self.getItineraryDataMgr().save().then(function() {
					deffered.resolve(_self.getItinerary());
				});
			}
		
			return deffered;
		}
		
        this.ensureRegionalRouting = function() {
        	var _self = this;
        	var deffered = new $.Deferred();
         	var itrSites = _self.getItinerary().itinerarySites;
        	var arPoints = [];
        	var foundPersonalActivity = false;
        	
        	// do we even need to check
        	if (itrSites.length < 2) {
        		deffered.resolve();
        		return deffered;
        	}        	
       	
        	// check
        	for (var i=0;i<itrSites.length;i++) {
        		// clear
        		itrSites[i].minutesTransitCarPrev = null;
				itrSites[i].metersTransitCarPrev = null;
        		
        		// add data
        		arPoints.push(itrSites[i].getLatLng());
        		
        		if (itrSites[i].isPersonalActivity() || itrSites[i].isRestaurant()) {
        			foundPersonalActivity = true;
        		}
        	}
        	
        	var mapServicesDrivingDeffered = new $.Deferred();
        	var mapServicesDriving = new MapServices("driving");
        	if (_self.disableRouting) {
        		mapServicesDrivingDeffered = mapServicesDriving.getEstimatedBasicRouteData(arPoints,"driving");
        	} else {
        		mapServicesDrivingDeffered = mapServicesDriving.getBasicRouteData(arPoints,"driving");
        	}
           	
        	
        	// wait on both
        	$.when(mapServicesDrivingDeffered).then(function(mapServicesDrivingData) {
        		
        		var routeArr = mapServicesDrivingData;
           		// process mapServices driving data
        		if (routeArr != null) {
            		for (var j=0;j<routeArr.length;j++) {
            			var itrSite = itrSites[j+1]; 
            			itrSite.metersDistancePrev = routeArr[j].distanceMeters;
            			itrSite.minutesTransitCarPrev = parseInt(routeArr[j].durationSeconds / 60);
            		}        			
        		}
        		
        		deffered.resolve();
        	}, 
        	function(e) {
        		console.log("failed in ensureRoutingDataForDay when", e);
        	});       	
        	
        	return deffered;
        };

		
	}]);       
});	

    	

define('ngApp/website/services/attrMapService',[mainPath,
        "app/core/mapServices",
        "app/mobile/core/mapLoader",
        "ngApp/website/map/mapMgr"],
    function(main,MapServices,MapLoader,MapMgr) {
    var app = angular.module('visitacity');

	app.service('attrMapService', ['$http','$q','$filter','$location','dataWearhouseService', 'GetCitiesService','$templateCache','$compile','GlobalDefs','$timeout','$rootScope',
	                               'attractionsService','activitiesService','$routeParams','$window',
	                                  function($http, $q, $filter,$location,dataWearhouseService,GetCitiesService,$templateCache,$compile,GlobalDefs,$timeout,$rootScope,
	                                		  attractionsService,activitiesService,$routeParams,$window) {
		
		this.allCities = new Array();
		this.citiesArr = new Array()
		this.cityMap = new Object();
		this.allCountryActivities = null;
		this.imagesCdn = GlobalDefs.getImagesCdn();
		this.appRoot = GlobalDefs.getAppRoot();
		this.pageName = null;
		this.currentCity = null;
		this.attrZoom = null;
		this.map = null;
		this.rectMap = new Object();
		this.countryId = null;
		this.namePadding = 0; //in case we want to allow more space between names, add to this number
		
		this.init = function(cityLegal,pageName,attrZoom,namePadding) {
			var _self = this;
			var deffered = new $.Deferred();
			if (namePadding != null) {
				_self.namePadding = namePadding;
			}
			_self.pageName = pageName;
			_self.attrZoom = attrZoom;
			var callA = MapLoader.getInstance().load();
			var callStr = '/jsonws/' + cityLegal  + '/country-attractions/all';
			var wearhouseId = "countryAttractions" + cityLegal;
			var lang = $routeParams.lang != null ? $routeParams.lang : getActiveLang(true);
			if (lang != "en") {
				callStr += "/" + lang;
				wearhouseId += lang;
			}
			var callB = dataWearhouseService.getData(callStr,wearhouseId);
			var callC = callC = GetCitiesService.async();
			$q.all(new Array(callA,callB,callC)).then(
		   			 function(results) {
		   				var isOnWork = $routeParams.edit == 1;
		   				var allCitiesArr = results[2];
		   				var allCities = $filter('filter')(allCitiesArr, function(value, index){if (value.imageOpt != null && value.status == 'production'){return true}}, true);
		   				var curCity = $filter('filter')(allCitiesArr, function(value, index){if (value.legalName == cityLegal && value.status == 'onwork'){return true}}, true);
		   				var foundCity = $filter('filter')(allCitiesArr, function(value, index){if (value.legalName == cityLegal){return true}}, true);
		   				
		   				if (isOnWork) {
		   					allCities = allCitiesArr;
		   				} else if ((curCity.length > 0 || foundCity.length == 0) && $location.path().indexOf("attractions-map") > 0) {
		   					$location.search("edit","1");
		   					$window.location.reload();
		   				}
		   				_self.setAllCities(allCities);
		   				_self.setAllCountryActivities(results[1].data);
		   				
		   				deffered.resolve();
		   				
		   				
		   			 }
		   	);
			return deffered;
		}		
		
		
		this.processData = function(city) {
			var deffered = new $.Deferred();
			//console.time('processData');
			var _self = this;
			
			_self.currentCity = city;
			if (_self.countryId == null || _self.countryId != _self.currentCity.country.id) {
				//reset when switching countries
				_self.countryId = _self.currentCity.country.id;
				_self.cityMap = new Object();
			}
			
			var isOnWork = $routeParams.edit == 1;
				
			_self.citiesArr = $filter('filter')(_self.getAllCities(), function(value, index){ if ((value.status == 'production' || isOnWork) && value.country != null && value.country.id == city.country.id && (value.cityType == null || value.cityType == "city")) { 
				_self.cityMap[value.id] = value;
				_self.cityMap[value.id].attractionsArr = null; //reset when using back
				return true;
			}});
			
			if (_self.cityMap[city.id] == null) {
				_self.cityMap[city.id] = city;
				
			}

			_self.citiesArr = $filter('orderBy')(_self.citiesArr, ['!!numOfUserPlans', 'numOfUserPlans'], true);
			
			for (attr in _self.getAllCountryActivities()) {
				var obj = new Object();
				obj.id = attr;
				obj.shortTitle = _self.getAllCountryActivities()[attr][0];
				obj.longitude = _self.getAllCountryActivities()[attr][1];
				obj.latitude = _self.getAllCountryActivities()[attr][2];
				obj.cityId = _self.getAllCountryActivities()[attr][3];
				obj.noPerUsers = parseInt(_self.getAllCountryActivities()[attr][4]);
				if (_self.cityMap[obj.cityId] != null && _self.cityMap[obj.cityId].attractionsArr == null) {
					_self.cityMap[obj.cityId].attractionsArr = new Array();
				}
				if (_self.cityMap[obj.cityId] != null) {
					_self.cityMap[obj.cityId].attractionsArr.push(obj);
				}
				
			}
			
			var lang = $routeParams.lang != null ? $routeParams.lang : getActiveLang(true);
			var langStr = "";
			var wearhouseId = "";
			if (lang != "en") {
				langStr = "/" + lang;
				wearhouseId = lang;
			}
			var call = dataWearhouseService.getData('/jsonws/' + city.legalName  + '/cityDescriptions' + langStr,"cityDescriptions" + city.legalName + wearhouseId);
			deffered.resolve();
			$q.all(new Array(call)).then(
					function(descResults) {
						for (key in _self.cityMap) {
							_self.cityMap[key].description = descResults[0].data[key];
						}
					}
			);
			
			
			return deffered;
				
		}
		
		this.prepareQtip = function(element,curSiteId,city) {
			var _self = this;
			var openTarget = $("#imgMapImg_" + curSiteId);
			var templateUrl = "/map/map-overlay.html"
			if (city != null) {
				 templateUrl = "/map/map-city-overlay.html";
			}
			var curSite = null;
			_self.createQtip(element,openTarget,templateUrl,curSiteId,'click','click',city);
			element.unbind('click')
	   };
		
		this.createQtip = function(element,openTarget,templateUrl,curSiteId,closeOn,showOn,city) {
			//qtipArr.push(element);
			var _self = this;
			$http.get(appWebRoot + templateUrl, {cache: $templateCache}).
	       	success(function(content) {
	       		var tmpScope = $rootScope.$new();
	       		var compiledContent = $compile(content)(tmpScope);
	       		tmpScope.imagesCdn = _self.imagesCdn;
	       		tmpScope.appRoot = _self.appRoot;
	       		tmpScope.currentCity = _self.currentCity;
	       		tmpScope.lang = $routeParams.lang != null ? $routeParams.lang : getActiveLang(true);
	       		if (city == null) {
	       			_self.getSiteFromMap(curSiteId,tmpScope.currentCity).then(function(curSite) {
		       			tmpScope.site = curSite;
			       		tmpScope.cityObj = $filter('filter')(_self.citiesArr, {id: curSite.cityId}, true)[0];
			       		tmpScope.rightSidePaArr = activitiesService.getSitePaidActivities(curSite.id);
			       		if (tmpScope.rightSidePaArr.length > 0) {
			       			tmpScope.rightSidePa = tmpScope.rightSidePaArr[0];
			       		}
					}, function(reason) {
						console.log('Could not find site: ' + curSiteId);
					}, function(update) {
					  
					});
	       		} else {
	       			tmpScope.site = city;
	       		}
	       		
	       		
	       		tmpScope.readMore = function(curSite, evt) {
	    			fireEvent(_self.pageName,evt,"");
	    			var city = $filter('filter')(_self.getCitiesArr(), {id: curSite.cityId}, true)[0];
	    			var url = "/en/" + city.legalName + '/attractions/' + curSite.legalName;
	    			$('.qtip').remove();
	    			//set the site and zoom so that map is returned to it's place when clicking back
	    			$location.search({'siteId':curSite.id,'mapZoom':_self.getMap().getZoom(),'mapLat':_self.getMap().getCenter().A,'mapLng':_self.getMap().getCenter().F});
	    			
	    			$timeout(function() {
	    				$location.path(url).search({});
	    			},300);
	    			
	    		}
	       		
	       		
	       		$(element).qtip({
	       			content: {
	                	text:compiledContent,
	                	button: 'Close'
	                },
	                position: {
	                  my: 'top center',
	                  at: 'middle left',
	                  target: false,
	                  viewport: $(window),
	                  adjust: {
	                      x: 8
	                  }
	                },
	                style: {
	                	classes: 'qtip-rounded qtip-bootstrap qtip-shadow qtip-overflow qtip-close-black',
	                	tip: {
	                        corner: true,
	                        height: 26
	                    }
	                },
	                hide: {
	                  fixed : true,
	                  delay : 300,
	                  event: closeOn,
	                  effect: function() { 
	                      $(this).animate({ opacity: 0 }, { duration: 150 });
	                }
	                }, 
	                show : {
	                	solo: true,
	                	delay : 50,//keep this otherwise qtip opens in wrong position sometimes
	                	event: showOn,
	                	ready: true,
	                	effect: function() {
	                        $(this).show().css({ opacity: 0 }).animate({ opacity: 1 }, { duration: 350 });
	                  }
	                }, 
	                events: {
	                	show: function(event, api) {
	                		if (city == null) {
		                		var si = setInterval(function(){
									if (tmpScope.site != null) {
										//$scope.changeAttraction(tmpScope.site);
										$rootScope.$broadcast("map_change_attraction",tmpScope.site);
										clearInterval(si);
									}
								}, 100);
	                		}
	                		fireEvent(_self.pageName,"show_overlay","");
	                	},
	                	visible: function(event, api) {
	                		$timeout(function() {
	            				//don't remove this, it's causing $digest to run 
	            				$(element).qtip('api');
	            			}, 100);
	                	}
	                }
	            });
	
	         });
			
		}
		
		this.getSiteFromMap = function(siteId,curCity) {
			var _self = this;
			var deferred = $q.defer();
			for (key in _self.cityMap) {
        		var siteArr = _self.cityMap[key].attractionsArr;
        		if (siteArr != null) {
        			for (var i=0;i<siteArr.length;i++) {
        				if (siteArr[i].id == siteId) {
        					if (siteArr[i].descriptionNoHtml == null) {
        						return getAttractionsForCity(key,siteId);
        					} else {
        						if (curCity.id != siteArr[i].cityId) {
        							//$scope.attractions = siteArr;
        							var city = $filter('filter')(_self.getAllCities(), {id: siteArr[i].cityId}, true)[0];
        							//_self.currentCity = city;
        							$rootScope.$broadcast("map_update_city",siteArr,city);
        						}
        						deferred.resolve(siteArr[i]);
        					}
        					
        				}
        			}
        		}
			}
			return deferred.promise;
		}
		
		this.getAttractionsForCity = function(cityId,siteId) {
			var _self = this;
			var deferred = $q.defer();
			var city = $filter('filter')(_self.getAllCities(), {id: parseInt(cityId)}, true)[0];
			if (city != null) {
				var callA = attractionsService.init(city.legalName);
				var callB = activitiesService.init(city.legalName);
				$q.all(new Array(callA,callB)).then(
		   			 function(results) {
		   				 var attractions = attractionsService.allAttractionsData.lstSites;
		   				_self.cityMap[cityId].attractionsArr = attractions;
		   				 $( "#navigationPane").scrollTop(0);
		   				 if (siteId != null) {
		   					 var selectedAttr = $filter('filter')(attractions, {id: parseInt(siteId)}, true)[0]
		   					 deferred.resolve([selectedAttr,city,attractions]);
		   				 } else {
		   					 deferred.resolve([attractions[0],city,attractions]);
		   				 }
		   			 });
			} else {
				//city on work
				$timeout(function() {
					deferred.resolve();
    			},300);
			}
			return deferred.promise;
		}
		
		/** Check collision **/
	  	this.fixColision = function(siteArr,prefixId,doRemoveOverlay,city) {
	  		////console.time("fixColision")
	  		var _self = this;
	  		_self.rectMap = new Object();
	  		var cssOptionsArr = new Array('map_name_wrapper-tl','map_name_wrapper-tr','map_name_wrapper-bl','map_name_wrapper-br');
	  		for (var i=0;i<siteArr.length;i++) {
	  			var curAttr = siteArr[i];
	  			var cssClass= "";
	  			if (city != null) {
	  				//set the initial class based on the position of the element
	  				if (siteArr[i].latitude > city.midLat) {
						if (siteArr[i].longitude > city.midLng) {
							cssClass = "map_name_wrapper-tr";
						} else {
							cssClass = "map_name_wrapper-tl";
						}
					} else {
						if (siteArr[i].longitude > city.midLng) {
							cssClass = "map_name_wrapper-br";
						} else {
							cssClass = "map_name_wrapper-bl";
						}
					}
	  			} else {
	  				cssClass = "map_name_wrapper-br";
	  			}
				

	  			var curElem = $('#title' + prefixId + curAttr.id);
	  			var mapCounter = 0;
	  			var cssMap = new Object();
	  			cssMap[mapCounter++] = cssClass;
	  			//add all the classes to the map but add the best class as the first option to try
	  			for (var l=0;l<cssOptionsArr.length;l++) {
	  				if (cssOptionsArr[l] != cssClass) {
	  					cssMap[mapCounter++] = cssOptionsArr[l];
	  				}
	  			}
	  			if (city == null) {
	  				//for city label, always use bottom right
	  				cssMap = {0:'map_name_wrapper-br'};
	  			}
	  			if (city == null || curAttr.attrVisible) {
	  				//get position of all corners
	  				//var rectObj = new Object();
	  				var rectObj = _self.rectMap[curAttr.id];
	  				if (city != null && rectObj == null) {
	  					rectObj = new Object();
	  					//check the position of all 4 options together, if this doesn't conflict no need to check each one seperatly
		  				curElem.removeClass("map_name_wrapper-tr map_name_wrapper-tl map_name_wrapper-br map_name_wrapper-bl").addClass("map_name_wrapper-tr");
		  				var bcRect = curElem[0].getBoundingClientRect();
		  				rectObj.top = bcRect.top;
		  				rectObj.right = bcRect.right;
		  				curElem.removeClass("map_name_wrapper-tr map_name_wrapper-tl map_name_wrapper-br map_name_wrapper-bl").addClass("map_name_wrapper-bl");
		  				bcRect = curElem[0].getBoundingClientRect();
		  				rectObj.bottom = bcRect.bottom;
		  				rectObj.left = bcRect.left;
		  				_self.rectMap[curAttr.id] = rectObj;
	  				}
	  				curElem.removeClass("map_name_wrapper-tr map_name_wrapper-tl map_name_wrapper-br map_name_wrapper-bl").addClass(cssClass);
	  				for (var j=0;j<i;j++) {
	  					var checkWithAttr = siteArr[j];
	  	  				var targetElem = $('#title' + prefixId + checkWithAttr.id);
	  	  				if ((city == null || checkWithAttr.attrVisible) && (targetElem.css("display") == "inline-block" || targetElem.css("display") == "block")) {
	  	  					var notVisible = true;
	  	  					var prevClass = null;
	  	  					if (city != null) {
		  	  					var overlappStatus = _self.collision(targetElem,curElem,rectObj);
		  	  					if (!overlappStatus) {
		  	  						continue;
		  	  					}
	  	  					}
	  	  					
	  	  					//now check each option
	  	  					for (var l=0;l<4;l++) {
	  	  						cssKey = cssMap[l];
	  	  						if (cssKey == null) {
	  	  							continue;
	  	  						}
	  	  						curElem.removeClass("map_name_wrapper-tr map_name_wrapper-tl map_name_wrapper-br map_name_wrapper-bl").addClass(cssKey);

	  	  						var overlappStatus = _self.collision(targetElem,curElem);
	  	  						//countChecks++;
		  	  					if (overlappStatus) {
		  	  						//if there is an overlapp, we can't use this direction anymore
		  	  						delete cssMap[l];
		  	  					}

	  	  					}
	  	  					if (Object.keys(cssMap).length == 0) {
	  	  						//remove
		  	  					if (doRemoveOverlay) {
	  	  	  						MapMgr.getInstance().removeOverlays(curAttr.id);
	  	  	  					} 
	  	  	  					$('#title' + prefixId + curAttr.id).hide();
	  	  	  					$('#title' + prefixId + curAttr.id).css("opacity","0.01");
	  	  	  					break; 	
	  	  					} else {
	  	  						//set the class to the best possible option
	  	  						var setClass = null;
	  	  						for (cssKey in cssMap) {
	  	  							setClass  = cssMap[cssKey];
		  	  						break;
	  	  						}
	  	  						curElem.removeClass("map_name_wrapper-tr map_name_wrapper-tl map_name_wrapper-br map_name_wrapper-bl").addClass(setClass);
	  	  					}
	  	  				}
	  	  				
	  	  			}

	  			} 
	  		}
	  		////console.timeEnd("fixColision")
	  	  }
		
	  	
		//Check if sites are on top
		this.collision = function($div1, $div2,rectObj) {
			var overlap = false;
			var _self = this;
			try {
				var rect1 = _self.rectMap[_self.getmapId($div1)];
				if (rect1 == null) {
					rect1 = $div1[0].getBoundingClientRect();
					_self.rectMap[_self.getmapId($div1)] = rect1;
					//console.log("not from map");
				}
				var rect2 = rectObj !=  null ? rectObj : _self.rectMap[_self.getmapId($div2)];
				if (rect2 == null) {
					rect2 = $div2[0].getBoundingClientRect();
					_self.rectMap[_self.getmapId($div2)] = rect2;
					//console.log("not from map");
				}
				//var rect1 = $div1[0].getBoundingClientRect();
				/*var rect2 = rectObj;
				if (rect2 == null) {
					rect2 = $div2[0].getBoundingClientRect();
				}*/
				overlap = !(rect1.right+_self.namePadding < rect2.left ||
		                rect1.left-_self.namePadding > rect2.right || 
		                rect1.bottom+_self.namePadding < rect2.top || 
		                rect1.top-_self.namePadding > rect2.bottom);
			} catch (err) {}
			return overlap;
		}
		
		this.getmapId = function(el) {
			//  
			var c = "";
			if (el.hasClass("map_name_wrapper-tr")) {
				c = "tr";
			} else if (el.hasClass("map_name_wrapper-tl")) {
				c = "tl";
			} if (el.hasClass("map_name_wrapper-br")) {
				c = "br";
			} if (el.hasClass("map_name_wrapper-bl")) {
				c = "bl";
			}
			return el[0].id + c;
		}
	  	
		
		//Restore all the lables to be shown and the fix collisons
		this.attractionInView = function() {
			var _self = this;
			var centeredCity = new Object();
			for (key in _self.cityMap) {
        		var siteArr = _self.cityMap[key].attractionsArr;
        		$('#titleMapCityImg_' +  key).show();
        		$('#titleMapCityImg_' +  key).css("opacity","0");
        		$('#divMapCityImg_' +  key).show();
        		if (siteArr != null) {
        			if (_self.attrZoom) {
        				MapMgr.getInstance().removeOverlays(key);
	        			var distanceFromCenter = new MapServices().calcDistanceBetween(_self.getMap().getCenter().lat(), _self.getMap().getCenter().lng(), _self.cityMap[key].latitude, _self.cityMap[key].longitude);
	        			if (centeredCity.distance == null || centeredCity.distance > distanceFromCenter) {
	        				centeredCity.distance = distanceFromCenter;
	        				centeredCity.city =  _self.cityMap[key];
	        			}
	        			for (var i=0;i<siteArr.length;i++) {
	        				siteArr[i].wasCreated = null; //reset
	        				$('#titleMapImg_' +  siteArr[i].id).show();
	        				$('#titleMapImg_' +  siteArr[i].id).css("opacity","0");
	        				$('#divMapImg_' +  siteArr[i].id).show();
	        				//siteArr[i].doShow = true;
	        			}
        				_self.fixColision(siteArr,"MapImg_",false,_self.cityMap[key]);
        			}
        			
         			
        			if (_self.attrZoom) {
        				for (var i=0;i<siteArr.length;i++) {
        					if ($('#titleMapImg_' + siteArr[i].id).css("opacity") != "0.01") {
        						$('#titleMapImg_' + siteArr[i].id).css("opacity","1");
            					$('#divMapImg_' + siteArr[i].id).css("opacity","1");
        					}
            			}
        			} else {
        				for (var i=0;i<siteArr.length;i++) {
        					MapMgr.getInstance().removeOverlays(siteArr[i].id);
            			}
        				$('#titleMapCityImg_' +key).css("opacity","1");
        				$('#divMapCityImg_' +key).css("opacity","1");
        			}
        		}
			}
			if (!_self.attrZoom) {
				var arrToCheck = $filter('filter')(_self.getCitiesArr(), {isOverlay: true}, true);
				_self.fixColision(arrToCheck,"MapCityImg_",false);
				var showCounter = 0;
				for (key in _self.cityMap) {
					if ($('#titleMapCityImg_' + key).hasClass("map_name_wrapper_city_selected")) {
						$('#titleMapCityImg_' + key).css("opacity","1");
    					$('#divMapCityImg_' + key).css("opacity","1");
    					$('#titleMapCityImg_' + key).css("display","");
    					
					} else if ($('#titleMapCityImg_' + key).css("opacity") != "0.01") {
						$('#titleMapCityImg_' + key).css("opacity","1");
    					$('#divMapCityImg_' + key).css("opacity","1");
    					
    					
    					if ($('#titleMapCityImg_' + key)[0]) {
    						showCounter++;
    						if (showCounter < 15) {
        						$('#titleMapCityImg_' + key).addClass("map_name_wrapper-large");
        					}
    					}
					} else {
						$('#titleMapCityImg_' + key).css("opacity","0");
    					//$('#divMapCityImg_' + key).css("opacity","0");
    					$('#titleMapCityImg_' + key).removeClass("map_name_wrapper-large");
					}
				}
				$("#navigationPane").scrollTop(0);
			} else {
				_self.getAttractionsForCity(centeredCity.city.id,null).then(function(res) {
					$rootScope.$broadcast("map_update_selected",res[0],res[1],res[2]);
				});
			}
		}
		
		/**
		 * Setters and Getters
		 */
		
		
		this.setAllCities = function(allCities) {
			var _self = this;
			_self.allCities = allCities;
		}
		
		this.getAllCities = function() {
			var _self = this;
			return _self.allCities;
		}
		
		this.setCitiesArr = function(citiesArr) {
			var _self = this;
			_self.citiesArr = citiesArr;
		}
		
		this.getCitiesArr = function() {
			var _self = this;
			return _self.citiesArr;
		}
		
		this.setCityMap = function(cityMap) {
			var _self = this;
			_self.cityMap = cityMap;
		}
		
		this.getCityMap = function() {
			var _self = this;
			return _self.cityMap;
		}
		
		this.setAllCountryActivities = function(allCountryActivities) {
			var _self = this;
			_self.allCountryActivities = allCountryActivities;
		}
		
		this.getAllCountryActivities = function() {
			var _self = this;
			return _self.allCountryActivities;
		}
		
		this.setAttrZoom = function(attrZoom) {
			var _self = this;
			_self.attrZoom = attrZoom;
		}
		
		this.setMap = function(map) {
			var _self = this;
			_self.map = map;
		}
		
		this.getMap = function() {
			var _self = this;
			return _self.map;
		}
		
	}]);       
});	

    	

define('ngApp/website/services/sharedServices',["app/extensions/core/currency",
        "app/core/login",
        "jquery-ui-1.11.4.min",
        mainPath],
     function(CurrencyMgr,LoginMgr) {


		var app = angular.module('visitacity');
    	
	    	/**
	    	 * Keep scroll position for location
	    	 */
	    	app.factory("scrollKeeper",['$filter', function ($filter) {
		        	var valuesArr = new Array();
		    	    
		        	function getScroll(name) {
		    	        var res = $filter('filter')(valuesArr, {name: name}, true);
		    	        if (res.length > 0) {
		    	        	return res[0].value;
		    	        } else {
		    	        	return null;
		    	        }
		    	    }
		    	    
		    	    function setScroll(name,value) {
		    	    	//console.log('set ' + name + ' to ' + value);
		    	    	var res = $filter('filter')(valuesArr, {name: name}, true);
		    	        if (res.length > 0) {
		    	        	res[0].value = value;
		    	        } else {
		    	        	var obj = new Object();
			    	    	obj.name = name;
			    	    	obj.value = value;
			    	    	valuesArr.push(obj);
		    	        }
		       	    }
		    	    
		    	    return {
		    	    	setScroll: setScroll,
		    	    	getScroll: getScroll
		    	    }
		    	}]);
	    	 
	    	 /**
	    	  * Bind scroll event to restore scroll position
	    	  */
	    	 app.directive('autoScroll', function ($document, $location, scrollKeeper) {
		    	    return {
		    	        restrict: 'A',
		    	        link: function (scope, element, attrs) {
		    	            $document.bind('scroll', function () {
		    	            	scrollKeeper.setScroll($location.path(),$(window).scrollTop());
		    	            });

		    	        }
		    	    };
		    	});
	    	 
	    	 app.directive('topHelp', function() {
		    	    return {
		    	        restrict: 'AEC',
		    	        templateUrl: appWebRoot + '/shared/topHelpTemplate.html',
		    	        link: function(scope, element, attrs) {
		    	        	scope.className = attrs.topHelp;
		    	        }
		    	    }
		    	});
    	
	        
	        app.directive('imgCredit', function () {
	        	 return function(scope, element, attrs) {
	        		 if ($(element).is("img")) {
	        			 $(element).load(function() {
		        			 doSetCredit();
		        		});
	        		 } else {
	        			 doSetCredit();
	        		 }
	        		
	        		 
	        		function doSetCredit() {
	        			if (attrs.imgCredit != null && attrs.imgCredit.length > 0 ) {
	        				//remove previous attributes if exist on parent
	        				try {
	        					var prevAttr = $(element).parent().find("[visit-credit='1']")
		        				prevAttr.remove();
	        				} catch (err) {}
	        				var imgLink;
	        				var imgCredit = attrs.imgCredit;
	        				try {
	        					imgCredit = decodeURI(imgCredit);
	        				} catch (e) {}
	        				if (imgCredit.indexOf("<a") == 0 ){
	        					//handle google credits
	        					imgLink = imgCredit;
	        					imgLink = imgLink.replace("<a", "<a target='_blank' style='font-size:9px;color:white'");
	        					imgLink = imgLink.replace("</a>", "<i class='material-icons' style='font-size:9px'>&#xE90C;</i></a>");
	        				} else {
	        					//handle images from our db
	        					var imgObj = null;
	        					try {
	        						imgObj = angular.fromJson(imgCredit);
	        					} catch (err) { console.error("Error parsing image credit" + attrs.imgCredit)}
			        			if (imgObj != null && imgObj.creditTo && imgObj.creditLink) {
			        				imgLink = "<a href='" + imgObj.creditLink + "' target='_blank' style='font-size:9px;color:white'><i class='material-icons' style='font-size:9px'>&#xE90C;</i>" + imgObj.creditTo + "</a>";
			        			} else {
			        				return;
			        			}
	        				}
	        				var html = "<div visit-credit='1' style='position: absolute;right:20px;top:0px;'>";
	        				html += imgLink;
	        				html += "</div>";
	        				$(element).parent().css("position", "relative");
	        				var creditDiv = $(html).appendTo($(element).parent());
	        			}
	        			
	        		}
	        	};

	        });
	        
	        
	        //Run on Enter (search)
	        app.directive('ngEnter', function () {
	            return function (scope, element, attrs) {
	                element.bind("keydown keypress", function (event) {
	                    if(event.which === 13) {
	                        scope.$apply(function (){
	                            scope.$eval(attrs.ngEnter);
	                        });
	
	                        event.preventDefault();
	                    }
	                });
	            };
	        });
	        
	        /**
	         * Trigger an event
	         * attrs.triggerEvent - event name
	         * attrs.triggerEventArgs - event arguments
	         * attrs.triggerEventType - optional event type (default is 'click')
	         */
	        app.directive('triggerEvent', ['$rootScope',function($rootScope) {
	            return {
	            	restrict: 'AEC',
	                link: function(scope, element, attrs) {
	                	var evtType = "click";
	                	if (attrs.triggerEventType) {
	                		evtType = attrs.triggerEventType;
	                	}
	                    element.on(evtType, function() {
	                    	$rootScope.$broadcast(attrs.triggerEvent, attrs.triggerEventArgs, element);
	                    });
	                    scope.$on('$destroy', function() {
	                        element.off(); // deregister all event handlers
	                    });
	                }
	            }
	        }]);
	        
	        
	        
	      //Get Nearby sites
	        app.filter('getSitesNearBy', function(){
	    	   	 return function(site,sitesArr,numOfSites) {
	    	   		require(["app/core/mapServices"],
			                function(MapServices) {
	    	   					var mapSvc = new MapServices();
								var siteLat = site.latitude;
				   		    	var siteLng = site.longitude; 
				    	   		sitesArr.sort(function(a, b) {
				   		    		var diffA = mapSvc.calcDistanceBetween(siteLat, siteLng, a.latitude, a.longitude);
				   		    		var diffB = mapSvc.calcDistanceBetween(siteLat, siteLng, b.latitude, b.longitude);
				   		    		
				   		    		// sort by distance, grace of 200 meters
				   		    		if (Math.abs( diffA - diffB) > 200) {
				   		    			return diffA - diffB;	
				   		    		}
				   		    		
				   	    		
				   		    		return  b.noPerUsers - a.noPerUsers;          		
				   		    	});
				    	   		return sitesArr.slice(0,numOfSites);
					        }				    	
	    	   		); 
	    	   	 }
	    	   });
	        
	        //Return the pass attraction text
	    	app.filter('adjustVisitDuration', function(){
	    	   	 return function(min) {
	    	   		 var str = "";
	    	   		 if (!isNaN(min)) {
	    	   			 if (min <= 30) {
	    	   				str = "15 - 30 minutes";
	    	   			 } else if (min <= 60) {
	    	   				str = "30 - 60 minutes";
	    	   			 } else {
	    	   				var rounded60 = Math.ceil(min/60); 
	    	   				str = (rounded60-1) + " - " + (rounded60) + " hours";
	    	   			 }
	    	   		 }
	    	   		 return str;
	    	   	 }
	    	   });
	    	
	    	 //Return the attraction time
	    	app.filter('timeFormatFilter', ['$filter', function($filter){
	    	   	 return function(itrSite) {
	    	   		 var str = "";
	    	   		 if (itrSite != null) { 
	    	   			if (itrSite.visitHour != null && itrSite.visitHour._d != null) {
	    	   				var  timeFormat = getTimeFormat();
	    	   				str = $filter('date')(itrSite.visitHour._d, timeFormat);
	    	   			} else {
	    	   				//str = itrSite.visitHour;
	    	   				var  timeFormat = getTimeFormat();
	    	   				str = $filter('date')(itrSite.visitHour, timeFormat);
	    	   			}
	    	   		 }
	    	   		 return str;
	    	   	 }
	    	   }]);
	    	
	    	
	    	//Return the pass attraction text
	    	app.filter('itineraryPlace', function(){
	    	   	 return function(itrSite) {
	    	   		 console.log(itrSite.id);
	    	   		 return "&#xE561;";
	    	   	 }
	    	   });
	    	
	    	
	        
	        //Get address/addminssion info
	        app.filter('getSiteInfo', function(){
	   			
	        	var constants =  [{
					name: "Address",
					values: ["Address"]
				},{
					name: "Phone Number",
					values: ["Phone Number", "Phone"]
				},{
					name: "Admission",
					values: ["Admission","Cost"]
				},{
					name: "Opening Hours",
					values: ["Opening Hours","Open Hours","Hours"]
				},{
					name: "Website",
					values: ["Website","Web", "Web site"]
				}];
	        	
	        	
	        	function getDefinitions(name) {
	        		for (var i=0;i<constants.length;i++) {
	        			if (constants[i].name == name) {
	        				return constants[i];
	        			}
	        		}
	        	}
	        	
	        	return function(infoArr, name) {
	        		var results = getDefinitions(name);
	   				if (infoArr != null) {
	   					var arr = infoArr.split("\n");
	   					for (var i=0;i<arr.length;i++) {
	   						var type = arr[i].split(":")[0];
	   						for (var j=0;j<results.values.length;j++) {
	   							var name = results.values[j];
		   						if (type.indexOf(name)>=0) {
		   							var matchFound = arr[i].match(/:(.+)/);
		   							if (matchFound!= null && matchFound.length > 0) {
		   								var res = "";
		   								if (matchFound[1] != null) {
		   									var isEmpty = matchFound[1].replace(/ /g,'');
		   									if (isEmpty.length == 0) {
		   										res = null;
		   									} else {
		   										res = matchFound[1];
		   									}
		   								}
		   								return res;
		   							} 
		   						}
	   						}
	   					}
	   				}	
	   				return "";
	   			}
	   	   });
	        
	        //Return the pass attraction text
	        app.filter('passAttractionText', ['$filter',function($filter) {
	   	   	 return function(passAtt) {
	   	   		 var str = "";
	   	   		 if (passAtt.passReducedPrice) {
	   	   			 str += $filter("translateFilter")("Reduced Price")
	   	   		 } else {
	   	   			 if (passAtt.siteTypeList != null) {
		   	   			 for (var i=0;i<passAtt.siteTypeList.length;i++) {
		   	   				 if (passAtt.siteTypeList[i].name.toLowerCase().indexOf("tour") >= 0) {
		   	   					 str += $filter("translateFilter")("Free Tour");
		   	   					 break;
		   	   				 } else if (passAtt.siteTypeList[i].name.toLowerCase().indexOf("cruise") >= 0) {
		   	   					 str += $filter("translateFilter")("Free Cruise");
		   	   					 break;
		   	   				 }
		   	   			 }
	   	   			 }
	   	   			 if (str.length == 0) {
	   	   				 str += $filter("translateFilter")("Free Entrance");
	   	   			 }
	   	   		 }
	   	   		 
	   	   		 if (passAtt.parisPassSkipLine) {
	   	   			 str += ", " + $filter("translateFilter")("Skip The Line");
	   	   		 }
	   	   		 return str;
	   	   	 }
	   	   }]);
	        
	        //Return the pass attraction text
	        app.filter('passAttractionTextVerbose', function(){
	   	   	 return function(passAtt,topAd) {
	   	   		 var str = "";
	   	   		 if (passAtt != null) {
		   	   		 if (passAtt.parisPassSkipLine) {
		   	   			 str += "You can skip the line and get a ";
		   	   		 } else {
		   	   			 str += "You can get a "; 
		   	   		 }
		   	   		 if (topAd != null) {
		   	   			 //if it's part of the text ad sentence, make it lower case
		   	   			 str = str.toLowerCase(); 
		   	   		 }
		   	   		 if (passAtt.passReducedPrice) {
		   	   			 str += "reduced price"
		   	   		 } else {
		   	   			 if (passAtt.siteTypeList != null) {
			   	   			 for (var i=0;i<passAtt.siteTypeList.length;i++) {
			   	   				 var found = false;
			   	   				 if (passAtt.siteTypeList[i].name.toLowerCase().indexOf("tour") >= 0) {
			   	   					 str += "free tour";
			   	   					 found = true;
			   	   					 break;
			   	   				 } else if (passAtt.siteTypeList[i].name.toLowerCase().indexOf("cruise") >= 0) {
			   	   					 str += "free cruise";
			   	   					 found = true;
			   	   					 break;
			   	   				 }
			   	   			 }
		   	   			 }
		   	   			 if (!found) {
		   	   				 str += "free entrance";
		   	   			 }
		   	   		 }
		   	   		 
		   	   		 str += " to the " + passAtt.shortTitle;
	   	   		 }
	   	   		 return str;
	   	   	 }
	   	   });
	        
	    	app.directive('attractionAdText', ['$http','$compile','$templateCache',function($http,$compile,$templateCache) {
	    	var counterObj = new Object();	
	   		 return {
	   	        	restrict: 'A',
	   	            link: function(scope, element, attrs) {
	   	            	if (attrs.attractionAdText != null && attrs.attractionAdText.length > 0) {
	   		            	var activity = angular.fromJson(attrs.attractionAdText);
	   		            	scope.adActivity = activity;
	   		            	scope.paLabel = "attractions ad text"
	   		            	var res = "tours";
	   		            	for (var j=0;j<activity.paidActivityCatergoryList.length;j++) {
	   							var name = activity.paidActivityCatergoryList[j].name;
	   							name = name.toLowerCase();
	   							
	   							if (name != "top activities" && name != "all activities" && name != "tours & sightseeing") {
	   								 if (name.indexOf("hop-on") >=0) {
	   									res = "hop-on";
	   									break;
	   								} else if (name.indexOf("walking") >=0) {
	   									res = "walking";
	   									break;
	   								} else if (name.indexOf("cultur") >=0) {
	   									res = "culture";
	   									break;
	   								} else if (name.indexOf("food") >=0) {
	   									res = "food";
	   									break;
	   								} else if (name.indexOf("night") >=0) {
	   									res = "night";
	   									break;
	   								} else if (name.indexOf("segway") >=0) {
	   									res = "segway";
	   									break;
	   								} else if (name.indexOf("day trip") >=0) {
	   									res = "day-trip";
	   									break;
	   								} else if (name.indexOf("ticket") >=0 || name.indexOf("skip-the-line") >=0) {
	   									res = "tickets";
	   									break;
	   								} else if (name.indexOf("air") >=0 || name.indexOf("helicopter") >=0) {
	   									res = "air";
	   									break;
	   								} else if (name.indexOf("shopping") >=0) {
	   									res = "shopping";
	   									break;
	   								} else if (name.indexOf("show") >=0 || name.indexOf("concert") >=0) {
	   									res = "shows";
	   									break;
	   								}
	   								
	   							}
	   							
	   		            	}
	   		            	
	   		            	//Get the next ad each time (there are 3 ads for each type
	   		            	if (counterObj[res] != null && counterObj[res] < 3) {
	   		            		counterObj[res] = counterObj[res] + 1;
	   		            	} else {
	   		            		counterObj[res] = 1;
	   		            	}
	   		            	$http.get(appWebRoot + '/directives/attractions/text-ads/' + res + counterObj[res] + '.html', {cache: $templateCache}).
	   	    	        		success(function(content) {
	   	    	        			var compiledContent = $compile(content)(scope);
	   	    	        			element.html(compiledContent);
	   	    	        	});
	   	            	}
	   	            }
	   		 	}
	    	}]);
	        
	    	
	        app.filter('createRouteString', ['$filter','GlobalDefsNew', function($filter,GlobalDefsNew){
		   	   	 return function(routeTime, routeDistance, routeType, doRound) {
		   	   		if (routeTime == null) {
		   	   			return;
		   	   		}
		   	   		var str = "";
			   	   	if (routeDistance != null) {
		   	   			 var distanceVal = getLocalDistanceMeasure(routeDistance);
		   	   			 if (doRound) {
		   	   				 distanceVal = Math.round(distanceVal);
		   	   			 }
		   	   			 str += distanceVal + " " + getLocalDistanceUnit();
		   	   		}
			   	   	if (str.length > 0 && routeType != null) {
			   	   		str += ", ";
			   	   	}
				   	 if (routeType == "walking") {
		   	   			 str += $filter('niceTime')(routeTime,true) + " " + $filter("translateFilter")("walking");
		   	   		 }
			   	   	 if (routeType == "transit") {
		   	   			 str += $filter('niceTime')(routeTime,true) + " " + $filter("translateFilter")("by public transport");
		   	   		 } 
			   	   	 if (routeType == "driving") {
		   	   			 str += $filter('niceTime')(routeTime,true) + " " + $filter("translateFilter")("by car");
		   	   		 } 
		   	   		 return str;
		   	   	 }
		   	   }]);
	        
	        
	        //remove duplicates
	        app.filter('unique', function() {
	        	   return function(collection, keyname) {
	        	      var output = [], 
	        	          keys = [];

	        	      angular.forEach(collection, function(item) {
	        	          var key = item[keyname];
	        	          if(keys.indexOf(key) === -1) {
	        	              keys.push(key);
	        	              output.push(item);
	        	          }
	        	      });

	        	      return output;
	        	   };
	        	});
	        
	        //Convert HTML to plain text
	        app.filter('htmlToPlaintext', function(){
	   	   	 return function(str) {
	   	   		 str = String(str).replace(/\n/g, '');
	   	   		 str = String(str).replace(/<[^>]+>/gm, '');
	   	   		 str = String(str).replace(/-&nbsp;/g, ' ');
	   	   		 return str;
	   	   	 }
	   	   });
	        
	      //EventObject creator
	        app.filter('eventObject', function(){
	   	   	 return function(category,name,label) {
	   	   		 var eventObject = new Object();
	   	   		 eventObject.category = category;
	   	   		 eventObject.nameOk = name + 'ok';
	   	   		 eventObject.nameCancel = name + 'cancel';
	   	   		 eventObject.label = label;
	   	   		 return eventObject;
	   	   	 }
	   	   });
	        
      
	        app.directive('navigateTo', ['anchorSmoothScroll','$location','$route', function(anchorSmoothScroll,$location,$route) {
	            return {
	            	restrict: 'AEC',
	                link: function(scope, element, attrs) {
	                    element.on('click', function() {
	                    	if (attrs.navigateToEvent) {
	                    		fireEvent(attrs.navigateToEvent, attrs.navigateToEventAction, attrs.navigateToEventLabel);
	                    	}
	                    	if (attrs.navigateToScroll) {
	                    		anchorSmoothScroll.scrollTo(attrs.navigateToScroll,null,0);
	                    	} else {
	                    		var routeReload = $location.path() == attrs.navigateTo;
	                    		$location.search({});
	                    		$location.hash("");
	                    		if (attrs.navigateToParams) {
	                    			$location.path(attrs.navigateTo).search(angular.fromJson(attrs.navigateToParams));
	                    		} else {
	                    			$location.path(attrs.navigateTo);
	                    		}
	                    		if (routeReload) {
	                    			//reload route in case only params change (itinerary change)
	                    			$route.reload();
	                    		}
	                    		
	                    		if(!scope.$$phase) scope.$apply();
	                    		//scope.$apply();
	                    	}
	                    	
	                    	
	                    });
	                    scope.$on('$destroy', function() {
	                        element.off(); // deregister all event handlers
	                    });
	                }
	            }
	        }]);
	        
        
	        
	        /**
	         * Clear the placeholder of input field when user focuses
	         * Restore the placeholder on unfocus
	         */
	        app.directive('inputPlaceholderClear', [function() {
	            return {
	            	restrict: 'AEC',
	                link: function(scope, element, attrs) {
	                	element.on('focus', function() {
	                		if (!$(this).attr("placeholder-orig")) {
	                			$(this).attr("placeholder-orig",$(this).attr("placeholder"));
	                		}
	                		$(this).attr("placeholder","");
	                	});
	                	element.on('focusout', function() {
	                		if ($(this).attr("placeholder-orig")) {
	                			$(this).attr("placeholder",$(this).attr("placeholder-orig"));
	                		}
	                	});
	                	scope.$on('$destroy', function() {
	                        element.off(); // deregister all event handlers
	                    });
	                }
	            }
	        }]);
	        
	        
	        /**
	         * Should be deprecated and move to redirectPaNew
	         */
	        app.directive('redirectPa', ['paidActivityRedirectService',function(paidActivityRedirectService) {
	            return {
	            	restrict: 'AEC',
	                link: function(scope, element, attrs) {
	                    element.on('click', function() {
	                    	var pa = angular.fromJson(attrs.redirectPa);
	                    	var label = attrs.redirectPaLabel;
	                    	//PaidActivityRedirect.redirect(pa.vendor, pa.title, pa.link, label, pa.vendorProductId, pa.id,pa.cityId);
	                    	paidActivityRedirectService.doRedirect(pa.vendor, pa.title, pa.link, label, pa.vendorProductId, pa.id,pa.cityId,false,pa.price);
	                    });
	                    scope.$on('$destroy', function() {
	                        element.off(); // deregister all event handlers
	                    });
	                   
	                }
	            }
	        }]);
	        
	        app.service('redirectPaScv', ['paidActivityRedirectService',function(paidActivityRedirectService) {
	            this.doRedirect = function(pa,label) {
                	//PaidActivityRedirect.redirect(pa.vendor, pa.title, pa.link, label, pa.vendorProductId, pa.id, pa.cityId);
	            	paidActivityRedirectService.doRedirect(pa.vendor, pa.title, pa.link, label, pa.vendorProductId, pa.id, pa.cityId, false, pa.price);
	            };
	            
	        }]);
	        
	        app.directive('redirectPaNew', ['paidActivityRedirectService',function(paidActivityRedirectService) {
	            return {
	            	restrict: 'AEC',
	                link: function(scope, element, attrs) {
	                    element.on('click', function() {
	                    	var label = attrs.redirectPaLabel;
	                    	var vendor = attrs.redirectPaVendor;
	                    	var title = attrs.redirectPaTitle;
	                    	var link = attrs.redirectPaLink;
	                    	var vendorId = attrs.redirectPaVendorid;
	                    	var visitId = attrs.redirectPaVisitid;
	                    	var cityId = attrs.redirectPaCityid;
	                    	var paPrice = attrs.redirectPaPrice;
	                    	
	                    	//PaidActivityRedirect.redirect(vendor,title,link,label,vendorId,visitId,cityId);
	                    	paidActivityRedirectService.doRedirect(vendor,title,link,label,vendorId,visitId,cityId,false,paPrice);
	                    }).on('click','.clickUnbind',function(e) {
	                        e.stopPropagation();
	                    });
	                    scope.$on('$destroy', function() {
	                        element.off(); // deregister all event handlers
	                    });
	                }
	            }
	        }]);
	        
	        app.service('paidActivityRedirectService', ['$filter','GlobalDefsNew','activitiesService','$location','visitDebugSvc','dataWearhouseService','$routeParams','exprService',
	                                                    function($filter,GlobalDefsNew,activitiesService,$location,visitDebugSvc,dataWearhouseService,$routeParams,exprService) {
	            this.doRedirect = function(providerName, title, link, src, vendorProductId, visitId, cityId,isSameWindow, paPrice,paTrackPrefix) {
	            	if (link == null) {
	            		return;
	            	}
	            	var loggedInUserId = LoginMgr.getInstance().getLoggedInUserId();
	            	var sign = link.indexOf("?") > -1 ? "&" : "?";        	
	            	var sid = loggedInUserId;
	            	
	            	if (link.indexOf("<SUBBRANDEDCODE>") > -1) {
	        			/*if (typeof(isMobileDevice) != "undefined" && isMobileDevice) {
	        				sid = "m" + sid;
	        			}*/
	        			
	        			/*var campaignCookieData = readCookie("gclid_event_record");
	        			if (campaignCookieData != null && campaignCookieData.length > 0) {
	        				sid = "c" + sid;
	        			}*/
	        			
	        			if (paTrackPrefix != null) {
	        				sid = paTrackPrefix + sid;
	        			}    	    			
	        			
	        			link = link.replace("<SUBBRANDEDCODE>", sid);
	        		}    		
	        		else {
	        			link += sign + "sid=" + sid;
	        		}
	            	
	        		
	            	try {
	            		//var vendorProductId = link.split("/")[link.split("/").length-1];
	            		fbq('track', 'Lead', {"loggedInUserId":loggedInUserId,"vendorProductId":vendorProductId});
	            		
	            		var cityObj = $filter('filter')(GlobalDefsNew.getGlobal("citiesArr"), {id: parseInt(cityId)},true)[0];
	            		fbq('track', 'ViewContent', {
			            	    content_type: 'product', 
			            	    content_ids: ['v__'+cityObj.legalName+'__'+vendorProductId], 
			            	    value: paPrice,    
			            	    currency: 'USD' 
			            	});
	            		

	            	} catch (e) {
	            		console.error('failed to create FB event ' + e);
	            	}
	            	    
	            	

	            	
	            	if ((typeof(isMobileDevice) != "undefined" && isMobileDevice) || 
	            			(typeof(isOpenPaSameWindow) != "undefined" && isOpenPaSameWindow) ) {
	            		// give analytics 500 milisec to complete event 
	            		try {
	            			$.mobile.loading( "show" );
	            		}
	            		catch(e){}
	            		
	            		setTimeout(function() {
	            			window.location.href = link;        			
	            		}, 500);
	            		
	            		setTimeout(function() {
	                		try {
	                			$.mobile.loading( "hide" );
	                		}
	                		catch(e){}        			
	            		}, 2000);
	            	}
	            	else {
	            		if (visitId != null && vendorProductId != null && cityId != null) {
	            			//remarketing code
	            			var visitLink = appRoot + "/en/" + cityId + "/activity-rt/" + visitId + "/" + vendorProductId;
	            			$('<iframe name="vacrt" src="' + visitLink + '" style="width:0px;height:0px;visibility:hidden"></iframe>').appendTo('body');
	            			
	            			//var cookie = readCookie("pa_redirect");
	            			var visitLink = link;
	            			//var ra = visitDebugSvc.getValue(isTablet(),true);
	            			var redirectApi = false;
	            			/*try {
	        					//check api expermient
	        					if (globExprVars != null && globExprVars["api-on-tablet"] != null) {
	        						redirectApi = globExprVars["api-on-tablet"] == "visitacity";
	        					}
	        				} catch(err){}*/
	        				
	        				
	        				//redirectApi = visitDebugSvc.getValue(redirectApi,true);
	        				
	        				/*var lang = $routeParams.lang;
	        				if (lang == null) {
	        					//in the itinerary page, there is no route param
	        					lang = getActiveLang(true);
	        				}
	        				if (lang != "en") {
	            				//don't use API for languages
	            				redirectApi = false;
	            			}*/
	        				
	        				/*if (isTablet()) {
	        					exprService.fireExperimentEvent("api-on-tablet",globExprVars["api-on-tablet"]);
	        				}*/
	            			
	            			if (redirectApi) {
	            				var cityObj = $filter('filter')(GlobalDefsNew.getGlobal("citiesArr"), {id: parseInt(cityId)},true)[0];
	           					visitLink = appRoot + "/en/" + cityObj.legalName + "/activity-details/activity/" + visitId + "/" + vendorProductId;
	           					var eventTitle = providerName != null ? providerName + "-api: " + title : title;
	        	            	fireEvent('PaidActivity', eventTitle, src);
	        	            	fireLocalEvent('PaidActivity', eventTitle, vendorProductId, link, true);
	            			} else {
	            				var eventTitle = providerName != null ? providerName + ": " + title : title;
		    	            	fireEvent('PaidActivity', eventTitle, src);
		    	            	fireLocalEvent('PaidActivity', eventTitle, vendorProductId, link, true);
		    	            	wrapSetLocalStorage("paidActivityClickDate", new Date().valueOf());
	            			}	            	
	            			if (isSameWindow) {
	            				window.location.href = visitLink;
	            			} else {
	            				window.open(visitLink, '_blank');
	            			}
	            			
	            			setTimeout(function() {
	            				//reset the clicked activities so it can be fetched again
	            				var cityObj = $filter('filter')(GlobalDefsNew.getGlobal("citiesArr"), {id: parseInt(cityId)},true)[0];
	            				dataWearhouseService.put("userClicedActivities"+ cityObj.legalName,null,true); //reset data        			
    	            		}, 0);
	            			
	            			
           					
	            		} else {
	            			if (isSameWindow) {
	            				setTimeout(function() {
	            					window.location.href = link;        			
	    	            		}, 500);
	            			} else {
	            				window.open(link, '_blank');
	            			}
	            			
	            			var eventTitle = providerName != null ? providerName + ": " + title : title;
	    	            	fireEvent('PaidActivity', eventTitle, src);
	    	            	fireLocalEvent('PaidActivity', eventTitle, vendorProductId, link, true);
	            		}
	            		
	            	}
	            	
	            	$( "body" ).trigger( "paid_activity_redirect");
	            };
	            
	        }]);
	        
	        app.directive('autoFocus', function($timeout) {
	            return {
	                restrict: 'AC',
	                link: function(_scope, _element) {
	                    $timeout(function(){
	                        _element[0].focus();
	                    }, 500);
	                }
	            };
	        });
	        
	        
	        app.directive('fireEvent', [function() {
	            return {
	            	restrict: 'AEC',
	                link: function(scope, element, attrs) {
	                    element.on('click', function() {
	                    	fireEvent(attrs.fireEvent, attrs.fireEventAction, attrs.fireEventLabel) 
	                    });
	                    scope.$on('$destroy', function() {
	                        element.off(); // deregister all event handlers
	                    });
	                }
	            }
	        }]);
	        
	        app.directive('fireEventMouseOver', ['$timeout',function($timeout) {
	            return {
	            	restrict: 'AEC',
	                link: function(scope, element, attrs) {
	                	var inTimeout = false;
	                    var hoverDelay = parseInt(attrs.fireEventDelay, 10) | 500;

	                    element.on('mouseover', function () {
	                      inTimeout = true;
	                      $timeout(function () {
	                        if (inTimeout) {
	                        	fireEvent(attrs.fireEventMouseOver, attrs.fireEventAction, attrs.fireEventLabel)
	                          inTimeout = false;
	                        }
	                      }, hoverDelay);
	                    });

	                    element.on('mouseleave', function () {
	                      inTimeout = false;
	                    });
	                    scope.$on('$destroy', function() {
	                        element.off(); // deregister all event handlers
	                    });
	                }
	            }
	        }]);
	        
	        /**
	         * Set the height of an elemnt as the height of the parent
	         * Good for same height Boostrap columns
	         */
	        app.directive('fullHeightCol', ['$timeout',function($timeout) {
	            return {
	            	restrict: 'C',
	                link: function(scope, element, attrs) {
	                	$timeout(function() {
	                		$(element).css("height",$(element).parent().height() + "px");
	                		$timeout(function() {
	                			$(element).find(".full-height-child").css("display","block");
	                		}, 100);
    		   			}, 500);
	                }
	            }
	        }]);
	        
	        
	        app.directive("autoAdjust", ['$compile','$filter', function($compile,$filter) {
	            return {
	                restrict : "AEC",
	                scope : {
	                    value : "=ngBind"  
	                },
	                link : function($scope, element, attrs) {
	                	
	                	//var valueWatch = $scope.$watch('value', function () {
	                		//valueWatch();
	                		if ($scope.value == null || $scope.value.length ==0) {
		                		return;
		                	}
		                    var width =element[0].offsetWidth
		                    var charactersLimit = $filter('textLength')($scope.value,width*3);
		                    var text = $filter('cut')($scope.value,true,charactersLimit,"...",null,null,true,true);
		                    var readMoreElem = element[0].children[0];
		                    var e =$compile("<div class='"+element[0].className+"'>"+text+"</div>")($scope);
		                    $(readMoreElem).appendTo(e);
		                    element.replaceWith(e);
	                	//});
	                	
	                }
	            }
	        }]);
	        
	        
	        /**
	         * Get text length based on row width
	         */
	        app.filter('textLength', [function () {
	            return function (value,maxLen) {
	            	var splitTextArr = value.split("");
	            	var res = 0;
	            	var counter = 0;
	            	for (var i=0;i<splitTextArr.length;i++) {
	            		var curChar = splitTextArr[i];
	            		if (curChar.match(/ /)) {
	            			res += 5;
	            		} else if (curChar.match(/I/)) {
	            			res += 4;
	            		} else if (curChar.match(/W|M|Q|w|m/)) {
	            			res += 10;
	            		} else if (curChar.match(/[A-Z]/)) {
	            			res += 9;
	            		} else if (curChar.match(/i|j|l|\.|,/)) {
	            			res += 3.5;
	            		} else {
	            			res += 8;
	            		}
	            		
	            		counter++;
	            		if (res >= maxLen) {
	            			break;
	            		}
	            	}
	            	return counter;
	            }
	        }]);
	        
	        //Cut a string to specific length
	        app.filter('cut', ['$window','$filter','$sce', function ($window,$filter,$sce) {
	            return function (value, wordwise, max, tail,delimiterChar,returnAll,hasReadMore,ignoreWidth) {
	                if (!value) return '';
	                if (value.valueOf(value) != null) {
	                	value = value.valueOf(value);
	                }
	                if (delimiterChar == null) {
	                	delimiterChar = ' ';
	                }
	                var tmpVal = value;
	                max = parseInt(max, 10);
	                
	                if (ignoreWidth == null || !ignoreWidth) {
	                	 var screenWidth = $window.innerWidth;
	 	                if (screenWidth <= 768) {
	 	                	var newMax =  (75/100) * max;
	 	                	max = newMax;
	 	                } else if (screenWidth <= 1024) {
	 	                	var newMax =  (80/100) * max;
	 	                	max = newMax;
	 	                } else if (screenWidth <= 1400) {
	 	                	var newMax =  (82/100) * max;
	 	                	max = newMax;
	 	                }
	                }
	                
	                if (hasReadMore) {
	                	max -= 15;
	                }
	               
	                if (!max) return value;
	                
	               var lines = value.split(/\n/).length;
	               lines -= 1;
	               var addedForLines = 0;
	               var valueLength = value.length;
	               /*if (lines > 0) {
	            	   addedForLines = lines*100;
	                }*/
	                
	                
	                //var noHtml = $filter('htmlToPlaintext')(value);
	                
	                if (value.length + addedForLines <= max) return value;
	                
	                value = value.substr(0, max);
	                
	                //handle html;
	                var strippedHtml = $filter('htmlToPlaintext')(value);
	                var diff = value.length + addedForLines - strippedHtml.length;
	                //console.log('there are ' + diff + " html chars");
	                if (diff > 0) {
	                	 value = tmpVal.substr(0, (max+diff));
	                }
	                
	                if (wordwise) {
	                    var lastspace = value.lastIndexOf(delimiterChar);
	                    if (lastspace != -1) {
	                        value = value.substr(0, lastspace+1);
	                    }
	                }
	                if (returnAll) {
	                	var secondPart = tmpVal.substr(lastspace+1);
	                	return [value,secondPart]
	                } else {
	                	if (tail == null) {
	                		tail = "...";
	                	}
	                	return value + tail;
	                }
	                
	            };
	        }]);
	        
	        //Infinite scroll
	        app.directive('infiniteScroll', ['$rootScope','$window','$timeout','$parse', function($rootScope,$window,$timeout,$parse) {
               return {
                 link: function(scope, elem, attrs) {
                   var checkWhenEnabled, handler, scrollDistance, scrollEnabled;
                   $window = angular.element($window);
                   var scrollWindow = $window;
                   if (attrs.infiniteScrollOnElem) {
                	   scrollWindow = $(elem);
                   }
                   scrollDistance = 0;
                   if (attrs.infiniteScrollDistance != null) {
                     scope.$watch(attrs.infiniteScrollDistance, function(value) {
                       return scrollDistance = parseInt(value, 10);
                     });
                   }
                   scrollEnabled = true;
                   checkWhenEnabled = false;
                   if (attrs.infiniteScrollDisabled != null) {
                     scope.$watch(attrs.infiniteScrollDisabled, function(value) {
                       scrollEnabled = !value;
                       if (scrollEnabled && checkWhenEnabled) {
                         checkWhenEnabled = false;
                         return handler();
                       }
                     });
                   }
                   handler = function() {
                	 var activeTabNameStr = attrs.infiniteScrollTab;
                	
                	 
                	 /**Handle tabs.
                	  * If tabs are enabled (scrollMindTabs) than checked that the scroll is relevant to the current tab (activeTabNameStr)
                	  * If it is not then don't execute the infinite scroll function
                	  */
                	 //var curTab = false;
                	 //if (activeTabNameStr) {
                		 //curTab = eval("scope." + activeTabNameStr)
                	 //}
                	 if (scope.scrollMindTabs && scope.activeTab != activeTabNameStr) {
                		 return;
                	 }

                	 var elementBottom, remaining, shouldScroll, windowBottom;
                     windowBottom = scrollWindow.height() + scrollWindow.scrollTop();
                     elementBottom = elem.offset().top + elem.height();
                     remaining = elementBottom - windowBottom;
                     shouldScroll = remaining <= scrollWindow.height() * scrollDistance;
                     if (shouldScroll && scrollEnabled) {
                       if ($rootScope.$$phase) {
                    	   return scope.$eval(attrs.infiniteScroll);
                       } else {
                    	   return scope.$apply(attrs.infiniteScroll);
                       }
                     } else if (shouldScroll) {
                       return checkWhenEnabled = true;
                     }
                   };
                   //$window.on('scroll', handler);
                   scrollWindow.on('scroll', handler);
                   scope.$on('$destroy', function() {
                     return scrollWindow.off('scroll', handler);
                   });
                   return $timeout((function() {
                     if (attrs.infiniteScrollImmediateCheck) {
                       if (scope.$eval(attrs.infiniteScrollImmediateCheck)) {
                         return handler();
                       }
                     } else {
                       return handler();
                     }
                   }), 0);
                 }
               };
             }
           ]);
	        
	        app.service('GeneralModalService', ['$uibModal', function($uibModal){
	        	//this.generalModal = function(page,action,title,content,btn1Txt,btn2Txt,btn1Url,btn2Url,templateUrl, controller){
	        	this.generalModal = function(templateUrl, controller,scope){
	        		if (!templateUrl) {
	        			templateUrl = 'ngApp/website/shared/modals/general-modal.html';
	        		}
	        		if (!controller) {
	        			controller = 'generalModalController';
	        		}
	        		scope.modalInstance = $uibModal.open({
	    			      templateUrl: templateUrl,
	    			      controller: controller,
	    			      windowClass : 'itinerary-download-black-lg',
	    			      resolve: {
	    			    	  inscope: function () {
	    			            return scope;
	    			          }/*,
	    			          action: function () {
	    			            return action;
	    			          },
	    			    	  title: function () {
	    			            return title;
	    			          },
	    			          content: function () {
	    			        	  return content;
	    			          },
	    			          btn1Txt: function() {
	    			        	  return btn1Txt;
	    			          },
	    			          btn2Txt: function() {
	    			        	  return btn2Txt;
	    			          },
	    			          btn1Url: function() {
	    			        	  return btn1Url;
	    			          },
	    			          btn2Url: function() {
	    			        	  return btn2Url;
	    			          }*/
	    			          
	    			       }
	    			});
	        	}
	        }]);
	        
	        app.service('anchorSmoothScroll', function(){
	            this.scrollTo = function(eID, divId, addOffset) {
	
	            	if (divId != null) {
	            		divId = "#" + divId;
	            	} else {
	            		divId = "html, body";
	            	}
	            	if (addOffset == null) {
	            		addOffset = 0;
	            	}
	                $(divId).animate({
	                	//scrollTop:  $(divId).scrollTop() - $(divId).offset().top + $("#" + eID).offset().top + addOffset
	                	scrollTop:  $("#" + eID).offset().top + addOffset
	                }, 1000);
	
	            };
	            
	        });
	        
	        /**
	         * @ngdoc filter
	         * @name latinize
	         * @kind function
	         *
	         * @description
	         * remove accents/diacritics from a string
	         */
	        app.filter('latinize',[ function () {
	            var defaultDiacriticsRemovalap = [
	              {'base':'A', 'letters':'\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F'},
	              {'base':'AA','letters':'\uA732'},
	              {'base':'AE','letters':'\u00C6\u01FC\u01E2'},
	              {'base':'AO','letters':'\uA734'},
	              {'base':'AU','letters':'\uA736'},
	              {'base':'AV','letters':'\uA738\uA73A'},
	              {'base':'AY','letters':'\uA73C'},
	              {'base':'B', 'letters':'\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181'},
	              {'base':'C', 'letters':'\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E'},
	              {'base':'D', 'letters':'\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779'},
	              {'base':'DZ','letters':'\u01F1\u01C4'},
	              {'base':'Dz','letters':'\u01F2\u01C5'},
	              {'base':'E', 'letters':'\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E'},
	              {'base':'F', 'letters':'\u0046\u24BB\uFF26\u1E1E\u0191\uA77B'},
	              {'base':'G', 'letters':'\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E'},
	              {'base':'H', 'letters':'\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D'},
	              {'base':'I', 'letters':'\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197'},
	              {'base':'J', 'letters':'\u004A\u24BF\uFF2A\u0134\u0248'},
	              {'base':'K', 'letters':'\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2'},
	              {'base':'L', 'letters':'\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780'},
	              {'base':'LJ','letters':'\u01C7'},
	              {'base':'Lj','letters':'\u01C8'},
	              {'base':'M', 'letters':'\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C'},
	              {'base':'N', 'letters':'\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4'},
	              {'base':'NJ','letters':'\u01CA'},
	              {'base':'Nj','letters':'\u01CB'},
	              {'base':'O', 'letters':'\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C'},
	              {'base':'OI','letters':'\u01A2'},
	              {'base':'OO','letters':'\uA74E'},
	              {'base':'OU','letters':'\u0222'},
	              {'base':'OE','letters':'\u008C\u0152'},
	              {'base':'oe','letters':'\u009C\u0153'},
	              {'base':'P', 'letters':'\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754'},
	              {'base':'Q', 'letters':'\u0051\u24C6\uFF31\uA756\uA758\u024A'},
	              {'base':'R', 'letters':'\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782'},
	              {'base':'S', 'letters':'\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784'},
	              {'base':'T', 'letters':'\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786'},
	              {'base':'TZ','letters':'\uA728'},
	              {'base':'U', 'letters':'\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244'},
	              {'base':'V', 'letters':'\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245'},
	              {'base':'VY','letters':'\uA760'},
	              {'base':'W', 'letters':'\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72'},
	              {'base':'X', 'letters':'\u0058\u24CD\uFF38\u1E8A\u1E8C'},
	              {'base':'Y', 'letters':'\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE'},
	              {'base':'Z', 'letters':'\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762'},
	              {'base':'a', 'letters':'\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250'},
	              {'base':'aa','letters':'\uA733'},
	              {'base':'ae','letters':'\u00E6\u01FD\u01E3'},
	              {'base':'ao','letters':'\uA735'},
	              {'base':'au','letters':'\uA737'},
	              {'base':'av','letters':'\uA739\uA73B'},
	              {'base':'ay','letters':'\uA73D'},
	              {'base':'b', 'letters':'\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253'},
	              {'base':'c', 'letters':'\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184'},
	              {'base':'d', 'letters':'\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A'},
	              {'base':'dz','letters':'\u01F3\u01C6'},
	              {'base':'e', 'letters':'\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD'},
	              {'base':'f', 'letters':'\u0066\u24D5\uFF46\u1E1F\u0192\uA77C'},
	              {'base':'g', 'letters':'\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F'},
	              {'base':'h', 'letters':'\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265'},
	              {'base':'hv','letters':'\u0195'},
	              {'base':'i', 'letters':'\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131'},
	              {'base':'j', 'letters':'\u006A\u24D9\uFF4A\u0135\u01F0\u0249'},
	              {'base':'k', 'letters':'\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3'},
	              {'base':'l', 'letters':'\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747'},
	              {'base':'lj','letters':'\u01C9'},
	              {'base':'m', 'letters':'\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F'},
	              {'base':'n', 'letters':'\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5'},
	              {'base':'nj','letters':'\u01CC'},
	              {'base':'o', 'letters':'\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275'},
	              {'base':'oi','letters':'\u01A3'},
	              {'base':'ou','letters':'\u0223'},
	              {'base':'oo','letters':'\uA74F'},
	              {'base':'p','letters':'\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755'},
	              {'base':'q','letters':'\u0071\u24E0\uFF51\u024B\uA757\uA759'},
	              {'base':'r','letters':'\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783'},
	              {'base':'s','letters':'\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B'},
	              {'base':'t','letters':'\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787'},
	              {'base':'tz','letters':'\uA729'},
	              {'base':'u','letters': '\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289'},
	              {'base':'v','letters':'\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C'},
	              {'base':'vy','letters':'\uA761'},
	              {'base':'w','letters':'\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73'},
	              {'base':'x','letters':'\u0078\u24E7\uFF58\u1E8B\u1E8D'},
	              {'base':'y','letters':'\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF'},
	              {'base':'z','letters':'\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763'}
	            ];

	            var diacriticsMap = {};
	            for (var i = 0; i < defaultDiacriticsRemovalap.length; i++) {
	              var letters = defaultDiacriticsRemovalap[i].letters.split("");
	              for (var j = 0; j < letters.length ; j++){
	                diacriticsMap[letters[j]] = defaultDiacriticsRemovalap[i].base;
	              }
	            }

	            // "what?" version ... http://jsperf.com/diacritics/12
	            function removeDiacritics (str) {
	            	if (str == null || str.length == 0 || angular.isUndefined(str) || str.name != null) {
	            		return;
	            	}
	            	return str.replace(/[^\u0000-\u007E]/g, function(a){
	            		return diacriticsMap[a] || a;
	            	});
	            }

	            return function (input) {

	              return removeDiacritics(input);
	            }
	          }]);
	        
	        app.service('CitySearch',['$rootScope', '$filter', '$location', 'GlobalDefs','$routeParams', function($rootScope, $filter, $location, GlobalDefs,$routeParams) {
	        	this.runFilterCities = function(input,arr,eventname,isSimple,eventLabel) {
	        		var foundExact = false;
	        		if (input == null || input.length == 0) {
	        			return;
	        		}
	        		
	        		if (arr == null || arr.length == 0) {
	        			return;
	        		}
	        		
	        		var fuzzy = FuzzySet();
	        		var fuzzyRes = null;
	        		var array = [];
	        		if (eventname) {
	        			var eLabel = eventLabel !=null ? eventLabel : "search";
	        			fireEvent(eventname,eLabel,input);
	        		}
	        		input = $filter('latinize')(input);
	    	   	    for(var i=0;i<arr.length;i++) {
	    	   	    	var cityName = arr[i].name;
	    	   	    	cityName = $filter('latinize')(cityName);
	    	   	    	if (cityName.toLowerCase() == input.toLowerCase()) {
	    	   	    		foundExact = true;
	    	   	    	}
	    	   	    	if (cityName.toLowerCase().indexOf(input.toLowerCase()) == 0) {
	    	   	    		array = addCity(arr[i],isSimple,array);
	    	   	    	} else if (input.length > 3){
	    	   	    		//try fuzzy search only when more than 3 chars are typed
	    	   	    		fuzzy.add(cityName);
		    	   	    	fuzzyRes = fuzzy.get(input);
	    	   	    	}
	    	   	    }
	    	   	    
	    	   	    //fuzzy results
	    	   	    if (!foundExact && fuzzyRes != null) {
		    	   	    for (var j=0;j<fuzzyRes.length;j++) {
		    	   	    	var curRes =  fuzzyRes[j];
		    	   	    	if (curRes.length == 2 && curRes[0] > 0.6) {
		    	   	    		var city = $filter('filter')(arr, {name: curRes[1]},true)[0];
		    	   	    		if (city != null) {
		    	   	    			array = addCity(city,isSimple,array);
		    	   	    		}
		    	   	    		
		    	   	    	}
		    	   	    }
	    	   	    }
	    	   	    
	    	   	    if (!isSimple) {
		    	   	    if (array.length == 0) {
		    	   	    	//Search for country
		    		   	     for(var i=0;i<arr.length;i++) {
		    			   	        if (arr[i].country.name.toLowerCase().indexOf(input.toLowerCase()) == 0) {
		    			   	        	if (arr[i].imageOpt != null && arr[i].status == 'production') {
		    			   	        	//if (arr[i].status == 'production') {
		    			   	        		arr[i].our = true;
		    			   	        		arr[i].fullname = arr[i].name + ", " + arr[i].country.name;
		    			   	        		arr[i].type = $filter('translateFilter')(typesArr[8]);
		    			   	        	} else {
		    			   	        		arr[i].fullname = arr[i].name + ", " + arr[i].country.name + ", " + $filter('translateFilter')("Things To Do");
		    			   	        		arr[i].type = $filter('translateFilter')(typesArr[2]);
		    			   	        	}
		    			   	        	arr[i].imagesCdn = GlobalDefs.getImagesCdn();
		    			   	        	array.push(arr[i]);
		    			   	        }
		    			   	    }
		    	   	    }
		    	   	    
		    	   	    if (array.length == 1) {
		    	   	    	array = generateObjects(array,7);
		    	   	    } else if (array.length == 2) {
		    	   	    	array = generateObjects(array,5);
		    	   	    } else if (array.length == 3) {
		    	   	    	array = generateObjects(array,2);
		    	   	    } else {
		    	   	    	array = generateObjects(array,typesArr.length-1);
		    	   	    	array = $filter('limitTo')(array, 10);
		    	   	    }
	    	   	    } else {
	    	   	    	array = $filter('limitTo')(array, 20);
	    	   	    }
	    	   	    
	    	   	    if (array.length == 0) {
	    	   	    	var obj = new Object();
	    	   	    	obj.fullname = $filter('translateFilter')("No match found");
	    	   	    	obj.noResults = true;
	    	   	    	obj.type = new Object();
	    	   	    	obj.type.icon = "&#xE001;";
	    	   	    	array.push(obj);
	    	   	    }
	
	    	   	    return array;
	        	};
	        	
	        	function addCity(city,isSimple,array) {
	        		if (isSimple) {
	        			city.fullname = city.name + ", " + city.country.name;
	   	        	} else {
	   	        		if (city.imageOpt != null && city.status == 'production') {
	   	        		//if (arr[i].status == 'production') {
	   	        			city.our = true;
	   	        			city.fullname = city.name + ", " + city.country.name;
	   	        			city.type = $filter('translateFilter')(typesArr[8]);
    	   	        	} else {
    	   	        		city.fullname = city.name + ", " + $filter('translateFilter')("Things To Do");
    	   	        		city.type = $filter('translateFilter')(typesArr[2]);
    	   	        	}
	   	        		city.imagesCdn = GlobalDefs.getImagesCdn();
	   	        	}
	   	        	
	   	        	array.push(city);
	   	        	return array;
	        	}
	        	
	        	this.doSearch = function(item, eventName) {
	        		if (item && !item.noResults) {
	        			fireEvent(eventName,"navigate", item.name + ", " + item.type.displayName);
	        			$location.search({});
	        			$location.hash("");
	        			var lang = "en";
	        			if ($routeParams.lang != null) {
	        				lang = $routeParams.lang;
	        			} else if (getActiveLang() != null) {
	        				lang = getActiveLang();
	        			}
	        			if (item.type.urlParams != null) {
                			$location.path("/"+ lang + "/" + item.legalName + "/" + item.type.url).search(angular.fromJson(item.type.urlParams));
                		} else {
                			$location.path("/"+ lang + "/" + item.legalName + "/" + item.type.url);
                		}
	        			
	        			//window.setTimeout(function() {
        					//var url = GlobalDefs.getAppRoot() + "/"+ getActiveLang(true) + "/" + item.legalName + "/" + item.type.url;
        					//window.location = url;
	    				//}, 500);	
	        			
	        		}
	        	}
	        	
	        	this.doSearchEnter = function(customSelected,citiesArr, eventname) {
	        		if (customSelected != null && customSelected.length > 0) {
	        			var arr = this.runFilterCities(customSelected,citiesArr);
	        			if (arr.length > 0) {
	        				this.doSearch(arr[0],eventname);
	        			}
	        		}
	        	}
	        	
	        	
	        	function generateObjects(array,num) {
	        		var resArr = new Array();
	        		angular.copy(array,resArr);
	        		for (var i=0;i<array.length;i++) {
	        			if (array[i].our) {
	    	    			for (var j=num;j>=0;j--) {
	    	    				var obj = new Object();
	    	    				obj.name = array[i].name;
	    	    				obj.legalName = array[i].legalName;
	        					obj.type = angular.copy(typesArr[j]);
	        					obj.type.displayName = $filter('translateFilter')(obj.type.displayName);
	        					if (array[i].maxItrDays == 1) {
	        						obj.type.displayName = obj.type.displayName.replace("DAYS_PLACEHOLDER",$filter('translateFilter')("In One Day"));
	        					} else {
	        						obj.type.displayName = obj.type.displayName.replace("DAYS_PLACEHOLDER",$filter('translateFilter')("In 1 To **x** Days","**x**",array[i].maxItrDays));
	        					}
	        					var guidesTranslated = $filter('translateFilter')("Guides");
	        					obj.type.displayName = obj.type.displayName.replace("Guides",guidesTranslated); //handle translation of the word guides
	        					
	        					obj.fullname = array[i].name + ", " + obj.type.displayName;
	        					obj.imagesCdn = GlobalDefs.getImagesCdn();
	        					if (obj.type.type != "skip" || (obj.type.type == "skip" && array[i].hasSkipTheLineActivities)) {
	        						resArr.splice(i+1, 0, obj);
	        					}
	        					if ((obj.type.type == "map" || obj.type.type == "sights") && array[i].numOfSights == 0) { 
	        						resArr.splice(i+1, 1);
	        					}
	        					if (obj.type.type == "plan" && (array[i].maxItrDays == null || array[i].maxItrDays == 0)) { 
	        						resArr.splice(i+1, 1);
	        					}
	        					if (obj.type.type == "tips" && array[i].numOfGuides == 0) { 
	        						resArr.splice(i+1, 1);
	        					}
	    	    			}
	        			} else {
	        				for (var j=7;j>=5;j--) {
	    	    				var obj = new Object();
	    	    				obj.name = array[i].name;
	    	    				obj.legalName = array[i].legalName;
	    	    				obj.type = angular.copy(typesArr[j]);
	        					obj.type.displayName = $filter('translateFilter')(obj.type.displayName);
	        					obj.fullname = array[i].name + ", " + obj.type.displayName;
	        					obj.imagesCdn = GlobalDefs.getImagesCdn();
	    	    				//array.push(obj);
	        					
	        					if (obj.type.type != "skip" || (obj.type.type == "skip" && array[i].hasSkipTheLineActivities)) {
	        						resArr.splice(i+1, 0, obj);
	        					}
	    	    			}
	        			} 
	        			
	        		}
	        		return resArr;
	        	}
		        var typesArr = [{
		        	type: 'plan',
		        	displayName: 'Guides - DAYS_PLACEHOLDER',
		        	url: '',
		        	icon: '&#xE54B;'
				},{
		        	type: 'sights',
		        	displayName: 'Sights & Attractions',
		        	url: 'attraction-by-type/all',
		        	icon: '&#xE417;'
				},{
		        	type: 'activities',
		        	displayName: 'Things To Do',
		        	url: 'activities/all-activities',
		        	icon: '&#xE412;'
				},{
		        	type: 'map',
		        	displayName: 'Attractions Map',
		        	url: 'attractions-map',
		        	icon: '&#xE87A;'
				},{
		        	type: 'tips',
		        	displayName: 'Travel Tips',
		        	url: 'guides-list/all',
		        	icon: '&#xE42E;'
				},{
		        	type: 'tours',
		        	displayName: 'Tours',
		        	url: 'activities/all-activities',
					urlParams: '{"activitiesSearchByName":"tour"}',
		        	icon: '&#xE7EF;'
				},{
		        	type: 'trip',
		        	displayName: 'Day Trips',
		        	url: 'activities/all-activities',
		        	urlParams: '{"activitiesSearchByName":"trip"}',
		        	icon: '&#xE530;'
				},{
		        	type: 'skip',
		        	displayName: 'Skip The Line Tickets',
		        	url: 'activities/all-activities',
		        	urlParams: '{"activitiesSearchByName":"skip"}',
		        	icon: '&#xE53F;'
				},{
		        	type: 'destination',
		        	displayName: '',
		        	url: '',
		        	icon: '&#xE55E;'
				}];
	        }]);
 
	        app.factory('GetCitiesService',['$http','GlobalDefsNew','$filter','$location','$routeParams', 'validateJsonService', function($http,GlobalDefsNew,$filter,$location,$routeParams,validateJsonService) {
        	  var promise;
        	  var myService = {
        	    async: function() {
        	      if ( !promise ) {
        	    	//console.time('GetCitiesService');  
        	    	var url = '/jsonws/991/cities-for-home';
        	    	//if ($location.url().indexOf("/activities/") >=0) {
        	    	var lang = $routeParams.lang != null ? $routeParams.lang : getActiveLang(true);
        	    	if (lang != "en") {
        	    		url += "/" + lang;
        	    	}
        	    	//}
        	        // $http returns a promise, which has a then function, which also returns a promise
        	        promise = $http.get(url).then(function (response) {
        	        	validateJsonService.validateJsonObject(response.data.cityJson, "cities-for-home", "array", 100, "id,name");
        	        	GlobalDefsNew.setGlobal("generalGuides",response.data.guidesJson);
        	        	GlobalDefsNew.setGlobal("trendingCities",response.data.trendingCities);
        	        	var citiesArr = $filter('filter')(response.data.cityJson, function(value, index){if (value.name != 'Tips'){return true}}, true);// Filter out tips
        	        	GlobalDefsNew.setGlobal("citiesArr",citiesArr);
        	        	GlobalDefsNew.setGlobal("translationMap",JSON.parse(response.data.translation));
        	        	return citiesArr
        	        });
        	      }
        	      // Return the promise to the controller
        	      return promise;
        	    }
        	  };
        	  return myService;
        	}]);
	        
	        
	        app.filter('trustAsHtml', ['$sce','$filter', function($sce,$filter) {
	        	return function(text,wordwise, max, tail,delimiterChar,returnAll,hasReadMore) {
	        		text = $filter('cut')(text,wordwise, max, tail,delimiterChar,returnAll,hasReadMore);
	        		return $sce.trustAsHtml(text);
	        	}
	        }]);
	        
	        var currencyMgr = new CurrencyMgr();
	    	app.filter('currencyFilter', function(){
	    	   	 return function(pa, idPrefix) {
	    	   		 if (pa != null) {
	    	   			 currencyMgr.fixCurrencyElement(document.getElementById(idPrefix + pa.id));
	    	   		 }
	    	   	 }
	    	});
	    	
	    	app.filter('currencyFilterNew', function(){
	    	   	 return function(amount) {
	    	   		 if (amount != null) {
	    	   			 return currencyMgr.getCurrencySymbol() + currencyMgr.getAmount(amount,"USD");
	    	   		 }
	    	   	 }
	    	});
	    	
	    	app.filter('currencyFilterNew', function(){
	    	   	 return function(amount) {
	    	   		 if (amount != null) {
	    	   			 return currencyMgr.getCurrencySymbol() + currencyMgr.getAmount(amount,"USD");
	    	   		 }
	    	   	 }
	    	});
	    	
	    	app.factory('$debounce', ['$rootScope', '$browser', '$q', '$exceptionHandler',
	    	                           function($rootScope,   $browser,   $q,   $exceptionHandler) {
	            var deferreds = {},
	                methods = {},
	                uuid = 0;

	            function debounce(fn, delay, invokeApply) {
	                var deferred = $q.defer(),
	                    promise = deferred.promise,
	                    skipApply = (angular.isDefined(invokeApply) && !invokeApply),
	                    timeoutId, cleanup,
	                    methodId, bouncing = false;

	                // check we dont have this method already registered
	                angular.forEach(methods, function(value, key) {
	                    if(angular.equals(methods[key].fn, fn)) {
	                        bouncing = true;
	                        methodId = key;
	                    }
	                });

	                // not bouncing, then register new instance
	                if(!bouncing) {
	                    methodId = uuid++;
	                    methods[methodId] = {fn: fn};
	                } else {
	                    // clear the old timeout
	                    deferreds[methods[methodId].timeoutId].reject('bounced');
	                    $browser.defer.cancel(methods[methodId].timeoutId);
	                }

	                var debounced = function() {
	                    // actually executing? clean method bank
	                    delete methods[methodId];

	                    try {
	                    	if (fn) {
	                    		deferred.resolve(fn());
	                    	} else {
	                    		deferred.resolve();
	                    	}
	                        
	                    } catch(e) {
	                        deferred.reject(e);
	                        $exceptionHandler(e);
	                    }

	                    if (!skipApply) $rootScope.$apply();
	                };

	                timeoutId = $browser.defer(debounced, delay);

	                // track id with method
	                methods[methodId].timeoutId = timeoutId;

	                cleanup = function(reason) {
	                    delete deferreds[promise.$$timeoutId];
	                };

	                promise.$$timeoutId = timeoutId;
	                deferreds[timeoutId] = deferred;
	                promise.then(cleanup, cleanup);

	                return promise;
	            }


	            // similar to angular's $timeout cancel
	            debounce.cancel = function(promise) {
	                if (promise && promise.$$timeoutId in deferreds) {
	                    deferreds[promise.$$timeoutId].reject('canceled');
	                    return $browser.defer.cancel(promise.$$timeoutId);
	                }
	                return false;
	            };

	            return debounce;
	    }]);
	    	
	    app.directive('currencyFilterDirective', function () {
	    	return {
	    		restrict: 'AEC',
	        	link: function(scope, element, attrs) {
	        		try {
	        			$(element).attr("currency_amount",parseInt(attrs.currencyAmount));
	        			currencyMgr.fixCurrencyElement(element);
	        		} catch(err) {}
	        	}
	        }
	    });
	    
	    app.directive('currencyFilterAmount', function () {
	    	return {
	    		restrict: 'AEC',
	        	link: function(scope, element, attrs) {
	        		try {
	        			var currencyAmount = parseInt(attrs.currencyAmount);
	        			$(element).text(currencyMgr.getAmount(currencyAmount,"USD"));
	        		} catch(err) {}
	        	}
	        }
	    });
	    
	    app.directive('currencyFilterSymbol', function () {
	    	return {
	    		restrict: 'AEC',
	        	link: function(scope, element, attrs) {
	        		try {
	        			$(element).text(currencyMgr.getCurrencySymbol());
	        		} catch(err) {}
	        	}
	        }
	    });

	    app.filter('vacinternal', function(){
        	return function(str) {
	   	   		if (str != null && str.length > 0) {
	   	   			str = str.replace("http:","https:");
	   	   			return str.replace("vacinternal",imagesCdn);
	   	   		}
	   	   	 }
	   	 }); 
	        
        app.filter('secToMin', ['$filter', function($filter) {
	   	   	 return function(site,transitWord,noTypeWord) {
	   	   		var secs = site.walkingTime;
	   	   		if (transitWord == "drive") {
	   	   			secs = site.transitTime;
	   	   			if (site.walkingTime > 600) {
	   	   				transitWord = "by car";
	   	   			} else {
	   	   				transitWord = "walking";
	   	   			}
	   	   		} else if (site.walkingTime > 600) {
	   	   			secs = site.transitTime;
	   	   			transitWord = "by transit";
	   	   		} 
	   	   		if (secs != null && secs > 0) {
	   	   			var res = Math.ceil(secs/60);
	   	   			//res = res + " min";
	   	   			if (!noTypeWord) {
	   	   				res = $filter('translateFilter')("**x** min " + transitWord,"**x**",res);
	   	   				//res += " " + transitWord;	
	   	   			} else {
	   	   				res = $filter('translateFilter')("**x** min","**x**",res);
	   	   			}
	   	   			return res; 
	   	   		}
	   	   	 }
	   	   }]); 
		        
	        
	        
	        
        app.factory("GlobalDefsNew",['$filter', function ($filter) {
        	var valuesArr = new Array();
    	    function getGlobal(name) {
    	        var res = $filter('filter')(valuesArr, {name: name}, true);
    	        if (res.length > 0) {
    	        	return res[0].value;
    	        } else {
    	        	return null;
    	        }
    	    }
    	    
    	    function setGlobal(name,value) {
    	    	var res = $filter('filter')(valuesArr, {name: name}, true);
    	        if (res.length > 0) {
    	        	res[0].value = value;
    	        } else {
    	        	var obj = new Object();
	    	    	obj.name = name;
	    	    	obj.value = value;
	    	    	valuesArr.push(obj);
    	        }
       	    }
    	    
    	    return {
    	    	getGlobal: getGlobal,
    	    	setGlobal: setGlobal
    	    }
    	}]);
	        
	        app.factory("GlobalDefs", function () {
	    	    function getImagesCdn() {
	    	        return imagesCdn;
	    	    }
	    	    
	    	    function getAppRoot() {
	    	    	return appRoot;
	    	    }
	    	    
	    	    function getSecureImagesCdn() {
	    	    	return secureImagesCdn;
	    	    }
	    	    
	    	    function getSecureAppRoot() {
	    	    	return secureAppRoot;
	    	    }
	    	    
	    	    return {
	    	    	getImagesCdn: getImagesCdn,
	    	    	getAppRoot: getAppRoot,
	    	    	getSecureImagesCdn: getSecureImagesCdn,
	    	    	getSecureAppRoot: getSecureAppRoot
	    	    }
	    	});
	        
	        app.factory("MyPlansService", function () {
	    	    var plans = new Array();
	    	    var roPlans = new Array();
	        	
	    	    function getMyPlans() {
	    	        return plans;
	    	    }
	    	    
	    	    function getMyRoPlans() {
	    	        return roPlans;
	    	    }
	    	    
	    	    function setMyPlans(plansArr) {
	    	    	plans = new Array();
		    	    roPlans = new Array();
	    	    	for (var i=0;i<plansArr.length;i++) {
	    	    		if (plansArr[i][8] == 1) {
	    	    			plans.push(plansArr[i]);
	    	    		} else {
	    	    			roPlans.push(plansArr[i]);
	    	    		}
	    	    	}
	    	    }
	    	    
	    	    return {
	    	    	getMyPlans: getMyPlans,
	    	    	getMyRoPlans: getMyRoPlans,
	    	    	setMyPlans: setMyPlans
	    	    }
	    	});
	        
	        
	        app.service("BreadcrumbsService", ['GlobalDefs','$filter',function (GlobalDefs,$filter) {
	    	   
	        	this.getAppRoot = function() {
	        		return GlobalDefs.getAppRoot();
	        	}
	        	
	        	this.createBreadCrumbs = function(citiesArr,bc, city, lang) {
	        		var country = null;
	        		var region = null;
	        		var appRoot = this.getAppRoot();
	    			try {
	    				country = $filter('filter')(citiesArr, function(value, index){ if (value.status == 'production' && value.legalName.toLowerCase() == city.country.legalName.toLowerCase() && value.id != city.id) { return true;}})[0];
	    			} catch(err) {}
	    			try {
	    				region = $filter('filter')(citiesArr, function(value, index){ if (city.region != null && city.region.length > 0 && value.status == 'production' && value.name.toLowerCase() == city.region.toLowerCase() && value.id != city.id) { return true;}})[0];
	    			} catch(err) {}
	        			
	    				var bcArr = new Array();
	    				if (country != null) {
	    					bcArr.push({
	    						name: country.name,
	    						url: appRoot + "/" + lang + "/" + country.legalName
	    					});
	    				}
	    				if (region != null) {
	    					bcArr.push({
	    						name: region.name,
	    						url: appRoot + "/" + lang + "/" + region.legalName
	    					});
	    				}
	    				
	    				if (city != null && city.legalName != 'tips') {
	    					if (bc.length > 0) {
	    	   					bcArr.push({
	    							name: city.name,
	    							url: appRoot + "/" + lang + "/" + city.legalName
	    						});
	    	   					bcArr = bcArr.concat(bc);
	    	   				} else {
	    	   					bcArr.push({name: city.name})
	    	   				}
	    				} else {
	    					bcArr = bcArr.concat(bc);
	    				}
	    				return bcArr;
	        	}
	        	
	    	}]);
	        
	        app.factory("LogedInUserService", function () {
	    	    var userEmail = "";
	        	
	    	    function getUserEmail() {
	    	        return userEmail;
	    	    }
	    	    
	    	    function setUserEmail(e) {
	    	    	userEmail = e;
	    	    }
	    	    
	    	    return {
	    	    	getUserEmail: getUserEmail,
	    	    	setUserEmail: setUserEmail
	    	    }
	    	});
	        
	        app.factory("CityService", function () {
	    	    var city = null;
	        	
	    	    function getCurCity() {
	    	        return city;
	    	    }
	    	    
	    	    function setCurCity(c) {
	    	    	city = c;
	    	    }
	    	    
	    	    return {
	    	    	getCurCity: getCurCity,
	    	    	setCurCity: setCurCity
	    	    }
	    	});
	        
	        app.factory("CurrenciesService", function () {
	        	
	    	    function getCurrencies() {
	    	    	var currencies = [{
							displayName:"USD ($)",
							name: "USD"
						},{
							displayName:"EUR (€)",
							name:"EUR"
						},{
							displayName:"GBP (£)",
							name:"GBP"
						},{
							displayName:"AUD (A$)",
							name:"AUD"
						},{
							displayName:"CAD (C$)",
							name:"CAD"
						},{
							displayName:"HKD (HK$)",
							name:"HKD"
						},{
							displayName:"INR (₹)",
							name:"INR"
						},{
							displayName:"MYR",
							name:"MYR"
						},{
							displayName:"NZD (N$)",
							name:"NZD"
						},{
							displayName:"PHP(₱)",
							name:"PHP"
						},{
							displayName:"SGD (S$)",
							name:"SGD"
						},{
							displayName:"ZAR (R)",
							name:"ZAR"
						},{
							displayName:"CHF (FR)",
							name:"CHF"
						},{
							displayName:"YEN (¥)",
							name:"JPY"
						},{
							displayName:"IDR (Rp)",
							name:"IDR"
						}];
	    	        return currencies;
	    	    }
	    	    
	    	    return {
	    	    	getCurrencies: getCurrencies
	    	    }
	    	});
	        
	    	app.factory("itinerarySitesService", function () {
	    	    var itrSitesArr = null;
	        	
	    	    function getSites() {
	    	        return itrSitesArr;
	    	    }
	    	    
	    	    function setSites(arr) {
	    	    	itrSitesArr = arr;
	    	    }
	    	    
	    	    return {
	    	    	getSites: getSites,
	    	    	setSites: setSites
	    	    }
	    	});
	        
	        /*app.directive( 'ngDebounce', [ function() {
	            var DEFAULTS = { timeout : 1000 } ;
	            
	            return {
	                restrict    : 'A',	
	                link		: function( scope, element, attrs) {
	                    // normalize directive options
	                    var options = scope.$eval( attrs.ngDebounce) || $.extend( {}, DEFAULTS);
	                    if( options==='leading') {
	                        options = $.extend( { leading : true}, DEFAULTS);
	                    } else {
	                        options.leading = !!options.leading;	// make it a real boolean
	                    }
	                    
	                    var map = $._data( element[0], 'events'),
	                        events = $.each( Object.keys( map), function( index, eventName) {
	                            // ensure only real events are handled
	                            if( eventName.charAt( 0)!='$') {
	                                // install debounce mechanism
	                                var debounced = $.debounce( options.timeout, options.leading, function( event) {
	                                    //console.log( 'debounce called');
	                                    
	                                    // iterate over all event handlers registered before ourself
	                                    // (remember : we moved ourself at first position while installing)
	                                    for( var i=$.inArray( debounce_handlerobj, map[eventName])+1; i<map[eventName].length; i++) {
	                                        var handlerobj = map[eventName][i];
	                                        
	                                        // call original event handler  										
	                                        handlerobj.handler.apply( this, arguments);
	                                        // emulate regular event dispatching by 
	                                        // aborting further propagation when event 
	                                        // has state immediatePropagationStopped
	                                        if( event.isImmediatePropagationStopped()) {
	                                            break;
	                                        }
	                                    }
	                                });
	                                
	                                element.on( eventName, function( event) {
	                                    debounced.apply( this, arguments);
	                                    // tell jquery to suppress further propagation of this event
	                                    event.stopImmediatePropagation();
	                                });
	                                
	                                // move our debounce handler at first position
	                                // to be called before any other
	                                var debounce_handlerobj = map.input.pop();
	                                map.input.unshift( debounce_handlerobj);
	                            }
	                        })
	                    ;
	                }
	            };
	        }]);*/
	        
	        app.directive('ngReallyClick', ['$uibModal', function($uibModal) {

	            var ModalInstanceCtrl = function($scope, $uibModalInstance) {
	              $scope.ok = function() {
	                $uibModalInstance.close();
	              };

	              $scope.cancel = function() {
	                $uibModalInstance.dismiss('cancel');
	              };
	            };

	            return {
	              restrict: 'A',
	              scope:{
	                ngReallyClick:"&",
	                item:"="
	              },
	              link: function(scope, element, attrs) {
	                element.bind('click', function() {
	                  var message = attrs.ngReallyMessage || "Are you sure ?";
	                  var title = attrs.ngReallyTitle || "";
	                  var btn1 = attrs.ngReallyBtn1 || "Yes";
	                  var btn2 = attrs.ngReallyBtn2 || "No";
	                  /*
	                  //This works
	                  if (message && confirm(message)) {
	                    scope.$apply(attrs.ngReallyClick);
	                  }
	                  //*/

	                  var modalHtml = '<div class="modal-header" style="background-color:#ebebeb">';
	                  modalHtml += '<h2 class="modal-title">' + title + '</h2>';
	                  modalHtml += '</div>';
	                  modalHtml += '<div class="modal-body">' + message + '</div>';
	                  modalHtml += '<div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">'+btn1+'</button>'
	                  modalHtml +=  '<button class="btn btn-warning" ng-click="cancel()">'+btn2+'</button></div>';

	                  var modalInstance = $uibModal.open({
	                    template: modalHtml,
	                    controller: ModalInstanceCtrl
	                  });

	                  modalInstance.result.then(function() {
	                    scope.ngReallyClick({item:scope.item}); //raise an error : $digest already in progress
	                  }, function() {
	                    //Modal dismissed
	                  });
	                  
	                });

	              }
	            }
	          }
	        ]);
	        
	        app.filter('translateFilter', ['GlobalDefsNew','GetCitiesService', function(GlobalDefsNew,GetCitiesService) {
	        	var translationMap = null, serviceInvoked = false;

		        function getTranslation(text,replaceFrom,replaceTo,replaceFrom2,replaceTo2,replaceFrom3,replaceTo3,replaceFrom4,replaceTo4) {
		        	if (translationMap != null && translationMap[text] != null) {
		        		text = translationMap[text];
	        		}
		        	if (replaceFrom != null) {
	        			if (replaceTo == null) {
	        				replaceTo = ""; //make sure we don't leave the replace in case of null or bad replacement
	        			}
	        			text = text.replace(replaceFrom,replaceTo);
	        		}
	        		if (replaceFrom2 != null) {
	        			if (replaceTo2 == null) {
	        				replaceTo2 = ""; //make sure we don't leave the replace in case of null or bad replacement
	        			}
	        			text = text.replace(replaceFrom2,replaceTo2);
	        		}
	        		if (replaceFrom3 != null) {
	        			if (replaceTo3 == null) {
	        				replaceTo3 = ""; //make sure we don't leave the replace in case of null or bad replacement
	        			}
	        			text = text.replace(replaceFrom3,replaceTo3);
	        		}
	        		if (replaceFrom4 != null) {
	        			if (replaceTo4 == null) {
	        				replaceTo4 = ""; //make sure we don't leave the replace in case of null or bad replacement
	        			}
	        			text = text.replace(replaceFrom4,replaceTo4);
	        		}
	        		return text
		        }
	
		        function transFilter(value,replaceFrom,replaceTo,replaceFrom2,replaceTo2,replaceFrom3,replaceTo3,replaceFrom4,replaceTo4) { // Wait for the map to download on the first call
		        	translationMap = GlobalDefsNew.getGlobal("translationMap");
		        	if( translationMap === null ) {
		                if( !serviceInvoked ) {
		                    serviceInvoked = true;
		                    GetCitiesService.async().then(function(result) {
		                    	translationMap = GlobalDefsNew.getGlobal("translationMap");
		                    });
		                }
		                //return the text imeeditaly anyhow
		                return getTranslation(value,replaceFrom,replaceTo,replaceFrom2,replaceTo2,replaceFrom3,replaceTo3,replaceFrom4,replaceTo4);
		            } else {
		            	return getTranslation(value,replaceFrom,replaceTo,replaceFrom2,replaceTo2,replaceFrom3,replaceTo3,replaceFrom4,replaceTo4);
		            }
		        }
		        transFilter.$stateful = true; //make this stateful so we wait for tranlation to download
		        return transFilter;
	        }]);
	        /*app.filter('translateFilter', ['$filter','$location', '$routeParams', function($filter,$location,$routeParams) {

	        	var lang = $routeParams.lang;
	        	
	        	var translateArr = new Array();
	        	
	        	var obj = new Object();
	        	obj.eng = "Sort By";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "sortieren nach";
	        	obj.lang["fr"] = "trier par";
	        	obj.lang["es"] = "ordenar por";
	        	obj.lang["sv"] = "sortera Efter";
	        	obj.lang["da"] = "sortér efter";
	        	obj.lang["pt"] = "filtrar por";
	        	obj.lang["no"] = "sorter Etter";
	        	obj.lang["it"] = "ordina per";
	        	obj.lang["ja"] = "並べ替え";
	        	obj.lang["nl"] = "sorteren op";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Popularity";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Beliebtheit";
	        	obj.lang["fr"] = "Classement";
	        	obj.lang["es"] = "Popularidad";
	        	obj.lang["sv"] = "Popularitet";
	        	obj.lang["da"] = "Popularitet";
	        	obj.lang["pt"] = "Popularidade";
	        	obj.lang["no"] = "Popularitet";
	        	obj.lang["it"] = "Popolarità";
	        	obj.lang["ja"] = "人気";
	        	obj.lang["nl"] = "Populariteit";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Score";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Bewertungsergebnis";
	        	obj.lang["fr"] = "Note";
	        	obj.lang["es"] = "Puntaje";
	        	obj.lang["sv"] = "Poäng";
	        	obj.lang["da"] = "Score";
	        	obj.lang["pt"] = "Pontuação";
	        	obj.lang["no"] = "Poengsum";
	        	obj.lang["it"] = "Punteggio";
	        	obj.lang["ja"] = "評価";
	        	obj.lang["nl"] = "Score";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Price";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Preis";
	        	obj.lang["fr"] = "Prix";
	        	obj.lang["es"] = "Precio";
	        	obj.lang["sv"] = "Pris";
	        	obj.lang["da"] = "Pris";
	        	obj.lang["pt"] = "Preço";
	        	obj.lang["no"] = "Pris";
	        	obj.lang["it"] = "Prezzo";
	        	obj.lang["ja"] = "代金";
	        	obj.lang["nl"] = "Prijs";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Name";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Namen";
	        	obj.lang["fr"] = "Nom";
	        	obj.lang["es"] = "Nombre";
	        	obj.lang["sv"] = "Namn";
	        	obj.lang["da"] = "Navn";
	        	obj.lang["pt"] = "Nome";
	        	obj.lang["no"] = "Navn";
	        	obj.lang["it"] = "Nome";
	        	obj.lang["ja"] = "タイトル";
	        	obj.lang["nl"] = "Naam";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Highly Recommended";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Außergewöhnlich";
	        	obj.lang["fr"] = "Fortement Recommandé";
	        	obj.lang["es"] = "Más recomendados";
	        	obj.lang["sv"] = "Rekommenderas Varmt";
	        	obj.lang["da"] = "Højt Anbefalet";
	        	obj.lang["pt"] = "Altamente Recomendado";
	        	obj.lang["no"] = "Høyt Anbefalt";
	        	obj.lang["it"] = "Altamente Consigliato";
	        	obj.lang["ja"] = "イチオシ";
	        	obj.lang["nl"] = "Ten Zeerste Aanbevolen";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Recommended";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Hervorragend";
	        	obj.lang["fr"] = "Recommandé";
	        	obj.lang["es"] = "Recomendado";
	        	obj.lang["sv"] = "Rekommenderas";
	        	obj.lang["da"] = "Anbefalet";
	        	obj.lang["pt"] = "Recomendado";
	        	obj.lang["no"] = "Anbefalt";
	        	obj.lang["it"] = "Consigliato";
	        	obj.lang["ja"] = "オススメ";
	        	obj.lang["nl"] = "Aanbevolen";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Worth Doing";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Sehenswert";
	        	obj.lang["fr"] = "À Faire";
	        	obj.lang["es"] = "Vale la pena hacerlo";
	        	obj.lang["sv"] = "Värt Att Göra";
	        	obj.lang["da"] = "Værd At Gøre";
	        	obj.lang["pt"] = "Vale a Pena";
	        	obj.lang["no"] = "Verdt å Gjøre";
	        	obj.lang["it"] = "Vale la Pena";
	        	obj.lang["ja"] = "高評価";
	        	obj.lang["nl"] = "De Moeite Waard";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "reviewers";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "bewertungen";
	        	obj.lang["fr"] = "avis";
	        	obj.lang["es"] = "Cantidad de críticos";
	        	obj.lang["sv"] = "recensenter";
	        	obj.lang["da"] = "anmeldere";
	        	obj.lang["pt"] = "avaliações";
	        	obj.lang["no"] = "omtaler";
	        	obj.lang["it"] = "commentatori";
	        	obj.lang["ja"] = "旅行者";
	        	obj.lang["nl"] = "beoordelaars";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Details & Booking";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Details & Buchen";
	        	obj.lang["fr"] = "Détails et Réservation";
	        	obj.lang["es"] = "Detalles y Reservas";
	        	obj.lang["sv"] = "Uppgifter & Bokning";
	        	obj.lang["da"] = "Detaljer & Booking";
	        	obj.lang["pt"] = "Detalhes e Reservas";
	        	obj.lang["no"] = "Detaljer & Booking";
	        	obj.lang["it"] = "Dettagli e Prenotazioni";
	        	obj.lang["ja"] = "詳細＆予約";
	        	obj.lang["nl"] = "Details en Boeking";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "read more";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "weiter";
	        	obj.lang["fr"] = "lire plus";
	        	obj.lang["es"] = "leer más";
	        	obj.lang["sv"] = "läs mer";
	        	obj.lang["da"] = "læs mere";
	        	obj.lang["pt"] = "saiba mais";
	        	obj.lang["no"] = "les mer";
	        	obj.lang["it"] = "scopri di più";
	        	obj.lang["ja"] = "続きを読む";
	        	obj.lang["nl"] = "meer informatie";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Search for things to do";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Suche Aktivitäten";
	        	obj.lang["fr"] = "Rechercher des Activités";
	        	obj.lang["es"] = "Buscar qué Hacer";
	        	obj.lang["sv"] = "Sök efter saker att göra";
	        	obj.lang["da"] = "Søg efter ting at lave";
	        	obj.lang["pt"] = "Buscar coisas para fazer";
	        	obj.lang["no"] = "Søk etter ting å gjøre";
	        	obj.lang["it"] = "Cerca attività";
	        	obj.lang["ja"] = "アクティビティで探す";
	        	obj.lang["nl"] = "Zoeken naar Activiteiten";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Search for";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Suche";
	        	obj.lang["fr"] = "Rechercher";
	        	obj.lang["es"] = "Buscar";
	        	obj.lang["sv"] = "Sök efter";
	        	obj.lang["da"] = "Søg efter";
	        	obj.lang["pt"] = "Buscar por";
	        	obj.lang["no"] = "Søk etter";
	        	obj.lang["it"] = "Cerca";
	        	obj.lang["ja"] = "で探す";
	        	obj.lang["nl"] = "Zoeken naar";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Search";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Suche";
	        	obj.lang["fr"] = "Recherche";
	        	obj.lang["es"] = "Buscar";
	        	obj.lang["sv"] = "Sök";
	        	obj.lang["da"] = "søg";
	        	obj.lang["pt"] = "Buscar";
	        	obj.lang["no"] = "Søk";
	        	obj.lang["it"] = "Cerca";
	        	obj.lang["ja"] = "検索";
	        	obj.lang["nl"] = "Zoeken";
	        	translateArr.push(obj);

	        	obj = new Object();
	        	obj.eng = "from";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "ab";
	        	obj.lang["fr"] = "de";
	        	obj.lang["es"] = "desde";
	        	obj.lang["sv"] = "från";
	        	obj.lang["da"] = "fra";
	        	obj.lang["pt"] = "a partir de";
	        	obj.lang["no"] = "fra";
	        	obj.lang["it"] = "da";
	        	obj.lang["ja"] = "から";
	        	obj.lang["nl"] = "van";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "All Activities";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Alle Aktivitäten";
	        	obj.lang["fr"] = "Toutes les Activités";
	        	obj.lang["es"] = "Todas las Actividades";
	        	obj.lang["sv"] = "Alla Aktiviteter";
	        	obj.lang["da"] = "Alle Aktiviteter";
	        	obj.lang["pt"] = "Todas as Atividades";
	        	obj.lang["no"] = "Alle Aktiviteter";
	        	obj.lang["it"] = "Tutte le Attività";
	        	obj.lang["ja"] = "全てのアクティビティ";
	        	obj.lang["nl"] = "Alle Activiteiten";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Top Activities";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Beliebte Aktivitäten";
	        	obj.lang["fr"] = "Meilleures Activités";
	        	obj.lang["es"] = "Mejores Actividades";
	        	obj.lang["sv"] = "Toppaktiviteter";
	        	obj.lang["da"] = "Top Aktiviteter";
	        	obj.lang["pt"] = "Melhores Atividades";
	        	obj.lang["no"] = "Beste Aktiviteter";
	        	obj.lang["it"] = "Attività Migliori";
	        	obj.lang["ja"] = "人気アクティビティ";
	        	obj.lang["nl"] = "Top Activiteiten";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Stars And Up";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Sterne Und Mehr";
	        	obj.lang["fr"] = "Ētoiles";
	        	obj.lang["es"] = "Estrellas y superior";
	        	obj.lang["sv"] = "Minimum Stjärnor i Betyg";
	        	obj.lang["da"] = "Stjerner og op";
	        	obj.lang["pt"] = "Estrelas e mais";
	        	obj.lang["no"] = "Stjerner Og Oppover";
	        	obj.lang["it"] = "Stelle e più";
	        	obj.lang["ja"] = "星ランク以上";
	        	obj.lang["nl"] = "Sterren En Meer";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "All Ratings";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Alle Bewertungen";
	        	obj.lang["fr"] = "Toutes les Notes";
	        	obj.lang["es"] = "Todas las clasificaciones";
	        	obj.lang["sv"] = "Alla Bety";
	        	obj.lang["da"] = "Alle Ratings";
	        	obj.lang["pt"] = "Tudo";
	        	obj.lang["no"] = "Alle Rangeringer";
	        	obj.lang["it"] = "Tutte le Valutazioni";
	        	obj.lang["ja"] = "総合評価";
	        	obj.lang["nl"] = "Alle Beoordelingen";
	        	translateArr.push(obj);

	        	obj = new Object();
	        	obj.eng = "Clear Filters";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Alle Filter Zurücksetzen";
	        	obj.lang["fr"] = "Effacer les Filtres";
	        	obj.lang["es"] = "Limpiar Filtros";
	        	obj.lang["sv"] = "Rensa Filter";
	        	obj.lang["da"] = "Ryd Filtre";
	        	obj.lang["pt"] = "Limpar Filtros";
	        	obj.lang["no"] = "Tøm Filtre";
	        	obj.lang["it"] = "Annulla Filtri";
	        	obj.lang["ja"] = "条件クリア";
	        	obj.lang["nl"] = "Filters Wissen";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Compare Similar Products";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Vergleichen";
	        	obj.lang["fr"] = "Comparez des Offres Similaires";
	        	obj.lang["es"] = "Comparar Productos Similares";
	        	obj.lang["sv"] = "Jämför Liknande Produkter";
	        	obj.lang["da"] = "Sammenlign Ens Produkter";
	        	obj.lang["pt"] = "Comparar Produtos Semelhantes";
	        	obj.lang["no"] = "Sammenligne Lignende Produkter";
	        	obj.lang["it"] = "Confronta Prodotti Simili";
	        	obj.lang["ja"] = "商品比較";
	        	obj.lang["nl"] = "Vergelijkbare Producten Vergelijken";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Categories";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Kategorien";
	        	obj.lang["fr"] = "Catégories";
	        	obj.lang["es"] = "Categorías";
	        	obj.lang["sv"] = "Kategorier";
	        	obj.lang["da"] = "Kategorier";
	        	obj.lang["pt"] = "Categorias";
	        	obj.lang["no"] = "Kategorier";
	        	obj.lang["it"] = "Categorie";
	        	obj.lang["ja"] = "カテゴリー";
	        	obj.lang["nl"] = "Categorieën";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Popular";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Beliebt";
	        	obj.lang["fr"] = "Populaires";
	        	obj.lang["es"] = "Popular";
	        	obj.lang["sv"] = "Populära";
	        	obj.lang["da"] = "Populær";
	        	obj.lang["pt"] = "Popular";
	        	obj.lang["no"] = "Populært";
	        	obj.lang["it"] = "Popolare";
	        	obj.lang["ja"] = "人気";
	        	obj.lang["nl"] = "Populair";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Duration";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Dauer";
	        	obj.lang["fr"] = "Durée";
	        	obj.lang["es"] = "Duración";
	        	obj.lang["sv"] = "Tid för aktivitet";
	        	obj.lang["da"] = "Varighed";
	        	obj.lang["pt"] = "Duração";
	        	obj.lang["no"] = "Varighet";
	        	obj.lang["it"] = "Durata";
	        	obj.lang["ja"] = "期間";
	        	obj.lang["nl"] = "Duur";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "More";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "weiter";
	        	obj.lang["fr"] = "plus";
	        	obj.lang["es"] = "Más";
	        	obj.lang["sv"] = "Mer";
	        	obj.lang["da"] = "Flere";
	        	obj.lang["pt"] = "Mais";
	        	obj.lang["no"] = "Flere";
	        	obj.lang["it"] = "Mostra di più";
	        	obj.lang["ja"] = "さらに表示する";
	        	obj.lang["nl"] = "Meer";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Less";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Weniger";
	        	obj.lang["fr"] = "Moins";
	        	obj.lang["es"] = "Menos";
	        	obj.lang["sv"] = "Mindre";
	        	obj.lang["da"] = "Færre";
	        	obj.lang["pt"] = "Menos";
	        	obj.lang["no"] = "Mindre";
	        	obj.lang["it"] = "Mostra meno";
	        	obj.lang["ja"] = "閉じる";
	        	obj.lang["nl"] = "Minder";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "More Categories";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Weitere Kategorien";
	        	obj.lang["fr"] = "Plus Catégories";
	        	obj.lang["es"] = "Más Categorías";
	        	obj.lang["sv"] = "Fler Kategorier";
	        	obj.lang["da"] = "Flere Kategorier";
	        	obj.lang["pt"] = "Mais Categorias";
	        	obj.lang["no"] = "Flere Kategorier";
	        	obj.lang["it"] = "Più Categorie";
	        	obj.lang["ja"] = "さらに表示する";
	        	obj.lang["nl"] = "Meer Categorieën";
	        	translateArr.push(obj);
	        	
	        	obj = new Object();
	        	obj.eng = "Less Categories";
	        	obj.lang = new Object();
	        	obj.lang["de"] = "Weniger Kategorien";
	        	obj.lang["fr"] = "Moins de Catégories";
	        	obj.lang["es"] = "Menos Categorías";
	        	obj.lang["sv"] = "Färre Kategorier";
	        	obj.lang["da"] = "Færre Kategorier";
	        	obj.lang["pt"] = "Menos categorias";
	        	obj.lang["no"] = "Mindre Kategorier";
	        	obj.lang["it"] = "Meno Categorie";
	        	obj.lang["ja"] = "閉じる";
	        	obj.lang["nl"] = "Minder Categorieën";
	        	translateArr.push(obj);
	        	
	        	      	
	        	return function(text) {
	        		if ($location.url().indexOf("/activities/") >= 0) {
		        		for (var i=0;i<translateArr.length;i++) {
		        			if (translateArr[i].eng.toLowerCase() == text.toLowerCase() && translateArr[i].lang[lang] != null) {
		        				text = translateArr[i].lang[lang];
		        				break;
		        			}
		        		}
	        		}
	        		return text;
	        	}
	        }]);*/
	        
	        app.service('whatsNearByService', ['$http','$q','$filter', 
	                                             function($http,$q,$filter) {
	        	
	        	this.nearbyDataArr = new Array();
	        	
	        	this.getData = function(siteId) {
	        		var _self = this;
	        		var curData = _self.getDataFromWh(siteId);
	        		if (curData != null && curData.data != null) {
	    				return curData.data;
	    			} else if (curData != null && curData.deferred != null) {
	    				return curData.deferred;
	    			} else {
	    				var d = $http.get(appRoot + "/ws/getSiteToAllDistanceMatrix?siteId=" + siteId).then(
	    		   			 function(results) {
	    		   				_self.put(siteId,results);
	    		   				curData = _self.getDataFromWh(siteId);  
	    		   				return curData.data;
	    		   			}, function(errors) {
	    		   				return $q.reject(errors);
	    		   			 }
		    			
		    		   				
		    			);
	    				curData = _self.newData(siteId,d);
	    				return d;
	    			}
	        		
	        		
	        		if (res == null) {
	        			
	        		}
	        		
	        		return res;
	        	}
	        	
	        	
	        	this.newData = function(id,d) {
	    			var _self = this;
	    			var obj = new Object();
	    			obj.deferred = d;
	    			obj.id = id;
	    			_self.nearbyDataArr.push(obj);
	    			return obj;

	    		}
	        	
	        	this.getDataFromWh = function(id) {
	        		var _self = this;
	    			var res = null;
	    			for (var i=0;i<_self.nearbyDataArr.length;i++) {
	    				if (_self.nearbyDataArr[i].id == id) {
	    					res = _self.nearbyDataArr[i];
	    					break;
	    				}
	    			}
	    			return res;
	        	}
	        	
	        	this.put = function(id,data) {
	    			var _self = this;
	    			for (var i=0;i<_self.nearbyDataArr.length;i++) {
	    				if (_self.nearbyDataArr[i].id == id) {
	    					_self.nearbyDataArr[i].data = prepareResult(data,id);
	    					break;
	    				}
	    			}
	    		}
	        	
	        	function addToResArr(arr,data) {
	        		var toFind = $filter('filter')(arr, {destinationSiteId: data.destinationSiteId}, true);
	        		if (toFind.length > 0) {
	        			if (data.type == "transit") {
	        				toFind[0].transitTime = data.durationSeconds;
	        			} else {
	        				toFind[0].walkingTime = data.durationSeconds;
	        			}
	        		} else {
	        			if (data.type == "transit") {
	        				data.transitTime = data.durationSeconds;
	        			} else {
	        				data.walkingTime = data.durationSeconds;
	        			}
	        			arr.push(data);
	        		}
	        		
	        		return arr;
	        	}
	        	
	        	function prepareResult(data,id) {
	        		var resArr = new Array();
	        		var dataArr = $filter('filter')(data.data, {originSiteId: id}, true);
	        		for (var i=0;i<dataArr.length;i++) {
	        			resArr = addToResArr(resArr,dataArr[i]);
	        		}
	        		
	        		resArr.sort(function(a, b) {
						if (a.distanceMeters != null && b.distanceMeters) {
							return  a.distanceMeters - b.distanceMeters;  
						}
				    	return  0;          		
				    });
	        		return resArr;
	        	}
	        	
	        }]);
	        
	        app.service('dataWearhouseService', ['$http', '$q', '$filter','CityService','$routeParams', 
	                                             function($http, $q, $filter,CityService,$routeParams) {
	    		
	    		this.resultArr = new Array();
	    		this.getData = function(callsArr,dataName) {
	    			
	    			var _self = this;
	    			
	    			var curData = _self.get(dataName);
	    			
	    			if (curData != null && curData.data != null) {
	    				return curData.data;
	    			} else if (curData != null && curData.deferred != null) {
	    				return curData.deferred;
	    			} else {
	    				var d = $http.get(callsArr).then(
	    		   			 function(results) {
	    		   				_self.put(dataName,results);
	    		   				return results;
	    		   			}, function(errors) {
	    		   				return $q.reject(errors);
	    		   			 }
		    			
		    		   				
		    			);
	    				curData = _self.newData(dataName,d);
	    				return d;
	    			}

	    		}
	    		
	    		this.newData = function(name,d) {
	    			var _self = this;
	    			var obj = new Object();
	    			obj.deferred = d;
	    			obj.name = name;
	    			_self.resultArr.push(obj);
	    			return obj;

	    		}
	    		
	    		this.put = function(name,data,doReset) {
	    			var _self = this;
	    			var res = null;
	    			for (var i=0;i<_self.resultArr.length;i++) {
	    				if (_self.resultArr[i].name == name) {
	    					res = _self.resultArr[i];
	    					_self.resultArr[i].data = data;
	    					if (doReset) {
	    						_self.resultArr[i].deferred = null;
	    					}
	    					break;
	    				}
	    			}
	    			return res;
	    		}
	    		
	    		this.reset = function() {
	    			var _self = this;
	    			_self.resultArr = new Array();
	    		}
	    		
	    		this.get = function(name) {
	    			var _self = this;
	    			var res = null;
	    			for (var i=0;i<_self.resultArr.length;i++) {
	    				if (_self.resultArr[i].name == name) {
	    					res = _self.resultArr[i];
	    					break;
	    				}
	    			}
	    			return res;
	    		}
	        
	        }]);
	        
	        app.service('lastModService', ['$http', '$q','dataWearhouseService','validateJsonService',function($http, $q,dataWearhouseService,validateJsonService) {
	        	var lastModArr = null;
	        	var serviceFuncs = {
		        	setLastMod : function(cityLegal) {
		        		var deferred = $q.defer();
		        		var lastModJsonObj = angular.fromJson(lastModJson);
		        		if (lastModJsonObj != null && lastModJsonObj.curCityLn == cityLegal) {
		        			//json is avilable and set
		        			deferred.resolve();
		        		} else if (lastModArr != null) {
		        			//set the last mod json from the last mod array
		        			serviceFuncs.arrToJson(lastModArr[cityLegal],cityLegal);
		        			//dataWearhouseService.reset(); //clear the wearhouse data when switching cities
		        			deferred.resolve();
		        		} else {
		        			//get from server
		        			$http.get(appRoot + "/api/cities-last-mod").then(
			    		   			 function(results) {
			    		   				validateJsonService.validateJsonObject(results.data, "cities-last-mod", "object", null, "paris");
			    		   				lastModArr = results.data;
			    		   				serviceFuncs.arrToJson(lastModArr[cityLegal],cityLegal);
			    		   				deferred.resolve();
			    		   			}, function(errors) {
			    		   				validateJsonService.validateJsonObject(null, "cities-last-mod", "object", null, "paris");
			    		   				deferred.reject("Error getting last mod json");
			    		   			 }
				    			);
		        				
		        		}
		        		return deferred.promise;
		        	},
	        		arrToJson : function(arr,cityLegal) {
	        			lastModJson = "{\"curCity\":\""+arr[1]+"\",\"curCityPa\":\""+arr[2]+"\",\"curCityPaPrice\":\""+arr[3]+"\",\"curCityOpeningHours\":\""+arr[4]+"\",\"curCityId\":\""+arr[0]+"\",\"curCityLn\":\""+cityLegal+"\",\"curCityDestinationOverrideId\":\""+arr[6]+"\",\"cityOne\":\""+arr[5]+"\"}"
	        		}
	        	}
	        	
	        	return serviceFuncs; 
	        	
	        }]);
	        
	        app.service('hotelService', function() {
	        	this.eventCat = "Hotel";
	        	this.isShowHotel = function(cityObj,from) {
	        		/*if (cityObj.hotelUrl != null && cityObj.hotelUrl.length > 0) {
	        			var isAllowHotelUrl = readCookie("expr_showhotels");
	        			if (isAllowHotelUrl == null || isAllowHotelUrl != 1) {
	        				cityObj.hotelUrl = null;
	        			} else {
	        				//add label;
	        				var loggedInUserId = LoginMgr.getInstance().getLoggedInUserId();
	        				cityObj.hotelUrl = cityObj.hotelUrl + "&label=" + loggedInUserId;
	        				this.fireHotelShow(from);
	        			}
	        		}*/
	        		cityObj.hotelUrl = null;
	        		return cityObj
	        	}
	        	
	        	this.fireHotelClicked = function(from) {
	        		fireEvent(this.eventCat, "click",from);
	        	}
	        	
	        	this.fireHotelShow = function(from) {
	        		fireEvent(this.eventCat, "show",from);
	        	}
	        });
	        
	        //Return the pass attraction text
	        app.filter('removeStyles', function(){
	        	return function(str,cssClass) {
	        		if (cssClass == null || cssClass.length == 0) {
	        			cssClass = "forceFontSize";
	        		} 
	        		if (str) {
	        			str = str.replace(/<span/g, "<span class='"+cssClass+"'");
	        			str = str.replace(/<p/g, "<p class='"+cssClass+"'");
	    	   		}
	    	   		return str;
	    	   	 }
	    	   });
	        
	        app.filter('currentyear',['$filter',  function($filter) {
	            return function() {
	                return $filter('date')(new Date(), 'yyyy');
	            };
	        }])
	        
	        
	        app.directive('activityTitle', function() {
		  		  return {
		  		        restrict: 'AEC',
		    	        templateUrl: appWebRoot + '/directives/activity/activity_title.html',
		    	        scope: true
		  		  }
		    });
	    	
	    	app.directive('productDateSelection', ['$routeParams',function($routeParams) {
		  		  return {
		  		        restrict: 'AEC',
		    	        templateUrl: appWebRoot + '/directives/activity/date-selection.html',
		    	        scope: true,
		    	        link: function(scope, elem, attrs){
		    	           var param = scope.$eval(attrs.datePopup);
		    	           scope.datePopup = param;
		    	           scope.from = scope.$eval(attrs.datePopupFrom); 
		    	        },controller: 'activityDateSelectorController'
		  		  }
		    }]);
	    	
	    	app.directive('productDateSelectionHorizontal', ['$routeParams',function($routeParams) {
		  		  return {
		  		        restrict: 'AEC',
		    	        templateUrl: appWebRoot + '/directives/activity/date-selection-horizontal.html',
		    	        scope: true,
		    	        link: function(scope, elem, attrs){
		    	           var param = scope.$eval(attrs.datePopup);
		    	           scope.datePopup = param;
		    	           scope.from = scope.$eval(attrs.datePopupFrom);
		    	           scope.showoptions = attrs.showoptions
		    	        },controller: 'activityDateSelectorController'
		  		  }
		    }]);
	    	
	    	app.service('visitDebugSvc', ['$location',function($location) {
	    		this.getValue = function(defult,debug,skipStaging) {
	    			var disableDebug = readCookie("disable-debug");
	    			if (disableDebug != null && disableDebug == "1") {
	    				return defult;
	    			}
	    			if (skipStaging && $location.absUrl().indexOf("stg.visitacity.com") >= 0) {
	    				return defult;
	    			}
	    			return $location.absUrl().indexOf("localhost") >= 0 || $location.absUrl().indexOf("stg.visitacity.com") >= 0 ? debug : defult;
	    		}
	    		
	    	}]);
	    	
	    	app.service('validateJsonService', function() {
	    		this.validateJsonObject = function(jsonObj, name, jsonObjType, minArraySize, mandatoryFields) {
	    			try {
	    				var msg = "validating json error: " + name + ". ";
	    				if (jsonObj == null) {
	    					msg += "error from server";
	    					throw msg;
	    				} 
	    				if (jsonObjType == "array"  && ! Array.isArray(jsonObj)) {
	    					msg += "wrong type, was expecting array";
	    					throw msg;
	    				}	
	    				
	    				if (jsonObjType == "object"  && ! typeof(jsonObj) === "object") {
	    					msg += "wrong type, was expecting object";
	    					throw msg;
	    				}
	    				
	    				if (jsonObjType == "array" && minArraySize == null) {
	    					msg += "wrong parameter. must define minArraySize for array";
	    					throw msg;
	    				}
	    				
	    				if (jsonObjType == "array" && jsonObj.length < minArraySize) {
	    					msg += "array size smaller than minArraySize";
	    					throw msg;
	    				}
	    				
	    				var arMandatoryFields = mandatoryFields != null ? mandatoryFields.split(",") : [];            				
	    				if (arMandatoryFields.length > 0) {
	    					var objToCheck = jsonObjType != "array" ? jsonObj : jsonObj[0];
	    						
	    					for (var i=0;i<arMandatoryFields.length;i++) {
	    						if (objToCheck[arMandatoryFields[i]] == null) {
	    							msg += "missing mandatory field " + arMandatoryFields[i];
	    							throw msg;
	    						}
	    					}
	    				}
	    			}
	    			catch(e) {
	    				if (name == "cities-for-home") {
	    					fireLocalEvent("citiesForHomeError", null, null, null, true);
	    				}
	    				console.error("error on validateJsonObject", e);
	    				Raven.captureException(e)
	    			}       		
	    		}
	    		
	    	});
	    	
	    	
	    	app.service('dateAvailabilityService', ['GlobalDefsNew',function(GlobalDefsNew) {
		        
	    		this.minDate = null;
		        this.maxDate = null;
		        this.selectedDate = null;
		        this.datesAvailabilityArr = null;
		        this.totalNumOfTravelers = 1;
		        
		        this.datePopupTop = {
						opened: false
				};
				
				this.datePopupBottom = {
						opened: false
				};
				
				this.datePopupCa = {
						opened: false
				};
				
				this.datePopupCb = {
						opened: false
				};
				
				this.datePopupMoreInfo  = {
						opened: false
				};

				this.datePopupMoreInfoTop  = {
						opened: false
				};
				
				this.datePopupActivityOptions = {
						opened: false
				};
				
				this.datePopupReviewsTop = {
						opened: false
				};
				
				this.datePopup = {
						opened: false
				};
				
				this.listen = function($scope) {
					var _self = this;
					$scope.$watch('dateAvailabilityService.datePopupTop', function(newVal, oldVal) {
						if (newVal != null && newVal.opened) {
							fireEvent("activity-booking-desktop","date popup open from","top");
							fireEvent("activity-booking-desktop","date popup open");
						}
			    	},true);
					$scope.$watch('dateAvailabilityService.datePopupBottom', function(newVal, oldVal) {
						if (newVal != null && newVal.opened) {
							fireEvent("activity-booking-desktop","date popup open from","overview bottom");
							fireEvent("activity-booking-desktop","date popup open");
						}
			    	},true);
					$scope.$watch('dateAvailabilityService.datePopupReviewsTop', function(newVal, oldVal) {
						if (newVal != null && newVal.opened) {
							fireEvent("activity-booking-desktop","date popup open from","reviews top");
							fireEvent("activity-booking-desktop","date popup open");
						}
			    	},true);
					$scope.$watch('dateAvailabilityService.datePopupActivityOptions', function(newVal, oldVal) {
						if (newVal != null && newVal.opened) {
							fireEvent("activity-booking-desktop","date popup open from","reviews bottom");
							fireEvent("activity-booking-desktop","date popup open");
						}
			    	},true);
					$scope.$watch('dateAvailabilityService.datePopupMoreInfo', function(newVal, oldVal) {
						if (newVal != null && newVal.opened) {
							fireEvent("activity-booking-desktop","date popup open from","more info bottom");
							fireEvent("activity-booking-desktop","date popup open");
						}
			    	},true);
					$scope.$watch('dateAvailabilityService.datePopupMoreInfoTop', function(newVal, oldVal) {
						if (newVal != null && newVal.opened) {
							fireEvent("activity-booking-desktop","date popup open from","more info top");
							fireEvent("activity-booking-desktop","date popup open");
						}
			    	},true);
					$scope.$watch('dateAvailabilityService.datePopupCa', function(newVal, oldVal) {
						if (newVal != null && newVal.opened) {
							fireEvent("activity-booking-desktop","date popup open from","overview top");
							fireEvent("activity-booking-desktop","date popup open");
						}
			    	},true);
					$scope.$watch('dateAvailabilityService.datePopupCb', function(newVal, oldVal) {
						if (newVal != null && newVal.opened) {
							fireEvent("activity-booking-desktop","date popup open from","overview bottom");
							fireEvent("activity-booking-desktop","date popup open");
						}
			    	},true);
					$scope.$watch('dateAvailabilityService.selectedDate', function(newVal, oldVal) {
						if (newVal != oldVal && oldVal != null) {
							fireEvent("activity-booking-desktop","date changed","");
							_self.setSelectedDate(newVal);
							
						}
			    	},true);
				}
		        
		        this.init = function(datesAvailabilityArr,$scope) {
		        	this.setDatesAvailabilityArr(datesAvailabilityArr);
		        	this.setAvailableDates();
		        	if (this.selectedDate == null) {
		        		this.setSelectedDate(this.getMinDate());
		        	}
		        	this.listen($scope);
		        	
		        }
		        
		        this.getMinDate = function() {
		        	return this.minDate
		        }
		       
		        this.setMinDate = function(minDate) {
		        	this.minDate = minDate.toDate();
		        }
		        
		        this.getMaxDate = function() {
		        	return this.maxDate
		        }
		       
		        this.setMaxDate = function(maxDate) {
		        	this.maxDate = maxDate.toDate();
		        }
		        
		        this.getSelectedDate = function() {
		        	return this.selectedDate
		        }
		       
		        this.setSelectedDate = function(selectedDate) {
		        	this.selectedDate = selectedDate
		        	GlobalDefsNew.setGlobal("selectedDate",selectedDate);
		        }
		        
		        this.getDatesAvailabilityArr = function() {
		        	return this.datesAvailabilityArr
		        }
		       
		        this.setDatesAvailabilityArr = function(datesAvailabilityArr) {
		        	this.datesAvailabilityArr = datesAvailabilityArr
		        	
		        	//pre calculate the moment time so that opening the calendar is much faster
		        	var tmpdatesAvailabilityArr = angular.copy(datesAvailabilityArr);
		        	for (var key in tmpdatesAvailabilityArr) {
						for (var i=0;i<tmpdatesAvailabilityArr[key].length;i++) {
							var curDate = moment(key + "-" +tmpdatesAvailabilityArr[key][i]);
							tmpdatesAvailabilityArr[key][i] = curDate;
						 }
					}
		        	GlobalDefsNew.setGlobal("datesAvailabilityArr",tmpdatesAvailabilityArr);
		        }
		        
		        this.getDateOptions = function() {
		        	var options = {
						dateDisabled:  this.disabledDates,
						startingDay: 1,
						customClass: this.getDayClass,
						minDate: this.getMinDate(),
						maxDate: this.getMaxDate(),
						showWeeks: false,
						autoclose: true,
						maxMode: 'day',
						minMode: 'day'
					};
		        	return options
		        }
		        
		        this.setAvailableDates = function() {
					var firstDate = null;
					var lastDate = null;
					for (var key in  this.getDatesAvailabilityArr()) {
						if (firstDate == null) {
							firstDate = key + "-" +  this.getDatesAvailabilityArr()[key][0];
						}
						lastDate = key + "-" +  this.getDatesAvailabilityArr()[key][this.getDatesAvailabilityArr()[key].length-1];
					}
					this.setMinDate(moment(firstDate));
					this.setMaxDate(moment(lastDate));
		        }
		        
		        /**
		         * sets the disabled date in the calendar
		         */
		    	this.disabledDates = function(data) {
		    		var _self = this;
					var date = moment(data.date);
				    var res = false;
				    if (this.datepicker.step.months != 1) {
				    	return false;
				    }
				    
				    if (this.datepicker.step.months == 1 && this.datepicker.activeDate.getMonth() != data.date.getMonth()) {
				    	return true;
				    } else if (date.diff(new Date) < 0) {
				    	return true;
				    }
				    
				    var availabilityArr = GlobalDefsNew.getGlobal("datesAvailabilityArr");
				    for (var key in availabilityArr) {
						for (var i=0;i<availabilityArr[key].length;i++) {
							//var curDate = moment(key + "-" +availabilityArr[key][i]);
							var curDate = availabilityArr[key][i];
							if (curDate.isSame(date)) {
								return false;
							}
						 }
					}
				    return true;
				}

		    	this.getDayClass = function(data) {
		    		//console.time(data.date.getDate());
		    		var _self = this;
		    		var date = data.date;
				    var res = false;
				    var forceClass = "";
				    
				    if (this.datepicker.step.months == 1 && this.datepicker.activeDate.getMonth() != date.getMonth()) {
				    	console.timeEnd(data.date.getDate());
				    	//console.log("1:");
				    	return 'text-hidden'
				    }

				    var momentDate = moment(data.date);
				    var selectedDay = GlobalDefsNew.getGlobal("selectedDate");
				    var isSameSelected = momentDate.isSame(selectedDay);
				    if (momentDate.isSame(this.datepicker.activeDate) && !isSameSelected) {
				    	forceClass = "visit-datepicker-force-bg "
				    }
				    
				    if (isSameSelected) {
				    	//console.log("2:");
				    	//console.timeEnd(data.date.getDate());
				    	return "visit-product-datepicker-selected"
				    }
				    
				    if (momentDate.diff(new Date) < 0) {
				    	//console.log("4.1:");
				    	//console.timeEnd(data.date.getDate());
				    	return forceClass + 'unavail-day visit-datepicker-border';
				    }
				    
				    var availabilityArr = GlobalDefsNew.getGlobal("datesAvailabilityArr");
				    for (var key in availabilityArr) {
						for (var i=0;i<availabilityArr[key].length;i++) {
							//var curDate = moment(key + "-" +availabilityArr[key][i]);
							var curDate = availabilityArr[key][i];
							if (curDate.isSame(date)) {
								//console.log("3:");
								//console.timeEnd(data.date.getDate());
								return forceClass + 'avail-day visit-datepicker-border';
							}
						 }
					}
				    //console.log("4:");
				    //console.timeEnd(data.date.getDate());
	    			return forceClass + 'unavail-day visit-datepicker-border';
		    	}
		    	
		    	this.openDate = function(from) {
			    	if (from == "top") {
			    		this.datePopupTop.opened = true;
			    	} else if (from == "overview_top") {
			    		this.datePopupCa.opened = true;
			    	} else if (from == "overview bottom") {
			    		this.datePopupCb.opened = true;
			    	} else if (from == "bottom more info") {
			    		this.datePopupMoreInfo.opened = true;
			    	} else if (from == "top more info") {
			    		this.datePopupMoreInfoTop.opened = true;
			    	} else if (from == "options") {
			    		this.datePopupActivityOptions.opened = true;
			    	} else if (from == "review top") {
			    		this.datePopupReviewsTop.opened = true;
			    	} else {
			    		this.datePopupBottom.opened = true;
			    	}
			    	
				};
				
				this.isOpen = function(from) {
					if (from == "top") {
			    		return this.datePopupTop.opened
			    	} else if (from == "overview_top") {
			    		return this.datePopupCa.opened;
			    	} else if (from == "overview bottom") {
			    		return this.datePopupCb.opened;
			    	} else {
			    		return this.datePopupBottom.opened;
			    	}
				}
	    		
		   }]);
	    	
	    	app.service('visitBackDropService', ['$interval',function($interval) {
	    		
	    		this.intervalVar = null;
	    		this.intervalDelay = null;
	    		this.DEFAULT_INTERVAL_DELAY = 500;
	    		this.backdropMessage = "";
	    		this.DEFAULT_BACKDROP_MESSAGE = "Loading";
	    		this.attachedTo = "body";
	    		this.isSpin = false;
	    		
	    		this.init = function(backdropMessage,isSpin,attachTo,intervalDelay) {
	    			if (attachTo != null) {
	    				this.setAttachedTo(attachTo);
	    			} else {
	    				this.setAttachedTo("body");
	    			}
	    			if ($("#visit-backdrop" + this.getAttachedTo()).length == 0) {
	    				this.createBackFropHtml();
	    			}
	    			
	    			//if (isSpin) {
	    			//	this.setIsSpin(isSpin);
	    			//}
	    			
	    			this.setIntervalDelay(intervalDelay != null ? intervalDelay : this.DEFAULT_INTERVAL_DELAY);
	    			this.setBackdropMessage(backdropMessage != null ? backdropMessage : this.DEFAULT_BACKDROP_MESSAGE);
	    		}
	    		
	    		this.getIntervalVar = function() {
	    			return this.intervalVar;
	    		}
	    		
	    		this.setIntervalVar = function(intervalVar) {
	    			this.intervalVar = intervalVar;
	    		}
	    		
	    		this.getIntervalDelay = function() {
	    			return this.intervalDelay;
	    		}
	    		
	    		this.setIntervalDelay = function(intervalDelay) {
	    			this.intervalDelay = intervalDelay;
	    		}
	    		
	    		this.getIntervalDelay = function() {
	    			return this.intervalDelay;
	    		}
	    		
	    		this.setAttachedTo = function(attachedTo) {
	    			this.attachedTo = attachedTo;
	    		}
	    		
	    		this.getAttachedTo = function() {
	    			return this.attachedTo;
	    		}
	    		
	    		this.setIsSpin = function(isSpin) {
	    			this.isSpin = isSpin;
	    		}
	    		
	    		this.getIsSpin = function() {
	    			return this.isSpin;
	    		}
	    		
	    		this.setBackdropMessage = function(backdropMessage) {
	    			this.backdropMessage = backdropMessage;
	    			$("#visit-backdrop-msg-txt"+ this.getAttachedTo()).html(backdropMessage);
	    		}
	    		
	    		/**
	    		 * Start the backdrop
	    		 */
	    		this.runBackdrop = function(bdMsg) {
	    			if (bdMsg != null) {
	    				this.setBackdropMessage(bdMsg);
	    			}
	    			$("#visit-backdrop"+ this.getAttachedTo()).addClass("modal-backdrop product-backdrop fade in");
	    			$("#visit-backdrop-msg"+ this.getAttachedTo()).css("visibility","visible");
	    			$("#visit-backdrop-msg-txt"+ this.getAttachedTo()).css("visibility","visible");
	    			if (this.getIsSpin()) {
	    				$("#backdropSpinner"+ this.getAttachedTo()).css("display","");
	    				$("#visit-backdrop-msg"+ this.getAttachedTo()).addClass("visit-backdrop-msg-relative");
	    			} else {
	    				$("#backdropDots"+ this.getAttachedTo()).css("visibility","visible");
	    			}
	    			
	    			this.runDots();
	    		}
	    		
	    		/**
	    		 * Clear the backdrop and reset everything
	    		 */
	    		this.clearBackdrop = function() {
	    			var _self = this;
	    			
	    			$('[id^="visit-backdrop"]').each(function( index ) {
	    				if ($(this).attr("id").indexOf("-msg") >= 0) {
	    					$(this).css("visibility","hidden");
	    				} else {
	    					$(this).removeClass("modal-backdrop product-backdrop fade in");
	    				}
	    			});
	    			
	    			$('[id^="backdropSpinner"]').each(function( index ) {
    					$(this).css("display","none");
	    			});
	    			
	    			$('[id^="backdropDots"]').each(function( index ) {
    					$(this).css("visibility","hidden");
	    			});
	    			
	    			$('[id^="loading-dot-"]').each(function( index ) {
    					$(this).removeClass("progress-dot-full");
	    			});
	    			
	    			_self.cancelInterval();
	    			
	    			/*$("#visit-backdrop"+ _self.getAttachedTo()).removeClass("modal-backdrop product-backdrop fade in");
	    			$("#visit-backdrop-msg"+ _self.getAttachedTo()).css("visibility","hidden");
	    			if (this.getIsSpin()) {
	    				$("#backdropSpinner"+ _self.getAttachedTo()).css("visibility","hidden");
	    				
	    			} else {
	    				$("#backdropDots"+ _self.getAttachedTo()).css("visibility","hidden");
	    			}*/
	    			
	    			/*for (var i=0;i<=4;i++) {
	    				$("#loading-dot-" + i + "-" + _self.getAttachedTo()).removeClass("progress-dot-full");
	    			}*/
	    		}
	    		
	    		/**
	    		 * Fill in the progress dots
	    		 */
	    		this.runDots = function() {
	    			var _self = this;
	    			_self.cancelInterval();
	    			var curDotIndex = 0;
	    			var stop = $interval(function() {
	    				if (curDotIndex > 4) {
	    					curDotIndex = -1;
	    					for (var i=0;i<=4;i++) {
	    						$("#loading-dot-" + i + "-" + _self.getAttachedTo()).removeClass("progress-dot-full");
	    					}
	    				}
	    				$("#loading-dot-" + curDotIndex + "-" + _self.getAttachedTo()).addClass("progress-dot-full");
	    				curDotIndex++;
	    				
	    	         }, this.getIntervalDelay());
	    			this.setIntervalVar(stop);
	    		}
	    		
	    		this.cancelInterval = function() {
	    			if (this.getIntervalVar() != null) {
	    				$interval.cancel(this.getIntervalVar());
		    			this.setIntervalVar(null);
	    			}
	    		}
	    		
	    		this.createBackFropHtml = function() {
	    			var attachElem = this.getAttachedTo() != "body" ? "#" + this.getAttachedTo() : this.getAttachedTo();
	    			var additionalStyle = this.getAttachedTo() != "body" ? "position:absolute" : "";
	    			$(attachElem).append('<div id="visit-backdrop'+this.getAttachedTo()+'" style="z-index: 1050;opacity:0.9;'+additionalStyle+'"></div>' +
	    					'<div id="visit-backdrop-msg'+this.getAttachedTo()+'" class="visit-backdrop-msg">' +
			    				'<div class="visit-backrop-title" style="font-size: 40px" id="visit-backdrop-msg-txt'+this.getAttachedTo()+'"></div>' +
			    				'<div id="backdropSpinner'+this.getAttachedTo()+'" style="width: 220px;display:none;padding-top:20px" class="center">' +
			    					'<i style="font-size: 40px;color:grey" class="fas fa-spinner fa-spin fa-lg"></i>' +
			    				'</div>' +
			    				'<div id="backdropDots'+this.getAttachedTo()+'" style="width: 220px;visibility:hidden" class="center">' +
			    					'<div class="lds-css ng-scope"><div style="width:100%;height:100%;margin: 0 auto;" class="lds-ellipsis"><div><div></div></div><div><div></div></div><div><div></div></div><div><div></div></div><div><div></div></div></div></div>' +
			    					//'<span class="progress-dot" id="loading-dot-0-'+this.getAttachedTo()+'"></span>' +
			    					//'<span class="progress-dot" id="loading-dot-1-'+this.getAttachedTo()+'" style="margin-left: 30px"></span>' +
			    					//'<span class="progress-dot" id="loading-dot-2-'+this.getAttachedTo()+'" style="margin-left: 30px"></span>' +
			    					//'<span class="progress-dot" id="loading-dot-3-'+this.getAttachedTo()+'" style="margin-left: 30px"></span>' +
			    					//'<span class="progress-dot" id="loading-dot-4-'+this.getAttachedTo()+'" style="margin-left: 30px"></span>' +
			    				'</div>' +
			    			'</div>');
	    		}
	    		
	    	}]);
	    	
	    	app.service('exprService', function($q, $timeout) {
	    		this.firedEvent = false;
	        	this.getExprPromise = function() {
	        		var _self = this;
	        		var dfrd = $q.defer();
	        		if (!_self.firedEvent) {
	        			_self.fireExperimentEvent("optimize load",null);
	        		}
	        		try {
	        			globalExprDfdDesktop.done(function(state) {
	        				if (!_self.firedEvent) {
	        					_self.fireExperimentEvent("optimize load " + state,null);
	        					_self.firedEvent = true;
	        				}
	        				dfrd.resolve();
		        		});
	        		} catch(err) {
	        			if (!_self.firedEvent) {
	        				_self.fireExperimentEvent("optimize load error",null);
	        				_self.firedEvent = true;
	        			}
	        			dfrd.resolve("timeout");
	        			globalExprDfdDesktop.resolve("error");
	        			
	        		}
	        		
	        		$timeout(function() {
	        			if (globalExprDfdDesktop.state() == "pending") {
	        				globalExprDfdDesktop.resolve("timeout");
	        			}
	        			
	    			}, 1000);
		    			
	        		return dfrd.promise;
	        	}
	        	
	        	this.isInExperiment = function(name,prcnt) {
	        		prcnt = globExprWeb[name] != null ? globExprWeb[name] : prcnt;
	        		var returningCookie = readCookie(name);
	        		if (globExprWeb[name] && globExprWeb[name] == "on") {
	        			return true;
	        		} else if (globExprWeb[name] && globExprWeb[name] == "off") {
	        			return false;
	        		}
	        		if (returningCookie != null) {
	        			createCookie(name,returningCookie,750);
	        			return returningCookie == "true";
	        		} else {
		        		var rand = Math.floor(Math.random() * 100) + 1;
		        		createCookie(name,rand<=prcnt,750);
		        		return rand<=prcnt;
	        		}
	        		
	        	}
	        	
	        	this.fireExperimentEvent = function(action,label) {
	        		fireEvent("Experiments",action,label);
	        	}

	      	});
	    	
	    	app.directive('imageonload', function() {
	    	    return {
	    	        restrict: 'A',
	    	      
	    	        link: function(scope, element) {
	    	          element.on('load', function() {
	    	        	  element.next().css("visibility","visible");
	    	              element.css('opacity',"0.1");
	    	        	  setTimeout(function() {
	    	        		  element.next().css("visibility","hidden");
		    	              element.css('opacity',"1");		
		            		}, 500);
	    	          });
	    	        }
	    	    };
	    	});
	    	
	    	app.directive('compile', ['$compile','$filter', function ($compile,$filter) {
	    		  return function(scope, element, attrs) {
	    		    scope.$watch(
	    		      function(scope) {
	    		    	if (attrs.compileTranslate) {
	    		    		attrs.compile = $filter("translateFilter")(attrs.compile,attrs.compileTranslate.split("::")[0],attrs.compileTranslate.split("::")[1],attrs.compileTranslate.split("::")[2],attrs.compileTranslate.split("::")[3]);
	    		    	}
	    		        return scope.$eval(attrs.compile);
	    		      },
	    		      function(value) {
	    		        element.html(value);
	    		        $compile(element.contents())(scope);
	    		      }
	    		   )};
	    	}]);
	    	
	    	 app.directive('visitHref', ['$rootScope',function($rootScope) {
		            return {
		            	restrict: 'AEC',
		                link: function(scope, element, attrs) {
		                    element.on("click", function() {
		                    	if (attrs.visitHrefLink == null || attrs.visitHrefLink.length ==0) {
		                    		return false;
		                    	}
		                    	if (attrs.sameWindow) {
		            				setTimeout(function() {
		            					window.location.href = attrs.visitHrefLink;        			
		                    		}, 500);
		            			} else {
		            				window.open(attrs.visitHrefLink, '_blank');
		            			}
		                    });
		                }
		            }
		        }]);
	    	 
	    	
	    	 //Make a nice name for a url
	    	app.filter('websiteNameFilter', ['$filter', function($filter){
	    		return function(url) {
	    			if (url == null || url.length == 0) {
	    				return url;
	    			}
	    			url = url.replace("https://","").replace("http://","");
	    			var comLocation = url.indexOf("/");
	    	   		if (comLocation > 0) {
	    	   			url = url.substring(0,comLocation);
	    	   		}
	    	   		
	    	   		return url;
	    		}
	    	   }]);
	    	
});


define('ngApp/website/directives/chatBot/chatBotController',["app/core/login","ngApp/website/main/main"],
    function(LoginMgr,main) {
	var app = angular.module('visitacity');
	
	app.controller('chatBotController',['$scope','$rootScope','$http','$q','$filter','$routeParams','$timeout','GlobalDefs','$location',
	                                       function($scope,$rootScope,$http,$q,$filter,$routeParams,$timeout,GlobalDefs,$location) {
		
		$scope.imagesCdn = GlobalDefs.getImagesCdn();
		$scope.closeLeft = false;
		$scope.closeBottom = false;
		var chatBotInputObj = $('#chatBot-input');
		var chatBotTxtObj = $('#chatBot-txt');
		var spinnerObj = $('#chatBot-spinner');
		var userId = null;
		
		require(["app/core/login"], function(LoginMgr) {
			userId = LoginMgr.getInstance().getLoggedInUserId();
		});
		
		spinnerObj.show();
		$timeout(function() {
			//initial response
			setResponse("Hi, how can I help?","bot-reply-visit");
			spinnerObj.hide();
		}, 800);
		
		var ipadScroll = 300;
		if ($( window ).height() < 700) {
			$("#chatBotMain").css("height","250px");
			chatBotTxtObj.css("height","180px");
			ipadScroll = 380
		}
		
		//handle position on iPad 
		if (isTablet()) {
			chatBotInputObj.focus(function() {
				$("#chatBotMain").css("position","absolute");
				$('html, body').animate({
			        scrollTop: ipadScroll
			    }, 500);
		    })
		   chatBotInputObj.blur(function() {
		    	$("#chatBotMain").css("position","fixed");
		    			    	
		    });
		}
		
		
		chatBotInputObj.on('keyup keypress', function(e) {
			var keyCode = e.keyCode || e.which;
			var text = chatBotInputObj.val();
			chatBotInputObj.attr("placeholder", ""); //remove the placeholder
			if (keyCode === 13) {
				//watch for enter
				if(text == "" ||  $.trim(text) == '') {
					e.preventDefault();
					return false;
				} else {
					$scope.chatBotEnter();
					e.preventDefault();
					return false;
				}
			}
		});
		
		$scope.chatBotEnter = function() {
			var text = chatBotInputObj.val();
			if(text == "" ||  $.trim(text) == '') {
				return false;
			}
			setResponse(text,"bot-reply-user");
			spinnerObj.show();
			sendQuestion(text).then(
		   		function(results) {
		   			spinnerObj.hide();	
		   			setResponse(results,"bot-reply-visit");		
		   		}
		   	);
		}
		
		function sendQuestion(txt) {
			var deffered = new $.Deferred();
			$http({
		        method: 'get',
		        url: "https://bot.visitacity.com/",
		        params: {
		        	question: txt,
		        	id: userId
		        }
		    }).then(function (response) {
		    	deffered.resolve(response.data);
		    	//console.log(response);
		    }, function(errors) {
	   			 //console.log(errors);
	   			deffered.resolve("I'm sorry but I am not sure I can help you. Why don't you try emailing your question to team@visitacity.com?");
  			 });
			
			return deffered;
		}
		
		function setResponse(text,className) {
			var UserResponse = '<div class="clearfix bot-reply '+className+'">'+text+'</div>';
			$(UserResponse).appendTo(chatBotTxtObj);
			chatBotInputObj.val('');
			chatBotTxtObj.scrollTop(chatBotTxtObj[0].scrollHeight);
		}
		
		$scope.hideChat = function() {
			$("#chatBotMain").hide();
		}
		
		$(window).on("resize.doResize", function (){
			setWindowLocation();
		});
		
		function setWindowLocation() {
			$timeout(function() {
				var divHelp = $("#divHelp");
				var cbm = $("#chatBotMain");
				/*if (divHelp.css("left") != "auto" && divHelp.css("left") != "0px") {
					cbm.css("left","-270px");
					$scope.closeLeft = false;
				} else {
					cbm.css("left","100px");
					$scope.closeLeft = true;
				}*/
				if (cbm.css("position") == "fixed") {
					$scope.closeBottom = true;
				} else {
					$scope.closeBottom = false;
				}
			}, 50)
		}
		
		var visibilityWatch = $scope.$watch(function() { return angular.element("#chatBotMain").is(':visible') }, function() {
			setWindowLocation();
		});
		
		 $scope.$on('$destroy', function(){
			 visibilityWatch();
		 });
		
	}]);
	
});	
define('ngApp/website/directives/chatBot/chatBotIconController',["app/core/login","ngApp/website/main/main"],
    function(LoginMgr,main) {
	var app = angular.module('visitacity');
	
	app.controller('chatBotIconController',['$scope','$rootScope','$http','$q','$filter','$routeParams','$timeout','GlobalDefs','$compile',
	                                       function($scope,$rootScope,$http,$q,$filter,$routeParams,$timeout,GlobalDefs,$compile) {
		
		$("#topcontrol").css("display","none");//hide scroll control
		var chatOpenTo = null;
		var chatIconLoadDelay = 10000;//time in milis
		handleChatTimer();
		
		$scope.$on('openChat', function (event, args) {
			var cbClass = "chat-bot-main-side";
			var argsObj = angular.fromJson(args);
			//if (argsObj != null && argsObj.from != null && argsObj.from =="bottom") {
			cbClass = "chat-bot-main-bottom";
			//}
			if ($("#chatBotMain")[0] == null) {
				newElement = $compile("<div id='chatBotMain' class='city-thumbnail chat-bot-window chat-bot-main "+cbClass+"'></div>")($scope)
				$("body").append(newElement)
			} else {
				$("#chatBotMain").removeClass("chat-bot-main-side");
				$("#chatBotMain").removeClass("chat-bot-main-bottom");
				$("#chatBotMain").addClass(cbClass);
			}
			
			$timeout(function() {
				$("#chatBotMain").show();
			}, 200)
			
			$rootScope.$broadcast("itineraryFireEvent","chat dialog open",args,true);
	   });
		
		$scope.$on('hideChat', function (event, args) {
			$( "#chatBotBottom" ).animate({
				width: "31px"
			}, 1000);
			$rootScope.$broadcast("itineraryFireEvent","minimize chat window",args,true);
		});
		
		$scope.showBottomChat = function() {
			  chatOpenTo = $timeout(function(){
		        	 $( "#chatBotBottom" ).animate({
		 				width: "125px"
		 			}, 1000);
		         }, 500);
		}
		
		$scope.cancelShowBottomChat = function() {
			$timeout.cancel(chatOpenTo);
		}
		
		//on start, open the chat icon text
		function handleChatTimer() {
			var chatSizeTimer = window.setInterval(function() {
				clearInterval(chatSizeTimer);
				$( "#chatBotBottom" ).animate({
				    width: "125px"
				  },1000);
        	}, chatIconLoadDelay);
		}
		
		$scope.$on('$destroy', function(){
			 $("#chatBotMain").remove();
		 });
		
	}]);
	
});	
require.config({
	baseUrl: appDyn + '/scripts/lib',
	paths: {
	    'app': '../app',
	    'common': '../common',
	    'ngApp' : '../../ngApp',
	    'unify' : '../unify',
	    'lib': './lib',
	    'ua-parser-js' : 'ua-parser.min'
	},
	waitSeconds: 15
});	
var ieInt = parseInt(ieVersion);
var requireAngularBootstrap = ieInt < 9 ? 'ui-bootstrap-tpls-0.12.0' : 'ui-bootstrap-tpls-2.1.0.min';
//var requireAngularBootstrap = ieInt < 9 ? 'ui-bootstrap-tpls-0.12.0' : 'ui-bootstrap-tpls-0.14.3.min';

require([
	     	'ngApp/website/main/main',
	        'ngApp/website/home/homeContoller',
	        'ngApp/website/cityHome/cityController',
	        'ngApp/website/destinations/destinationsController',
	        'ngApp/website/map/mapController',
	        'ngApp/website/shared/cityActionLinksController',
	        'ngApp/website/shared/cityHeaderController',
	        'ngApp/website/shared/footerController',
	        'ngApp/website/shared/headerController',
	        'ngApp/website/shared/myPlansController',
	        'ngApp/website/shared/general_pages/generalPagesController',
	        'ngApp/website/shared/modals/wrongInfoController',
	        'ngApp/website/shared/modals/downloadModalController',
	        'ngApp/website/itinerary-by-day/itinByDayController',
	        'ngApp/website/my-plans-page/myPlansPageController',
	        'ngApp/website/directives/activities/paidActivitiesController',
	        'ngApp/website/login/loginController',
	        'ngApp/website/activities/activitiesController',
	        'ngApp/website/activity/activityController',
	        'ngApp/website/activity/activityOptionsController',
	        'ngApp/website/activity/activityOrderBillingDetailsController',
	        'ngApp/website/activity/activityOrderSummaryController',
	        'ngApp/website/activity/activityDateSelectorController',
	        'ngApp/website/attractions/attractionsController',
	        'ngApp/website/attractions/singleAttractionController',
	        'ngApp/website/attractions/travelersPlansController',
	        'ngApp/website/attraction/attractionController',
	        //'ngApp/website/itinerary/itineraryController',
	        'ngApp/website/itinerary-ng/itineraryActionsController',
	        'ngApp/website/itinerary-ng/itineraryControllerNg',
	        'ngApp/website/itinerary-ng/itineraryMapDrawerControllerNg',
	        'ngApp/website/itinerary/itineraryDetailsController',
	        'ngApp/website/itinerary/itineraryAdsController',
	        'ngApp/website/itinerary/tripOverviewController',
	        //'ngApp/website/itinerary/itineraryMapDrawerController',
	        'ngApp/website/itinerary/itineraryTicktesController',
	        'ngApp/website/itinerary-share/itineraryShareController',
	        'ngApp/website/itinerary-share/itineraryShareCenterController',
	        'ngApp/website/itinerary-regional/regionalController',
	        'ngApp/website/itinerary-regional/directives/add-destinations/addDestinationsController',
	        'ngApp/website/guides/guidesController',
	        'ngApp/website/guide/guideController',
	        requireAngularBootstrap,
	        'common/common',
	        'ngApp/website/services/activitiesService',
	        'ngApp/website/services/attractionsService',
	        'ngApp/website/services/itineraryService',
	        'ngApp/website/services/restaurantsService',
	        'ngApp/website/services/sharedItineraryService',
	        'ngApp/website/services/viatorService',
	        'ngApp/website/services/activityOrderService',
	        'ngApp/website/services/itineraryRegionalService',
	        'ngApp/website/services/attrMapService',
	        'ngApp/website/services/sharedServices',
	        'ngApp/website/directives/chatBot/chatBotController',
	        'ngApp/website/directives/chatBot/chatBotIconController'
	    ],
	    function () {
		var requireAr = useBundle ? ["ngApp/website/main/templates"] : [];
	
			require(requireAr,
					function(TouchPunch) {
				 		angular.bootstrap(document, ['visitacity']);
				 		//resetForWhitePage("vacReloadCounterRequire");
			});
	       
	    }, function (err) {
	    	var errTxt = "";
	    	if (err.message) {
	    		errTxt += "Message: " + err.message + "\n";
	    	}
	    	if (err.requireModules.length > 0) {
	    		errTxt += "Modules: ";
	    		for (var i=0;i<err.requireModules.length;i++) {
	    			errTxt += err.requireModules + ","	    		}
	    	}
	    	document.getElementById("websiteLoadError").style.display = "block";
	    	try {
	    		var category = "whitePageError";
	    		var action = "Error";
	    		var stack = null
	    		var msg = err.message;
	    		try {
	    			stack = err.stack.substring(0, 500);
	    		} catch (stackErr) {}
	    		var label = stack != null ? stack : msg;
	    		ga('send', 'event', category, action, label , null, {'nonInteraction': 1});
	    		console.error(stack);
	    	} catch (err) {}
	    	
	    	//reloadForWhitePage("vacReloadCounterRequire", errTxt);
	    });
    
    

define("../main", function(){});

